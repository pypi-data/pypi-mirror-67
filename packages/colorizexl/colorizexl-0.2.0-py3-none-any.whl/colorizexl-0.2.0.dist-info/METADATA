Metadata-Version: 2.1
Name: colorizexl
Version: 0.2.0
Summary: Colorize and recolorize large images
Home-page: https://github.com/nfreundlich/colorizexl
Author: M. Linfoot, N. Freundlich
Author-email: linfoot2@illinois.edu, norbert4@illinois.edu
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: absl-py (==0.9.0)
Requires-Dist: appdirs (==1.4.3)
Requires-Dist: appnope (==0.1.0)
Requires-Dist: astor (==0.8.1)
Requires-Dist: attrs (==19.3.0)
Requires-Dist: backcall (==0.1.0)
Requires-Dist: black (==19.10b0)
Requires-Dist: bleach (==3.1.4)
Requires-Dist: cachetools (==4.1.0)
Requires-Dist: certifi (==2020.4.5.1)
Requires-Dist: chardet (==3.0.4)
Requires-Dist: click (==7.1.1)
Requires-Dist: cycler (==0.10.0)
Requires-Dist: decorator (==4.4.2)
Requires-Dist: defusedxml (==0.6.0)
Requires-Dist: entrypoints (==0.3)
Requires-Dist: gast (==0.2.2)
Requires-Dist: google-auth (==1.13.1)
Requires-Dist: google-auth-oauthlib (==0.4.1)
Requires-Dist: google-pasta (==0.2.0)
Requires-Dist: grpcio (==1.28.1)
Requires-Dist: h5py (==2.10.0)
Requires-Dist: idna (==2.9)
Requires-Dist: imageio (==2.8.0)
Requires-Dist: importlib-metadata (==1.6.0)
Requires-Dist: ipykernel (==5.2.0)
Requires-Dist: ipython (==7.13.0)
Requires-Dist: ipython-genutils (==0.2.0)
Requires-Dist: ipywidgets (==7.5.1)
Requires-Dist: jedi (==0.16.0)
Requires-Dist: Jinja2 (==2.11.1)
Requires-Dist: joblib (==0.14.1)
Requires-Dist: jsonschema (==3.2.0)
Requires-Dist: jupyter (==1.0.0)
Requires-Dist: jupyter-client (==6.1.2)
Requires-Dist: jupyter-console (==6.1.0)
Requires-Dist: jupyter-core (==4.6.3)
Requires-Dist: jupyter-http-over-ws (==0.0.8)
Requires-Dist: Keras-Applications (==1.0.8)
Requires-Dist: Keras-Preprocessing (==1.1.0)
Requires-Dist: kiwisolver (==1.2.0)
Requires-Dist: Markdown (==3.2.1)
Requires-Dist: MarkupSafe (==1.1.1)
Requires-Dist: matplotlib (==3.2.1)
Requires-Dist: mistune (==0.8.4)
Requires-Dist: nbconvert (==5.6.1)
Requires-Dist: nbformat (==5.0.5)
Requires-Dist: networkx (==2.4)
Requires-Dist: notebook (==6.0.3)
Requires-Dist: numpy (==1.18.2)
Requires-Dist: oauthlib (==3.1.0)
Requires-Dist: opencv-python (==4.2.0.34)
Requires-Dist: opt-einsum (==3.2.0)
Requires-Dist: pandas (==1.0.3)
Requires-Dist: pandocfilters (==1.4.2)
Requires-Dist: parso (==0.6.2)
Requires-Dist: pathspec (==0.8.0)
Requires-Dist: pexpect (==4.8.0)
Requires-Dist: pickleshare (==0.7.5)
Requires-Dist: Pillow (==7.1.1)
Requires-Dist: prometheus-client (==0.7.1)
Requires-Dist: prompt-toolkit (==3.0.5)
Requires-Dist: protobuf (==3.11.3)
Requires-Dist: ptyprocess (==0.6.0)
Requires-Dist: pyasn1 (==0.4.8)
Requires-Dist: pyasn1-modules (==0.2.8)
Requires-Dist: Pygments (==2.6.1)
Requires-Dist: pyparsing (==2.4.7)
Requires-Dist: pyrsistent (==0.16.0)
Requires-Dist: python-dateutil (==2.8.1)
Requires-Dist: pytz (==2019.3)
Requires-Dist: PyWavelets (==1.1.1)
Requires-Dist: pyzmq (==19.0.0)
Requires-Dist: qtconsole (==4.7.2)
Requires-Dist: QtPy (==1.9.0)
Requires-Dist: regex (==2020.4.4)
Requires-Dist: requests (==2.23.0)
Requires-Dist: requests-oauthlib (==1.3.0)
Requires-Dist: rsa (==4.0)
Requires-Dist: scikit-image (==0.16.2)
Requires-Dist: scikit-learn (==0.22.2.post1)
Requires-Dist: scipy (==1.4.1)
Requires-Dist: Send2Trash (==1.5.0)
Requires-Dist: six (==1.14.0)
Requires-Dist: tensorboard (==2.1.1)
Requires-Dist: tensorflow (==2.1.0)
Requires-Dist: tensorflow-estimator (==2.1.0)
Requires-Dist: termcolor (==1.1.0)
Requires-Dist: terminado (==0.8.3)
Requires-Dist: testpath (==0.4.4)
Requires-Dist: toml (==0.10.0)
Requires-Dist: torch (==1.4.0)
Requires-Dist: torchvision (==0.5.0)
Requires-Dist: tornado (==6.0.4)
Requires-Dist: traitlets (==4.3.3)
Requires-Dist: typed-ast (==1.4.1)
Requires-Dist: urllib3 (==1.25.8)
Requires-Dist: wcwidth (==0.1.9)
Requires-Dist: webencodings (==0.5.1)
Requires-Dist: Werkzeug (==1.0.1)
Requires-Dist: widgetsnbextension (==3.5.1)
Requires-Dist: wrapt (==1.12.1)
Requires-Dist: zipp (==3.1.0)

# ColorizeXL
Python implementation of the following [paper](https://www.cse.huji.ac.il/~yweiss/Colorization/) by Anat Levin, Dani Lischinski, Yair Weiss, puublished in SIGGRAPH04.

We have adapted their technique to make it suitable for large images, by using overlapping patches with annotations.


## Installation:

`pip install colorizexl`


# Usage

## Colorization of Black & White images
Previous to using the package, you have to setup the following:
* original black & white image
* annotation color image (please check details in the paper)


## Recolorization of color images
Previous to using the package, you have to setup the following:
* original color image
* annotation image (please check details in the paper): white where the color stays the same, different colo where yo want to recolorize

## Command line
Call the `colorizexl.py` from command line, to colorize or recolorize images.

`python colorizexl.py --annotated=<path_to_annotated_image>
                      --grayscale=<path_to_image_to_(re)colorize> 
                      --output=<path_to_(re)colorized_image>
                      --recolorize=True/False`

## Python code
```
from colorizexl import ColorizeXL

colorizer = ColorizeXL(
        input_grayscale_name, input_annotation_name, recolorize=False
    )

output = colorizer.colorize(step_size=patch_size, overlap=overlap, n=neighbour)
```

# Customization

From `Python` you have the options to finetune the following parameters:
* `step_size` (default 100), defines the size of the square patches
* `overlap` (default 2), defines the overlap of the patches
* `n` (default 10), defines the radius of the neighbours in a circle for computing the color 

# Package organization

## colorizexl
Contains the ColorizeXL class, the engine behind the (re)colorization.
Its functioning is as follows:
* *__colorize*: will take an `image` and an `annotation` as inputs and will colorize the image; it will return a colorized image
* *colorize*: main entry point in the algorithm, this method will split the initial image in patches and send them to *__colorize*. It will also take care of the overlaps to ensure smooth transition between colorized regions
* *colorize_no_patch*: wrapper for *__colorize* method, this function is the initial implementation of the algorithm, which is slow and will crash for large images

## notebooks
Contains the notebooks used for experimenting:
* *CS445_usage*: example code for colorizing and recolorizing images (example images from the original paper are provided); output of the example images can be seen [here](https://github.com/nfreundlich/colorizexl/blob/master/notebooks/CS445_usage.ipynb)
* *CS445_master*: our inital experiments with colorization
* *CS445_patch_sort*: experiments with intelligent sorting of patches to be recolorized


## tests
Contains the test code used for fine-tuning and evaluating our package.
* *test_hyperparameters*: loops over the hyperparameters (patch size, overlap and neighbours) to compute the MSE (mean squared error), SSIM (structural similarity) and PSNR (peak signal to noise ratio); from these, we have mainly relied on  MSE; it also saves an image for each combination, to allow manual selection of the most pleasing visual effect
* *test_timing*: downscales a large image by a factor of 0.1 to 1.0 (step 0.1) and measures the time needed for computation (please note that the images resulting from downscaling will not necessarily be of a high quality); execution time of our code scales linearly with the number of pixels to recolorize
* *test_timing_no_patch*: similar to *test_timing* but using a one-shot colorization; this original method presents an exponential increase in time per pixels to be colorized

