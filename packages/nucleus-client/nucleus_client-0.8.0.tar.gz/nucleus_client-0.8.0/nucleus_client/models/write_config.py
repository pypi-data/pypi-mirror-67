# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WriteConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'druid': 'DruidWriteConfig',
        'overrides': 'WriteConfigOverride',
        'write_output': 'bool'
    }

    attribute_map = {
        'druid': 'druid',
        'overrides': 'overrides',
        'write_output': 'write_output'
    }

    def __init__(self, druid=None, overrides=None, write_output=None):  # noqa: E501
        """WriteConfig - a model defined in OpenAPI"""  # noqa: E501

        self._druid = None
        self._overrides = None
        self._write_output = None
        self.discriminator = None

        if druid is not None:
            self.druid = druid
        if overrides is not None:
            self.overrides = overrides
        self.write_output = write_output

    @property
    def druid(self):
        """Gets the druid of this WriteConfig.  # noqa: E501


        :return: The druid of this WriteConfig.  # noqa: E501
        :rtype: DruidWriteConfig
        """
        return self._druid

    @druid.setter
    def druid(self, druid):
        """Sets the druid of this WriteConfig.


        :param druid: The druid of this WriteConfig.  # noqa: E501
        :type: DruidWriteConfig
        """

        self._druid = druid

    @property
    def overrides(self):
        """Gets the overrides of this WriteConfig.  # noqa: E501


        :return: The overrides of this WriteConfig.  # noqa: E501
        :rtype: WriteConfigOverride
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this WriteConfig.


        :param overrides: The overrides of this WriteConfig.  # noqa: E501
        :type: WriteConfigOverride
        """

        self._overrides = overrides

    @property
    def write_output(self):
        """Gets the write_output of this WriteConfig.  # noqa: E501


        :return: The write_output of this WriteConfig.  # noqa: E501
        :rtype: bool
        """
        return self._write_output

    @write_output.setter
    def write_output(self, write_output):
        """Sets the write_output of this WriteConfig.


        :param write_output: The write_output of this WriteConfig.  # noqa: E501
        :type: bool
        """
        if write_output is None:
            raise ValueError("Invalid value for `write_output`, must not be `None`")  # noqa: E501

        self._write_output = write_output

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
