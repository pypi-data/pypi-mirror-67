# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




import os,sys,platform
WIN32=platform.system()=="Windows" or platform.system()=="win32"

# //////////////////////////////////////////////////////
def AddSysPath(value, bBegin=False):

	if not os.path.isdir(value):
		return

	if not value in sys.path:
		if bBegin:
			sys.path.insert(0,value)
		else:
			sys.path.append(value)

# this is needed for windows/python 38  
	if WIN32 and hasattr(os,'add_dll_directory'):
		os.add_dll_directory(value)

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
__bin_dir__=os.path.abspath(os.path.join(__this_dir__,"bin"))

AddSysPath(__this_dir__)
AddSysPath(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusAppKitPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusAppKitPy')
    _VisusAppKitPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusAppKitPy', [dirname(__file__)])
        except ImportError:
            import _VisusAppKitPy
            return _VisusAppKitPy
        try:
            _mod = imp.load_module('_VisusAppKitPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusAppKitPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusAppKitPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusAppKitPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusAppKitPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusAppKitPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusAppKitPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusAppKitPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusAppKitPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusAppKitPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusAppKitPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusAppKitPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusAppKitPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusAppKitPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusAppKitPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusAppKitPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusAppKitPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusAppKitPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusAppKitPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusAppKitPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusAppKitPy.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusNodesPy
import VisusGuiPy
import VisusGuiNodesPy
class AppKitModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppKitModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AppKitModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusAppKitPy.AppKitModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusAppKitPy.AppKitModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusAppKitPy.AppKitModule_bAttached_get, _VisusAppKitPy.AppKitModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusAppKitPy.AppKitModule_attach)
    else:
        attach = _VisusAppKitPy.AppKitModule_attach
    if _newclass:
        detach = staticmethod(_VisusAppKitPy.AppKitModule_detach)
    else:
        detach = _VisusAppKitPy.AppKitModule_detach

    def __init__(self):
        this = _VisusAppKitPy.new_AppKitModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_AppKitModule
    __del__ = lambda self: None
AppKitModule_swigregister = _VisusAppKitPy.AppKitModule_swigregister
AppKitModule_swigregister(AppKitModule)
cvar = _VisusAppKitPy.cvar

def AppKitModule_attach():
    return _VisusAppKitPy.AppKitModule_attach()
AppKitModule_attach = _VisusAppKitPy.AppKitModule_attach

def AppKitModule_detach():
    return _VisusAppKitPy.AppKitModule_detach()
AppKitModule_detach = _VisusAppKitPy.AppKitModule_detach

class ViewerPreferences(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerPreferences, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerPreferences, name)
    __repr__ = _swig_repr
    __swig_setmethods__["default_panels"] = _VisusAppKitPy.ViewerPreferences_default_panels_set
    __swig_getmethods__["default_panels"] = _VisusAppKitPy.ViewerPreferences_default_panels_get
    if _newclass:
        default_panels = _swig_property(_VisusAppKitPy.ViewerPreferences_default_panels_get, _VisusAppKitPy.ViewerPreferences_default_panels_set)
    __swig_setmethods__["default_show_logos"] = _VisusAppKitPy.ViewerPreferences_default_show_logos_set
    __swig_getmethods__["default_show_logos"] = _VisusAppKitPy.ViewerPreferences_default_show_logos_get
    if _newclass:
        default_show_logos = _swig_property(_VisusAppKitPy.ViewerPreferences_default_show_logos_get, _VisusAppKitPy.ViewerPreferences_default_show_logos_set)
    __swig_setmethods__["title"] = _VisusAppKitPy.ViewerPreferences_title_set
    __swig_getmethods__["title"] = _VisusAppKitPy.ViewerPreferences_title_get
    if _newclass:
        title = _swig_property(_VisusAppKitPy.ViewerPreferences_title_get, _VisusAppKitPy.ViewerPreferences_title_set)
    __swig_setmethods__["panels"] = _VisusAppKitPy.ViewerPreferences_panels_set
    __swig_getmethods__["panels"] = _VisusAppKitPy.ViewerPreferences_panels_get
    if _newclass:
        panels = _swig_property(_VisusAppKitPy.ViewerPreferences_panels_get, _VisusAppKitPy.ViewerPreferences_panels_set)
    __swig_setmethods__["bHideTitleBar"] = _VisusAppKitPy.ViewerPreferences_bHideTitleBar_set
    __swig_getmethods__["bHideTitleBar"] = _VisusAppKitPy.ViewerPreferences_bHideTitleBar_get
    if _newclass:
        bHideTitleBar = _swig_property(_VisusAppKitPy.ViewerPreferences_bHideTitleBar_get, _VisusAppKitPy.ViewerPreferences_bHideTitleBar_set)
    __swig_setmethods__["bHideMenus"] = _VisusAppKitPy.ViewerPreferences_bHideMenus_set
    __swig_getmethods__["bHideMenus"] = _VisusAppKitPy.ViewerPreferences_bHideMenus_get
    if _newclass:
        bHideMenus = _swig_property(_VisusAppKitPy.ViewerPreferences_bHideMenus_get, _VisusAppKitPy.ViewerPreferences_bHideMenus_set)
    __swig_setmethods__["bRightHanded"] = _VisusAppKitPy.ViewerPreferences_bRightHanded_set
    __swig_getmethods__["bRightHanded"] = _VisusAppKitPy.ViewerPreferences_bRightHanded_get
    if _newclass:
        bRightHanded = _swig_property(_VisusAppKitPy.ViewerPreferences_bRightHanded_get, _VisusAppKitPy.ViewerPreferences_bRightHanded_set)
    __swig_setmethods__["screen_bounds"] = _VisusAppKitPy.ViewerPreferences_screen_bounds_set
    __swig_getmethods__["screen_bounds"] = _VisusAppKitPy.ViewerPreferences_screen_bounds_get
    if _newclass:
        screen_bounds = _swig_property(_VisusAppKitPy.ViewerPreferences_screen_bounds_get, _VisusAppKitPy.ViewerPreferences_screen_bounds_set)
    __swig_setmethods__["show_logos"] = _VisusAppKitPy.ViewerPreferences_show_logos_set
    __swig_getmethods__["show_logos"] = _VisusAppKitPy.ViewerPreferences_show_logos_get
    if _newclass:
        show_logos = _swig_property(_VisusAppKitPy.ViewerPreferences_show_logos_get, _VisusAppKitPy.ViewerPreferences_show_logos_set)

    def __init__(self):
        this = _VisusAppKitPy.new_ViewerPreferences()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def write(self, ar):
        return _VisusAppKitPy.ViewerPreferences_write(self, ar)

    def read(self, ar):
        return _VisusAppKitPy.ViewerPreferences_read(self, ar)
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerPreferences
    __del__ = lambda self: None
ViewerPreferences_swigregister = _VisusAppKitPy.ViewerPreferences_swigregister
ViewerPreferences_swigregister(ViewerPreferences)

class ViewerAutoRefresh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerAutoRefresh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerAutoRefresh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _VisusAppKitPy.ViewerAutoRefresh_enabled_set
    __swig_getmethods__["enabled"] = _VisusAppKitPy.ViewerAutoRefresh_enabled_get
    if _newclass:
        enabled = _swig_property(_VisusAppKitPy.ViewerAutoRefresh_enabled_get, _VisusAppKitPy.ViewerAutoRefresh_enabled_set)
    __swig_setmethods__["msec"] = _VisusAppKitPy.ViewerAutoRefresh_msec_set
    __swig_getmethods__["msec"] = _VisusAppKitPy.ViewerAutoRefresh_msec_get
    if _newclass:
        msec = _swig_property(_VisusAppKitPy.ViewerAutoRefresh_msec_get, _VisusAppKitPy.ViewerAutoRefresh_msec_set)

    def __init__(self):
        this = _VisusAppKitPy.new_ViewerAutoRefresh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerAutoRefresh
    __del__ = lambda self: None
ViewerAutoRefresh_swigregister = _VisusAppKitPy.ViewerAutoRefresh_swigregister
ViewerAutoRefresh_swigregister(ViewerAutoRefresh)

class ViewerToolBarTab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerToolBarTab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerToolBarTab, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusAppKitPy.ViewerToolBarTab_name_set
    __swig_getmethods__["name"] = _VisusAppKitPy.ViewerToolBarTab_name_get
    if _newclass:
        name = _swig_property(_VisusAppKitPy.ViewerToolBarTab_name_get, _VisusAppKitPy.ViewerToolBarTab_name_set)

    def __init__(self, name_):
        this = _VisusAppKitPy.new_ViewerToolBarTab(name_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerToolBarTab
    __del__ = lambda self: None
    if _newclass:
        createButton = staticmethod(_VisusAppKitPy.ViewerToolBarTab_createButton)
    else:
        createButton = _VisusAppKitPy.ViewerToolBarTab_createButton

    def addAction(self, action):
        return _VisusAppKitPy.ViewerToolBarTab_addAction(self, action)

    def addMenu(self, icon, name, menu):
        return _VisusAppKitPy.ViewerToolBarTab_addMenu(self, icon, name, menu)

    def addBlueMenu(self, icon, name, menu):
        return _VisusAppKitPy.ViewerToolBarTab_addBlueMenu(self, icon, name, menu)
ViewerToolBarTab_swigregister = _VisusAppKitPy.ViewerToolBarTab_swigregister
ViewerToolBarTab_swigregister(ViewerToolBarTab)

def ViewerToolBarTab_createButton(*args):
    return _VisusAppKitPy.ViewerToolBarTab_createButton(*args)
ViewerToolBarTab_createButton = _VisusAppKitPy.ViewerToolBarTab_createButton

class ViewerToolBar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerToolBar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerToolBar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file_menu"] = _VisusAppKitPy.ViewerToolBar_file_menu_set
    __swig_getmethods__["file_menu"] = _VisusAppKitPy.ViewerToolBar_file_menu_get
    if _newclass:
        file_menu = _swig_property(_VisusAppKitPy.ViewerToolBar_file_menu_get, _VisusAppKitPy.ViewerToolBar_file_menu_set)
    __swig_setmethods__["bookmarks_button"] = _VisusAppKitPy.ViewerToolBar_bookmarks_button_set
    __swig_getmethods__["bookmarks_button"] = _VisusAppKitPy.ViewerToolBar_bookmarks_button_get
    if _newclass:
        bookmarks_button = _swig_property(_VisusAppKitPy.ViewerToolBar_bookmarks_button_get, _VisusAppKitPy.ViewerToolBar_bookmarks_button_set)
    __swig_setmethods__["tabs"] = _VisusAppKitPy.ViewerToolBar_tabs_set
    __swig_getmethods__["tabs"] = _VisusAppKitPy.ViewerToolBar_tabs_get
    if _newclass:
        tabs = _swig_property(_VisusAppKitPy.ViewerToolBar_tabs_get, _VisusAppKitPy.ViewerToolBar_tabs_set)

    def __init__(self):
        this = _VisusAppKitPy.new_ViewerToolBar()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addTab(self, tab, name):
        return _VisusAppKitPy.ViewerToolBar_addTab(self, tab, name)
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerToolBar
    __del__ = lambda self: None
ViewerToolBar_swigregister = _VisusAppKitPy.ViewerToolBar_swigregister
ViewerToolBar_swigregister(ViewerToolBar)

class ViewerLogo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerLogo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerLogo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _VisusAppKitPy.ViewerLogo_filename_set
    __swig_getmethods__["filename"] = _VisusAppKitPy.ViewerLogo_filename_get
    if _newclass:
        filename = _swig_property(_VisusAppKitPy.ViewerLogo_filename_get, _VisusAppKitPy.ViewerLogo_filename_set)
    __swig_setmethods__["pos"] = _VisusAppKitPy.ViewerLogo_pos_set
    __swig_getmethods__["pos"] = _VisusAppKitPy.ViewerLogo_pos_get
    if _newclass:
        pos = _swig_property(_VisusAppKitPy.ViewerLogo_pos_get, _VisusAppKitPy.ViewerLogo_pos_set)
    __swig_setmethods__["opacity"] = _VisusAppKitPy.ViewerLogo_opacity_set
    __swig_getmethods__["opacity"] = _VisusAppKitPy.ViewerLogo_opacity_get
    if _newclass:
        opacity = _swig_property(_VisusAppKitPy.ViewerLogo_opacity_get, _VisusAppKitPy.ViewerLogo_opacity_set)
    __swig_setmethods__["border"] = _VisusAppKitPy.ViewerLogo_border_set
    __swig_getmethods__["border"] = _VisusAppKitPy.ViewerLogo_border_get
    if _newclass:
        border = _swig_property(_VisusAppKitPy.ViewerLogo_border_get, _VisusAppKitPy.ViewerLogo_border_set)
    __swig_setmethods__["tex"] = _VisusAppKitPy.ViewerLogo_tex_set
    __swig_getmethods__["tex"] = _VisusAppKitPy.ViewerLogo_tex_get
    if _newclass:
        tex = _swig_property(_VisusAppKitPy.ViewerLogo_tex_get, _VisusAppKitPy.ViewerLogo_tex_set)

    def __init__(self):
        this = _VisusAppKitPy.new_ViewerLogo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_ViewerLogo
    __del__ = lambda self: None
ViewerLogo_swigregister = _VisusAppKitPy.ViewerLogo_swigregister
ViewerLogo_swigregister(ViewerLogo)

class Viewer(VisusDataflowPy.DataflowListener):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.DataflowListener]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.DataflowListener]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Viewer:
            _self = None
        else:
            _self = self
        this = _VisusAppKitPy.new_Viewer(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusAppKitPy.delete_Viewer
    __del__ = lambda self: None

    def getTypeName(self):
        return _VisusAppKitPy.Viewer_getTypeName(self)

    def configureFromCommandLine(self, args):
        return _VisusAppKitPy.Viewer_configureFromCommandLine(self, args)

    def c_ptr(self):
        return _VisusAppKitPy.Viewer_c_ptr(self)

    def printInfo(self, msg):
        return _VisusAppKitPy.Viewer_printInfo(self, msg)

    def showLicences(self):
        return _VisusAppKitPy.Viewer_showLicences(self)

    def getDataflow(self):
        return _VisusAppKitPy.Viewer_getDataflow(self)

    def getGLCanvas(self):
        return _VisusAppKitPy.Viewer_getGLCanvas(self)

    def getGLCamera(self):
        return _VisusAppKitPy.Viewer_getGLCamera(self)

    def getTreeView(self):
        return _VisusAppKitPy.Viewer_getTreeView(self)

    def getFrameView(self):
        return _VisusAppKitPy.Viewer_getFrameView(self)

    def getLog(self):
        return _VisusAppKitPy.Viewer_getLog(self)

    def addDockWidget(self, *args):
        return _VisusAppKitPy.Viewer_addDockWidget(self, *args)

    def showNodeContextMenu(self, node):
        return _VisusAppKitPy.Viewer_showNodeContextMenu(self, node)

    def showPopupWidget(self, widget):
        return _VisusAppKitPy.Viewer_showPopupWidget(self, widget)

    def showTopWidget(self, title, widget):
        return _VisusAppKitPy.Viewer_showTopWidget(self, title, widget)

    def openFile(self, filename, parent=None):
        return _VisusAppKitPy.Viewer_openFile(self, filename, parent)

    def openUrl(self, url, parent=None):
        return _VisusAppKitPy.Viewer_openUrl(self, url, parent)

    def saveFile(self, filename, bSaveHistory=False):
        return _VisusAppKitPy.Viewer_saveFile(self, filename, bSaveHistory)

    def postRedisplay(self):
        return _VisusAppKitPy.Viewer_postRedisplay(self)

    def playFile(self, filename):
        return _VisusAppKitPy.Viewer_playFile(self, filename)

    def takeSnapshot(self, *args):
        return _VisusAppKitPy.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _VisusAppKitPy.Viewer_editNode(self, node)

    def beginFreeTransform(self, *args):
        return _VisusAppKitPy.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _VisusAppKitPy.Viewer_endFreeTransform(self)

    def refreshActions(self):
        return _VisusAppKitPy.Viewer_refreshActions(self)

    def idle(self):
        return _VisusAppKitPy.Viewer_idle(self)

    def modelChanged(self):
        return _VisusAppKitPy.Viewer_modelChanged(self)

    def enableSaveSession(self):
        return _VisusAppKitPy.Viewer_enableSaveSession(self)

    def dataflowBeforeProcessInput(self, node):
        return _VisusAppKitPy.Viewer_dataflowBeforeProcessInput(self, node)

    def dataflowAfterProcessInput(self, node):
        return _VisusAppKitPy.Viewer_dataflowAfterProcessInput(self, node)

    def getRoot(self):
        return _VisusAppKitPy.Viewer_getRoot(self)

    def getUUID(self, node):
        return _VisusAppKitPy.Viewer_getUUID(self, node)

    def getNodes(self):
        return _VisusAppKitPy.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _VisusAppKitPy.Viewer_findNodeByUUID(self, uuid)

    def findPick(self, node, screen_point, bRecursive, distance=None):
        return _VisusAppKitPy.Viewer_findPick(self, node, screen_point, bRecursive, distance)

    def getBounds(self, node, bRecursive=False):
        return _VisusAppKitPy.Viewer_getBounds(self, node, bRecursive)

    def getWorldDimension(self):
        return _VisusAppKitPy.Viewer_getWorldDimension(self)

    def getWorldBox(self):
        return _VisusAppKitPy.Viewer_getWorldBox(self)

    def computeNodeToNode(self, dst, src):
        return _VisusAppKitPy.Viewer_computeNodeToNode(self, dst, src)

    def computeQueryBounds(self, query_node):
        return _VisusAppKitPy.Viewer_computeQueryBounds(self, query_node)

    def computeNodeToScreen(self, frustum, node):
        return _VisusAppKitPy.Viewer_computeNodeToScreen(self, frustum, node)

    def attachGLCamera(self, value):
        return _VisusAppKitPy.Viewer_attachGLCamera(self, value)

    def detachGLCamera(self):
        return _VisusAppKitPy.Viewer_detachGLCamera(self)

    def glGetRenderQueue(self, node):
        return _VisusAppKitPy.Viewer_glGetRenderQueue(self, node)

    def glCameraChangeEvent(self):
        return _VisusAppKitPy.Viewer_glCameraChangeEvent(self)

    def glCanvasResizeEvent(self, evt):
        return _VisusAppKitPy.Viewer_glCanvasResizeEvent(self, evt)

    def glCanvasMousePressEvent(self, evt):
        return _VisusAppKitPy.Viewer_glCanvasMousePressEvent(self, evt)

    def glCanvasMouseMoveEvent(self, evt):
        return _VisusAppKitPy.Viewer_glCanvasMouseMoveEvent(self, evt)

    def glCanvasMouseReleaseEvent(self, evt):
        return _VisusAppKitPy.Viewer_glCanvasMouseReleaseEvent(self, evt)

    def glCanvasWheelEvent(self, evt):
        return _VisusAppKitPy.Viewer_glCanvasWheelEvent(self, evt)

    def keyPressEvent(self, evt):
        return _VisusAppKitPy.Viewer_keyPressEvent(self, evt)

    def glRender(self, gl):
        return _VisusAppKitPy.Viewer_glRender(self, gl)

    def glRenderNodes(self, gl):
        return _VisusAppKitPy.Viewer_glRenderNodes(self, gl)

    def glRenderSelection(self, gl):
        return _VisusAppKitPy.Viewer_glRenderSelection(self, gl)

    def glRenderGestures(self, gl):
        return _VisusAppKitPy.Viewer_glRenderGestures(self, gl)

    def glRenderLogos(self, gl):
        return _VisusAppKitPy.Viewer_glRenderLogos(self, gl)

    def clearAll(self):
        return _VisusAppKitPy.Viewer_clearAll(self)

    def dropProcessing(self):
        return _VisusAppKitPy.Viewer_dropProcessing(self)

    def getAutoRefresh(self):
        return _VisusAppKitPy.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _VisusAppKitPy.Viewer_setAutoRefresh(self, value)

    def getSelection(self):
        return _VisusAppKitPy.Viewer_getSelection(self)

    def setSelection(self, node):
        return _VisusAppKitPy.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _VisusAppKitPy.Viewer_dropSelection(self)

    def setMinimal(self):
        return _VisusAppKitPy.Viewer_setMinimal(self)

    def setNodeName(self, node, value):
        return _VisusAppKitPy.Viewer_setNodeName(self, node, value)

    def setNodeVisible(self, node, value):
        return _VisusAppKitPy.Viewer_setNodeVisible(self, node, value)

    def addNode(self, *args):
        return _VisusAppKitPy.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _VisusAppKitPy.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _VisusAppKitPy.Viewer_moveNode(self, dst, src, index)

    def connectNodes(self, *args):
        return _VisusAppKitPy.Viewer_connectNodes(self, *args)

    def disconnectNodes(self, arg2, oport_name, iport_name, to):
        return _VisusAppKitPy.Viewer_disconnectNodes(self, arg2, oport_name, iport_name, to)

    def autoConnectNodes(self):
        return _VisusAppKitPy.Viewer_autoConnectNodes(self)

    def isMouseDragging(self):
        return _VisusAppKitPy.Viewer_isMouseDragging(self)

    def setMouseDragging(self, value):
        return _VisusAppKitPy.Viewer_setMouseDragging(self, value)

    def scheduleMouseDragging(self, value, msec):
        return _VisusAppKitPy.Viewer_scheduleMouseDragging(self, value, msec)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _VisusAppKitPy.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _VisusAppKitPy.Viewer_setPreferences(self, value)

    def open(self, url, parent=None):
        return _VisusAppKitPy.Viewer_open(self, url, parent)

    def save(self, filename, bSaveHistory=False):
        return _VisusAppKitPy.Viewer_save(self, filename, bSaveHistory)

    def setDataflow(self, dataflow):
        return _VisusAppKitPy.Viewer_setDataflow(self, dataflow)

    def refreshNode(self, node=None):
        return _VisusAppKitPy.Viewer_refreshNode(self, node)

    def refreshAll(self):
        return _VisusAppKitPy.Viewer_refreshAll(self)

    def guessGLCameraPosition(self, ref_=-1):
        return _VisusAppKitPy.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _VisusAppKitPy.Viewer_mirrorGLCamera(self, ref)

    def addWorld(self, uuid):
        return _VisusAppKitPy.Viewer_addWorld(self, uuid)

    def addDataset(self, uuid, parent, url):
        return _VisusAppKitPy.Viewer_addDataset(self, uuid, parent, url)

    def addGLCamera(self, *args):
        return _VisusAppKitPy.Viewer_addGLCamera(self, *args)

    def addVolume(self, *args):
        return _VisusAppKitPy.Viewer_addVolume(self, *args)

    def addSlice(self, *args):
        return _VisusAppKitPy.Viewer_addSlice(self, *args)

    def setFieldName(self, value):
        return _VisusAppKitPy.Viewer_setFieldName(self, value)

    def addKdQuery(self, *args):
        return _VisusAppKitPy.Viewer_addKdQuery(self, *args)

    def addIsoContour(self, *args):
        return _VisusAppKitPy.Viewer_addIsoContour(self, *args)

    def addScripting(self, uuid, parent):
        return _VisusAppKitPy.Viewer_addScripting(self, uuid, parent)

    def setScriptingCode(self, value):
        return _VisusAppKitPy.Viewer_setScriptingCode(self, value)

    def addCpuTransferFunction(self, uuid, parent):
        return _VisusAppKitPy.Viewer_addCpuTransferFunction(self, uuid, parent)

    def addStatistics(self, uuid, parent):
        return _VisusAppKitPy.Viewer_addStatistics(self, uuid, parent)

    def addRender(self, *args):
        return _VisusAppKitPy.Viewer_addRender(self, *args)

    def addKdRender(self, *args):
        return _VisusAppKitPy.Viewer_addKdRender(self, *args)

    def addOSPRay(self, *args):
        return _VisusAppKitPy.Viewer_addOSPRay(self, *args)

    def addGroup(self, *args):
        return _VisusAppKitPy.Viewer_addGroup(self, *args)

    def addModelView(self, uuid, parent, insert=False):
        return _VisusAppKitPy.Viewer_addModelView(self, uuid, parent, insert)

    def addPalette(self, uuid, parent, palette):
        return _VisusAppKitPy.Viewer_addPalette(self, uuid, parent, palette)

    def execute(self, ar):
        return _VisusAppKitPy.Viewer_execute(self, ar)

    def write(self, ar):
        return _VisusAppKitPy.Viewer_write(self, ar)

    def read(self, ar):
        return _VisusAppKitPy.Viewer_read(self, ar)

    def addNetRcv(self, port):
        return _VisusAppKitPy.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _VisusAppKitPy.Viewer_addNetSnd(self, *args)

    def postFlushMessages(self):
        return _VisusAppKitPy.Viewer_postFlushMessages(self)
    def __disown__(self):
        self.this.disown()
        _VisusAppKitPy.disown_Viewer(self)
        return weakref_proxy(self)
Viewer_swigregister = _VisusAppKitPy.Viewer_swigregister
Viewer_swigregister(Viewer)

# This file is compatible with both classic and new-style classes.


