# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




import os,sys,platform
WIN32=platform.system()=="Windows" or platform.system()=="win32"

# //////////////////////////////////////////////////////
def AddSysPath(value, bBegin=False):

	if not os.path.isdir(value):
		return

	if not value in sys.path:
		if bBegin:
			sys.path.insert(0,value)
		else:
			sys.path.append(value)

# this is needed for windows/python 38  
	if WIN32 and hasattr(os,'add_dll_directory'):
		os.add_dll_directory(value)

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
__bin_dir__=os.path.abspath(os.path.join(__this_dir__,"bin"))

AddSysPath(__this_dir__)
AddSysPath(__bin_dir__)



this_dir=os.path.dirname(os.path.realpath(__file__))


# using embedded Qt5?
if os.path.isdir(os.path.join(this_dir,"bin","qt")):
	QT5_DIR=os.path.join(this_dir,"bin","qt")

# using PyQt5
else: 
	import PyQt5
	QT5_DIR=os.path.join(os.path.dirname(PyQt5.__file__),"qt")

AddSysPath(os.path.join(QT5_DIR,"bin"),bBegin=True)
os.environ["QT_PLUGIN_PATH"]= os.path.join(QT5_DIR,"plugins")



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusGuiPy
else:
    import _VisusGuiPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_SwigPyIterator

    def value(self):
        return _VisusGuiPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusGuiPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusGuiPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusGuiPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusGuiPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusGuiPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusGuiPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusGuiPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusGuiPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusGuiPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusGuiPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusGuiPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusGuiPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusGuiPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusGuiPy:
_VisusGuiPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusGuiPy.SHARED_PTR_DISOWN
import VisusKernelPy
VISUS_OPENGL_ES = _VisusGuiPy.VISUS_OPENGL_ES
class GuiModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusGuiPy.GuiModule_bAttached_get, _VisusGuiPy.GuiModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusGuiPy.GuiModule_attach()

    @staticmethod
    def detach():
        return _VisusGuiPy.GuiModule_detach()

    @staticmethod
    def createApplication():
        return _VisusGuiPy.GuiModule_createApplication()

    @staticmethod
    def execApplication():
        return _VisusGuiPy.GuiModule_execApplication()

    @staticmethod
    def destroyApplication():
        return _VisusGuiPy.GuiModule_destroyApplication()

    def __init__(self):
        _VisusGuiPy.GuiModule_swiginit(self, _VisusGuiPy.new_GuiModule())
    __swig_destroy__ = _VisusGuiPy.delete_GuiModule

# Register GuiModule in _VisusGuiPy:
_VisusGuiPy.GuiModule_swigregister(GuiModule)
cvar = _VisusGuiPy.cvar

def GuiModule_attach():
    return _VisusGuiPy.GuiModule_attach()

def GuiModule_detach():
    return _VisusGuiPy.GuiModule_detach()

def GuiModule_createApplication():
    return _VisusGuiPy.GuiModule_createApplication()

def GuiModule_execApplication():
    return _VisusGuiPy.GuiModule_execApplication()

def GuiModule_destroyApplication():
    return _VisusGuiPy.GuiModule_destroyApplication()

class GLObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_GLObject

    def glRender(self, gl):
        return _VisusGuiPy.GLObject_glRender(self, gl)

    def glGetRenderQueue(self):
        return _VisusGuiPy.GLObject_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _VisusGuiPy.GLObject_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glWheelEvent(self, map, evt)

# Register GLObject in _VisusGuiPy:
_VisusGuiPy.GLObject_swigregister(GLObject)

class GLBatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertices = property(_VisusGuiPy.GLBatch_vertices_get, _VisusGuiPy.GLBatch_vertices_set)
    normals = property(_VisusGuiPy.GLBatch_normals_get, _VisusGuiPy.GLBatch_normals_set)
    colors = property(_VisusGuiPy.GLBatch_colors_get, _VisusGuiPy.GLBatch_colors_set)
    texcoords = property(_VisusGuiPy.GLBatch_texcoords_get, _VisusGuiPy.GLBatch_texcoords_set)

    def getNumberOfVertices(self):
        return _VisusGuiPy.GLBatch_getNumberOfVertices(self)

    def __init__(self):
        _VisusGuiPy.GLBatch_swiginit(self, _VisusGuiPy.new_GLBatch())
    __swig_destroy__ = _VisusGuiPy.delete_GLBatch

# Register GLBatch in _VisusGuiPy:
_VisusGuiPy.GLBatch_swigregister(GLBatch)

class GLMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLMesh_swiginit(self, _VisusGuiPy.new_GLMesh())

    def begin(self, primitive, vertices_per_batch=0):
        return _VisusGuiPy.GLMesh_begin(self, primitive, vertices_per_batch)

    def end(self):
        return _VisusGuiPy.GLMesh_end(self)

    def color(self, *args):
        return _VisusGuiPy.GLMesh_color(self, *args)

    def vertex(self, *args):
        return _VisusGuiPy.GLMesh_vertex(self, *args)

    def normal(self, *args):
        return _VisusGuiPy.GLMesh_normal(self, *args)

    def texcoord2(self, *args):
        return _VisusGuiPy.GLMesh_texcoord2(self, *args)

    def texcoord3(self, *args):
        return _VisusGuiPy.GLMesh_texcoord3(self, *args)

    def hasColorAttribute(self):
        return _VisusGuiPy.GLMesh_hasColorAttribute(self)

    @staticmethod
    def LineLoop(*args):
        return _VisusGuiPy.GLMesh_LineLoop(*args)

    @staticmethod
    def LineStrip(*args):
        return _VisusGuiPy.GLMesh_LineStrip(*args)

    @staticmethod
    def Quad(*args):
        return _VisusGuiPy.GLMesh_Quad(*args)

    @staticmethod
    def Polygon(points, bNormal=False):
        return _VisusGuiPy.GLMesh_Polygon(points, bNormal)

    @staticmethod
    def Lines(*args):
        return _VisusGuiPy.GLMesh_Lines(*args)

    @staticmethod
    def WireBox(*args):
        return _VisusGuiPy.GLMesh_WireBox(*args)

    @staticmethod
    def SolidBox(*args):
        return _VisusGuiPy.GLMesh_SolidBox(*args)

    @staticmethod
    def WireCircle(N=32):
        return _VisusGuiPy.GLMesh_WireCircle(N)

    @staticmethod
    def SolidCircle(N=32):
        return _VisusGuiPy.GLMesh_SolidCircle(N)

    @staticmethod
    def SolidSphere(N=32):
        return _VisusGuiPy.GLMesh_SolidSphere(N)

    @staticmethod
    def ColoredAxis(box):
        return _VisusGuiPy.GLMesh_ColoredAxis(box)

    @staticmethod
    def ViewDependentUnitVolume(frustum, nslices):
        return _VisusGuiPy.GLMesh_ViewDependentUnitVolume(frustum, nslices)

    @staticmethod
    def AxisAlignedUnitVolume(*args):
        return _VisusGuiPy.GLMesh_AxisAlignedUnitVolume(*args)
    __swig_destroy__ = _VisusGuiPy.delete_GLMesh

# Register GLMesh in _VisusGuiPy:
_VisusGuiPy.GLMesh_swigregister(GLMesh)

def GLMesh_LineLoop(*args):
    return _VisusGuiPy.GLMesh_LineLoop(*args)

def GLMesh_LineStrip(*args):
    return _VisusGuiPy.GLMesh_LineStrip(*args)

def GLMesh_Quad(*args):
    return _VisusGuiPy.GLMesh_Quad(*args)

def GLMesh_Polygon(points, bNormal=False):
    return _VisusGuiPy.GLMesh_Polygon(points, bNormal)

def GLMesh_Lines(*args):
    return _VisusGuiPy.GLMesh_Lines(*args)

def GLMesh_WireBox(*args):
    return _VisusGuiPy.GLMesh_WireBox(*args)

def GLMesh_SolidBox(*args):
    return _VisusGuiPy.GLMesh_SolidBox(*args)

def GLMesh_WireCircle(N=32):
    return _VisusGuiPy.GLMesh_WireCircle(N)

def GLMesh_SolidCircle(N=32):
    return _VisusGuiPy.GLMesh_SolidCircle(N)

def GLMesh_SolidSphere(N=32):
    return _VisusGuiPy.GLMesh_SolidSphere(N)

def GLMesh_ColoredAxis(box):
    return _VisusGuiPy.GLMesh_ColoredAxis(box)

def GLMesh_ViewDependentUnitVolume(frustum, nslices):
    return _VisusGuiPy.GLMesh_ViewDependentUnitVolume(frustum, nslices)

def GLMesh_AxisAlignedUnitVolume(*args):
    return _VisusGuiPy.GLMesh_AxisAlignedUnitVolume(*args)

class GLModelview(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_VisusGuiPy.GLModelview_T_get, _VisusGuiPy.GLModelview_T_set)

    def __init__(self, *args):
        _VisusGuiPy.GLModelview_swiginit(self, _VisusGuiPy.new_GLModelview(*args))
    __swig_destroy__ = _VisusGuiPy.delete_GLModelview

    def glRender(self, gl):
        return _VisusGuiPy.GLModelview_glRender(self, gl)

# Register GLModelview in _VisusGuiPy:
_VisusGuiPy.GLModelview_swigregister(GLModelview)

class GLPhongObject(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    line_width = property(_VisusGuiPy.GLPhongObject_line_width_get, _VisusGuiPy.GLPhongObject_line_width_set)
    color = property(_VisusGuiPy.GLPhongObject_color_get, _VisusGuiPy.GLPhongObject_color_set)
    texture = property(_VisusGuiPy.GLPhongObject_texture_get, _VisusGuiPy.GLPhongObject_texture_set)
    mesh = property(_VisusGuiPy.GLPhongObject_mesh_get, _VisusGuiPy.GLPhongObject_mesh_set)

    def __init__(self, *args):
        _VisusGuiPy.GLPhongObject_swiginit(self, _VisusGuiPy.new_GLPhongObject(*args))
    __swig_destroy__ = _VisusGuiPy.delete_GLPhongObject

    def glRender(self, gl):
        return _VisusGuiPy.GLPhongObject_glRender(self, gl)

# Register GLPhongObject in _VisusGuiPy:
_VisusGuiPy.GLPhongObject_swigregister(GLPhongObject)

class GLSharedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusGuiPy.GLSharedContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusGuiPy.GLSharedContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusGuiPy.GLSharedContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusGuiPy.GLSharedContext_releaseSingleton()
    __swig_destroy__ = _VisusGuiPy.delete_GLSharedContext

    def makeCurrent(self):
        return _VisusGuiPy.GLSharedContext_makeCurrent(self)

    def doneCurrent(self):
        return _VisusGuiPy.GLSharedContext_doneCurrent(self)

# Register GLSharedContext in _VisusGuiPy:
_VisusGuiPy.GLSharedContext_swigregister(GLSharedContext)

def GLSharedContext_getSingleton():
    return _VisusGuiPy.GLSharedContext_getSingleton()

def GLSharedContext_setSingleton(value):
    return _VisusGuiPy.GLSharedContext_setSingleton(value)

def GLSharedContext_allocSingleton():
    return _VisusGuiPy.GLSharedContext_allocSingleton()

def GLSharedContext_releaseSingleton():
    return _VisusGuiPy.GLSharedContext_releaseSingleton()

class GLNeedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLNeedContext_swiginit(self, _VisusGuiPy.new_GLNeedContext())
    __swig_destroy__ = _VisusGuiPy.delete_GLNeedContext

    def __structure_derefence_op__(self):
        return _VisusGuiPy.GLNeedContext___structure_derefence_op__(self)

# Register GLNeedContext in _VisusGuiPy:
_VisusGuiPy.GLNeedContext_swigregister(GLNeedContext)

class GLDoWithContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusGuiPy.GLDoWithContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusGuiPy.GLDoWithContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusGuiPy.GLDoWithContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusGuiPy.GLDoWithContext_releaseSingleton()

    def push_back(self, fn):
        return _VisusGuiPy.GLDoWithContext_push_back(self, fn)
    __swig_destroy__ = _VisusGuiPy.delete_GLDoWithContext

# Register GLDoWithContext in _VisusGuiPy:
_VisusGuiPy.GLDoWithContext_swigregister(GLDoWithContext)

def GLDoWithContext_getSingleton():
    return _VisusGuiPy.GLDoWithContext_getSingleton()

def GLDoWithContext_setSingleton(value):
    return _VisusGuiPy.GLDoWithContext_setSingleton(value)

def GLDoWithContext_allocSingleton():
    return _VisusGuiPy.GLDoWithContext_allocSingleton()

def GLDoWithContext_releaseSingleton():
    return _VisusGuiPy.GLDoWithContext_releaseSingleton()

class GLCanvas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLCanvas_swiginit(self, _VisusGuiPy.new_GLCanvas())
    __swig_destroy__ = _VisusGuiPy.delete_GLCanvas

    def flushGLErrors(self, bVerbose=False):
        return _VisusGuiPy.GLCanvas_flushGLErrors(self, bVerbose)

    def glRenderEvent(self, gl):
        return _VisusGuiPy.GLCanvas_glRenderEvent(self, gl)

    def glResizeEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glResizeEvent(self, evt)

    def glKeyPressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glKeyPressEvent(self, evt)

    def glMousePressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMousePressEvent(self, evt)

    def glMouseMoveEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseMoveEvent(self, evt)

    def glMouseReleaseEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseReleaseEvent(self, evt)

    def glWheelEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glWheelEvent(self, evt)

    def initializeGL(self):
        return _VisusGuiPy.GLCanvas_initializeGL(self)

    def postRedisplay(self, fps=30):
        return _VisusGuiPy.GLCanvas_postRedisplay(self, fps)

    def glClearColor(self, *args):
        return _VisusGuiPy.GLCanvas_glClearColor(self, *args)

    def getShader(self):
        return _VisusGuiPy.GLCanvas_getShader(self)

    def setShader(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setShader(self, value, bForce)

    def setUniform(self, *args):
        return _VisusGuiPy.GLCanvas_setUniform(self, *args)

    def setUniformColor(self, uniform, color):
        return _VisusGuiPy.GLCanvas_setUniformColor(self, uniform, color)

    def setUniformPlane(self, uniform, h):
        return _VisusGuiPy.GLCanvas_setUniformPlane(self, uniform, h)

    def setUniformMatrix(self, uniform, T):
        return _VisusGuiPy.GLCanvas_setUniformMatrix(self, uniform, T)

    def pushClippingBox(self, *args):
        return _VisusGuiPy.GLCanvas_pushClippingBox(self, *args)

    def popClippingBox(self):
        return _VisusGuiPy.GLCanvas_popClippingBox(self)

    def hasClippingBox(self):
        return _VisusGuiPy.GLCanvas_hasClippingBox(self)

    def setUniformMaterial(self, shader, material):
        return _VisusGuiPy.GLCanvas_setUniformMaterial(self, shader, material)

    def setUniformLight(self, shader, light_pos):
        return _VisusGuiPy.GLCanvas_setUniformLight(self, shader, light_pos)

    def getViewport(self):
        return _VisusGuiPy.GLCanvas_getViewport(self)

    def setViewport(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setViewport(self, value, bForce)

    def pushViewport(self):
        return _VisusGuiPy.GLCanvas_pushViewport(self)

    def popViewport(self):
        return _VisusGuiPy.GLCanvas_popViewport(self)

    def getProjection(self):
        return _VisusGuiPy.GLCanvas_getProjection(self)

    def setProjection(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setProjection(self, value, bForce)

    def pushProjection(self):
        return _VisusGuiPy.GLCanvas_pushProjection(self)

    def popProjection(self):
        return _VisusGuiPy.GLCanvas_popProjection(self)

    def loadProjection(self, value):
        return _VisusGuiPy.GLCanvas_loadProjection(self, value)

    def multProjection(self, value):
        return _VisusGuiPy.GLCanvas_multProjection(self, value)

    def getModelview(self):
        return _VisusGuiPy.GLCanvas_getModelview(self)

    def setModelview(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setModelview(self, value, bForce)

    def loadModelview(self, value):
        return _VisusGuiPy.GLCanvas_loadModelview(self, value)

    def multModelview(self, value):
        return _VisusGuiPy.GLCanvas_multModelview(self, value)

    def pushModelview(self):
        return _VisusGuiPy.GLCanvas_pushModelview(self)

    def popModelview(self):
        return _VisusGuiPy.GLCanvas_popModelview(self)

    def getFrustum(self):
        return _VisusGuiPy.GLCanvas_getFrustum(self)

    def setFrustum(self, value):
        return _VisusGuiPy.GLCanvas_setFrustum(self, value)

    def pushFrustum(self):
        return _VisusGuiPy.GLCanvas_pushFrustum(self)

    def popFrustum(self):
        return _VisusGuiPy.GLCanvas_popFrustum(self)

    def setHud(self):
        return _VisusGuiPy.GLCanvas_setHud(self)

    def getPointSize(self):
        return _VisusGuiPy.GLCanvas_getPointSize(self)

    def setPointSize(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setPointSize(self, value, bForce)

    def pushPointSize(self, value):
        return _VisusGuiPy.GLCanvas_pushPointSize(self, value)

    def popPointSize(self):
        return _VisusGuiPy.GLCanvas_popPointSize(self)

    def getLineWidth(self):
        return _VisusGuiPy.GLCanvas_getLineWidth(self)

    def setLineWidth(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setLineWidth(self, value, bForce)

    def pushLineWidth(self, value):
        return _VisusGuiPy.GLCanvas_pushLineWidth(self, value)

    def popLineWidth(self):
        return _VisusGuiPy.GLCanvas_popLineWidth(self)

    def getBlend(self):
        return _VisusGuiPy.GLCanvas_getBlend(self)

    def setBlend(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setBlend(self, value, bForce)

    def pushBlend(self, value):
        return _VisusGuiPy.GLCanvas_pushBlend(self, value)

    def popBlend(self):
        return _VisusGuiPy.GLCanvas_popBlend(self)

    def getDepthTest(self):
        return _VisusGuiPy.GLCanvas_getDepthTest(self)

    def setDepthTest(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthTest(self, value, bForce)

    def pushDepthTest(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthTest(self, value)

    def popDepthTest(self):
        return _VisusGuiPy.GLCanvas_popDepthTest(self)

    def getDepthMask(self):
        return _VisusGuiPy.GLCanvas_getDepthMask(self)

    def setDepthMask(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthMask(self, value, bForce)

    def pushDepthMask(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthMask(self, value)

    def popDepthMask(self):
        return _VisusGuiPy.GLCanvas_popDepthMask(self)

    def getDepthFunc(self):
        return _VisusGuiPy.GLCanvas_getDepthFunc(self)

    def setDepthFunc(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthFunc(self, value, bForce)

    def pushDepthFunc(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthFunc(self, value)

    def popDepthFunc(self):
        return _VisusGuiPy.GLCanvas_popDepthFunc(self)

    def getCullFace(self):
        return _VisusGuiPy.GLCanvas_getCullFace(self)

    def setCullFace(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setCullFace(self, value, bForce)

    def pushCullFace(self, value):
        return _VisusGuiPy.GLCanvas_pushCullFace(self, value)

    def popCullFace(self):
        return _VisusGuiPy.GLCanvas_popCullFace(self)

    def setTextureInSlot(self, slot, sampler, texture):
        return _VisusGuiPy.GLCanvas_setTextureInSlot(self, slot, sampler, texture)

    def setTexture(self, sampler, value):
        return _VisusGuiPy.GLCanvas_setTexture(self, sampler, value)

    def glRenderMesh(self, mesh):
        return _VisusGuiPy.GLCanvas_glRenderMesh(self, mesh)

    def glRenderScreenText(self, x, y, s, color):
        return _VisusGuiPy.GLCanvas_glRenderScreenText(self, x, y, s, color)

    def paintGL(self):
        return _VisusGuiPy.GLCanvas_paintGL(self)

# Register GLCanvas in _VisusGuiPy:
_VisusGuiPy.GLCanvas_swigregister(GLCanvas)

class GLCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_GLCamera

    @staticmethod
    def decode(ar):
        return _VisusGuiPy.GLCamera_decode(ar)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLCamera_getLookAt(self, pos, center, vup)

    def getTypeName(self):
        return _VisusGuiPy.GLCamera_getTypeName(self)

    def mirror(self, ref):
        return _VisusGuiPy.GLCamera_mirror(self, ref)

    def guessPosition(self, box, ref=-1):
        return _VisusGuiPy.GLCamera_guessPosition(self, box, ref)

    def splitFrustum(self, value):
        return _VisusGuiPy.GLCamera_splitFrustum(self, value)

    def glRender(self, gl):
        return _VisusGuiPy.GLCamera_glRender(self, gl)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glKeyPressEvent(self, evt, viewport)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLCamera_getFinalFrustum(self, viewport)

    def write(self, ar):
        return _VisusGuiPy.GLCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLCamera_read(self, ar)

# Register GLCamera in _VisusGuiPy:
_VisusGuiPy.GLCamera_swigregister(GLCamera)

def GLCamera_decode(ar):
    return _VisusGuiPy.GLCamera_decode(ar)

class GLOrthoCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, default_scale=1.3):
        _VisusGuiPy.GLOrthoCamera_swiginit(self, _VisusGuiPy.new_GLOrthoCamera(default_scale))
    __swig_destroy__ = _VisusGuiPy.delete_GLOrthoCamera

    def getTypeName(self):
        return _VisusGuiPy.GLOrthoCamera_getTypeName(self)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLOrthoCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup, rotation=0.0):
        return _VisusGuiPy.GLOrthoCamera_setLookAt(self, pos, center, vup, rotation)

    def guessPosition(self, bound, ref=-1):
        return _VisusGuiPy.GLOrthoCamera_guessPosition(self, bound, ref)

    def splitFrustum(self, r):
        return _VisusGuiPy.GLOrthoCamera_splitFrustum(self, r)

    def setDisableRotation(self, value):
        return _VisusGuiPy.GLOrthoCamera_setDisableRotation(self, value)

    def isRotationDisabled(self):
        return _VisusGuiPy.GLOrthoCamera_isRotationDisabled(self)

    def getMaxZoom(self):
        return _VisusGuiPy.GLOrthoCamera_getMaxZoom(self)

    def setMaxZoom(self, value):
        return _VisusGuiPy.GLOrthoCamera_setMaxZoom(self, value)

    def getMinZoom(self):
        return _VisusGuiPy.GLOrthoCamera_getMinZoom(self)

    def setMinZoom(self, value):
        return _VisusGuiPy.GLOrthoCamera_setMinZoom(self, value)

    def mirror(self, ref):
        return _VisusGuiPy.GLOrthoCamera_mirror(self, ref)

    def translate(self, vt):
        return _VisusGuiPy.GLOrthoCamera_translate(self, vt)

    def moveLeft(self):
        return _VisusGuiPy.GLOrthoCamera_moveLeft(self)

    def moveRight(self):
        return _VisusGuiPy.GLOrthoCamera_moveRight(self)

    def moveUp(self):
        return _VisusGuiPy.GLOrthoCamera_moveUp(self)

    def moveDown(self):
        return _VisusGuiPy.GLOrthoCamera_moveDown(self)

    def scale(self, *args):
        return _VisusGuiPy.GLOrthoCamera_scale(self, *args)

    def zoomIn(self):
        return _VisusGuiPy.GLOrthoCamera_zoomIn(self)

    def zoomOut(self):
        return _VisusGuiPy.GLOrthoCamera_zoomOut(self)

    def getOrthoParams(self):
        return _VisusGuiPy.GLOrthoCamera_getOrthoParams(self)

    def setOrthoParams(self, value, smooth=0):
        return _VisusGuiPy.GLOrthoCamera_setOrthoParams(self, value, smooth)

    def getDefaultSmooth(self):
        return _VisusGuiPy.GLOrthoCamera_getDefaultSmooth(self)

    def setDefaultSmooth(self, value):
        return _VisusGuiPy.GLOrthoCamera_setDefaultSmooth(self, value)

    def toggleDefaultSmooth(self):
        return _VisusGuiPy.GLOrthoCamera_toggleDefaultSmooth(self)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLOrthoCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLOrthoCamera_getFinalFrustum(self, viewport)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMousePressEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMouseReleaseEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMouseMoveEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _VisusGuiPy.GLOrthoCamera_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.GLOrthoCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLOrthoCamera_read(self, ar)

# Register GLOrthoCamera in _VisusGuiPy:
_VisusGuiPy.GLOrthoCamera_swigregister(GLOrthoCamera)

class GLLookAtCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLLookAtCamera_swiginit(self, _VisusGuiPy.new_GLLookAtCamera())
    __swig_destroy__ = _VisusGuiPy.delete_GLLookAtCamera

    def getTypeName(self):
        return _VisusGuiPy.GLLookAtCamera_getTypeName(self)

    def guessPosition(self, value, ref=-1):
        return _VisusGuiPy.GLLookAtCamera_guessPosition(self, value, ref)

    def splitFrustum(self, value):
        return _VisusGuiPy.GLLookAtCamera_splitFrustum(self, value)

    def getPosition(self):
        return _VisusGuiPy.GLLookAtCamera_getPosition(self)

    def setPosition(self, value):
        return _VisusGuiPy.GLLookAtCamera_setPosition(self, value)

    def getCenter(self):
        return _VisusGuiPy.GLLookAtCamera_getCenter(self)

    def setCenter(self, value):
        return _VisusGuiPy.GLLookAtCamera_setCenter(self, value)

    def getVup(self):
        return _VisusGuiPy.GLLookAtCamera_getVup(self)

    def setViewUp(self, value):
        return _VisusGuiPy.GLLookAtCamera_setViewUp(self, value)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLLookAtCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLLookAtCamera_setLookAt(self, pos, center, vup)

    def getFov(self):
        return _VisusGuiPy.GLLookAtCamera_getFov(self)

    def setFov(self, value):
        return _VisusGuiPy.GLLookAtCamera_setFov(self, value)

    def getZNear(self):
        return _VisusGuiPy.GLLookAtCamera_getZNear(self)

    def setZNear(self, value):
        return _VisusGuiPy.GLLookAtCamera_setZNear(self, value)

    def getZFar(self):
        return _VisusGuiPy.GLLookAtCamera_getZFar(self)

    def setZFar(self, value):
        return _VisusGuiPy.GLLookAtCamera_setZFar(self, value)

    def rotate(self, angle_degree, p0, p1):
        return _VisusGuiPy.GLLookAtCamera_rotate(self, angle_degree, p0, p1)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLLookAtCamera_getFinalFrustum(self, viewport)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLLookAtCamera_getCurrentFrustum(self, viewport)

    def setCameraSelection(self, value):
        return _VisusGuiPy.GLLookAtCamera_setCameraSelection(self, value)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _VisusGuiPy.GLLookAtCamera_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.GLLookAtCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLLookAtCamera_read(self, ar)

# Register GLLookAtCamera in _VisusGuiPy:
_VisusGuiPy.GLLookAtCamera_swigregister(GLLookAtCamera)


def ToCppQtWidget(obj):
    return _VisusGuiPy.ToCppQtWidget(obj)

def FromCppQtWidget(widget):
    return _VisusGuiPy.FromCppQtWidget(widget)


