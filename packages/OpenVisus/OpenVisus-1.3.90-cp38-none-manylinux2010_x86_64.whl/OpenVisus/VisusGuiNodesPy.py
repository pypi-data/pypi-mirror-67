# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




import os,sys,platform
WIN32=platform.system()=="Windows" or platform.system()=="win32"

# //////////////////////////////////////////////////////
def AddSysPath(value, bBegin=False):

	if not os.path.isdir(value):
		return

	if not value in sys.path:
		if bBegin:
			sys.path.insert(0,value)
		else:
			sys.path.append(value)

# this is needed for windows/python 38  
	if WIN32 and hasattr(os,'add_dll_directory'):
		os.add_dll_directory(value)

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
__bin_dir__=os.path.abspath(os.path.join(__this_dir__,"bin"))

AddSysPath(__this_dir__)
AddSysPath(__bin_dir__)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusGuiNodesPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusGuiNodesPy')
    _VisusGuiNodesPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusGuiNodesPy', [dirname(__file__)])
        except ImportError:
            import _VisusGuiNodesPy
            return _VisusGuiNodesPy
        try:
            _mod = imp.load_module('_VisusGuiNodesPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusGuiNodesPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusGuiNodesPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiNodesPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusGuiNodesPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusGuiNodesPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusGuiNodesPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusGuiNodesPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusGuiNodesPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusGuiNodesPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusGuiNodesPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusGuiNodesPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusGuiNodesPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusGuiNodesPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusGuiNodesPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusGuiNodesPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusGuiNodesPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusGuiNodesPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusGuiNodesPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusGuiNodesPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusGuiNodesPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusGuiNodesPy.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusGuiPy
class GuiNodesModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNodesModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNodesModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusGuiNodesPy.GuiNodesModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusGuiNodesPy.GuiNodesModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusGuiNodesPy.GuiNodesModule_bAttached_get, _VisusGuiNodesPy.GuiNodesModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusGuiNodesPy.GuiNodesModule_attach)
    else:
        attach = _VisusGuiNodesPy.GuiNodesModule_attach
    if _newclass:
        detach = staticmethod(_VisusGuiNodesPy.GuiNodesModule_detach)
    else:
        detach = _VisusGuiNodesPy.GuiNodesModule_detach

    def __init__(self):
        this = _VisusGuiNodesPy.new_GuiNodesModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_GuiNodesModule
    __del__ = lambda self: None
GuiNodesModule_swigregister = _VisusGuiNodesPy.GuiNodesModule_swigregister
GuiNodesModule_swigregister(GuiNodesModule)
cvar = _VisusGuiNodesPy.cvar

def GuiNodesModule_attach():
    return _VisusGuiNodesPy.GuiNodesModule_attach()
GuiNodesModule_attach = _VisusGuiNodesPy.GuiNodesModule_attach

def GuiNodesModule_detach():
    return _VisusGuiNodesPy.GuiNodesModule_detach()
GuiNodesModule_detach = _VisusGuiNodesPy.GuiNodesModule_detach

class GLCameraNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLCameraNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLCameraNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GLCameraNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_GLCameraNode(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_GLCameraNode
    __del__ = lambda self: None

    def getGLCamera(self):
        return _VisusGuiNodesPy.GLCameraNode_getGLCamera(self)

    def setGLCamera(self, glcamera):
        return _VisusGuiNodesPy.GLCameraNode_setGLCamera(self, glcamera)

    def execute(self, ar):
        return _VisusGuiNodesPy.GLCameraNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiNodesPy.GLCameraNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiNodesPy.GLCameraNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_GLCameraNode(self)
        return weakref_proxy(self)

    def processInput(self):
        return _VisusGuiNodesPy.GLCameraNode_processInput(self)
GLCameraNode_swigregister = _VisusGuiNodesPy.GLCameraNode_swigregister
GLCameraNode_swigregister(GLCameraNode)

class IsoContour(VisusGuiPy.GLMesh):
    __swig_setmethods__ = {}
    for _s in [VisusGuiPy.GLMesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoContour, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusGuiPy.GLMesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoContour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field"] = _VisusGuiNodesPy.IsoContour_field_set
    __swig_getmethods__["field"] = _VisusGuiNodesPy.IsoContour_field_get
    if _newclass:
        field = _swig_property(_VisusGuiNodesPy.IsoContour_field_get, _VisusGuiNodesPy.IsoContour_field_set)
    __swig_setmethods__["second_field"] = _VisusGuiNodesPy.IsoContour_second_field_set
    __swig_getmethods__["second_field"] = _VisusGuiNodesPy.IsoContour_second_field_get
    if _newclass:
        second_field = _swig_property(_VisusGuiNodesPy.IsoContour_second_field_get, _VisusGuiNodesPy.IsoContour_second_field_set)
    __swig_setmethods__["range"] = _VisusGuiNodesPy.IsoContour_range_set
    __swig_getmethods__["range"] = _VisusGuiNodesPy.IsoContour_range_get
    if _newclass:
        range = _swig_property(_VisusGuiNodesPy.IsoContour_range_get, _VisusGuiNodesPy.IsoContour_range_set)
    __swig_setmethods__["voxel_used"] = _VisusGuiNodesPy.IsoContour_voxel_used_set
    __swig_getmethods__["voxel_used"] = _VisusGuiNodesPy.IsoContour_voxel_used_get
    if _newclass:
        voxel_used = _swig_property(_VisusGuiNodesPy.IsoContour_voxel_used_get, _VisusGuiNodesPy.IsoContour_voxel_used_set)

    def __init__(self):
        this = _VisusGuiNodesPy.new_IsoContour()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_IsoContour
    __del__ = lambda self: None
IsoContour_swigregister = _VisusGuiNodesPy.IsoContour_swigregister
IsoContour_swigregister(IsoContour)

class MarchingCube(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarchingCube, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarchingCube, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _VisusGuiNodesPy.MarchingCube_data_set
    __swig_getmethods__["data"] = _VisusGuiNodesPy.MarchingCube_data_get
    if _newclass:
        data = _swig_property(_VisusGuiNodesPy.MarchingCube_data_get, _VisusGuiNodesPy.MarchingCube_data_set)
    __swig_setmethods__["isovalue"] = _VisusGuiNodesPy.MarchingCube_isovalue_set
    __swig_getmethods__["isovalue"] = _VisusGuiNodesPy.MarchingCube_isovalue_get
    if _newclass:
        isovalue = _swig_property(_VisusGuiNodesPy.MarchingCube_isovalue_get, _VisusGuiNodesPy.MarchingCube_isovalue_set)
    __swig_setmethods__["enable_vortex_used"] = _VisusGuiNodesPy.MarchingCube_enable_vortex_used_set
    __swig_getmethods__["enable_vortex_used"] = _VisusGuiNodesPy.MarchingCube_enable_vortex_used_get
    if _newclass:
        enable_vortex_used = _swig_property(_VisusGuiNodesPy.MarchingCube_enable_vortex_used_get, _VisusGuiNodesPy.MarchingCube_enable_vortex_used_set)
    __swig_setmethods__["vertices_per_batch"] = _VisusGuiNodesPy.MarchingCube_vertices_per_batch_set
    __swig_getmethods__["vertices_per_batch"] = _VisusGuiNodesPy.MarchingCube_vertices_per_batch_get
    if _newclass:
        vertices_per_batch = _swig_property(_VisusGuiNodesPy.MarchingCube_vertices_per_batch_get, _VisusGuiNodesPy.MarchingCube_vertices_per_batch_set)
    __swig_setmethods__["aborted"] = _VisusGuiNodesPy.MarchingCube_aborted_set
    __swig_getmethods__["aborted"] = _VisusGuiNodesPy.MarchingCube_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusGuiNodesPy.MarchingCube_aborted_get, _VisusGuiNodesPy.MarchingCube_aborted_set)

    def __init__(self, *args):
        this = _VisusGuiNodesPy.new_MarchingCube(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self):
        return _VisusGuiNodesPy.MarchingCube_run(self)
    __swig_destroy__ = _VisusGuiNodesPy.delete_MarchingCube
    __del__ = lambda self: None
MarchingCube_swigregister = _VisusGuiNodesPy.MarchingCube_swigregister
MarchingCube_swigregister(MarchingCube)

class IsoContourNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoContourNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoContourNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IsoContourNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_IsoContourNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_IsoContourNode
    __del__ = lambda self: None

    def processInput(self):
        return _VisusGuiNodesPy.IsoContourNode_processInput(self)

    def getLastFieldRange(self):
        return _VisusGuiNodesPy.IsoContourNode_getLastFieldRange(self)

    def setField(self, value):
        return _VisusGuiNodesPy.IsoContourNode_setField(self, value)

    def getIsoValue(self):
        return _VisusGuiNodesPy.IsoContourNode_getIsoValue(self)

    def setIsoValue(self, value):
        return _VisusGuiNodesPy.IsoContourNode_setIsoValue(self, value)

    def execute(self, ar):
        return _VisusGuiNodesPy.IsoContourNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiNodesPy.IsoContourNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiNodesPy.IsoContourNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_IsoContourNode(self)
        return weakref_proxy(self)
IsoContourNode_swigregister = _VisusGuiNodesPy.IsoContourNode_swigregister
IsoContourNode_swigregister(IsoContourNode)

class IsoContourRenderNode(VisusDataflowPy.Node, VisusGuiPy.GLObject):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoContourRenderNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoContourRenderNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IsoContourRenderNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_IsoContourRenderNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_IsoContourRenderNode
    __del__ = lambda self: None

    def glRender(self, gl):
        return _VisusGuiNodesPy.IsoContourRenderNode_glRender(self, gl)

    def getBounds(self):
        return _VisusGuiNodesPy.IsoContourRenderNode_getBounds(self)

    def getMaterial(self):
        return _VisusGuiNodesPy.IsoContourRenderNode_getMaterial(self)

    def setMaterial(self, new_value):
        return _VisusGuiNodesPy.IsoContourRenderNode_setMaterial(self, new_value)

    def getPalette(self):
        return _VisusGuiNodesPy.IsoContourRenderNode_getPalette(self)

    def setPalette(self, value):
        return _VisusGuiNodesPy.IsoContourRenderNode_setPalette(self, value)

    def getMesh(self):
        return _VisusGuiNodesPy.IsoContourRenderNode_getMesh(self)

    def setMesh(self, value):
        return _VisusGuiNodesPy.IsoContourRenderNode_setMesh(self, value)

    def processInput(self):
        return _VisusGuiNodesPy.IsoContourRenderNode_processInput(self)
    if _newclass:
        allocShaders = staticmethod(_VisusGuiNodesPy.IsoContourRenderNode_allocShaders)
    else:
        allocShaders = _VisusGuiNodesPy.IsoContourRenderNode_allocShaders
    if _newclass:
        releaseShaders = staticmethod(_VisusGuiNodesPy.IsoContourRenderNode_releaseShaders)
    else:
        releaseShaders = _VisusGuiNodesPy.IsoContourRenderNode_releaseShaders

    def execute(self, ar):
        return _VisusGuiNodesPy.IsoContourRenderNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiNodesPy.IsoContourRenderNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiNodesPy.IsoContourRenderNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_IsoContourRenderNode(self)
        return weakref_proxy(self)
IsoContourRenderNode_swigregister = _VisusGuiNodesPy.IsoContourRenderNode_swigregister
IsoContourRenderNode_swigregister(IsoContourRenderNode)

def IsoContourRenderNode_allocShaders():
    return _VisusGuiNodesPy.IsoContourRenderNode_allocShaders()
IsoContourRenderNode_allocShaders = _VisusGuiNodesPy.IsoContourRenderNode_allocShaders

def IsoContourRenderNode_releaseShaders():
    return _VisusGuiNodesPy.IsoContourRenderNode_releaseShaders()
IsoContourRenderNode_releaseShaders = _VisusGuiNodesPy.IsoContourRenderNode_releaseShaders

class RenderArrayNode(VisusDataflowPy.Node, VisusGuiPy.GLObject):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderArrayNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RenderArrayNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bFastRendering"] = _VisusGuiNodesPy.RenderArrayNode_bFastRendering_set
    __swig_getmethods__["bFastRendering"] = _VisusGuiNodesPy.RenderArrayNode_bFastRendering_get
    if _newclass:
        bFastRendering = _swig_property(_VisusGuiNodesPy.RenderArrayNode_bFastRendering_get, _VisusGuiNodesPy.RenderArrayNode_bFastRendering_set)
    __swig_setmethods__["opacity"] = _VisusGuiNodesPy.RenderArrayNode_opacity_set
    __swig_getmethods__["opacity"] = _VisusGuiNodesPy.RenderArrayNode_opacity_get
    if _newclass:
        opacity = _swig_property(_VisusGuiNodesPy.RenderArrayNode_opacity_get, _VisusGuiNodesPy.RenderArrayNode_opacity_set)

    def __init__(self):
        if self.__class__ == RenderArrayNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_RenderArrayNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_RenderArrayNode
    __del__ = lambda self: None

    def getData(self):
        return _VisusGuiNodesPy.RenderArrayNode_getData(self)

    def setData(self, *args):
        return _VisusGuiNodesPy.RenderArrayNode_setData(self, *args)

    def getDataDimension(self):
        return _VisusGuiNodesPy.RenderArrayNode_getDataDimension(self)

    def getDataBounds(self):
        return _VisusGuiNodesPy.RenderArrayNode_getDataBounds(self)

    def getBounds(self):
        return _VisusGuiNodesPy.RenderArrayNode_getBounds(self)

    def getLightingMaterial(self):
        return _VisusGuiNodesPy.RenderArrayNode_getLightingMaterial(self)

    def setLightingMaterial(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setLightingMaterial(self, value)

    def lightingEnabled(self):
        return _VisusGuiNodesPy.RenderArrayNode_lightingEnabled(self)

    def setLightingEnabled(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setLightingEnabled(self, value)

    def getPalette(self):
        return _VisusGuiNodesPy.RenderArrayNode_getPalette(self)

    def paletteEnabled(self):
        return _VisusGuiNodesPy.RenderArrayNode_paletteEnabled(self)

    def setPaletteEnabled(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setPaletteEnabled(self, value)

    def useViewDirection(self):
        return _VisusGuiNodesPy.RenderArrayNode_useViewDirection(self)

    def setUseViewDirection(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setUseViewDirection(self, value)

    def maxNumSlices(self):
        return _VisusGuiNodesPy.RenderArrayNode_maxNumSlices(self)

    def setMaxNumSlices(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setMaxNumSlices(self, value)

    def minifyFilter(self):
        return _VisusGuiNodesPy.RenderArrayNode_minifyFilter(self)

    def setMinifyFilter(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setMinifyFilter(self, value)

    def magnifyFilter(self):
        return _VisusGuiNodesPy.RenderArrayNode_magnifyFilter(self)

    def setMagnifyFilter(self, value):
        return _VisusGuiNodesPy.RenderArrayNode_setMagnifyFilter(self, value)

    def glRender(self, gl):
        return _VisusGuiNodesPy.RenderArrayNode_glRender(self, gl)

    def processInput(self):
        return _VisusGuiNodesPy.RenderArrayNode_processInput(self)
    if _newclass:
        allocShaders = staticmethod(_VisusGuiNodesPy.RenderArrayNode_allocShaders)
    else:
        allocShaders = _VisusGuiNodesPy.RenderArrayNode_allocShaders
    if _newclass:
        releaseShaders = staticmethod(_VisusGuiNodesPy.RenderArrayNode_releaseShaders)
    else:
        releaseShaders = _VisusGuiNodesPy.RenderArrayNode_releaseShaders

    def execute(self, ar):
        return _VisusGuiNodesPy.RenderArrayNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiNodesPy.RenderArrayNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiNodesPy.RenderArrayNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_RenderArrayNode(self)
        return weakref_proxy(self)
RenderArrayNode_swigregister = _VisusGuiNodesPy.RenderArrayNode_swigregister
RenderArrayNode_swigregister(RenderArrayNode)

def RenderArrayNode_allocShaders():
    return _VisusGuiNodesPy.RenderArrayNode_allocShaders()
RenderArrayNode_allocShaders = _VisusGuiNodesPy.RenderArrayNode_allocShaders

def RenderArrayNode_releaseShaders():
    return _VisusGuiNodesPy.RenderArrayNode_releaseShaders()
RenderArrayNode_releaseShaders = _VisusGuiNodesPy.RenderArrayNode_releaseShaders

class KdRenderArrayNode(VisusDataflowPy.Node, VisusGuiPy.GLObject):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdRenderArrayNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node, VisusGuiPy.GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KdRenderArrayNode, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == KdRenderArrayNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_KdRenderArrayNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_KdRenderArrayNode
    __del__ = lambda self: None

    def getKdArray(self):
        return _VisusGuiNodesPy.KdRenderArrayNode_getKdArray(self)

    def getBounds(self):
        return _VisusGuiNodesPy.KdRenderArrayNode_getBounds(self)

    def processInput(self):
        return _VisusGuiNodesPy.KdRenderArrayNode_processInput(self)

    def glRender(self, gl):
        return _VisusGuiNodesPy.KdRenderArrayNode_glRender(self, gl)
    if _newclass:
        allocShaders = staticmethod(_VisusGuiNodesPy.KdRenderArrayNode_allocShaders)
    else:
        allocShaders = _VisusGuiNodesPy.KdRenderArrayNode_allocShaders
    if _newclass:
        releaseShaders = staticmethod(_VisusGuiNodesPy.KdRenderArrayNode_releaseShaders)
    else:
        releaseShaders = _VisusGuiNodesPy.KdRenderArrayNode_releaseShaders
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_KdRenderArrayNode(self)
        return weakref_proxy(self)
KdRenderArrayNode_swigregister = _VisusGuiNodesPy.KdRenderArrayNode_swigregister
KdRenderArrayNode_swigregister(KdRenderArrayNode)

def KdRenderArrayNode_allocShaders():
    return _VisusGuiNodesPy.KdRenderArrayNode_allocShaders()
KdRenderArrayNode_allocShaders = _VisusGuiNodesPy.KdRenderArrayNode_allocShaders

def KdRenderArrayNode_releaseShaders():
    return _VisusGuiNodesPy.KdRenderArrayNode_releaseShaders()
KdRenderArrayNode_releaseShaders = _VisusGuiNodesPy.KdRenderArrayNode_releaseShaders

class PythonNode(VisusDataflowPy.Node):
    __swig_setmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonNode, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusDataflowPy.Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PythonNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node_bounds"] = _VisusGuiNodesPy.PythonNode_node_bounds_set
    __swig_getmethods__["node_bounds"] = _VisusGuiNodesPy.PythonNode_node_bounds_get
    if _newclass:
        node_bounds = _swig_property(_VisusGuiNodesPy.PythonNode_node_bounds_get, _VisusGuiNodesPy.PythonNode_node_bounds_set)

    def __init__(self):
        if self.__class__ == PythonNode:
            _self = None
        else:
            _self = self
        this = _VisusGuiNodesPy.new_PythonNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusGuiNodesPy.delete_PythonNode
    __del__ = lambda self: None

    def getOsDependentTypeName(self):
        return _VisusGuiNodesPy.PythonNode_getOsDependentTypeName(self)

    def processInput(self):
        return _VisusGuiNodesPy.PythonNode_processInput(self)

    def getBounds(self):
        return _VisusGuiNodesPy.PythonNode_getBounds(self)

    def setBounds(self, value):
        return _VisusGuiNodesPy.PythonNode_setBounds(self, value)

    def glGetRenderQueue(self):
        return _VisusGuiNodesPy.PythonNode_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _VisusGuiNodesPy.PythonNode_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _VisusGuiNodesPy.PythonNode_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _VisusGuiNodesPy.PythonNode_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _VisusGuiNodesPy.PythonNode_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _VisusGuiNodesPy.PythonNode_glWheelEvent(self, map, evt)

    def glRender(self, gl):
        return _VisusGuiNodesPy.PythonNode_glRender(self, gl)
    def __disown__(self):
        self.this.disown()
        _VisusGuiNodesPy.disown_PythonNode(self)
        return weakref_proxy(self)
PythonNode_swigregister = _VisusGuiNodesPy.PythonNode_swigregister
PythonNode_swigregister(PythonNode)

# This file is compatible with both classic and new-style classes.


