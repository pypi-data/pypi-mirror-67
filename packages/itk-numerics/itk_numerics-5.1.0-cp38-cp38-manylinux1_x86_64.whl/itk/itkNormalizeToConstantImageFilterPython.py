# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNormalizeToConstantImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNormalizeToConstantImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkNormalizeToConstantImageFilterPython
            return _itkNormalizeToConstantImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNormalizeToConstantImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNormalizeToConstantImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNormalizeToConstantImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkNormalizeToConstantImageFilterID3ID3_New():
  return itkNormalizeToConstantImageFilterID3ID3.New()


def itkNormalizeToConstantImageFilterID2ID2_New():
  return itkNormalizeToConstantImageFilterID2ID2.New()


def itkNormalizeToConstantImageFilterIF3IF3_New():
  return itkNormalizeToConstantImageFilterIF3IF3.New()


def itkNormalizeToConstantImageFilterIF2IF2_New():
  return itkNormalizeToConstantImageFilterIF2IF2.New()


def itkNormalizeToConstantImageFilterIUS3IUS3_New():
  return itkNormalizeToConstantImageFilterIUS3IUS3.New()


def itkNormalizeToConstantImageFilterIUS2IUS2_New():
  return itkNormalizeToConstantImageFilterIUS2IUS2.New()


def itkNormalizeToConstantImageFilterIUC3IUC3_New():
  return itkNormalizeToConstantImageFilterIUC3IUC3.New()


def itkNormalizeToConstantImageFilterIUC2IUC2_New():
  return itkNormalizeToConstantImageFilterIUC2IUC2.New()


def itkNormalizeToConstantImageFilterISS3ISS3_New():
  return itkNormalizeToConstantImageFilterISS3ISS3.New()


def itkNormalizeToConstantImageFilterISS2ISS2_New():
  return itkNormalizeToConstantImageFilterISS2ISS2.New()

class itkNormalizeToConstantImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterID2ID2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterID2ID2_Pointer":
        """Clone(itkNormalizeToConstantImageFilterID2ID2 self) -> itkNormalizeToConstantImageFilterID2ID2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterID2ID2 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterID2ID2 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterID2ID2"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID2ID2

        Create a new object of the class itkNormalizeToConstantImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterID2ID2.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_Clone, None, itkNormalizeToConstantImageFilterID2ID2)
itkNormalizeToConstantImageFilterID2ID2.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_SetConstant, None, itkNormalizeToConstantImageFilterID2ID2)
itkNormalizeToConstantImageFilterID2ID2.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_GetConstant, None, itkNormalizeToConstantImageFilterID2ID2)
itkNormalizeToConstantImageFilterID2ID2_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_swigregister
itkNormalizeToConstantImageFilterID2ID2_swigregister(itkNormalizeToConstantImageFilterID2ID2)

def itkNormalizeToConstantImageFilterID2ID2___New_orig__() -> "itkNormalizeToConstantImageFilterID2ID2_Pointer":
    """itkNormalizeToConstantImageFilterID2ID2___New_orig__() -> itkNormalizeToConstantImageFilterID2ID2_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2___New_orig__()

def itkNormalizeToConstantImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterID2ID2 *":
    """itkNormalizeToConstantImageFilterID2ID2_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterID2ID2"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_cast(obj)

class itkNormalizeToConstantImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterID3ID3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterID3ID3_Pointer":
        """Clone(itkNormalizeToConstantImageFilterID3ID3 self) -> itkNormalizeToConstantImageFilterID3ID3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterID3ID3 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterID3ID3 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterID3ID3"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID3ID3

        Create a new object of the class itkNormalizeToConstantImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterID3ID3.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_Clone, None, itkNormalizeToConstantImageFilterID3ID3)
itkNormalizeToConstantImageFilterID3ID3.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_SetConstant, None, itkNormalizeToConstantImageFilterID3ID3)
itkNormalizeToConstantImageFilterID3ID3.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_GetConstant, None, itkNormalizeToConstantImageFilterID3ID3)
itkNormalizeToConstantImageFilterID3ID3_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_swigregister
itkNormalizeToConstantImageFilterID3ID3_swigregister(itkNormalizeToConstantImageFilterID3ID3)

def itkNormalizeToConstantImageFilterID3ID3___New_orig__() -> "itkNormalizeToConstantImageFilterID3ID3_Pointer":
    """itkNormalizeToConstantImageFilterID3ID3___New_orig__() -> itkNormalizeToConstantImageFilterID3ID3_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3___New_orig__()

def itkNormalizeToConstantImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterID3ID3 *":
    """itkNormalizeToConstantImageFilterID3ID3_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterID3ID3"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_cast(obj)

class itkNormalizeToConstantImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIF2IF2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIF2IF2_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIF2IF2 self) -> itkNormalizeToConstantImageFilterIF2IF2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIF2IF2 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIF2IF2 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIF2IF2"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF2IF2

        Create a new object of the class itkNormalizeToConstantImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIF2IF2.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_Clone, None, itkNormalizeToConstantImageFilterIF2IF2)
itkNormalizeToConstantImageFilterIF2IF2.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_SetConstant, None, itkNormalizeToConstantImageFilterIF2IF2)
itkNormalizeToConstantImageFilterIF2IF2.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_GetConstant, None, itkNormalizeToConstantImageFilterIF2IF2)
itkNormalizeToConstantImageFilterIF2IF2_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_swigregister
itkNormalizeToConstantImageFilterIF2IF2_swigregister(itkNormalizeToConstantImageFilterIF2IF2)

def itkNormalizeToConstantImageFilterIF2IF2___New_orig__() -> "itkNormalizeToConstantImageFilterIF2IF2_Pointer":
    """itkNormalizeToConstantImageFilterIF2IF2___New_orig__() -> itkNormalizeToConstantImageFilterIF2IF2_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2___New_orig__()

def itkNormalizeToConstantImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIF2IF2 *":
    """itkNormalizeToConstantImageFilterIF2IF2_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIF2IF2"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_cast(obj)

class itkNormalizeToConstantImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIF3IF3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIF3IF3_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIF3IF3 self) -> itkNormalizeToConstantImageFilterIF3IF3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIF3IF3 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIF3IF3 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIF3IF3"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF3IF3

        Create a new object of the class itkNormalizeToConstantImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIF3IF3.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_Clone, None, itkNormalizeToConstantImageFilterIF3IF3)
itkNormalizeToConstantImageFilterIF3IF3.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_SetConstant, None, itkNormalizeToConstantImageFilterIF3IF3)
itkNormalizeToConstantImageFilterIF3IF3.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_GetConstant, None, itkNormalizeToConstantImageFilterIF3IF3)
itkNormalizeToConstantImageFilterIF3IF3_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_swigregister
itkNormalizeToConstantImageFilterIF3IF3_swigregister(itkNormalizeToConstantImageFilterIF3IF3)

def itkNormalizeToConstantImageFilterIF3IF3___New_orig__() -> "itkNormalizeToConstantImageFilterIF3IF3_Pointer":
    """itkNormalizeToConstantImageFilterIF3IF3___New_orig__() -> itkNormalizeToConstantImageFilterIF3IF3_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3___New_orig__()

def itkNormalizeToConstantImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIF3IF3 *":
    """itkNormalizeToConstantImageFilterIF3IF3_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIF3IF3"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_cast(obj)

class itkNormalizeToConstantImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterISS2ISS2_Pointer":
        """Clone(itkNormalizeToConstantImageFilterISS2ISS2 self) -> itkNormalizeToConstantImageFilterISS2ISS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterISS2ISS2 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterISS2ISS2 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterISS2ISS2"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS2ISS2

        Create a new object of the class itkNormalizeToConstantImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterISS2ISS2.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_Clone, None, itkNormalizeToConstantImageFilterISS2ISS2)
itkNormalizeToConstantImageFilterISS2ISS2.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_SetConstant, None, itkNormalizeToConstantImageFilterISS2ISS2)
itkNormalizeToConstantImageFilterISS2ISS2.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_GetConstant, None, itkNormalizeToConstantImageFilterISS2ISS2)
itkNormalizeToConstantImageFilterISS2ISS2_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_swigregister
itkNormalizeToConstantImageFilterISS2ISS2_swigregister(itkNormalizeToConstantImageFilterISS2ISS2)

def itkNormalizeToConstantImageFilterISS2ISS2___New_orig__() -> "itkNormalizeToConstantImageFilterISS2ISS2_Pointer":
    """itkNormalizeToConstantImageFilterISS2ISS2___New_orig__() -> itkNormalizeToConstantImageFilterISS2ISS2_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2___New_orig__()

def itkNormalizeToConstantImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterISS2ISS2 *":
    """itkNormalizeToConstantImageFilterISS2ISS2_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterISS2ISS2"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_cast(obj)

class itkNormalizeToConstantImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterISS3ISS3_Pointer":
        """Clone(itkNormalizeToConstantImageFilterISS3ISS3 self) -> itkNormalizeToConstantImageFilterISS3ISS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterISS3ISS3 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterISS3ISS3 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterISS3ISS3"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS3ISS3

        Create a new object of the class itkNormalizeToConstantImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterISS3ISS3.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_Clone, None, itkNormalizeToConstantImageFilterISS3ISS3)
itkNormalizeToConstantImageFilterISS3ISS3.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_SetConstant, None, itkNormalizeToConstantImageFilterISS3ISS3)
itkNormalizeToConstantImageFilterISS3ISS3.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_GetConstant, None, itkNormalizeToConstantImageFilterISS3ISS3)
itkNormalizeToConstantImageFilterISS3ISS3_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_swigregister
itkNormalizeToConstantImageFilterISS3ISS3_swigregister(itkNormalizeToConstantImageFilterISS3ISS3)

def itkNormalizeToConstantImageFilterISS3ISS3___New_orig__() -> "itkNormalizeToConstantImageFilterISS3ISS3_Pointer":
    """itkNormalizeToConstantImageFilterISS3ISS3___New_orig__() -> itkNormalizeToConstantImageFilterISS3ISS3_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3___New_orig__()

def itkNormalizeToConstantImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterISS3ISS3 *":
    """itkNormalizeToConstantImageFilterISS3ISS3_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterISS3ISS3"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_cast(obj)

class itkNormalizeToConstantImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIUC2IUC2_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIUC2IUC2 self) -> itkNormalizeToConstantImageFilterIUC2IUC2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIUC2IUC2 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIUC2IUC2 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUC2IUC2"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC2IUC2

        Create a new object of the class itkNormalizeToConstantImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIUC2IUC2.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_Clone, None, itkNormalizeToConstantImageFilterIUC2IUC2)
itkNormalizeToConstantImageFilterIUC2IUC2.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_SetConstant, None, itkNormalizeToConstantImageFilterIUC2IUC2)
itkNormalizeToConstantImageFilterIUC2IUC2.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_GetConstant, None, itkNormalizeToConstantImageFilterIUC2IUC2)
itkNormalizeToConstantImageFilterIUC2IUC2_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_swigregister
itkNormalizeToConstantImageFilterIUC2IUC2_swigregister(itkNormalizeToConstantImageFilterIUC2IUC2)

def itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__() -> "itkNormalizeToConstantImageFilterIUC2IUC2_Pointer":
    """itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__() -> itkNormalizeToConstantImageFilterIUC2IUC2_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__()

def itkNormalizeToConstantImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUC2IUC2 *":
    """itkNormalizeToConstantImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUC2IUC2"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_cast(obj)

class itkNormalizeToConstantImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIUC3IUC3_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIUC3IUC3 self) -> itkNormalizeToConstantImageFilterIUC3IUC3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIUC3IUC3 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIUC3IUC3 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUC3IUC3"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC3IUC3

        Create a new object of the class itkNormalizeToConstantImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIUC3IUC3.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_Clone, None, itkNormalizeToConstantImageFilterIUC3IUC3)
itkNormalizeToConstantImageFilterIUC3IUC3.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_SetConstant, None, itkNormalizeToConstantImageFilterIUC3IUC3)
itkNormalizeToConstantImageFilterIUC3IUC3.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_GetConstant, None, itkNormalizeToConstantImageFilterIUC3IUC3)
itkNormalizeToConstantImageFilterIUC3IUC3_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_swigregister
itkNormalizeToConstantImageFilterIUC3IUC3_swigregister(itkNormalizeToConstantImageFilterIUC3IUC3)

def itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__() -> "itkNormalizeToConstantImageFilterIUC3IUC3_Pointer":
    """itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__() -> itkNormalizeToConstantImageFilterIUC3IUC3_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__()

def itkNormalizeToConstantImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUC3IUC3 *":
    """itkNormalizeToConstantImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUC3IUC3"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_cast(obj)

class itkNormalizeToConstantImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIUS2IUS2_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIUS2IUS2 self) -> itkNormalizeToConstantImageFilterIUS2IUS2_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIUS2IUS2 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIUS2IUS2 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUS2IUS2"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS2IUS2

        Create a new object of the class itkNormalizeToConstantImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIUS2IUS2.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_Clone, None, itkNormalizeToConstantImageFilterIUS2IUS2)
itkNormalizeToConstantImageFilterIUS2IUS2.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_SetConstant, None, itkNormalizeToConstantImageFilterIUS2IUS2)
itkNormalizeToConstantImageFilterIUS2IUS2.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_GetConstant, None, itkNormalizeToConstantImageFilterIUS2IUS2)
itkNormalizeToConstantImageFilterIUS2IUS2_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_swigregister
itkNormalizeToConstantImageFilterIUS2IUS2_swigregister(itkNormalizeToConstantImageFilterIUS2IUS2)

def itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__() -> "itkNormalizeToConstantImageFilterIUS2IUS2_Pointer":
    """itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__() -> itkNormalizeToConstantImageFilterIUS2IUS2_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__()

def itkNormalizeToConstantImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUS2IUS2 *":
    """itkNormalizeToConstantImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUS2IUS2"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_cast(obj)

class itkNormalizeToConstantImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter

    C++ includes: itkNormalizeToConstantImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNormalizeToConstantImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkNormalizeToConstantImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNormalizeToConstantImageFilterIUS3IUS3_Pointer":
        """Clone(itkNormalizeToConstantImageFilterIUS3IUS3 self) -> itkNormalizeToConstantImageFilterIUS3IUS3_Pointer"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_Clone(self)


    def SetConstant(self, _arg: 'double const') -> "void":
        """
        SetConstant(itkNormalizeToConstantImageFilterIUS3IUS3 self, double const _arg)

        Set/get the
        normalization constant. 
        """
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_SetConstant(self, _arg)


    def GetConstant(self) -> "double":
        """GetConstant(itkNormalizeToConstantImageFilterIUS3IUS3 self) -> double"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_GetConstant(self)

    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUS3IUS3"""
        return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS3IUS3

        Create a new object of the class itkNormalizeToConstantImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNormalizeToConstantImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNormalizeToConstantImageFilterIUS3IUS3.Clone = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_Clone, None, itkNormalizeToConstantImageFilterIUS3IUS3)
itkNormalizeToConstantImageFilterIUS3IUS3.SetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_SetConstant, None, itkNormalizeToConstantImageFilterIUS3IUS3)
itkNormalizeToConstantImageFilterIUS3IUS3.GetConstant = new_instancemethod(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_GetConstant, None, itkNormalizeToConstantImageFilterIUS3IUS3)
itkNormalizeToConstantImageFilterIUS3IUS3_swigregister = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_swigregister
itkNormalizeToConstantImageFilterIUS3IUS3_swigregister(itkNormalizeToConstantImageFilterIUS3IUS3)

def itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__() -> "itkNormalizeToConstantImageFilterIUS3IUS3_Pointer":
    """itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__() -> itkNormalizeToConstantImageFilterIUS3IUS3_Pointer"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__()

def itkNormalizeToConstantImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkNormalizeToConstantImageFilterIUS3IUS3 *":
    """itkNormalizeToConstantImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkNormalizeToConstantImageFilterIUS3IUS3"""
    return _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def normalize_to_constant_image_filter(*args, **kwargs):
    """Procedural interface for NormalizeToConstantImageFilter"""
    import itk
    instance = itk.NormalizeToConstantImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def normalize_to_constant_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NormalizeToConstantImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NormalizeToConstantImageFilter.values()[0]
    else:
        filter_object = itk.NormalizeToConstantImageFilter

    normalize_to_constant_image_filter.__doc__ = filter_object.__doc__
    normalize_to_constant_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    normalize_to_constant_image_filter.__doc__ += "Available Keyword Arguments:\n"
    normalize_to_constant_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



