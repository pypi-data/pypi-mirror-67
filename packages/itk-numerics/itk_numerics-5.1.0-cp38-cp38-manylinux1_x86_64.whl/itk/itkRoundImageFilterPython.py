# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRoundImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRoundImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRoundImageFilterPython
            return _itkRoundImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRoundImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRoundImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRoundImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkUnaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkRoundImageFilterID3ID3_New():
  return itkRoundImageFilterID3ID3.New()


def itkRoundImageFilterID2ID2_New():
  return itkRoundImageFilterID2ID2.New()


def itkRoundImageFilterIF3IF3_New():
  return itkRoundImageFilterIF3IF3.New()


def itkRoundImageFilterIF2IF2_New():
  return itkRoundImageFilterIF2IF2.New()

class itkRoundImageFilterID2ID2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    """


    Rounds the value of each pixel.

    The computations are performed using itk::Math::Round(x).

    C++ includes: itkRoundImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRoundImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkRoundImageFilterID2ID2_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRoundImageFilterID2ID2_Pointer":
        """Clone(itkRoundImageFilterID2ID2 self) -> itkRoundImageFilterID2ID2_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID2ID2_Clone(self)

    __swig_destroy__ = _itkRoundImageFilterPython.delete_itkRoundImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkRoundImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkRoundImageFilterID2ID2"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRoundImageFilterID2ID2

        Create a new object of the class itkRoundImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRoundImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRoundImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRoundImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRoundImageFilterID2ID2.Clone = new_instancemethod(_itkRoundImageFilterPython.itkRoundImageFilterID2ID2_Clone, None, itkRoundImageFilterID2ID2)
itkRoundImageFilterID2ID2_swigregister = _itkRoundImageFilterPython.itkRoundImageFilterID2ID2_swigregister
itkRoundImageFilterID2ID2_swigregister(itkRoundImageFilterID2ID2)

def itkRoundImageFilterID2ID2___New_orig__() -> "itkRoundImageFilterID2ID2_Pointer":
    """itkRoundImageFilterID2ID2___New_orig__() -> itkRoundImageFilterID2ID2_Pointer"""
    return _itkRoundImageFilterPython.itkRoundImageFilterID2ID2___New_orig__()

def itkRoundImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkRoundImageFilterID2ID2 *":
    """itkRoundImageFilterID2ID2_cast(itkLightObject obj) -> itkRoundImageFilterID2ID2"""
    return _itkRoundImageFilterPython.itkRoundImageFilterID2ID2_cast(obj)

class itkRoundImageFilterID3ID3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    """


    Rounds the value of each pixel.

    The computations are performed using itk::Math::Round(x).

    C++ includes: itkRoundImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRoundImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkRoundImageFilterID3ID3_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRoundImageFilterID3ID3_Pointer":
        """Clone(itkRoundImageFilterID3ID3 self) -> itkRoundImageFilterID3ID3_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID3ID3_Clone(self)

    __swig_destroy__ = _itkRoundImageFilterPython.delete_itkRoundImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkRoundImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkRoundImageFilterID3ID3"""
        return _itkRoundImageFilterPython.itkRoundImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRoundImageFilterID3ID3

        Create a new object of the class itkRoundImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRoundImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRoundImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRoundImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRoundImageFilterID3ID3.Clone = new_instancemethod(_itkRoundImageFilterPython.itkRoundImageFilterID3ID3_Clone, None, itkRoundImageFilterID3ID3)
itkRoundImageFilterID3ID3_swigregister = _itkRoundImageFilterPython.itkRoundImageFilterID3ID3_swigregister
itkRoundImageFilterID3ID3_swigregister(itkRoundImageFilterID3ID3)

def itkRoundImageFilterID3ID3___New_orig__() -> "itkRoundImageFilterID3ID3_Pointer":
    """itkRoundImageFilterID3ID3___New_orig__() -> itkRoundImageFilterID3ID3_Pointer"""
    return _itkRoundImageFilterPython.itkRoundImageFilterID3ID3___New_orig__()

def itkRoundImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkRoundImageFilterID3ID3 *":
    """itkRoundImageFilterID3ID3_cast(itkLightObject obj) -> itkRoundImageFilterID3ID3"""
    return _itkRoundImageFilterPython.itkRoundImageFilterID3ID3_cast(obj)

class itkRoundImageFilterIF2IF2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    """


    Rounds the value of each pixel.

    The computations are performed using itk::Math::Round(x).

    C++ includes: itkRoundImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRoundImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkRoundImageFilterIF2IF2_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRoundImageFilterIF2IF2_Pointer":
        """Clone(itkRoundImageFilterIF2IF2 self) -> itkRoundImageFilterIF2IF2_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2_Clone(self)

    __swig_destroy__ = _itkRoundImageFilterPython.delete_itkRoundImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkRoundImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkRoundImageFilterIF2IF2"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRoundImageFilterIF2IF2

        Create a new object of the class itkRoundImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRoundImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRoundImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRoundImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRoundImageFilterIF2IF2.Clone = new_instancemethod(_itkRoundImageFilterPython.itkRoundImageFilterIF2IF2_Clone, None, itkRoundImageFilterIF2IF2)
itkRoundImageFilterIF2IF2_swigregister = _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2_swigregister
itkRoundImageFilterIF2IF2_swigregister(itkRoundImageFilterIF2IF2)

def itkRoundImageFilterIF2IF2___New_orig__() -> "itkRoundImageFilterIF2IF2_Pointer":
    """itkRoundImageFilterIF2IF2___New_orig__() -> itkRoundImageFilterIF2IF2_Pointer"""
    return _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2___New_orig__()

def itkRoundImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkRoundImageFilterIF2IF2 *":
    """itkRoundImageFilterIF2IF2_cast(itkLightObject obj) -> itkRoundImageFilterIF2IF2"""
    return _itkRoundImageFilterPython.itkRoundImageFilterIF2IF2_cast(obj)

class itkRoundImageFilterIF3IF3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    """


    Rounds the value of each pixel.

    The computations are performed using itk::Math::Round(x).

    C++ includes: itkRoundImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRoundImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkRoundImageFilterIF3IF3_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRoundImageFilterIF3IF3_Pointer":
        """Clone(itkRoundImageFilterIF3IF3 self) -> itkRoundImageFilterIF3IF3_Pointer"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3_Clone(self)

    __swig_destroy__ = _itkRoundImageFilterPython.delete_itkRoundImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkRoundImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkRoundImageFilterIF3IF3"""
        return _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRoundImageFilterIF3IF3

        Create a new object of the class itkRoundImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRoundImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRoundImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRoundImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRoundImageFilterIF3IF3.Clone = new_instancemethod(_itkRoundImageFilterPython.itkRoundImageFilterIF3IF3_Clone, None, itkRoundImageFilterIF3IF3)
itkRoundImageFilterIF3IF3_swigregister = _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3_swigregister
itkRoundImageFilterIF3IF3_swigregister(itkRoundImageFilterIF3IF3)

def itkRoundImageFilterIF3IF3___New_orig__() -> "itkRoundImageFilterIF3IF3_Pointer":
    """itkRoundImageFilterIF3IF3___New_orig__() -> itkRoundImageFilterIF3IF3_Pointer"""
    return _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3___New_orig__()

def itkRoundImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkRoundImageFilterIF3IF3 *":
    """itkRoundImageFilterIF3IF3_cast(itkLightObject obj) -> itkRoundImageFilterIF3IF3"""
    return _itkRoundImageFilterPython.itkRoundImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def round_image_filter(*args, **kwargs):
    """Procedural interface for RoundImageFilter"""
    import itk
    instance = itk.RoundImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def round_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RoundImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RoundImageFilter.values()[0]
    else:
        filter_object = itk.RoundImageFilter

    round_image_filter.__doc__ = filter_object.__doc__
    round_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    round_image_filter.__doc__ += "Available Keyword Arguments:\n"
    round_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



