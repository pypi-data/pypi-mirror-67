# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSmoothingRecursiveGaussianImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSmoothingRecursiveGaussianImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSmoothingRecursiveGaussianImageFilterPython
            return _itkSmoothingRecursiveGaussianImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSmoothingRecursiveGaussianImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSmoothingRecursiveGaussianImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSmoothingRecursiveGaussianImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython

def itkSmoothingRecursiveGaussianImageFilterID3ID3_New():
  return itkSmoothingRecursiveGaussianImageFilterID3ID3.New()


def itkSmoothingRecursiveGaussianImageFilterID2ID2_New():
  return itkSmoothingRecursiveGaussianImageFilterID2ID2.New()


def itkSmoothingRecursiveGaussianImageFilterIF3IF3_New():
  return itkSmoothingRecursiveGaussianImageFilterIF3IF3.New()


def itkSmoothingRecursiveGaussianImageFilterIF2IF2_New():
  return itkSmoothingRecursiveGaussianImageFilterIF2IF2.New()


def itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_New():
  return itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New()


def itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_New():
  return itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New()


def itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_New():
  return itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New()


def itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_New():
  return itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New()


def itkSmoothingRecursiveGaussianImageFilterISS3ISS3_New():
  return itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New()


def itkSmoothingRecursiveGaussianImageFilterISS2ISS2_New():
  return itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New()

class itkRecursiveGaussianImageFilterEnums(object):
    """Proxy of C++ itkRecursiveGaussianImageFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GaussianOrder_ZeroOrder = _itkSmoothingRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_ZeroOrder
    GaussianOrder_FirstOrder = _itkSmoothingRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_FirstOrder
    GaussianOrder_SecondOrder = _itkSmoothingRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_SecondOrder

    def __init__(self, *args):
        """
        __init__(itkRecursiveGaussianImageFilterEnums self) -> itkRecursiveGaussianImageFilterEnums
        __init__(itkRecursiveGaussianImageFilterEnums self, itkRecursiveGaussianImageFilterEnums arg0) -> itkRecursiveGaussianImageFilterEnums
        """
        _itkSmoothingRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swiginit(self, _itkSmoothingRecursiveGaussianImageFilterPython.new_itkRecursiveGaussianImageFilterEnums(*args))
    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterEnums
itkRecursiveGaussianImageFilterEnums_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swigregister
itkRecursiveGaussianImageFilterEnums_swigregister(itkRecursiveGaussianImageFilterEnums)

class itkSmoothingRecursiveGaussianImageFilterID2ID2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterID2ID2 self) -> itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterID2ID2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterID2ID2 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterID2ID2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterID2ID2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterID2ID2 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterID2ID2 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterID2ID2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterID2ID2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterID2ID2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterID2ID2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterID2ID2.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_Clone, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterID2ID2)
itkSmoothingRecursiveGaussianImageFilterID2ID2_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_swigregister
itkSmoothingRecursiveGaussianImageFilterID2ID2_swigregister(itkSmoothingRecursiveGaussianImageFilterID2ID2)

def itkSmoothingRecursiveGaussianImageFilterID2ID2___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterID2ID2___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID2ID2_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterID2ID2 *":
    """itkSmoothingRecursiveGaussianImageFilterID2ID2_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterID2ID2"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID2ID2_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterID3ID3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterID3ID3 self) -> itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterID3ID3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterID3ID3 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterID3ID3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterID3ID3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterID3ID3 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterID3ID3 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterID3ID3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterID3ID3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterID3ID3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterID3ID3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterID3ID3.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_Clone, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterID3ID3)
itkSmoothingRecursiveGaussianImageFilterID3ID3_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_swigregister
itkSmoothingRecursiveGaussianImageFilterID3ID3_swigregister(itkSmoothingRecursiveGaussianImageFilterID3ID3)

def itkSmoothingRecursiveGaussianImageFilterID3ID3___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterID3ID3___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterID3ID3_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterID3ID3 *":
    """itkSmoothingRecursiveGaussianImageFilterID3ID3_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterID3ID3"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterID3ID3_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIF2IF2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self) -> itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIF2IF2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIF2IF2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIF2IF2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIF2IF2.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_Clone, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIF2IF2)
itkSmoothingRecursiveGaussianImageFilterIF2IF2_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_swigregister
itkSmoothingRecursiveGaussianImageFilterIF2IF2_swigregister(itkSmoothingRecursiveGaussianImageFilterIF2IF2)

def itkSmoothingRecursiveGaussianImageFilterIF2IF2___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIF2IF2___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF2IF2_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIF2IF2 *":
    """itkSmoothingRecursiveGaussianImageFilterIF2IF2_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIF2IF2"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF2IF2_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIF3IF3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self) -> itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIF3IF3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIF3IF3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIF3IF3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIF3IF3.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_Clone, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIF3IF3)
itkSmoothingRecursiveGaussianImageFilterIF3IF3_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_swigregister
itkSmoothingRecursiveGaussianImageFilterIF3IF3_swigregister(itkSmoothingRecursiveGaussianImageFilterIF3IF3)

def itkSmoothingRecursiveGaussianImageFilterIF3IF3___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIF3IF3___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIF3IF3_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIF3IF3 *":
    """itkSmoothingRecursiveGaussianImageFilterIF3IF3_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIF3IF3"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIF3IF3_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterISS2ISS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self) -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterISS2ISS2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterISS2ISS2.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Clone, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterISS2ISS2)
itkSmoothingRecursiveGaussianImageFilterISS2ISS2_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_swigregister
itkSmoothingRecursiveGaussianImageFilterISS2ISS2_swigregister(itkSmoothingRecursiveGaussianImageFilterISS2ISS2)

def itkSmoothingRecursiveGaussianImageFilterISS2ISS2___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterISS2ISS2___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterISS2ISS2 *":
    """itkSmoothingRecursiveGaussianImageFilterISS2ISS2_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterISS2ISS2"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS2ISS2_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterISS3ISS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self) -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterISS3ISS3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterISS3ISS3.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Clone, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterISS3ISS3)
itkSmoothingRecursiveGaussianImageFilterISS3ISS3_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_swigregister
itkSmoothingRecursiveGaussianImageFilterISS3ISS3_swigregister(itkSmoothingRecursiveGaussianImageFilterISS3ISS3)

def itkSmoothingRecursiveGaussianImageFilterISS3ISS3___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterISS3ISS3___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterISS3ISS3 *":
    """itkSmoothingRecursiveGaussianImageFilterISS3ISS3_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterISS3ISS3"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterISS3ISS3_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIUC2IUC2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self) -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Clone, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_swigregister
itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_swigregister(itkSmoothingRecursiveGaussianImageFilterIUC2IUC2)

def itkSmoothingRecursiveGaussianImageFilterIUC2IUC2___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIUC2IUC2___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUC2IUC2 *":
    """itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUC2IUC2"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIUC3IUC3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self) -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Clone, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_swigregister
itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_swigregister(itkSmoothingRecursiveGaussianImageFilterIUC3IUC3)

def itkSmoothingRecursiveGaussianImageFilterIUC3IUC3___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIUC3IUC3___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUC3IUC3 *":
    """itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUC3IUC3"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIUS2IUS2(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self) -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Clone, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_swigregister
itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_swigregister(itkSmoothingRecursiveGaussianImageFilterIUS2IUS2)

def itkSmoothingRecursiveGaussianImageFilterIUS2IUS2___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIUS2IUS2___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUS2IUS2 *":
    """itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUS2IUS2"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

class itkSmoothingRecursiveGaussianImageFilterIUS3IUS3(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """


    Computes the smoothing of an image by convolution with the Gaussian
    kernels implemented as IIR filters.

    This filter is implemented using the recursive gaussian filters. For
    multi-component images, the filter works on each component
    independently.

    For this filter to be able to run in-place the input and output image
    types need to be the same and/or the same type as the RealImageType.

    C++ includes: itkSmoothingRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer":
        """Clone(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self) -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Clone(self)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self, double sigma)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigma(self)


    def SetNormalizeAcrossScale(self, normalizeInScaleSpace: 'bool') -> "void":
        """
        SetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self, bool normalizeInScaleSpace)

        Set/Get the
        flag for normalizing the Gaussian over scale-space. This method does
        not effect the output of this filter.

        See:   RecursiveGaussianImageFilter::SetNormalizeAcrossScale 
        """
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale(self, normalizeInScaleSpace)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self) -> bool"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale(self)


    def NormalizeAcrossScaleOn(self) -> "void":
        """NormalizeAcrossScaleOn(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOn(self)


    def NormalizeAcrossScaleOff(self) -> "void":
        """NormalizeAcrossScaleOff(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 self)"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOff(self)

    __swig_destroy__ = _itkSmoothingRecursiveGaussianImageFilterPython.delete_itkSmoothingRecursiveGaussianImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3"""
        return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3

        Create a new object of the class itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.Clone = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Clone, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.SetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.SetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.GetSigmaArray = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigmaArray, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.GetSigma = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetSigma, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.SetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.GetNormalizeAcrossScale = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.NormalizeAcrossScaleOn = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOn, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3.NormalizeAcrossScaleOff = new_instancemethod(_itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_NormalizeAcrossScaleOff, None, itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_swigregister = _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_swigregister
itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_swigregister(itkSmoothingRecursiveGaussianImageFilterIUS3IUS3)

def itkSmoothingRecursiveGaussianImageFilterIUS3IUS3___New_orig__() -> "itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer":
    """itkSmoothingRecursiveGaussianImageFilterIUS3IUS3___New_orig__() -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

def itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkSmoothingRecursiveGaussianImageFilterIUS3IUS3 *":
    """itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkSmoothingRecursiveGaussianImageFilterIUS3IUS3"""
    return _itkSmoothingRecursiveGaussianImageFilterPython.itkSmoothingRecursiveGaussianImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def smoothing_recursive_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for SmoothingRecursiveGaussianImageFilter"""
    import itk
    instance = itk.SmoothingRecursiveGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def smoothing_recursive_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SmoothingRecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SmoothingRecursiveGaussianImageFilter.values()[0]
    else:
        filter_object = itk.SmoothingRecursiveGaussianImageFilter

    smoothing_recursive_gaussian_image_filter.__doc__ = filter_object.__doc__
    smoothing_recursive_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    smoothing_recursive_gaussian_image_filter.__doc__ += "Available Keyword Arguments:\n"
    smoothing_recursive_gaussian_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



