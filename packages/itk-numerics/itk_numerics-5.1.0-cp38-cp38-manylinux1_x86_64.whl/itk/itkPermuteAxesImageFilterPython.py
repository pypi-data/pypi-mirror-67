# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPermuteAxesImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPermuteAxesImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkPermuteAxesImageFilterPython
            return _itkPermuteAxesImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPermuteAxesImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPermuteAxesImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPermuteAxesImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkPermuteAxesImageFilterID3_New():
  return itkPermuteAxesImageFilterID3.New()


def itkPermuteAxesImageFilterID2_New():
  return itkPermuteAxesImageFilterID2.New()


def itkPermuteAxesImageFilterIF3_New():
  return itkPermuteAxesImageFilterIF3.New()


def itkPermuteAxesImageFilterIF2_New():
  return itkPermuteAxesImageFilterIF2.New()


def itkPermuteAxesImageFilterIUS3_New():
  return itkPermuteAxesImageFilterIUS3.New()


def itkPermuteAxesImageFilterIUS2_New():
  return itkPermuteAxesImageFilterIUS2.New()


def itkPermuteAxesImageFilterIUC3_New():
  return itkPermuteAxesImageFilterIUC3.New()


def itkPermuteAxesImageFilterIUC2_New():
  return itkPermuteAxesImageFilterIUC2.New()


def itkPermuteAxesImageFilterISS3_New():
  return itkPermuteAxesImageFilterISS3.New()


def itkPermuteAxesImageFilterISS2_New():
  return itkPermuteAxesImageFilterISS2.New()

class itkPermuteAxesImageFilterID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterID2_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterID2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterID2_Pointer":
        """Clone(itkPermuteAxesImageFilterID2 self) -> itkPermuteAxesImageFilterID2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI2') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterID2 self, itkFixedArrayUI2 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetOrder(itkPermuteAxesImageFilterID2 self) -> itkFixedArrayUI2

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterID2 self) -> itkFixedArrayUI2

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID2

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterID2 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterID2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID2

        Create a new object of the class itkPermuteAxesImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterID2.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_Clone, None, itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_SetOrder, None, itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetOrder, None, itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetInverseOrder, None, itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_swigregister
itkPermuteAxesImageFilterID2_swigregister(itkPermuteAxesImageFilterID2)

def itkPermuteAxesImageFilterID2___New_orig__() -> "itkPermuteAxesImageFilterID2_Pointer":
    """itkPermuteAxesImageFilterID2___New_orig__() -> itkPermuteAxesImageFilterID2_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__()

def itkPermuteAxesImageFilterID2_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterID2 *":
    """itkPermuteAxesImageFilterID2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterID2"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast(obj)

class itkPermuteAxesImageFilterID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterID3_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterID3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterID3_Pointer":
        """Clone(itkPermuteAxesImageFilterID3 self) -> itkPermuteAxesImageFilterID3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI3') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterID3 self, itkFixedArrayUI3 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetOrder(itkPermuteAxesImageFilterID3 self) -> itkFixedArrayUI3

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterID3 self) -> itkFixedArrayUI3

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID3

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterID3 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterID3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID3

        Create a new object of the class itkPermuteAxesImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterID3.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_Clone, None, itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_SetOrder, None, itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetOrder, None, itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetInverseOrder, None, itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_swigregister
itkPermuteAxesImageFilterID3_swigregister(itkPermuteAxesImageFilterID3)

def itkPermuteAxesImageFilterID3___New_orig__() -> "itkPermuteAxesImageFilterID3_Pointer":
    """itkPermuteAxesImageFilterID3___New_orig__() -> itkPermuteAxesImageFilterID3_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__()

def itkPermuteAxesImageFilterID3_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterID3 *":
    """itkPermuteAxesImageFilterID3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterID3"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast(obj)

class itkPermuteAxesImageFilterIF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIF2_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIF2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIF2_Pointer":
        """Clone(itkPermuteAxesImageFilterIF2 self) -> itkPermuteAxesImageFilterIF2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI2') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIF2 self, itkFixedArrayUI2 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIF2 self) -> itkFixedArrayUI2

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIF2 self) -> itkFixedArrayUI2

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF2

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIF2 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF2

        Create a new object of the class itkPermuteAxesImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIF2.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_Clone, None, itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_SetOrder, None, itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetOrder, None, itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetInverseOrder, None, itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_swigregister
itkPermuteAxesImageFilterIF2_swigregister(itkPermuteAxesImageFilterIF2)

def itkPermuteAxesImageFilterIF2___New_orig__() -> "itkPermuteAxesImageFilterIF2_Pointer":
    """itkPermuteAxesImageFilterIF2___New_orig__() -> itkPermuteAxesImageFilterIF2_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__()

def itkPermuteAxesImageFilterIF2_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIF2 *":
    """itkPermuteAxesImageFilterIF2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF2"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast(obj)

class itkPermuteAxesImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIF3_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIF3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIF3_Pointer":
        """Clone(itkPermuteAxesImageFilterIF3 self) -> itkPermuteAxesImageFilterIF3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI3') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIF3 self, itkFixedArrayUI3 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIF3 self) -> itkFixedArrayUI3

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIF3 self) -> itkFixedArrayUI3

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF3

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIF3 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF3

        Create a new object of the class itkPermuteAxesImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIF3.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_Clone, None, itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_SetOrder, None, itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetOrder, None, itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetInverseOrder, None, itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_swigregister
itkPermuteAxesImageFilterIF3_swigregister(itkPermuteAxesImageFilterIF3)

def itkPermuteAxesImageFilterIF3___New_orig__() -> "itkPermuteAxesImageFilterIF3_Pointer":
    """itkPermuteAxesImageFilterIF3___New_orig__() -> itkPermuteAxesImageFilterIF3_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__()

def itkPermuteAxesImageFilterIF3_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIF3 *":
    """itkPermuteAxesImageFilterIF3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF3"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast(obj)

class itkPermuteAxesImageFilterISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterISS2_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterISS2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterISS2_Pointer":
        """Clone(itkPermuteAxesImageFilterISS2 self) -> itkPermuteAxesImageFilterISS2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI2') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterISS2 self, itkFixedArrayUI2 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetOrder(itkPermuteAxesImageFilterISS2 self) -> itkFixedArrayUI2

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterISS2 self) -> itkFixedArrayUI2

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterISS2

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterISS2 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterISS2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterISS2

        Create a new object of the class itkPermuteAxesImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterISS2.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_Clone, None, itkPermuteAxesImageFilterISS2)
itkPermuteAxesImageFilterISS2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_SetOrder, None, itkPermuteAxesImageFilterISS2)
itkPermuteAxesImageFilterISS2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetOrder, None, itkPermuteAxesImageFilterISS2)
itkPermuteAxesImageFilterISS2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_GetInverseOrder, None, itkPermuteAxesImageFilterISS2)
itkPermuteAxesImageFilterISS2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_swigregister
itkPermuteAxesImageFilterISS2_swigregister(itkPermuteAxesImageFilterISS2)

def itkPermuteAxesImageFilterISS2___New_orig__() -> "itkPermuteAxesImageFilterISS2_Pointer":
    """itkPermuteAxesImageFilterISS2___New_orig__() -> itkPermuteAxesImageFilterISS2_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2___New_orig__()

def itkPermuteAxesImageFilterISS2_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterISS2 *":
    """itkPermuteAxesImageFilterISS2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterISS2"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS2_cast(obj)

class itkPermuteAxesImageFilterISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterISS3_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterISS3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterISS3_Pointer":
        """Clone(itkPermuteAxesImageFilterISS3 self) -> itkPermuteAxesImageFilterISS3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI3') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterISS3 self, itkFixedArrayUI3 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetOrder(itkPermuteAxesImageFilterISS3 self) -> itkFixedArrayUI3

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterISS3 self) -> itkFixedArrayUI3

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterISS3

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterISS3 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterISS3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterISS3

        Create a new object of the class itkPermuteAxesImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterISS3.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_Clone, None, itkPermuteAxesImageFilterISS3)
itkPermuteAxesImageFilterISS3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_SetOrder, None, itkPermuteAxesImageFilterISS3)
itkPermuteAxesImageFilterISS3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetOrder, None, itkPermuteAxesImageFilterISS3)
itkPermuteAxesImageFilterISS3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_GetInverseOrder, None, itkPermuteAxesImageFilterISS3)
itkPermuteAxesImageFilterISS3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_swigregister
itkPermuteAxesImageFilterISS3_swigregister(itkPermuteAxesImageFilterISS3)

def itkPermuteAxesImageFilterISS3___New_orig__() -> "itkPermuteAxesImageFilterISS3_Pointer":
    """itkPermuteAxesImageFilterISS3___New_orig__() -> itkPermuteAxesImageFilterISS3_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3___New_orig__()

def itkPermuteAxesImageFilterISS3_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterISS3 *":
    """itkPermuteAxesImageFilterISS3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterISS3"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterISS3_cast(obj)

class itkPermuteAxesImageFilterIUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIUC2_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIUC2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIUC2_Pointer":
        """Clone(itkPermuteAxesImageFilterIUC2 self) -> itkPermuteAxesImageFilterIUC2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI2') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIUC2 self, itkFixedArrayUI2 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIUC2 self) -> itkFixedArrayUI2

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIUC2 self) -> itkFixedArrayUI2

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC2

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUC2 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC2

        Create a new object of the class itkPermuteAxesImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUC2.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_Clone, None, itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_SetOrder, None, itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetOrder, None, itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetInverseOrder, None, itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_swigregister
itkPermuteAxesImageFilterIUC2_swigregister(itkPermuteAxesImageFilterIUC2)

def itkPermuteAxesImageFilterIUC2___New_orig__() -> "itkPermuteAxesImageFilterIUC2_Pointer":
    """itkPermuteAxesImageFilterIUC2___New_orig__() -> itkPermuteAxesImageFilterIUC2_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__()

def itkPermuteAxesImageFilterIUC2_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUC2 *":
    """itkPermuteAxesImageFilterIUC2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC2"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast(obj)

class itkPermuteAxesImageFilterIUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIUC3_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIUC3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIUC3_Pointer":
        """Clone(itkPermuteAxesImageFilterIUC3 self) -> itkPermuteAxesImageFilterIUC3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI3') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIUC3 self, itkFixedArrayUI3 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIUC3 self) -> itkFixedArrayUI3

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIUC3 self) -> itkFixedArrayUI3

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC3

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUC3 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC3

        Create a new object of the class itkPermuteAxesImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUC3.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_Clone, None, itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_SetOrder, None, itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetOrder, None, itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetInverseOrder, None, itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_swigregister
itkPermuteAxesImageFilterIUC3_swigregister(itkPermuteAxesImageFilterIUC3)

def itkPermuteAxesImageFilterIUC3___New_orig__() -> "itkPermuteAxesImageFilterIUC3_Pointer":
    """itkPermuteAxesImageFilterIUC3___New_orig__() -> itkPermuteAxesImageFilterIUC3_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__()

def itkPermuteAxesImageFilterIUC3_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUC3 *":
    """itkPermuteAxesImageFilterIUC3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC3"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast(obj)

class itkPermuteAxesImageFilterIUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIUS2_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIUS2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIUS2_Pointer":
        """Clone(itkPermuteAxesImageFilterIUS2 self) -> itkPermuteAxesImageFilterIUS2_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI2') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIUS2 self, itkFixedArrayUI2 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIUS2 self) -> itkFixedArrayUI2

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI2 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIUS2 self) -> itkFixedArrayUI2

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS2

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUS2 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS2

        Create a new object of the class itkPermuteAxesImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUS2.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_Clone, None, itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_SetOrder, None, itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetOrder, None, itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetInverseOrder, None, itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_swigregister
itkPermuteAxesImageFilterIUS2_swigregister(itkPermuteAxesImageFilterIUS2)

def itkPermuteAxesImageFilterIUS2___New_orig__() -> "itkPermuteAxesImageFilterIUS2_Pointer":
    """itkPermuteAxesImageFilterIUS2___New_orig__() -> itkPermuteAxesImageFilterIUS2_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__()

def itkPermuteAxesImageFilterIUS2_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUS2 *":
    """itkPermuteAxesImageFilterIUS2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS2"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast(obj)

class itkPermuteAxesImageFilterIUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Permutes the image axes according to a user specified order.

    PermuateAxesImageFilter permutes the image axes according to a user
    specified order. The permutation order is set via method SetOrder(
    order ) where the input is an array of ImageDimension number of
    unsigned int. The elements of the array must be a rearrangment of the
    numbers from 0 to ImageDimension - 1.

    The i-th axis of the output image corresponds with the order[i]-th
    axis of the input image.

    The output meta image information (LargestPossibleRegion, spacing,
    origin) is computed by permuting the corresponding input meta
    information.

    C++ includes: itkPermuteAxesImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPermuteAxesImageFilterIUS3_Pointer":
        """__New_orig__() -> itkPermuteAxesImageFilterIUS3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPermuteAxesImageFilterIUS3_Pointer":
        """Clone(itkPermuteAxesImageFilterIUS3 self) -> itkPermuteAxesImageFilterIUS3_Pointer"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_Clone(self)


    def SetOrder(self, order: 'itkFixedArrayUI3') -> "void":
        """
        SetOrder(itkPermuteAxesImageFilterIUS3 self, itkFixedArrayUI3 order)

        Set the permutation order.
        The elements of order must be a rearrangement of the numbers from 0 to
        ImageDimension - 1. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_SetOrder(self, order)


    def GetOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetOrder(itkPermuteAxesImageFilterIUS3 self) -> itkFixedArrayUI3

        Get the permutation order.

        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetOrder(self)


    def GetInverseOrder(self) -> "itkFixedArrayUI3 const &":
        """
        GetInverseOrder(itkPermuteAxesImageFilterIUS3 self) -> itkFixedArrayUI3

        Get the inverse
        permutation order. 
        """
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetInverseOrder(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS3

    def cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUS3 *":
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS3

        Create a new object of the class itkPermuteAxesImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPermuteAxesImageFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPermuteAxesImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUS3.Clone = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_Clone, None, itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_SetOrder, None, itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetOrder, None, itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetInverseOrder, None, itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_swigregister
itkPermuteAxesImageFilterIUS3_swigregister(itkPermuteAxesImageFilterIUS3)

def itkPermuteAxesImageFilterIUS3___New_orig__() -> "itkPermuteAxesImageFilterIUS3_Pointer":
    """itkPermuteAxesImageFilterIUS3___New_orig__() -> itkPermuteAxesImageFilterIUS3_Pointer"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__()

def itkPermuteAxesImageFilterIUS3_cast(obj: 'itkLightObject') -> "itkPermuteAxesImageFilterIUS3 *":
    """itkPermuteAxesImageFilterIUS3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS3"""
    return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def permute_axes_image_filter(*args, **kwargs):
    """Procedural interface for PermuteAxesImageFilter"""
    import itk
    instance = itk.PermuteAxesImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def permute_axes_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PermuteAxesImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.PermuteAxesImageFilter.values()[0]
    else:
        filter_object = itk.PermuteAxesImageFilter

    permute_axes_image_filter.__doc__ = filter_object.__doc__
    permute_axes_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    permute_axes_image_filter.__doc__ += "Available Keyword Arguments:\n"
    permute_axes_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



