# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCosImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCosImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCosImageFilterPython
            return _itkCosImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCosImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCosImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCosImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkUnaryGeneratorImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import itkInPlaceImageFilterBPython

def itkCosImageFilterID3ID3_New():
  return itkCosImageFilterID3ID3.New()


def itkCosImageFilterID2ID2_New():
  return itkCosImageFilterID2ID2.New()


def itkCosImageFilterIF3IF3_New():
  return itkCosImageFilterIF3IF3.New()


def itkCosImageFilterIF2IF2_New():
  return itkCosImageFilterIF2IF2.New()

class itkCosImageFilterID2ID2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    """


    Computes the cosine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all of the pixels in the input image, and for
    each pixel does the following:

    cast the pixel value to double,

    apply the std::cos() function to the double value,

    cast the double value resulting from std::cos() to the pixel type of
    the output image,

    store the cast value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkCosImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCosImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkCosImageFilterID2ID2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCosImageFilterID2ID2_Pointer":
        """Clone(itkCosImageFilterID2ID2 self) -> itkCosImageFilterID2ID2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2_Clone(self)

    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterID2ID2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterID2ID2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkCosImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkCosImageFilterID2ID2"""
        return _itkCosImageFilterPython.itkCosImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterID2ID2

        Create a new object of the class itkCosImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCosImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCosImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCosImageFilterID2ID2.Clone = new_instancemethod(_itkCosImageFilterPython.itkCosImageFilterID2ID2_Clone, None, itkCosImageFilterID2ID2)
itkCosImageFilterID2ID2_swigregister = _itkCosImageFilterPython.itkCosImageFilterID2ID2_swigregister
itkCosImageFilterID2ID2_swigregister(itkCosImageFilterID2ID2)

def itkCosImageFilterID2ID2___New_orig__() -> "itkCosImageFilterID2ID2_Pointer":
    """itkCosImageFilterID2ID2___New_orig__() -> itkCosImageFilterID2ID2_Pointer"""
    return _itkCosImageFilterPython.itkCosImageFilterID2ID2___New_orig__()

def itkCosImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkCosImageFilterID2ID2 *":
    """itkCosImageFilterID2ID2_cast(itkLightObject obj) -> itkCosImageFilterID2ID2"""
    return _itkCosImageFilterPython.itkCosImageFilterID2ID2_cast(obj)

class itkCosImageFilterID3ID3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    """


    Computes the cosine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all of the pixels in the input image, and for
    each pixel does the following:

    cast the pixel value to double,

    apply the std::cos() function to the double value,

    cast the double value resulting from std::cos() to the pixel type of
    the output image,

    store the cast value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkCosImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCosImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkCosImageFilterID3ID3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCosImageFilterID3ID3_Pointer":
        """Clone(itkCosImageFilterID3ID3 self) -> itkCosImageFilterID3ID3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3_Clone(self)

    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterID3ID3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterID3ID3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkCosImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkCosImageFilterID3ID3"""
        return _itkCosImageFilterPython.itkCosImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterID3ID3

        Create a new object of the class itkCosImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCosImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCosImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCosImageFilterID3ID3.Clone = new_instancemethod(_itkCosImageFilterPython.itkCosImageFilterID3ID3_Clone, None, itkCosImageFilterID3ID3)
itkCosImageFilterID3ID3_swigregister = _itkCosImageFilterPython.itkCosImageFilterID3ID3_swigregister
itkCosImageFilterID3ID3_swigregister(itkCosImageFilterID3ID3)

def itkCosImageFilterID3ID3___New_orig__() -> "itkCosImageFilterID3ID3_Pointer":
    """itkCosImageFilterID3ID3___New_orig__() -> itkCosImageFilterID3ID3_Pointer"""
    return _itkCosImageFilterPython.itkCosImageFilterID3ID3___New_orig__()

def itkCosImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkCosImageFilterID3ID3 *":
    """itkCosImageFilterID3ID3_cast(itkLightObject obj) -> itkCosImageFilterID3ID3"""
    return _itkCosImageFilterPython.itkCosImageFilterID3ID3_cast(obj)

class itkCosImageFilterIF2IF2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    """


    Computes the cosine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all of the pixels in the input image, and for
    each pixel does the following:

    cast the pixel value to double,

    apply the std::cos() function to the double value,

    cast the double value resulting from std::cos() to the pixel type of
    the output image,

    store the cast value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkCosImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCosImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkCosImageFilterIF2IF2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCosImageFilterIF2IF2_Pointer":
        """Clone(itkCosImageFilterIF2IF2 self) -> itkCosImageFilterIF2IF2_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2_Clone(self)

    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkCosImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkCosImageFilterIF2IF2"""
        return _itkCosImageFilterPython.itkCosImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterIF2IF2

        Create a new object of the class itkCosImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCosImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCosImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCosImageFilterIF2IF2.Clone = new_instancemethod(_itkCosImageFilterPython.itkCosImageFilterIF2IF2_Clone, None, itkCosImageFilterIF2IF2)
itkCosImageFilterIF2IF2_swigregister = _itkCosImageFilterPython.itkCosImageFilterIF2IF2_swigregister
itkCosImageFilterIF2IF2_swigregister(itkCosImageFilterIF2IF2)

def itkCosImageFilterIF2IF2___New_orig__() -> "itkCosImageFilterIF2IF2_Pointer":
    """itkCosImageFilterIF2IF2___New_orig__() -> itkCosImageFilterIF2IF2_Pointer"""
    return _itkCosImageFilterPython.itkCosImageFilterIF2IF2___New_orig__()

def itkCosImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkCosImageFilterIF2IF2 *":
    """itkCosImageFilterIF2IF2_cast(itkLightObject obj) -> itkCosImageFilterIF2IF2"""
    return _itkCosImageFilterPython.itkCosImageFilterIF2IF2_cast(obj)

class itkCosImageFilterIF3IF3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    """


    Computes the cosine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all of the pixels in the input image, and for
    each pixel does the following:

    cast the pixel value to double,

    apply the std::cos() function to the double value,

    cast the double value resulting from std::cos() to the pixel type of
    the output image,

    store the cast value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkCosImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCosImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkCosImageFilterIF3IF3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCosImageFilterIF3IF3_Pointer":
        """Clone(itkCosImageFilterIF3IF3 self) -> itkCosImageFilterIF3IF3_Pointer"""
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3_Clone(self)

    InputConvertibleToDoubleCheck = _itkCosImageFilterPython.itkCosImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkCosImageFilterPython.itkCosImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkCosImageFilterPython.delete_itkCosImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkCosImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkCosImageFilterIF3IF3"""
        return _itkCosImageFilterPython.itkCosImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCosImageFilterIF3IF3

        Create a new object of the class itkCosImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCosImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCosImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCosImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCosImageFilterIF3IF3.Clone = new_instancemethod(_itkCosImageFilterPython.itkCosImageFilterIF3IF3_Clone, None, itkCosImageFilterIF3IF3)
itkCosImageFilterIF3IF3_swigregister = _itkCosImageFilterPython.itkCosImageFilterIF3IF3_swigregister
itkCosImageFilterIF3IF3_swigregister(itkCosImageFilterIF3IF3)

def itkCosImageFilterIF3IF3___New_orig__() -> "itkCosImageFilterIF3IF3_Pointer":
    """itkCosImageFilterIF3IF3___New_orig__() -> itkCosImageFilterIF3IF3_Pointer"""
    return _itkCosImageFilterPython.itkCosImageFilterIF3IF3___New_orig__()

def itkCosImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkCosImageFilterIF3IF3 *":
    """itkCosImageFilterIF3IF3_cast(itkLightObject obj) -> itkCosImageFilterIF3IF3"""
    return _itkCosImageFilterPython.itkCosImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def cos_image_filter(*args, **kwargs):
    """Procedural interface for CosImageFilter"""
    import itk
    instance = itk.CosImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def cos_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CosImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CosImageFilter.values()[0]
    else:
        filter_object = itk.CosImageFilter

    cos_image_filter.__doc__ = filter_object.__doc__
    cos_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    cos_image_filter.__doc__ += "Available Keyword Arguments:\n"
    cos_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



