# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAdaptiveHistogramEqualizationImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAdaptiveHistogramEqualizationImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAdaptiveHistogramEqualizationImageFilterPython
            return _itkAdaptiveHistogramEqualizationImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAdaptiveHistogramEqualizationImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAdaptiveHistogramEqualizationImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAdaptiveHistogramEqualizationImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkNeighborhoodPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkBoxImageFilterPython
import itkImageToImageFilterAPython
import itkImagePython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkAdaptiveHistogramEqualizationImageFilterID3_New():
  return itkAdaptiveHistogramEqualizationImageFilterID3.New()


def itkAdaptiveHistogramEqualizationImageFilterID2_New():
  return itkAdaptiveHistogramEqualizationImageFilterID2.New()


def itkAdaptiveHistogramEqualizationImageFilterIF3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF3.New()


def itkAdaptiveHistogramEqualizationImageFilterIF2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF2.New()


def itkAdaptiveHistogramEqualizationImageFilterIUS3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS3.New()


def itkAdaptiveHistogramEqualizationImageFilterIUS2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS2.New()


def itkAdaptiveHistogramEqualizationImageFilterIUC3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC3.New()


def itkAdaptiveHistogramEqualizationImageFilterIUC2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC2.New()


def itkAdaptiveHistogramEqualizationImageFilterISS3_New():
  return itkAdaptiveHistogramEqualizationImageFilterISS3.New()


def itkAdaptiveHistogramEqualizationImageFilterISS2_New():
  return itkAdaptiveHistogramEqualizationImageFilterISS2.New()


def itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterBaseID3ID3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New()


def itkMovingHistogramImageFilterBaseID2ID2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New()


def itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New()


def itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New()


def itkKernelImageFilterID3ID3Neighborhood_New():
  return itkKernelImageFilterID3ID3Neighborhood.New()


def itkKernelImageFilterID2ID2Neighborhood_New():
  return itkKernelImageFilterID2ID2Neighborhood.New()


def itkKernelImageFilterIF3IF3Neighborhood_New():
  return itkKernelImageFilterIF3IF3Neighborhood.New()


def itkKernelImageFilterIF2IF2Neighborhood_New():
  return itkKernelImageFilterIF2IF2Neighborhood.New()


def itkKernelImageFilterIUS3IUS3Neighborhood_New():
  return itkKernelImageFilterIUS3IUS3Neighborhood.New()


def itkKernelImageFilterIUS2IUS2Neighborhood_New():
  return itkKernelImageFilterIUS2IUS2Neighborhood.New()


def itkKernelImageFilterIUC3IUC3Neighborhood_New():
  return itkKernelImageFilterIUC3IUC3Neighborhood.New()


def itkKernelImageFilterIUC2IUC2Neighborhood_New():
  return itkKernelImageFilterIUC2IUC2Neighborhood.New()


def itkKernelImageFilterISS3ISS3Neighborhood_New():
  return itkKernelImageFilterISS3ISS3Neighborhood.New()


def itkKernelImageFilterISS2ISS2Neighborhood_New():
  return itkKernelImageFilterISS2ISS2Neighborhood.New()

class itkAdaptiveEqualizationHistogramDD(object):
    """Proxy of C++ itkAdaptiveEqualizationHistogramDD class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPixel(self, p: 'double const &') -> "void":
        """AddPixel(itkAdaptiveEqualizationHistogramDD self, double const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddPixel(self, p)


    def RemovePixel(self, p: 'double const &') -> "void":
        """RemovePixel(itkAdaptiveEqualizationHistogramDD self, double const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemovePixel(self, p)


    def GetValue(self, pixel: 'double const &') -> "double":
        """GetValue(itkAdaptiveEqualizationHistogramDD self, double const & pixel) -> double"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_GetValue(self, pixel)


    def AddBoundary(self) -> "void":
        """AddBoundary(itkAdaptiveEqualizationHistogramDD self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddBoundary(self)


    def RemoveBoundary(self) -> "void":
        """RemoveBoundary(itkAdaptiveEqualizationHistogramDD self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemoveBoundary(self)


    def SetAlpha(self, alpha: 'float') -> "void":
        """SetAlpha(itkAdaptiveEqualizationHistogramDD self, float alpha)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetAlpha(self, alpha)


    def SetBeta(self, beta: 'float') -> "void":
        """SetBeta(itkAdaptiveEqualizationHistogramDD self, float beta)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetBeta(self, beta)


    def SetKernelSize(self, kernelSize: 'float') -> "void":
        """SetKernelSize(itkAdaptiveEqualizationHistogramDD self, float kernelSize)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetKernelSize(self, kernelSize)


    def SetMinimum(self, minimum: 'double') -> "void":
        """SetMinimum(itkAdaptiveEqualizationHistogramDD self, double minimum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMinimum(self, minimum)


    def SetMaximum(self, maximum: 'double') -> "void":
        """SetMaximum(itkAdaptiveEqualizationHistogramDD self, double maximum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMaximum(self, maximum)


    def __init__(self, *args):
        """
        __init__(itkAdaptiveEqualizationHistogramDD self) -> itkAdaptiveEqualizationHistogramDD
        __init__(itkAdaptiveEqualizationHistogramDD self, itkAdaptiveEqualizationHistogramDD arg0) -> itkAdaptiveEqualizationHistogramDD
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramDD(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramDD
itkAdaptiveEqualizationHistogramDD.AddPixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddPixel, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.RemovePixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemovePixel, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.GetValue = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_GetValue, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.AddBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddBoundary, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.RemoveBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemoveBoundary, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetAlpha, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetBeta, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.SetKernelSize = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetKernelSize, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.SetMinimum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMinimum, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD.SetMaximum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMaximum, None, itkAdaptiveEqualizationHistogramDD)
itkAdaptiveEqualizationHistogramDD_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_swigregister
itkAdaptiveEqualizationHistogramDD_swigregister(itkAdaptiveEqualizationHistogramDD)

class itkAdaptiveEqualizationHistogramFF(object):
    """Proxy of C++ itkAdaptiveEqualizationHistogramFF class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPixel(self, p: 'float const &') -> "void":
        """AddPixel(itkAdaptiveEqualizationHistogramFF self, float const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddPixel(self, p)


    def RemovePixel(self, p: 'float const &') -> "void":
        """RemovePixel(itkAdaptiveEqualizationHistogramFF self, float const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemovePixel(self, p)


    def GetValue(self, pixel: 'float const &') -> "float":
        """GetValue(itkAdaptiveEqualizationHistogramFF self, float const & pixel) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_GetValue(self, pixel)


    def AddBoundary(self) -> "void":
        """AddBoundary(itkAdaptiveEqualizationHistogramFF self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddBoundary(self)


    def RemoveBoundary(self) -> "void":
        """RemoveBoundary(itkAdaptiveEqualizationHistogramFF self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemoveBoundary(self)


    def SetAlpha(self, alpha: 'float') -> "void":
        """SetAlpha(itkAdaptiveEqualizationHistogramFF self, float alpha)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetAlpha(self, alpha)


    def SetBeta(self, beta: 'float') -> "void":
        """SetBeta(itkAdaptiveEqualizationHistogramFF self, float beta)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetBeta(self, beta)


    def SetKernelSize(self, kernelSize: 'float') -> "void":
        """SetKernelSize(itkAdaptiveEqualizationHistogramFF self, float kernelSize)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetKernelSize(self, kernelSize)


    def SetMinimum(self, minimum: 'float') -> "void":
        """SetMinimum(itkAdaptiveEqualizationHistogramFF self, float minimum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMinimum(self, minimum)


    def SetMaximum(self, maximum: 'float') -> "void":
        """SetMaximum(itkAdaptiveEqualizationHistogramFF self, float maximum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMaximum(self, maximum)


    def __init__(self, *args):
        """
        __init__(itkAdaptiveEqualizationHistogramFF self) -> itkAdaptiveEqualizationHistogramFF
        __init__(itkAdaptiveEqualizationHistogramFF self, itkAdaptiveEqualizationHistogramFF arg0) -> itkAdaptiveEqualizationHistogramFF
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramFF(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramFF
itkAdaptiveEqualizationHistogramFF.AddPixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddPixel, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.RemovePixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemovePixel, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.GetValue = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_GetValue, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.AddBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddBoundary, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.RemoveBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemoveBoundary, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetAlpha, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetBeta, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.SetKernelSize = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetKernelSize, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.SetMinimum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMinimum, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF.SetMaximum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMaximum, None, itkAdaptiveEqualizationHistogramFF)
itkAdaptiveEqualizationHistogramFF_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_swigregister
itkAdaptiveEqualizationHistogramFF_swigregister(itkAdaptiveEqualizationHistogramFF)

class itkAdaptiveEqualizationHistogramSSSS(object):
    """Proxy of C++ itkAdaptiveEqualizationHistogramSSSS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPixel(self, p: 'short const &') -> "void":
        """AddPixel(itkAdaptiveEqualizationHistogramSSSS self, short const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddPixel(self, p)


    def RemovePixel(self, p: 'short const &') -> "void":
        """RemovePixel(itkAdaptiveEqualizationHistogramSSSS self, short const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemovePixel(self, p)


    def GetValue(self, pixel: 'short const &') -> "short":
        """GetValue(itkAdaptiveEqualizationHistogramSSSS self, short const & pixel) -> short"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_GetValue(self, pixel)


    def AddBoundary(self) -> "void":
        """AddBoundary(itkAdaptiveEqualizationHistogramSSSS self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddBoundary(self)


    def RemoveBoundary(self) -> "void":
        """RemoveBoundary(itkAdaptiveEqualizationHistogramSSSS self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemoveBoundary(self)


    def SetAlpha(self, alpha: 'float') -> "void":
        """SetAlpha(itkAdaptiveEqualizationHistogramSSSS self, float alpha)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetAlpha(self, alpha)


    def SetBeta(self, beta: 'float') -> "void":
        """SetBeta(itkAdaptiveEqualizationHistogramSSSS self, float beta)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetBeta(self, beta)


    def SetKernelSize(self, kernelSize: 'float') -> "void":
        """SetKernelSize(itkAdaptiveEqualizationHistogramSSSS self, float kernelSize)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetKernelSize(self, kernelSize)


    def SetMinimum(self, minimum: 'short') -> "void":
        """SetMinimum(itkAdaptiveEqualizationHistogramSSSS self, short minimum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMinimum(self, minimum)


    def SetMaximum(self, maximum: 'short') -> "void":
        """SetMaximum(itkAdaptiveEqualizationHistogramSSSS self, short maximum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMaximum(self, maximum)


    def __init__(self, *args):
        """
        __init__(itkAdaptiveEqualizationHistogramSSSS self) -> itkAdaptiveEqualizationHistogramSSSS
        __init__(itkAdaptiveEqualizationHistogramSSSS self, itkAdaptiveEqualizationHistogramSSSS arg0) -> itkAdaptiveEqualizationHistogramSSSS
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramSSSS(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramSSSS
itkAdaptiveEqualizationHistogramSSSS.AddPixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddPixel, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.RemovePixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemovePixel, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.GetValue = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_GetValue, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.AddBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddBoundary, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.RemoveBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemoveBoundary, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetAlpha, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetBeta, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.SetKernelSize = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetKernelSize, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.SetMinimum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMinimum, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS.SetMaximum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMaximum, None, itkAdaptiveEqualizationHistogramSSSS)
itkAdaptiveEqualizationHistogramSSSS_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_swigregister
itkAdaptiveEqualizationHistogramSSSS_swigregister(itkAdaptiveEqualizationHistogramSSSS)

class itkAdaptiveEqualizationHistogramUCUC(object):
    """Proxy of C++ itkAdaptiveEqualizationHistogramUCUC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPixel(self, p: 'unsigned char const &') -> "void":
        """AddPixel(itkAdaptiveEqualizationHistogramUCUC self, unsigned char const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddPixel(self, p)


    def RemovePixel(self, p: 'unsigned char const &') -> "void":
        """RemovePixel(itkAdaptiveEqualizationHistogramUCUC self, unsigned char const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemovePixel(self, p)


    def GetValue(self, pixel: 'unsigned char const &') -> "unsigned char":
        """GetValue(itkAdaptiveEqualizationHistogramUCUC self, unsigned char const & pixel) -> unsigned char"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_GetValue(self, pixel)


    def AddBoundary(self) -> "void":
        """AddBoundary(itkAdaptiveEqualizationHistogramUCUC self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddBoundary(self)


    def RemoveBoundary(self) -> "void":
        """RemoveBoundary(itkAdaptiveEqualizationHistogramUCUC self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemoveBoundary(self)


    def SetAlpha(self, alpha: 'float') -> "void":
        """SetAlpha(itkAdaptiveEqualizationHistogramUCUC self, float alpha)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetAlpha(self, alpha)


    def SetBeta(self, beta: 'float') -> "void":
        """SetBeta(itkAdaptiveEqualizationHistogramUCUC self, float beta)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetBeta(self, beta)


    def SetKernelSize(self, kernelSize: 'float') -> "void":
        """SetKernelSize(itkAdaptiveEqualizationHistogramUCUC self, float kernelSize)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetKernelSize(self, kernelSize)


    def SetMinimum(self, minimum: 'unsigned char') -> "void":
        """SetMinimum(itkAdaptiveEqualizationHistogramUCUC self, unsigned char minimum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMinimum(self, minimum)


    def SetMaximum(self, maximum: 'unsigned char') -> "void":
        """SetMaximum(itkAdaptiveEqualizationHistogramUCUC self, unsigned char maximum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMaximum(self, maximum)


    def __init__(self, *args):
        """
        __init__(itkAdaptiveEqualizationHistogramUCUC self) -> itkAdaptiveEqualizationHistogramUCUC
        __init__(itkAdaptiveEqualizationHistogramUCUC self, itkAdaptiveEqualizationHistogramUCUC arg0) -> itkAdaptiveEqualizationHistogramUCUC
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramUCUC(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramUCUC
itkAdaptiveEqualizationHistogramUCUC.AddPixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddPixel, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.RemovePixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemovePixel, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.GetValue = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_GetValue, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.AddBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddBoundary, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.RemoveBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemoveBoundary, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetAlpha, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetBeta, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.SetKernelSize = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetKernelSize, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.SetMinimum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMinimum, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC.SetMaximum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMaximum, None, itkAdaptiveEqualizationHistogramUCUC)
itkAdaptiveEqualizationHistogramUCUC_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_swigregister
itkAdaptiveEqualizationHistogramUCUC_swigregister(itkAdaptiveEqualizationHistogramUCUC)

class itkAdaptiveEqualizationHistogramUSUS(object):
    """Proxy of C++ itkAdaptiveEqualizationHistogramUSUS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddPixel(self, p: 'unsigned short const &') -> "void":
        """AddPixel(itkAdaptiveEqualizationHistogramUSUS self, unsigned short const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddPixel(self, p)


    def RemovePixel(self, p: 'unsigned short const &') -> "void":
        """RemovePixel(itkAdaptiveEqualizationHistogramUSUS self, unsigned short const & p)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemovePixel(self, p)


    def GetValue(self, pixel: 'unsigned short const &') -> "unsigned short":
        """GetValue(itkAdaptiveEqualizationHistogramUSUS self, unsigned short const & pixel) -> unsigned short"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_GetValue(self, pixel)


    def AddBoundary(self) -> "void":
        """AddBoundary(itkAdaptiveEqualizationHistogramUSUS self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddBoundary(self)


    def RemoveBoundary(self) -> "void":
        """RemoveBoundary(itkAdaptiveEqualizationHistogramUSUS self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemoveBoundary(self)


    def SetAlpha(self, alpha: 'float') -> "void":
        """SetAlpha(itkAdaptiveEqualizationHistogramUSUS self, float alpha)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetAlpha(self, alpha)


    def SetBeta(self, beta: 'float') -> "void":
        """SetBeta(itkAdaptiveEqualizationHistogramUSUS self, float beta)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetBeta(self, beta)


    def SetKernelSize(self, kernelSize: 'float') -> "void":
        """SetKernelSize(itkAdaptiveEqualizationHistogramUSUS self, float kernelSize)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetKernelSize(self, kernelSize)


    def SetMinimum(self, minimum: 'unsigned short') -> "void":
        """SetMinimum(itkAdaptiveEqualizationHistogramUSUS self, unsigned short minimum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMinimum(self, minimum)


    def SetMaximum(self, maximum: 'unsigned short') -> "void":
        """SetMaximum(itkAdaptiveEqualizationHistogramUSUS self, unsigned short maximum)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMaximum(self, maximum)


    def __init__(self, *args):
        """
        __init__(itkAdaptiveEqualizationHistogramUSUS self) -> itkAdaptiveEqualizationHistogramUSUS
        __init__(itkAdaptiveEqualizationHistogramUSUS self, itkAdaptiveEqualizationHistogramUSUS arg0) -> itkAdaptiveEqualizationHistogramUSUS
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramUSUS(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramUSUS
itkAdaptiveEqualizationHistogramUSUS.AddPixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddPixel, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.RemovePixel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemovePixel, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.GetValue = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_GetValue, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.AddBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddBoundary, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.RemoveBoundary = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemoveBoundary, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetAlpha, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetBeta, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.SetKernelSize = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetKernelSize, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.SetMinimum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMinimum, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS.SetMaximum = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMaximum, None, itkAdaptiveEqualizationHistogramUSUS)
itkAdaptiveEqualizationHistogramUSUS_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_swigregister
itkAdaptiveEqualizationHistogramUSUS_swigregister(itkAdaptiveEqualizationHistogramUSUS)

class itkKernelImageFilterID2ID2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterID2ID2Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterID2ID2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterID2ID2Neighborhood_Pointer":
        """Clone(itkKernelImageFilterID2ID2Neighborhood self) -> itkKernelImageFilterID2ID2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB2') -> "void":
        """
        SetKernel(itkKernelImageFilterID2ID2Neighborhood self, itkNeighborhoodB2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB2 const &":
        """GetKernel(itkKernelImageFilterID2ID2Neighborhood self) -> itkNeighborhoodB2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterID2ID2Neighborhood self, itkSize2 radius)
        SetRadius(itkKernelImageFilterID2ID2Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterID2ID2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterID2ID2Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterID2ID2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID2ID2Neighborhood

        Create a new object of the class itkKernelImageFilterID2ID2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID2ID2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID2ID2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID2ID2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterID2ID2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_Clone, None, itkKernelImageFilterID2ID2Neighborhood)
itkKernelImageFilterID2ID2Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetKernel, None, itkKernelImageFilterID2ID2Neighborhood)
itkKernelImageFilterID2ID2Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_GetKernel, None, itkKernelImageFilterID2ID2Neighborhood)
itkKernelImageFilterID2ID2Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetRadius, None, itkKernelImageFilterID2ID2Neighborhood)
itkKernelImageFilterID2ID2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_swigregister
itkKernelImageFilterID2ID2Neighborhood_swigregister(itkKernelImageFilterID2ID2Neighborhood)

def itkKernelImageFilterID2ID2Neighborhood___New_orig__() -> "itkKernelImageFilterID2ID2Neighborhood_Pointer":
    """itkKernelImageFilterID2ID2Neighborhood___New_orig__() -> itkKernelImageFilterID2ID2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood___New_orig__()

def itkKernelImageFilterID2ID2Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterID2ID2Neighborhood *":
    """itkKernelImageFilterID2ID2Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterID2ID2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_cast(obj)

class itkKernelImageFilterID3ID3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterID3ID3Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterID3ID3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterID3ID3Neighborhood_Pointer":
        """Clone(itkKernelImageFilterID3ID3Neighborhood self) -> itkKernelImageFilterID3ID3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB3') -> "void":
        """
        SetKernel(itkKernelImageFilterID3ID3Neighborhood self, itkNeighborhoodB3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB3 const &":
        """GetKernel(itkKernelImageFilterID3ID3Neighborhood self) -> itkNeighborhoodB3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterID3ID3Neighborhood self, itkSize3 radius)
        SetRadius(itkKernelImageFilterID3ID3Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterID3ID3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterID3ID3Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterID3ID3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID3ID3Neighborhood

        Create a new object of the class itkKernelImageFilterID3ID3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID3ID3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID3ID3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID3ID3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterID3ID3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_Clone, None, itkKernelImageFilterID3ID3Neighborhood)
itkKernelImageFilterID3ID3Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetKernel, None, itkKernelImageFilterID3ID3Neighborhood)
itkKernelImageFilterID3ID3Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_GetKernel, None, itkKernelImageFilterID3ID3Neighborhood)
itkKernelImageFilterID3ID3Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetRadius, None, itkKernelImageFilterID3ID3Neighborhood)
itkKernelImageFilterID3ID3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_swigregister
itkKernelImageFilterID3ID3Neighborhood_swigregister(itkKernelImageFilterID3ID3Neighborhood)

def itkKernelImageFilterID3ID3Neighborhood___New_orig__() -> "itkKernelImageFilterID3ID3Neighborhood_Pointer":
    """itkKernelImageFilterID3ID3Neighborhood___New_orig__() -> itkKernelImageFilterID3ID3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood___New_orig__()

def itkKernelImageFilterID3ID3Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterID3ID3Neighborhood *":
    """itkKernelImageFilterID3ID3Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterID3ID3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_cast(obj)

class itkKernelImageFilterIF2IF2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIF2IF2Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIF2IF2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIF2IF2Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIF2IF2Neighborhood self) -> itkKernelImageFilterIF2IF2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB2') -> "void":
        """
        SetKernel(itkKernelImageFilterIF2IF2Neighborhood self, itkNeighborhoodB2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB2 const &":
        """GetKernel(itkKernelImageFilterIF2IF2Neighborhood self) -> itkNeighborhoodB2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIF2IF2Neighborhood self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIF2IF2Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIF2IF2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF2IF2Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIF2IF2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF2IF2Neighborhood

        Create a new object of the class itkKernelImageFilterIF2IF2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF2IF2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF2IF2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF2IF2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIF2IF2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_Clone, None, itkKernelImageFilterIF2IF2Neighborhood)
itkKernelImageFilterIF2IF2Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetKernel, None, itkKernelImageFilterIF2IF2Neighborhood)
itkKernelImageFilterIF2IF2Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_GetKernel, None, itkKernelImageFilterIF2IF2Neighborhood)
itkKernelImageFilterIF2IF2Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetRadius, None, itkKernelImageFilterIF2IF2Neighborhood)
itkKernelImageFilterIF2IF2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_swigregister
itkKernelImageFilterIF2IF2Neighborhood_swigregister(itkKernelImageFilterIF2IF2Neighborhood)

def itkKernelImageFilterIF2IF2Neighborhood___New_orig__() -> "itkKernelImageFilterIF2IF2Neighborhood_Pointer":
    """itkKernelImageFilterIF2IF2Neighborhood___New_orig__() -> itkKernelImageFilterIF2IF2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood___New_orig__()

def itkKernelImageFilterIF2IF2Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF2IF2Neighborhood *":
    """itkKernelImageFilterIF2IF2Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIF2IF2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_cast(obj)

class itkKernelImageFilterIF3IF3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIF3IF3Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIF3IF3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIF3IF3Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIF3IF3Neighborhood self) -> itkKernelImageFilterIF3IF3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB3') -> "void":
        """
        SetKernel(itkKernelImageFilterIF3IF3Neighborhood self, itkNeighborhoodB3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB3 const &":
        """GetKernel(itkKernelImageFilterIF3IF3Neighborhood self) -> itkNeighborhoodB3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIF3IF3Neighborhood self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIF3IF3Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIF3IF3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF3IF3Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIF3IF3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF3IF3Neighborhood

        Create a new object of the class itkKernelImageFilterIF3IF3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF3IF3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF3IF3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF3IF3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIF3IF3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_Clone, None, itkKernelImageFilterIF3IF3Neighborhood)
itkKernelImageFilterIF3IF3Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetKernel, None, itkKernelImageFilterIF3IF3Neighborhood)
itkKernelImageFilterIF3IF3Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_GetKernel, None, itkKernelImageFilterIF3IF3Neighborhood)
itkKernelImageFilterIF3IF3Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetRadius, None, itkKernelImageFilterIF3IF3Neighborhood)
itkKernelImageFilterIF3IF3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_swigregister
itkKernelImageFilterIF3IF3Neighborhood_swigregister(itkKernelImageFilterIF3IF3Neighborhood)

def itkKernelImageFilterIF3IF3Neighborhood___New_orig__() -> "itkKernelImageFilterIF3IF3Neighborhood_Pointer":
    """itkKernelImageFilterIF3IF3Neighborhood___New_orig__() -> itkKernelImageFilterIF3IF3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood___New_orig__()

def itkKernelImageFilterIF3IF3Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF3IF3Neighborhood *":
    """itkKernelImageFilterIF3IF3Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIF3IF3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_cast(obj)

class itkKernelImageFilterISS2ISS2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterISS2ISS2Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterISS2ISS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterISS2ISS2Neighborhood_Pointer":
        """Clone(itkKernelImageFilterISS2ISS2Neighborhood self) -> itkKernelImageFilterISS2ISS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB2') -> "void":
        """
        SetKernel(itkKernelImageFilterISS2ISS2Neighborhood self, itkNeighborhoodB2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB2 const &":
        """GetKernel(itkKernelImageFilterISS2ISS2Neighborhood self) -> itkNeighborhoodB2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterISS2ISS2Neighborhood self, itkSize2 radius)
        SetRadius(itkKernelImageFilterISS2ISS2Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterISS2ISS2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS2ISS2Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterISS2ISS2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS2ISS2Neighborhood

        Create a new object of the class itkKernelImageFilterISS2ISS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS2ISS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS2ISS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS2ISS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterISS2ISS2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_Clone, None, itkKernelImageFilterISS2ISS2Neighborhood)
itkKernelImageFilterISS2ISS2Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetKernel, None, itkKernelImageFilterISS2ISS2Neighborhood)
itkKernelImageFilterISS2ISS2Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_GetKernel, None, itkKernelImageFilterISS2ISS2Neighborhood)
itkKernelImageFilterISS2ISS2Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetRadius, None, itkKernelImageFilterISS2ISS2Neighborhood)
itkKernelImageFilterISS2ISS2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_swigregister
itkKernelImageFilterISS2ISS2Neighborhood_swigregister(itkKernelImageFilterISS2ISS2Neighborhood)

def itkKernelImageFilterISS2ISS2Neighborhood___New_orig__() -> "itkKernelImageFilterISS2ISS2Neighborhood_Pointer":
    """itkKernelImageFilterISS2ISS2Neighborhood___New_orig__() -> itkKernelImageFilterISS2ISS2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood___New_orig__()

def itkKernelImageFilterISS2ISS2Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS2ISS2Neighborhood *":
    """itkKernelImageFilterISS2ISS2Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterISS2ISS2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_cast(obj)

class itkKernelImageFilterISS3ISS3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterISS3ISS3Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterISS3ISS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterISS3ISS3Neighborhood_Pointer":
        """Clone(itkKernelImageFilterISS3ISS3Neighborhood self) -> itkKernelImageFilterISS3ISS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB3') -> "void":
        """
        SetKernel(itkKernelImageFilterISS3ISS3Neighborhood self, itkNeighborhoodB3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB3 const &":
        """GetKernel(itkKernelImageFilterISS3ISS3Neighborhood self) -> itkNeighborhoodB3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterISS3ISS3Neighborhood self, itkSize3 radius)
        SetRadius(itkKernelImageFilterISS3ISS3Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterISS3ISS3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS3ISS3Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterISS3ISS3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS3ISS3Neighborhood

        Create a new object of the class itkKernelImageFilterISS3ISS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS3ISS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS3ISS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS3ISS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterISS3ISS3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_Clone, None, itkKernelImageFilterISS3ISS3Neighborhood)
itkKernelImageFilterISS3ISS3Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetKernel, None, itkKernelImageFilterISS3ISS3Neighborhood)
itkKernelImageFilterISS3ISS3Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_GetKernel, None, itkKernelImageFilterISS3ISS3Neighborhood)
itkKernelImageFilterISS3ISS3Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetRadius, None, itkKernelImageFilterISS3ISS3Neighborhood)
itkKernelImageFilterISS3ISS3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_swigregister
itkKernelImageFilterISS3ISS3Neighborhood_swigregister(itkKernelImageFilterISS3ISS3Neighborhood)

def itkKernelImageFilterISS3ISS3Neighborhood___New_orig__() -> "itkKernelImageFilterISS3ISS3Neighborhood_Pointer":
    """itkKernelImageFilterISS3ISS3Neighborhood___New_orig__() -> itkKernelImageFilterISS3ISS3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood___New_orig__()

def itkKernelImageFilterISS3ISS3Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS3ISS3Neighborhood *":
    """itkKernelImageFilterISS3ISS3Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterISS3ISS3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_cast(obj)

class itkKernelImageFilterIUC2IUC2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUC2IUC2Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUC2IUC2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUC2IUC2Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIUC2IUC2Neighborhood self) -> itkKernelImageFilterIUC2IUC2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB2') -> "void":
        """
        SetKernel(itkKernelImageFilterIUC2IUC2Neighborhood self, itkNeighborhoodB2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB2 const &":
        """GetKernel(itkKernelImageFilterIUC2IUC2Neighborhood self) -> itkNeighborhoodB2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUC2IUC2Neighborhood self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIUC2IUC2Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUC2IUC2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC2IUC2Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUC2IUC2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC2IUC2Neighborhood

        Create a new object of the class itkKernelImageFilterIUC2IUC2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC2IUC2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC2IUC2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC2IUC2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUC2IUC2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_Clone, None, itkKernelImageFilterIUC2IUC2Neighborhood)
itkKernelImageFilterIUC2IUC2Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetKernel, None, itkKernelImageFilterIUC2IUC2Neighborhood)
itkKernelImageFilterIUC2IUC2Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_GetKernel, None, itkKernelImageFilterIUC2IUC2Neighborhood)
itkKernelImageFilterIUC2IUC2Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetRadius, None, itkKernelImageFilterIUC2IUC2Neighborhood)
itkKernelImageFilterIUC2IUC2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_swigregister
itkKernelImageFilterIUC2IUC2Neighborhood_swigregister(itkKernelImageFilterIUC2IUC2Neighborhood)

def itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__() -> "itkKernelImageFilterIUC2IUC2Neighborhood_Pointer":
    """itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__() -> itkKernelImageFilterIUC2IUC2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__()

def itkKernelImageFilterIUC2IUC2Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC2IUC2Neighborhood *":
    """itkKernelImageFilterIUC2IUC2Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIUC2IUC2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_cast(obj)

class itkKernelImageFilterIUC3IUC3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUC3IUC3Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUC3IUC3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUC3IUC3Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIUC3IUC3Neighborhood self) -> itkKernelImageFilterIUC3IUC3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB3') -> "void":
        """
        SetKernel(itkKernelImageFilterIUC3IUC3Neighborhood self, itkNeighborhoodB3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB3 const &":
        """GetKernel(itkKernelImageFilterIUC3IUC3Neighborhood self) -> itkNeighborhoodB3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUC3IUC3Neighborhood self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIUC3IUC3Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUC3IUC3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC3IUC3Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUC3IUC3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC3IUC3Neighborhood

        Create a new object of the class itkKernelImageFilterIUC3IUC3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC3IUC3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC3IUC3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC3IUC3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUC3IUC3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_Clone, None, itkKernelImageFilterIUC3IUC3Neighborhood)
itkKernelImageFilterIUC3IUC3Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetKernel, None, itkKernelImageFilterIUC3IUC3Neighborhood)
itkKernelImageFilterIUC3IUC3Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_GetKernel, None, itkKernelImageFilterIUC3IUC3Neighborhood)
itkKernelImageFilterIUC3IUC3Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetRadius, None, itkKernelImageFilterIUC3IUC3Neighborhood)
itkKernelImageFilterIUC3IUC3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_swigregister
itkKernelImageFilterIUC3IUC3Neighborhood_swigregister(itkKernelImageFilterIUC3IUC3Neighborhood)

def itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__() -> "itkKernelImageFilterIUC3IUC3Neighborhood_Pointer":
    """itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__() -> itkKernelImageFilterIUC3IUC3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__()

def itkKernelImageFilterIUC3IUC3Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC3IUC3Neighborhood *":
    """itkKernelImageFilterIUC3IUC3Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIUC3IUC3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_cast(obj)

class itkKernelImageFilterIUS2IUS2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUS2IUS2Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUS2IUS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUS2IUS2Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIUS2IUS2Neighborhood self) -> itkKernelImageFilterIUS2IUS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB2') -> "void":
        """
        SetKernel(itkKernelImageFilterIUS2IUS2Neighborhood self, itkNeighborhoodB2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB2 const &":
        """GetKernel(itkKernelImageFilterIUS2IUS2Neighborhood self) -> itkNeighborhoodB2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUS2IUS2Neighborhood self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIUS2IUS2Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUS2IUS2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS2IUS2Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUS2IUS2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS2IUS2Neighborhood

        Create a new object of the class itkKernelImageFilterIUS2IUS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS2IUS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS2IUS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS2IUS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUS2IUS2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_Clone, None, itkKernelImageFilterIUS2IUS2Neighborhood)
itkKernelImageFilterIUS2IUS2Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetKernel, None, itkKernelImageFilterIUS2IUS2Neighborhood)
itkKernelImageFilterIUS2IUS2Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_GetKernel, None, itkKernelImageFilterIUS2IUS2Neighborhood)
itkKernelImageFilterIUS2IUS2Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetRadius, None, itkKernelImageFilterIUS2IUS2Neighborhood)
itkKernelImageFilterIUS2IUS2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_swigregister
itkKernelImageFilterIUS2IUS2Neighborhood_swigregister(itkKernelImageFilterIUS2IUS2Neighborhood)

def itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__() -> "itkKernelImageFilterIUS2IUS2Neighborhood_Pointer":
    """itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__() -> itkKernelImageFilterIUS2IUS2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__()

def itkKernelImageFilterIUS2IUS2Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS2IUS2Neighborhood *":
    """itkKernelImageFilterIUS2IUS2Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIUS2IUS2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_cast(obj)

class itkKernelImageFilterIUS3IUS3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUS3IUS3Neighborhood_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUS3IUS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUS3IUS3Neighborhood_Pointer":
        """Clone(itkKernelImageFilterIUS3IUS3Neighborhood self) -> itkKernelImageFilterIUS3IUS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_Clone(self)


    def SetKernel(self, kernel: 'itkNeighborhoodB3') -> "void":
        """
        SetKernel(itkKernelImageFilterIUS3IUS3Neighborhood self, itkNeighborhoodB3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetKernel(self, kernel)


    def GetKernel(self) -> "itkNeighborhoodB3 const &":
        """GetKernel(itkKernelImageFilterIUS3IUS3Neighborhood self) -> itkNeighborhoodB3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUS3IUS3Neighborhood self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIUS3IUS3Neighborhood self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetRadius(self, *args)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUS3IUS3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS3IUS3Neighborhood *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUS3IUS3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS3IUS3Neighborhood

        Create a new object of the class itkKernelImageFilterIUS3IUS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS3IUS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS3IUS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS3IUS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUS3IUS3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_Clone, None, itkKernelImageFilterIUS3IUS3Neighborhood)
itkKernelImageFilterIUS3IUS3Neighborhood.SetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetKernel, None, itkKernelImageFilterIUS3IUS3Neighborhood)
itkKernelImageFilterIUS3IUS3Neighborhood.GetKernel = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_GetKernel, None, itkKernelImageFilterIUS3IUS3Neighborhood)
itkKernelImageFilterIUS3IUS3Neighborhood.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetRadius, None, itkKernelImageFilterIUS3IUS3Neighborhood)
itkKernelImageFilterIUS3IUS3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_swigregister
itkKernelImageFilterIUS3IUS3Neighborhood_swigregister(itkKernelImageFilterIUS3IUS3Neighborhood)

def itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__() -> "itkKernelImageFilterIUS3IUS3Neighborhood_Pointer":
    """itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__() -> itkKernelImageFilterIUS3IUS3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__()

def itkKernelImageFilterIUS3IUS3Neighborhood_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS3IUS3Neighborhood *":
    """itkKernelImageFilterIUS3IUS3Neighborhood_cast(itkLightObject obj) -> itkKernelImageFilterIUS3IUS3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseID2ID2Neighborhood(itkKernelImageFilterID2ID2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseID2ID2Neighborhood self) -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseID2ID2Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseID2ID2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID2ID2Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseID2ID2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID2ID2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseID2ID2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseID2ID2Neighborhood)
itkMovingHistogramImageFilterBaseID2ID2Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseID2ID2Neighborhood)
itkMovingHistogramImageFilterBaseID2ID2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_swigregister
itkMovingHistogramImageFilterBaseID2ID2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseID2ID2Neighborhood)

def itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID2ID2Neighborhood *":
    """itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseID3ID3Neighborhood(itkKernelImageFilterID3ID3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseID3ID3Neighborhood self) -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseID3ID3Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseID3ID3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID3ID3Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseID3ID3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID3ID3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseID3ID3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseID3ID3Neighborhood)
itkMovingHistogramImageFilterBaseID3ID3Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseID3ID3Neighborhood)
itkMovingHistogramImageFilterBaseID3ID3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_swigregister
itkMovingHistogramImageFilterBaseID3ID3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseID3ID3Neighborhood)

def itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID3ID3Neighborhood *":
    """itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIF2IF2Neighborhood(itkKernelImageFilterIF2IF2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood self) -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIF2IF2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF2IF2Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIF2IF2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIF2IF2Neighborhood)
itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIF2IF2Neighborhood)
itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood)

def itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF2IF2Neighborhood *":
    """itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIF3IF3Neighborhood(itkKernelImageFilterIF3IF3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood self) -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIF3IF3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF3IF3Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIF3IF3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIF3IF3Neighborhood)
itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIF3IF3Neighborhood)
itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood)

def itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF3IF3Neighborhood *":
    """itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood(itkKernelImageFilterISS2ISS2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood self) -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood)
itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood)
itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_swigregister
itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood)

def itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood *":
    """itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood(itkKernelImageFilterISS3ISS3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood self) -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood)
itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood)
itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_swigregister
itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood)

def itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood *":
    """itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood(itkKernelImageFilterIUC2IUC2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood self) -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood)
itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood)
itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood)

def itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood *":
    """itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood(itkKernelImageFilterIUC3IUC3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood self) -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood)
itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood)
itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood)

def itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood *":
    """itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood(itkKernelImageFilterIUS2IUS2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood self) -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood)
itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood)
itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood)

def itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood *":
    """itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast(obj)

class itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood(itkKernelImageFilterIUS3IUS3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood self) -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood self) -> unsigned long"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Clone, None, itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood)
itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.GetPixelsPerTranslation = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood)
itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_swigregister
itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood)

def itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__() -> "itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer":
    """itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__() -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__()

def itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood *":
    """itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast(obj)

class itkMovingHistogramImageFilterID2ID2NeighborhoodAHE(itkMovingHistogramImageFilterBaseID2ID2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE self) -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramDD') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE self, itkAdaptiveEqualizationHistogramDD arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterID2ID2NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterID2ID2NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterID2ID2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterID2ID2NeighborhoodAHE)
itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterID2ID2NeighborhoodAHE)
itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE)

def itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterID2ID2NeighborhoodAHE *":
    """itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterID3ID3NeighborhoodAHE(itkMovingHistogramImageFilterBaseID3ID3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE self) -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramDD') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE self, itkAdaptiveEqualizationHistogramDD arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterID3ID3NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterID3ID3NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterID3ID3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterID3ID3NeighborhoodAHE)
itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterID3ID3NeighborhoodAHE)
itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE)

def itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterID3ID3NeighborhoodAHE *":
    """itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE self) -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramFF') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE self, itkAdaptiveEqualizationHistogramFF arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE)
itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE)
itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE)

def itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE self) -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramFF') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE self, itkAdaptiveEqualizationHistogramFF arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE)
itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE)
itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE)

def itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE self) -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramSSSS') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE self, itkAdaptiveEqualizationHistogramSSSS arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE)
itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE)
itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE)

def itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE *":
    """itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE self) -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramSSSS') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE self, itkAdaptiveEqualizationHistogramSSSS arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE)
itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE)
itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE)

def itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE *":
    """itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE self) -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramUCUC') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE self, itkAdaptiveEqualizationHistogramUCUC arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE)
itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE)
itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE)

def itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE self) -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramUCUC') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE self, itkAdaptiveEqualizationHistogramUCUC arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE)
itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE)
itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE)

def itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE self) -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramUSUS') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE self, itkAdaptiveEqualizationHistogramUSUS arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE)
itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE)
itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE)

def itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast(obj)

class itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements six methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilter add the new pixels before removing the old
    ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer":
        """Clone(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE self) -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Clone(self)


    def ConfigureHistogram(self, arg0: 'itkAdaptiveEqualizationHistogramUSUS') -> "void":
        """
        ConfigureHistogram(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE self, itkAdaptiveEqualizationHistogramUSUS arg0)

        Configure the
        histogram. Subclasses must override this method. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_ConfigureHistogram(self, arg0)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Clone, None, itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE)
itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.ConfigureHistogram = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_ConfigureHistogram, None, itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE)
itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_swigregister
itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE)

def itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__() -> "itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer":
    """itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__() -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__()

def itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE *":
    """itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast(itkLightObject obj) -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterID2(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterID2_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterID2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterID2_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterID2 self) -> itkAdaptiveHistogramEqualizationImageFilterID2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterID2 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterID2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterID2 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterID2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterID2 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterID2 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterID2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterID2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID2

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterID2 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterID2.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_Clone, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_swigregister
itkAdaptiveHistogramEqualizationImageFilterID2_swigregister(itkAdaptiveHistogramEqualizationImageFilterID2)

def itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterID2_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterID2_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterID2_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterID2 *":
    """itkAdaptiveHistogramEqualizationImageFilterID2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID2"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterID3(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterID3_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterID3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterID3_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterID3 self) -> itkAdaptiveHistogramEqualizationImageFilterID3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterID3 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterID3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterID3 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterID3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterID3 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterID3 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterID3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterID3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID3

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterID3 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterID3.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_Clone, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_swigregister
itkAdaptiveHistogramEqualizationImageFilterID3_swigregister(itkAdaptiveHistogramEqualizationImageFilterID3)

def itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterID3_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterID3_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterID3_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterID3 *":
    """itkAdaptiveHistogramEqualizationImageFilterID3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID3"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIF2(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIF2 self) -> itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIF2 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIF2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIF2 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIF2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIF2 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIF2 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIF2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIF2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF2

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIF2 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIF2.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF2)

def itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIF2_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIF2 *":
    """itkAdaptiveHistogramEqualizationImageFilterIF2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF2"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIF3(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIF3 self) -> itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIF3 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIF3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIF3 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIF3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIF3 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIF3 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIF3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIF3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF3

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIF3 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIF3.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF3)

def itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIF3_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIF3 *":
    """itkAdaptiveHistogramEqualizationImageFilterIF3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF3"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterISS2(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterISS2 self) -> itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterISS2 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterISS2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterISS2 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterISS2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterISS2 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterISS2 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterISS2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterISS2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterISS2

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterISS2 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterISS2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterISS2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterISS2.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_Clone, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_swigregister
itkAdaptiveHistogramEqualizationImageFilterISS2_swigregister(itkAdaptiveHistogramEqualizationImageFilterISS2)

def itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterISS2_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterISS2_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterISS2 *":
    """itkAdaptiveHistogramEqualizationImageFilterISS2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterISS2"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterISS3(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterISS3 self) -> itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterISS3 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterISS3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterISS3 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterISS3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterISS3 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterISS3 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterISS3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterISS3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterISS3

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterISS3 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterISS3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterISS3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterISS3.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_Clone, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_swigregister
itkAdaptiveHistogramEqualizationImageFilterISS3_swigregister(itkAdaptiveHistogramEqualizationImageFilterISS3)

def itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterISS3_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterISS3_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterISS3 *":
    """itkAdaptiveHistogramEqualizationImageFilterISS3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterISS3"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIUC2(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIUC2 self) -> itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUC2 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUC2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIUC2 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIUC2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUC2 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUC2 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIUC2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIUC2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC2

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUC2 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUC2.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC2)

def itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUC2 *":
    """itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC2"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIUC3(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIUC3 self) -> itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUC3 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUC3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIUC3 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIUC3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUC3 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUC3 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIUC3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIUC3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC3

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUC3 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUC3.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC3)

def itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUC3 *":
    """itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC3"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIUS2(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIUS2 self) -> itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUS2 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUS2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIUS2 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIUS2 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUS2 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUS2 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIUS2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIUS2 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS2

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUS2 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUS2.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS2)

def itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUS2 *":
    """itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS2"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(obj)

class itkAdaptiveHistogramEqualizationImageFilterIUS3(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE):
    """


    Power Law Adaptive Histogram Equalization.

    Histogram equalization modifies the contrast in an image. The
    AdaptiveHistogramEqualizationImageFilter is a superset of many
    contrast enhancing filters. By modifying its parameters (alpha, beta,
    and window), the AdaptiveHistogramEqualizationImageFilter can produce
    an adaptively equalized histogram or a version of unsharp mask (local
    mean subtraction). Instead of applying a strict histogram equalization
    in a window about a pixel, this filter prescribes a mapping function
    (power law) controlled by the parameters alpha and beta.

    The parameter alpha controls how much the filter acts like the
    classical histogram equalization method (alpha=0) to how much the
    filter acts like an unsharp mask (alpha=1).

    The parameter beta controls how much the filter acts like an unsharp
    mask (beta=0) to much the filter acts like pass through (beta=1, with
    alpha=1).

    The parameter window controls the size of the region over which local
    statistics are calculated. The size of the window is controlled by
    SetRadius the default Radius is 5 in all directions.

    By altering alpha, beta and window, a host of equalization and unsharp
    masking filters is available.

    The boundary condition ignores the part of the neighborhood outside
    the image, and over-weights the valid part of the neighborhood.

    For detail description, reference "Adaptive Image Contrast
    Enhancement using Generalizations of Histogram Equalization." J.Alex
    Stark. IEEE Transactions on Image Processing, May 2000.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/AdaptiveHistogr
    amEqualizationImageFilter,Adaptive Histogram Equalization Image
    Filter} \\endsphinx

    C++ includes: itkAdaptiveHistogramEqualizationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer":
        """__New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer":
        """Clone(itkAdaptiveHistogramEqualizationImageFilterIUS3 self) -> itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_Clone(self)


    def SetAlpha(self, _arg: 'float const') -> "void":
        """
        SetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUS3 self, float const _arg)

        Set/Get the value of
        alpha. Alpha = 0 produces the adaptive histogram equalization
        (provided beta=0). Alpha = 1 produces an unsharp mask. Default is 0.3.

        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetAlpha(self, _arg)


    def GetAlpha(self) -> "float":
        """GetAlpha(itkAdaptiveHistogramEqualizationImageFilterIUS3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetAlpha(self)


    def SetBeta(self, _arg: 'float const') -> "void":
        """
        SetBeta(itkAdaptiveHistogramEqualizationImageFilterIUS3 self, float const _arg)

        Set/Get the value of beta.
        If beta = 1 (and alpha = 1), then the output image matches the input
        image. As beta approaches 0, the filter behaves as an unsharp mask.
        Default is 0.3. 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetBeta(self, _arg)


    def GetBeta(self) -> "float":
        """GetBeta(itkAdaptiveHistogramEqualizationImageFilterIUS3 self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetBeta(self)


    def SetUseLookupTable(self, _arg: 'bool const') -> "void":
        """
        SetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUS3 self, bool const _arg)

        Set/Get whether
        an optimized lookup table for the intensity mapping function is used.
        Default is off.Deprecated 
        """
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetUseLookupTable(self, _arg)


    def GetUseLookupTable(self) -> "bool":
        """GetUseLookupTable(itkAdaptiveHistogramEqualizationImageFilterIUS3 self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetUseLookupTable(self)


    def UseLookupTableOn(self) -> "void":
        """UseLookupTableOn(itkAdaptiveHistogramEqualizationImageFilterIUS3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOn(self)


    def UseLookupTableOff(self) -> "void":
        """UseLookupTableOff(itkAdaptiveHistogramEqualizationImageFilterIUS3 self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS3

    def cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUS3 *":
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUS3.Clone = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_Clone, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetAlpha, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetBeta, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetUseLookupTable, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOn, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOff, None, itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS3)

def itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__() -> "itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer":
    """itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__() -> itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(obj: 'itkLightObject') -> "itkAdaptiveHistogramEqualizationImageFilterIUS3 *":
    """itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS3"""
    return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter_base(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilterBase"""
    import itk
    instance = itk.MovingHistogramImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilterBase.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilterBase

    moving_histogram_image_filter_base.__doc__ = filter_object.__doc__
    moving_histogram_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter_base.__doc__ += "Available Keyword Arguments:\n"
    moving_histogram_image_filter_base.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilter"""
    import itk
    instance = itk.MovingHistogramImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilter.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilter

    moving_histogram_image_filter.__doc__ = filter_object.__doc__
    moving_histogram_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter.__doc__ += "Available Keyword Arguments:\n"
    moving_histogram_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def kernel_image_filter(*args, **kwargs):
    """Procedural interface for KernelImageFilter"""
    import itk
    instance = itk.KernelImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def kernel_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.KernelImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.KernelImageFilter.values()[0]
    else:
        filter_object = itk.KernelImageFilter

    kernel_image_filter.__doc__ = filter_object.__doc__
    kernel_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    kernel_image_filter.__doc__ += "Available Keyword Arguments:\n"
    kernel_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def adaptive_histogram_equalization_image_filter(*args, **kwargs):
    """Procedural interface for AdaptiveHistogramEqualizationImageFilter"""
    import itk
    instance = itk.AdaptiveHistogramEqualizationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def adaptive_histogram_equalization_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AdaptiveHistogramEqualizationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AdaptiveHistogramEqualizationImageFilter.values()[0]
    else:
        filter_object = itk.AdaptiveHistogramEqualizationImageFilter

    adaptive_histogram_equalization_image_filter.__doc__ = filter_object.__doc__
    adaptive_histogram_equalization_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    adaptive_histogram_equalization_image_filter.__doc__ += "Available Keyword Arguments:\n"
    adaptive_histogram_equalization_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



