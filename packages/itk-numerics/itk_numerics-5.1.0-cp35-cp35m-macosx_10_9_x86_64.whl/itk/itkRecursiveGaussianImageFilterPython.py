# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRecursiveGaussianImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRecursiveGaussianImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRecursiveGaussianImageFilterPython
            return _itkRecursiveGaussianImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRecursiveGaussianImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRecursiveGaussianImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRecursiveGaussianImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkRecursiveSeparableImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def itkRecursiveGaussianImageFilterID3ID3_New():
  return itkRecursiveGaussianImageFilterID3ID3.New()


def itkRecursiveGaussianImageFilterID2ID2_New():
  return itkRecursiveGaussianImageFilterID2ID2.New()


def itkRecursiveGaussianImageFilterIF3IF3_New():
  return itkRecursiveGaussianImageFilterIF3IF3.New()


def itkRecursiveGaussianImageFilterIF2IF2_New():
  return itkRecursiveGaussianImageFilterIF2IF2.New()


def itkRecursiveGaussianImageFilterIUS3IUS3_New():
  return itkRecursiveGaussianImageFilterIUS3IUS3.New()


def itkRecursiveGaussianImageFilterIUS2IUS2_New():
  return itkRecursiveGaussianImageFilterIUS2IUS2.New()


def itkRecursiveGaussianImageFilterIUC3IUC3_New():
  return itkRecursiveGaussianImageFilterIUC3IUC3.New()


def itkRecursiveGaussianImageFilterIUC2IUC2_New():
  return itkRecursiveGaussianImageFilterIUC2IUC2.New()


def itkRecursiveGaussianImageFilterISS3ISS3_New():
  return itkRecursiveGaussianImageFilterISS3ISS3.New()


def itkRecursiveGaussianImageFilterISS2ISS2_New():
  return itkRecursiveGaussianImageFilterISS2ISS2.New()

class itkRecursiveGaussianImageFilterEnums(object):
    """Proxy of C++ itkRecursiveGaussianImageFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GaussianOrder_ZeroOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_ZeroOrder
    GaussianOrder_FirstOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_FirstOrder
    GaussianOrder_SecondOrder = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_GaussianOrder_SecondOrder

    def __init__(self, *args):
        """
        __init__(itkRecursiveGaussianImageFilterEnums self) -> itkRecursiveGaussianImageFilterEnums
        __init__(itkRecursiveGaussianImageFilterEnums self, itkRecursiveGaussianImageFilterEnums arg0) -> itkRecursiveGaussianImageFilterEnums
        """
        _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swiginit(self, _itkRecursiveGaussianImageFilterPython.new_itkRecursiveGaussianImageFilterEnums(*args))
    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterEnums
itkRecursiveGaussianImageFilterEnums_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterEnums_swigregister
itkRecursiveGaussianImageFilterEnums_swigregister(itkRecursiveGaussianImageFilterEnums)

class itkRecursiveGaussianImageFilterID2ID2(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID2ID2):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterID2ID2_Pointer":
        """Clone(itkRecursiveGaussianImageFilterID2ID2 self) -> itkRecursiveGaussianImageFilterID2ID2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterID2ID2 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterID2ID2 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterID2ID2 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterID2ID2 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterID2ID2 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterID2ID2 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterID2ID2 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterID2ID2 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterID2ID2 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterID2ID2"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterID2ID2

        Create a new object of the class itkRecursiveGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterID2ID2.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_Clone, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetSigma, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSigma, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetOrder, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_GetOrder, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetZeroOrder, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetFirstOrder, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_SetSecondOrder, None, itkRecursiveGaussianImageFilterID2ID2)
itkRecursiveGaussianImageFilterID2ID2_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_swigregister
itkRecursiveGaussianImageFilterID2ID2_swigregister(itkRecursiveGaussianImageFilterID2ID2)

def itkRecursiveGaussianImageFilterID2ID2___New_orig__() -> "itkRecursiveGaussianImageFilterID2ID2_Pointer":
    """itkRecursiveGaussianImageFilterID2ID2___New_orig__() -> itkRecursiveGaussianImageFilterID2ID2_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2___New_orig__()

def itkRecursiveGaussianImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterID2ID2 *":
    """itkRecursiveGaussianImageFilterID2ID2_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterID2ID2"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID2ID2_cast(obj)

class itkRecursiveGaussianImageFilterID3ID3(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterID3ID3):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterID3ID3_Pointer":
        """Clone(itkRecursiveGaussianImageFilterID3ID3 self) -> itkRecursiveGaussianImageFilterID3ID3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterID3ID3 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterID3ID3 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterID3ID3 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterID3ID3 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterID3ID3 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterID3ID3 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterID3ID3 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterID3ID3 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterID3ID3 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterID3ID3"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterID3ID3

        Create a new object of the class itkRecursiveGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterID3ID3.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_Clone, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetSigma, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSigma, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetOrder, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_GetOrder, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetZeroOrder, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetFirstOrder, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_SetSecondOrder, None, itkRecursiveGaussianImageFilterID3ID3)
itkRecursiveGaussianImageFilterID3ID3_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_swigregister
itkRecursiveGaussianImageFilterID3ID3_swigregister(itkRecursiveGaussianImageFilterID3ID3)

def itkRecursiveGaussianImageFilterID3ID3___New_orig__() -> "itkRecursiveGaussianImageFilterID3ID3_Pointer":
    """itkRecursiveGaussianImageFilterID3ID3___New_orig__() -> itkRecursiveGaussianImageFilterID3ID3_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3___New_orig__()

def itkRecursiveGaussianImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterID3ID3 *":
    """itkRecursiveGaussianImageFilterID3ID3_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterID3ID3"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterID3ID3_cast(obj)

class itkRecursiveGaussianImageFilterIF2IF2(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF2IF2):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIF2IF2_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIF2IF2 self) -> itkRecursiveGaussianImageFilterIF2IF2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIF2IF2 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIF2IF2 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIF2IF2 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIF2IF2 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIF2IF2 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIF2IF2 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIF2IF2 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIF2IF2 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIF2IF2 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIF2IF2"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIF2IF2

        Create a new object of the class itkRecursiveGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIF2IF2.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_Clone, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetSigma, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSigma, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetOrder, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_GetOrder, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetZeroOrder, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetFirstOrder, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_SetSecondOrder, None, itkRecursiveGaussianImageFilterIF2IF2)
itkRecursiveGaussianImageFilterIF2IF2_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_swigregister
itkRecursiveGaussianImageFilterIF2IF2_swigregister(itkRecursiveGaussianImageFilterIF2IF2)

def itkRecursiveGaussianImageFilterIF2IF2___New_orig__() -> "itkRecursiveGaussianImageFilterIF2IF2_Pointer":
    """itkRecursiveGaussianImageFilterIF2IF2___New_orig__() -> itkRecursiveGaussianImageFilterIF2IF2_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2___New_orig__()

def itkRecursiveGaussianImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIF2IF2 *":
    """itkRecursiveGaussianImageFilterIF2IF2_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIF2IF2"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF2IF2_cast(obj)

class itkRecursiveGaussianImageFilterIF3IF3(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIF3IF3):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIF3IF3_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIF3IF3 self) -> itkRecursiveGaussianImageFilterIF3IF3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIF3IF3 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIF3IF3 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIF3IF3 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIF3IF3 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIF3IF3 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIF3IF3 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIF3IF3 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIF3IF3 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIF3IF3 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIF3IF3"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIF3IF3

        Create a new object of the class itkRecursiveGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIF3IF3.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_Clone, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetSigma, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSigma, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetOrder, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_GetOrder, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetZeroOrder, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetFirstOrder, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_SetSecondOrder, None, itkRecursiveGaussianImageFilterIF3IF3)
itkRecursiveGaussianImageFilterIF3IF3_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_swigregister
itkRecursiveGaussianImageFilterIF3IF3_swigregister(itkRecursiveGaussianImageFilterIF3IF3)

def itkRecursiveGaussianImageFilterIF3IF3___New_orig__() -> "itkRecursiveGaussianImageFilterIF3IF3_Pointer":
    """itkRecursiveGaussianImageFilterIF3IF3___New_orig__() -> itkRecursiveGaussianImageFilterIF3IF3_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3___New_orig__()

def itkRecursiveGaussianImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIF3IF3 *":
    """itkRecursiveGaussianImageFilterIF3IF3_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIF3IF3"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIF3IF3_cast(obj)

class itkRecursiveGaussianImageFilterISS2ISS2(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS2ISS2):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterISS2ISS2_Pointer":
        """Clone(itkRecursiveGaussianImageFilterISS2ISS2 self) -> itkRecursiveGaussianImageFilterISS2ISS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterISS2ISS2 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterISS2ISS2 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterISS2ISS2 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterISS2ISS2 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterISS2ISS2 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterISS2ISS2 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterISS2ISS2 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterISS2ISS2 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterISS2ISS2 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterISS2ISS2"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterISS2ISS2

        Create a new object of the class itkRecursiveGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterISS2ISS2.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_Clone, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetSigma, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSigma, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetOrder, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_GetOrder, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetZeroOrder, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetFirstOrder, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_SetSecondOrder, None, itkRecursiveGaussianImageFilterISS2ISS2)
itkRecursiveGaussianImageFilterISS2ISS2_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_swigregister
itkRecursiveGaussianImageFilterISS2ISS2_swigregister(itkRecursiveGaussianImageFilterISS2ISS2)

def itkRecursiveGaussianImageFilterISS2ISS2___New_orig__() -> "itkRecursiveGaussianImageFilterISS2ISS2_Pointer":
    """itkRecursiveGaussianImageFilterISS2ISS2___New_orig__() -> itkRecursiveGaussianImageFilterISS2ISS2_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2___New_orig__()

def itkRecursiveGaussianImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterISS2ISS2 *":
    """itkRecursiveGaussianImageFilterISS2ISS2_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterISS2ISS2"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS2ISS2_cast(obj)

class itkRecursiveGaussianImageFilterISS3ISS3(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterISS3ISS3):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterISS3ISS3_Pointer":
        """Clone(itkRecursiveGaussianImageFilterISS3ISS3 self) -> itkRecursiveGaussianImageFilterISS3ISS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterISS3ISS3 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterISS3ISS3 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterISS3ISS3 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterISS3ISS3 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterISS3ISS3 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterISS3ISS3 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterISS3ISS3 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterISS3ISS3 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterISS3ISS3 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterISS3ISS3"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterISS3ISS3

        Create a new object of the class itkRecursiveGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterISS3ISS3.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_Clone, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetSigma, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSigma, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetOrder, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_GetOrder, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetZeroOrder, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetFirstOrder, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_SetSecondOrder, None, itkRecursiveGaussianImageFilterISS3ISS3)
itkRecursiveGaussianImageFilterISS3ISS3_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_swigregister
itkRecursiveGaussianImageFilterISS3ISS3_swigregister(itkRecursiveGaussianImageFilterISS3ISS3)

def itkRecursiveGaussianImageFilterISS3ISS3___New_orig__() -> "itkRecursiveGaussianImageFilterISS3ISS3_Pointer":
    """itkRecursiveGaussianImageFilterISS3ISS3___New_orig__() -> itkRecursiveGaussianImageFilterISS3ISS3_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3___New_orig__()

def itkRecursiveGaussianImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterISS3ISS3 *":
    """itkRecursiveGaussianImageFilterISS3ISS3_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterISS3ISS3"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterISS3ISS3_cast(obj)

class itkRecursiveGaussianImageFilterIUC2IUC2(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC2IUC2):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIUC2IUC2_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIUC2IUC2 self) -> itkRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIUC2IUC2 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUC2IUC2 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIUC2IUC2 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIUC2IUC2 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIUC2IUC2 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIUC2IUC2 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIUC2IUC2 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUC2IUC2"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUC2IUC2

        Create a new object of the class itkRecursiveGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIUC2IUC2.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_Clone, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetSigma, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSigma, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetOrder, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_GetOrder, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetZeroOrder, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetFirstOrder, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_SetSecondOrder, None, itkRecursiveGaussianImageFilterIUC2IUC2)
itkRecursiveGaussianImageFilterIUC2IUC2_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_swigregister
itkRecursiveGaussianImageFilterIUC2IUC2_swigregister(itkRecursiveGaussianImageFilterIUC2IUC2)

def itkRecursiveGaussianImageFilterIUC2IUC2___New_orig__() -> "itkRecursiveGaussianImageFilterIUC2IUC2_Pointer":
    """itkRecursiveGaussianImageFilterIUC2IUC2___New_orig__() -> itkRecursiveGaussianImageFilterIUC2IUC2_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2___New_orig__()

def itkRecursiveGaussianImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUC2IUC2 *":
    """itkRecursiveGaussianImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUC2IUC2"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC2IUC2_cast(obj)

class itkRecursiveGaussianImageFilterIUC3IUC3(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUC3IUC3):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIUC3IUC3_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIUC3IUC3 self) -> itkRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIUC3IUC3 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUC3IUC3 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIUC3IUC3 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIUC3IUC3 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIUC3IUC3 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIUC3IUC3 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIUC3IUC3 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUC3IUC3"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUC3IUC3

        Create a new object of the class itkRecursiveGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIUC3IUC3.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_Clone, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetSigma, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSigma, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetOrder, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_GetOrder, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetZeroOrder, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetFirstOrder, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_SetSecondOrder, None, itkRecursiveGaussianImageFilterIUC3IUC3)
itkRecursiveGaussianImageFilterIUC3IUC3_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_swigregister
itkRecursiveGaussianImageFilterIUC3IUC3_swigregister(itkRecursiveGaussianImageFilterIUC3IUC3)

def itkRecursiveGaussianImageFilterIUC3IUC3___New_orig__() -> "itkRecursiveGaussianImageFilterIUC3IUC3_Pointer":
    """itkRecursiveGaussianImageFilterIUC3IUC3___New_orig__() -> itkRecursiveGaussianImageFilterIUC3IUC3_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3___New_orig__()

def itkRecursiveGaussianImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUC3IUC3 *":
    """itkRecursiveGaussianImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUC3IUC3"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUC3IUC3_cast(obj)

class itkRecursiveGaussianImageFilterIUS2IUS2(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS2IUS2):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIUS2IUS2_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIUS2IUS2 self) -> itkRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIUS2IUS2 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUS2IUS2 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIUS2IUS2 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIUS2IUS2 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIUS2IUS2 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIUS2IUS2 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIUS2IUS2 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUS2IUS2"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUS2IUS2

        Create a new object of the class itkRecursiveGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIUS2IUS2.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_Clone, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetSigma, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSigma, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetOrder, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_GetOrder, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetZeroOrder, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetFirstOrder, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_SetSecondOrder, None, itkRecursiveGaussianImageFilterIUS2IUS2)
itkRecursiveGaussianImageFilterIUS2IUS2_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_swigregister
itkRecursiveGaussianImageFilterIUS2IUS2_swigregister(itkRecursiveGaussianImageFilterIUS2IUS2)

def itkRecursiveGaussianImageFilterIUS2IUS2___New_orig__() -> "itkRecursiveGaussianImageFilterIUS2IUS2_Pointer":
    """itkRecursiveGaussianImageFilterIUS2IUS2___New_orig__() -> itkRecursiveGaussianImageFilterIUS2IUS2_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2___New_orig__()

def itkRecursiveGaussianImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUS2IUS2 *":
    """itkRecursiveGaussianImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUS2IUS2"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS2IUS2_cast(obj)

class itkRecursiveGaussianImageFilterIUS3IUS3(itkRecursiveSeparableImageFilterPython.itkRecursiveSeparableImageFilterIUS3IUS3):
    """


    Base class for computing IIR convolution with an approximation of a
    Gaussian kernel.

    \\[ \\frac{ 1 }{ \\sigma \\sqrt{ 2 \\pi } } \\exp{
    \\left( - \\frac{x^2}{ 2 \\sigma^2 } \\right) } \\]

    RecursiveGaussianImageFilter is the base class for recursive filters
    that approximate convolution with the Gaussian kernel. This class
    implements the recursive filtering method proposed by R.Deriche in
    IEEE-PAMI Vol.12, No.1, January 1990, pp 78-87, "Fast Algorithms for
    Low-Level Vision"

    Details of the implementation are described in the technical report:
    R. Deriche, "Recursively Implementing The Gaussian and Its
    Derivatives", INRIA, 1993,ftp://ftp.inria.fr/INRIA/tech-
    reports/RR/RR-1893.ps.gz

    Further improvements of the algorithm are described in: G. Farneback &
    C.-F. Westin, "On Implementation of Recursive Gaussian  Filters", so
    far unpublished.

    As compared to itk::DiscreteGaussianImageFilter, this filter tends to
    be faster for large kernels, and it can take the derivative of the
    blurred image in one step. Also, note that we have
    itk::RecursiveGaussianImageFilter::SetSigma(), but
    itk::DiscreteGaussianImageFilter::SetVariance().

    See:   DiscreteGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/FindHigherDerivative
    sOfImage,Find Higher Derivatives Of Image} \\endsphinx

    C++ includes: itkRecursiveGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRecursiveGaussianImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRecursiveGaussianImageFilterIUS3IUS3_Pointer":
        """Clone(itkRecursiveGaussianImageFilterIUS3IUS3 self) -> itkRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_Clone(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkRecursiveGaussianImageFilterIUS3IUS3 self) -> double

        Set/Get the Sigma,
        measured in world coordinates, of the Gaussian kernel. The default is
        1.0. An exception will be generated if the Sigma value is less than or
        equal to zero. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetSigma(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkRecursiveGaussianImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSigma(self, _arg)


    def SetNormalizeAcrossScale(self, _arg: 'bool const') -> "void":
        """
        SetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get the
        flag for normalizing the gaussian over scale-space.

        This flag enables the analysis of the differential shape of features
        independent of their size ( both pixels and physical size ). Following
        the notation of Tony Lindeberg:

        Let \\[ L(x; t) = g(x; t) \\ast f(x) \\] be the scale-space
        representation of image \\[ f(x) \\] where \\[ g(x; t) =
        \\frac{1}{ \\sqrt{ 2 \\pi t} } \\exp{ \\left(
        -\\frac{x^2}{ 2 t } \\right) } \\] is the Gaussian function and
        \\[\\ast\\] denotes convolution. This is a change from above
        with \\[ t = \\sigma^2 \\].

        Then the normalized derivative operator for normalized coordinates
        across scale is:

        \\[ \\partial_\\xi = \\sqrt{t} \\partial_x \\]

        The resulting scaling factor is \\[ \\sigma^N \\] where N is the
        order of the derivative.

        When this flag is ON the filter will be normalized in such a way that
        the values of derivatives are not biased by the size of the object.
        That is to say the maximum value a feature reaches across scale is
        independent of the scale of the object.

        For analyzing an image across scale-space you want to enable this
        flag. It is disabled by default.

        Not all scale space axioms are satisfied by this filter, some are only
        approximated. Particularly, at fine scales ( say less than 1 pixel )
        other methods such as a discrete Gaussian kernel should be considered.

        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale(self, _arg)


    def GetNormalizeAcrossScale(self) -> "bool":
        """GetNormalizeAcrossScale(itkRecursiveGaussianImageFilterIUS3IUS3 self) -> bool"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale(self)


    def SetOrder(self, _arg: 'itkRecursiveGaussianImageFilterEnums::GaussianOrder const') -> "void":
        """
        SetOrder(itkRecursiveGaussianImageFilterIUS3IUS3 self, itkRecursiveGaussianImageFilterEnums::GaussianOrder const _arg)

        Set/Get the Order of the
        Gaussian to convolve with. ZeroOrder is equivalent to convolving with
        a Gaussian. This is the default.

        FirstOrder is equivalent to convolving with the first derivative of a
        Gaussian.

        SecondOrder is equivalent to convolving with the second derivative of
        a Gaussian. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetOrder(self, _arg)


    def GetOrder(self) -> "itkRecursiveGaussianImageFilterEnums::GaussianOrder":
        """GetOrder(itkRecursiveGaussianImageFilterIUS3IUS3 self) -> itkRecursiveGaussianImageFilterEnums::GaussianOrder"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetOrder(self)


    def SetZeroOrder(self) -> "void":
        """
        SetZeroOrder(itkRecursiveGaussianImageFilterIUS3IUS3 self)

        Explicitly set a
        zeroth order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetZeroOrder(self)


    def SetFirstOrder(self) -> "void":
        """
        SetFirstOrder(itkRecursiveGaussianImageFilterIUS3IUS3 self)

        Explicitly set a
        first order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetFirstOrder(self)


    def SetSecondOrder(self) -> "void":
        """
        SetSecondOrder(itkRecursiveGaussianImageFilterIUS3IUS3 self)

        Explicitly set a
        second order derivative. 
        """
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSecondOrder(self)

    __swig_destroy__ = _itkRecursiveGaussianImageFilterPython.delete_itkRecursiveGaussianImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUS3IUS3"""
        return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRecursiveGaussianImageFilterIUS3IUS3

        Create a new object of the class itkRecursiveGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRecursiveGaussianImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRecursiveGaussianImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRecursiveGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRecursiveGaussianImageFilterIUS3IUS3.Clone = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_Clone, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.GetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetSigma, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetSigma = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSigma, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.GetNormalizeAcrossScale = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetNormalizeAcrossScale, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetOrder, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.GetOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_GetOrder, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetZeroOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetZeroOrder, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetFirstOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetFirstOrder, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3.SetSecondOrder = new_instancemethod(_itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_SetSecondOrder, None, itkRecursiveGaussianImageFilterIUS3IUS3)
itkRecursiveGaussianImageFilterIUS3IUS3_swigregister = _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_swigregister
itkRecursiveGaussianImageFilterIUS3IUS3_swigregister(itkRecursiveGaussianImageFilterIUS3IUS3)

def itkRecursiveGaussianImageFilterIUS3IUS3___New_orig__() -> "itkRecursiveGaussianImageFilterIUS3IUS3_Pointer":
    """itkRecursiveGaussianImageFilterIUS3IUS3___New_orig__() -> itkRecursiveGaussianImageFilterIUS3IUS3_Pointer"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3___New_orig__()

def itkRecursiveGaussianImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkRecursiveGaussianImageFilterIUS3IUS3 *":
    """itkRecursiveGaussianImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkRecursiveGaussianImageFilterIUS3IUS3"""
    return _itkRecursiveGaussianImageFilterPython.itkRecursiveGaussianImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def recursive_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for RecursiveGaussianImageFilter"""
    import itk
    instance = itk.RecursiveGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def recursive_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RecursiveGaussianImageFilter.values()[0]
    else:
        filter_object = itk.RecursiveGaussianImageFilter

    recursive_gaussian_image_filter.__doc__ = filter_object.__doc__
    recursive_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    recursive_gaussian_image_filter.__doc__ += "Available Keyword Arguments:\n"
    recursive_gaussian_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



