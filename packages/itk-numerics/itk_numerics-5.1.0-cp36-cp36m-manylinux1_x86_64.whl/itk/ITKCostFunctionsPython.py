# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ITKCostFunctionsPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKCostFunctionsPython', [dirname(__file__)])
        except ImportError:
            import _ITKCostFunctionsPython
            return _ITKCostFunctionsPython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKCostFunctionsPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKCostFunctionsPython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKCostFunctionsPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkArrayPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import ITKCommonBasePython
import itkCostFunctionPython
import vnl_least_squares_functionPython
import itkArray2DPython
import itkOptimizerParametersPython

def itkCumulativeGaussianCostFunction_New():
  return itkCumulativeGaussianCostFunction.New()


def itkMultipleValuedCostFunction_New():
  return itkMultipleValuedCostFunction.New()


def itkSingleValuedCostFunction_New():
  return itkSingleValuedCostFunction.New()

class itkMultipleValuedCostFunction(itkCostFunctionPython.itkCostFunctionTemplateD):
    """


    This class is a base for the CostFunctions returning a multiple
    values.

    C++ includes: itkMultipleValuedCostFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self, parameters: 'itkOptimizerParametersD') -> "itkArrayD":
        """
        GetValue(itkMultipleValuedCostFunction self, itkOptimizerParametersD parameters) -> itkArrayD

        This method returns the
        value of the cost function corresponding to the specified parameters.
        This method MUST be overloaded by derived classes 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetValue(self, parameters)


    def GetNumberOfValues(self) -> "unsigned int":
        """
        GetNumberOfValues(itkMultipleValuedCostFunction self) -> unsigned int

        Return the number
        of values that are computed by the multivalued cost function. This
        method MUST be overloaded by derived classes 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetNumberOfValues(self)


    def GetDerivative(self, parameters: 'itkOptimizerParametersD', derivative: 'itkArray2DD') -> "void":
        """
        GetDerivative(itkMultipleValuedCostFunction self, itkOptimizerParametersD parameters, itkArray2DD derivative)

        This method returns
        the derivative of the cost function corresponding to the specified
        parameters This method MUST be overloaded by derived classes 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetDerivative(self, parameters, derivative)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedCostFunction

    def cast(obj: 'itkLightObject') -> "itkMultipleValuedCostFunction *":
        """cast(itkLightObject obj) -> itkMultipleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultipleValuedCostFunction

        Create a new object of the class itkMultipleValuedCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultipleValuedCostFunction.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultipleValuedCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultipleValuedCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultipleValuedCostFunction.GetValue = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetValue, None, itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction.GetNumberOfValues = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetNumberOfValues, None, itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction.GetDerivative = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetDerivative, None, itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction_swigregister = _ITKCostFunctionsPython.itkMultipleValuedCostFunction_swigregister
itkMultipleValuedCostFunction_swigregister(itkMultipleValuedCostFunction)

def itkMultipleValuedCostFunction_cast(obj: 'itkLightObject') -> "itkMultipleValuedCostFunction *":
    """itkMultipleValuedCostFunction_cast(itkLightObject obj) -> itkMultipleValuedCostFunction"""
    return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast(obj)

class itkMultipleValuedVnlCostFunctionAdaptor(vnl_least_squares_functionPython.vnl_least_squares_function):
    """


    This class is an Adaptor that allows to pass
    itk::MultipleValuedCostFunctions to vnl_optimizers expecting a
    vnl_cost_function.

    This class returns a single valued.

    C++ includes: itkMultipleValuedVnlCostFunctionAdaptor.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetCostFunction(self, costFunction: 'itkMultipleValuedCostFunction') -> "void":
        """
        SetCostFunction(itkMultipleValuedVnlCostFunctionAdaptor self, itkMultipleValuedCostFunction costFunction)

        Set the
        CostFunction deriving from MultipleValuedCostFunction 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetCostFunction(self, costFunction)


    def GetCostFunction(self) -> "itkMultipleValuedCostFunction const *":
        """
        GetCostFunction(itkMultipleValuedVnlCostFunctionAdaptor self) -> itkMultipleValuedCostFunction

        Get the
        CostFunction deriving from MultipleValuedCostFunction 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCostFunction(self)


    def compute(self, x: 'vnl_vectorD', f: 'vnl_vectorD', g: 'vnl_matrixD') -> "void":
        """
        compute(itkMultipleValuedVnlCostFunctionAdaptor self, vnl_vectorD x, vnl_vectorD f, vnl_matrixD g)

        Delegate computation of
        value and gradient to the costFunction. 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_compute(self, x, f, g)


    def ConvertExternalToInternalGradient(self, input: 'itkArray2DD', output: 'vnl_matrixD') -> "void":
        """
        ConvertExternalToInternalGradient(itkMultipleValuedVnlCostFunctionAdaptor self, itkArray2DD input, vnl_matrixD output)

        Convert external derivative measures into internal type 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient(self, input, output)


    def ConvertExternalToInternalMeasures(self, input: 'itkArrayD', output: 'vnl_vectorD') -> "void":
        """
        ConvertExternalToInternalMeasures(itkMultipleValuedVnlCostFunctionAdaptor self, itkArrayD input, vnl_vectorD output)

        Convert external measures into internal type 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalMeasures(self, input, output)


    def SetUseGradient(self, arg0: 'bool') -> "void":
        """
        SetUseGradient(itkMultipleValuedVnlCostFunctionAdaptor self, bool arg0)

        Define if the Cost
        function should provide a customized Gradient computation or the
        gradient can be computed internally using a default approach 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetUseGradient(self, arg0)


    def UseGradientOn(self) -> "void":
        """UseGradientOn(itkMultipleValuedVnlCostFunctionAdaptor self)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOn(self)


    def UseGradientOff(self) -> "void":
        """UseGradientOff(itkMultipleValuedVnlCostFunctionAdaptor self)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOff(self)


    def GetUseGradient(self) -> "bool":
        """GetUseGradient(itkMultipleValuedVnlCostFunctionAdaptor self) -> bool"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetUseGradient(self)


    def SetScales(self, scales: 'itkArrayD') -> "void":
        """
        SetScales(itkMultipleValuedVnlCostFunctionAdaptor self, itkArrayD scales)

        Set current parameters
        scaling. 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetScales(self, scales)


    def AddObserver(self, event: 'itkEventObject', arg1: 'itkCommand') -> "unsigned long":
        """
        AddObserver(itkMultipleValuedVnlCostFunctionAdaptor self, itkEventObject event, itkCommand arg1) -> unsigned long

        This AddObserver method
        allows to simulate that this class derives from an itkObject for the
        purpose of reporting iteration events. The goal of this method is to
        allow ITK-vnl optimizer adaptors to get iteration events despite the
        fact that VNL does not provide callbacks. 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_AddObserver(self, event, arg1)


    def GetCachedValue(self) -> "itkArrayD const &":
        """
        GetCachedValue(itkMultipleValuedVnlCostFunctionAdaptor self) -> itkArrayD

        Return the value of
        the last evaluation to the value of the cost function. Note that this
        method DOES NOT triggers a computation of the function or the
        derivatives, it only returns previous values. Therefore the values
        here are only valid after you invoke the f() or gradf() methods. 
        """
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedValue(self)


    def GetCachedDerivative(self) -> "itkArray2DD const &":
        """GetCachedDerivative(itkMultipleValuedVnlCostFunctionAdaptor self) -> itkArray2DD"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedDerivative(self)


    def GetCachedCurrentParameters(self) -> "itkOptimizerParametersD const &":
        """GetCachedCurrentParameters(itkMultipleValuedVnlCostFunctionAdaptor self) -> itkOptimizerParametersD"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters(self)


    def __init__(self, *args):
        """
        __init__(itkMultipleValuedVnlCostFunctionAdaptor self, unsigned int spaceDimension, unsigned int numberOfValues) -> itkMultipleValuedVnlCostFunctionAdaptor
        __init__(itkMultipleValuedVnlCostFunctionAdaptor self, itkMultipleValuedVnlCostFunctionAdaptor arg0) -> itkMultipleValuedVnlCostFunctionAdaptor



        This class is an Adaptor that allows to pass
        itk::MultipleValuedCostFunctions to vnl_optimizers expecting a
        vnl_cost_function.

        This class returns a single valued.

        C++ includes: itkMultipleValuedVnlCostFunctionAdaptor.h 
        """
        _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swiginit(self, _ITKCostFunctionsPython.new_itkMultipleValuedVnlCostFunctionAdaptor(*args))
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedVnlCostFunctionAdaptor
itkMultipleValuedVnlCostFunctionAdaptor.SetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetCostFunction, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCostFunction, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.compute = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_compute, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalMeasures = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalMeasures, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.SetUseGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetUseGradient, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.UseGradientOn = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOn, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.UseGradientOff = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOff, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetUseGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetUseGradient, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.SetScales = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetScales, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.AddObserver = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_AddObserver, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedValue = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedValue, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedDerivative = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedDerivative, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedCurrentParameters = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters, None, itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor_swigregister = _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swigregister
itkMultipleValuedVnlCostFunctionAdaptor_swigregister(itkMultipleValuedVnlCostFunctionAdaptor)

class itkSingleValuedCostFunction(itkCostFunctionPython.itkCostFunctionTemplateD):
    """


    This class is a base for the CostFunctions returning a single value.

    C++ includes: itkSingleValuedCostFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetValue(self, parameters: 'itkOptimizerParametersD') -> "double":
        """
        GetValue(itkSingleValuedCostFunction self, itkOptimizerParametersD parameters) -> double

        This method returns the
        value of the cost function corresponding to the specified parameters.

        """
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValue(self, parameters)


    def GetDerivative(self, parameters: 'itkOptimizerParametersD', derivative: 'itkArrayD') -> "void":
        """
        GetDerivative(itkSingleValuedCostFunction self, itkOptimizerParametersD parameters, itkArrayD derivative)

        This method returns
        the derivative of the cost function corresponding to the specified
        parameters. 
        """
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetDerivative(self, parameters, derivative)


    def GetValueAndDerivative(self, parameters: 'itkOptimizerParametersD', value: 'double &', derivative: 'itkArrayD') -> "void":
        """
        GetValueAndDerivative(itkSingleValuedCostFunction self, itkOptimizerParametersD parameters, double & value, itkArrayD derivative)

        This method
        returns the value and derivative of the cost function corresponding to
        the specified parameters 
        """
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValueAndDerivative(self, parameters, value, derivative)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedCostFunction

    def cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunction *":
        """cast(itkLightObject obj) -> itkSingleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleValuedCostFunction

        Create a new object of the class itkSingleValuedCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleValuedCostFunction.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleValuedCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedCostFunction.GetValue = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValue, None, itkSingleValuedCostFunction)
itkSingleValuedCostFunction.GetDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetDerivative, None, itkSingleValuedCostFunction)
itkSingleValuedCostFunction.GetValueAndDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValueAndDerivative, None, itkSingleValuedCostFunction)
itkSingleValuedCostFunction_swigregister = _ITKCostFunctionsPython.itkSingleValuedCostFunction_swigregister
itkSingleValuedCostFunction_swigregister(itkSingleValuedCostFunction)

def itkSingleValuedCostFunction_cast(obj: 'itkLightObject') -> "itkSingleValuedCostFunction *":
    """itkSingleValuedCostFunction_cast(itkLightObject obj) -> itkSingleValuedCostFunction"""
    return _ITKCostFunctionsPython.itkSingleValuedCostFunction_cast(obj)

class itkSingleValuedVnlCostFunctionAdaptor(vnl_cost_functionPython.vnl_cost_function):
    """


    This class is an Adaptor that allows to pass
    itk::SingleValuedCostFunctions to vnl_optimizers expecting a
    vnl_cost_function.

    This class returns a single valued.

    C++ includes: itkSingleValuedVnlCostFunctionAdaptor.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def SetCostFunction(self, costFunction: 'itkSingleValuedCostFunction') -> "void":
        """
        SetCostFunction(itkSingleValuedVnlCostFunctionAdaptor self, itkSingleValuedCostFunction costFunction)

        Set the
        CostFunction deriving from SingleValuedCostFunction 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetCostFunction(self, costFunction)


    def GetCostFunction(self) -> "itkSingleValuedCostFunction const *":
        """
        GetCostFunction(itkSingleValuedVnlCostFunctionAdaptor self) -> itkSingleValuedCostFunction

        Get the
        CostFunction deriving from SingleValuedCostFunction 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCostFunction(self)


    def ConvertExternalToInternalGradient(self, input: 'itkArrayD', output: 'vnl_vectorD') -> "void":
        """
        ConvertExternalToInternalGradient(itkSingleValuedVnlCostFunctionAdaptor self, itkArrayD input, vnl_vectorD output)

        Convert external derivative measures into internal type 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient(self, input, output)


    def SetScales(self, scales: 'itkArrayD') -> "void":
        """
        SetScales(itkSingleValuedVnlCostFunctionAdaptor self, itkArrayD scales)

        Set current parameters
        scaling. 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetScales(self, scales)


    def SetNegateCostFunction(self, value: 'bool') -> "void":
        """
        SetNegateCostFunction(itkSingleValuedVnlCostFunctionAdaptor self, bool value)

        Set/Get
        Negate cost function. The purpose of this boolean flag is to make
        possible to take certain VNL optimizers that are only minimizers, and
        use them for maximizing functions. When the boolean flag is set to
        true, the values returned by GetValue in the internal ITK cost
        function will be multiplied by -1 before returning it in the f()
        function. Similar operations will be done for the gradf() and
        compute() methods. When the boolean flag is set to false, then the
        values returned by the ITK cost function will be passed unchanged to
        the VNL optimizers. 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetNegateCostFunction(self, value)


    def GetNegateCostFunction(self) -> "bool":
        """GetNegateCostFunction(itkSingleValuedVnlCostFunctionAdaptor self) -> bool"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetNegateCostFunction(self)


    def NegateCostFunctionOn(self) -> "void":
        """NegateCostFunctionOn(itkSingleValuedVnlCostFunctionAdaptor self)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOn(self)


    def NegateCostFunctionOff(self) -> "void":
        """NegateCostFunctionOff(itkSingleValuedVnlCostFunctionAdaptor self)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOff(self)


    def AddObserver(self, event: 'itkEventObject', arg1: 'itkCommand') -> "unsigned long":
        """
        AddObserver(itkSingleValuedVnlCostFunctionAdaptor self, itkEventObject event, itkCommand arg1) -> unsigned long

        This AddObserver method
        allows to simulate that this class derives from an itkObject for the
        purpose of reporting iteration events. The goal of this method is to
        allow ITK-vnl optimizer adaptors to get iteration events despite the
        fact that VNL does not provide callbacks. 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_AddObserver(self, event, arg1)


    def GetCachedValue(self) -> "double const &":
        """
        GetCachedValue(itkSingleValuedVnlCostFunctionAdaptor self) -> double const &

        Return the value of
        the last evaluation to the value of the cost function. Note that this
        method DOES NOT triggers a computation of the function or the
        derivatives, it only returns previous values. Therefore the values
        here are only valid after you invoke the f() or gradf() methods. 
        """
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedValue(self)


    def GetCachedDerivative(self) -> "itkArrayD const &":
        """GetCachedDerivative(itkSingleValuedVnlCostFunctionAdaptor self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedDerivative(self)


    def GetCachedCurrentParameters(self) -> "itkOptimizerParametersD const &":
        """GetCachedCurrentParameters(itkSingleValuedVnlCostFunctionAdaptor self) -> itkOptimizerParametersD"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters(self)


    def __init__(self, *args):
        """
        __init__(itkSingleValuedVnlCostFunctionAdaptor self, unsigned int spaceDimension) -> itkSingleValuedVnlCostFunctionAdaptor
        __init__(itkSingleValuedVnlCostFunctionAdaptor self, itkSingleValuedVnlCostFunctionAdaptor arg0) -> itkSingleValuedVnlCostFunctionAdaptor



        This class is an Adaptor that allows to pass
        itk::SingleValuedCostFunctions to vnl_optimizers expecting a
        vnl_cost_function.

        This class returns a single valued.

        C++ includes: itkSingleValuedVnlCostFunctionAdaptor.h 
        """
        _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swiginit(self, _ITKCostFunctionsPython.new_itkSingleValuedVnlCostFunctionAdaptor(*args))
    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedVnlCostFunctionAdaptor
itkSingleValuedVnlCostFunctionAdaptor.SetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetCostFunction, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCostFunction, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalGradient = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.SetScales = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetScales, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.SetNegateCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetNegateCostFunction, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetNegateCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetNegateCostFunction, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.NegateCostFunctionOn = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOn, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.NegateCostFunctionOff = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOff, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.AddObserver = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_AddObserver, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedValue = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedValue, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedDerivative, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedCurrentParameters = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters, None, itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor_swigregister = _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swigregister
itkSingleValuedVnlCostFunctionAdaptor_swigregister(itkSingleValuedVnlCostFunctionAdaptor)

class itkCumulativeGaussianCostFunction(itkMultipleValuedCostFunction):
    """


    Cost function for the Cumulative Gaussian Optimizer.

    The Cumulative Gaussian is defined as the integral of a normalized
    Gaussian over the domain $ [-\\infty, \\infty] $.

    Let G(x) be the normalized Gaussian defined as  $ G(x) =
    \\frac{1}{{\\sigma \\sqrt {2\\pi } }}e^{ - \\frac{{\\left(
    {x - \\mu } \\right)^2 }}{{2\\sigma ^2 }}} $. The Cumulative
    Gaussian, is acquired by integrating G(x) then scaling and offseting
    it by the lower asymptotes $ I_1 $ and upper $ I_2 $: $ C\\left( x
    \\right) = I_1 + \\frac{{I_2 - I_1 }}{2}\\left( {1 +
    erf\\left( {\\frac{{x - \\mu }}{{\\sigma \\sqrt 2 }}}
    \\right)} \\right) $, where $ C\\left( { - \\infty }
    \\right) = I_1 $ and $ C\\left( \\infty \\right) = I_2 $. C(x)
    can only be tabulated since it's a variation of the error function. It
    is included in this class as the function EvaluateCumulativeGaussian,
    where the argument of the function is $ {\\frac{{x - \\mu
    }}{{\\sigma \\sqrt 2 }}} $.

    C++ includes: itkCumulativeGaussianCostFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCumulativeGaussianCostFunction_Pointer":
        """__New_orig__() -> itkCumulativeGaussianCostFunction_Pointer"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCumulativeGaussianCostFunction_Pointer":
        """Clone(itkCumulativeGaussianCostFunction self) -> itkCumulativeGaussianCostFunction_Pointer"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Clone(self)

    SpaceDimension = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SpaceDimension

    def GetValuePointer(self, parameters: 'itkOptimizerParametersD') -> "itkArrayD *":
        """
        GetValuePointer(itkCumulativeGaussianCostFunction self, itkOptimizerParametersD parameters) -> itkArrayD

        Return a pointer of
        values evaluated for the given parameters. 
        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetValuePointer(self, parameters)


    def CalculateFitError(self, setTestArray: 'itkArrayD') -> "double":
        """
        CalculateFitError(itkCumulativeGaussianCostFunction self, itkArrayD setTestArray) -> double

        Calculate a fit
        error between the data and the fit curve. 
        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_CalculateFitError(self, setTestArray)


    def EvaluateCumulativeGaussian(self, argument: 'double') -> "double":
        """
        EvaluateCumulativeGaussian(itkCumulativeGaussianCostFunction self, double argument) -> double

        Given
        the argument of a Cumulative Gaussian, return its value. 
        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_EvaluateCumulativeGaussian(self, argument)


    def Initialize(self, rangeDimension: 'unsigned int') -> "void":
        """
        Initialize(itkCumulativeGaussianCostFunction self, unsigned int rangeDimension)

        Initialize the arrays.

        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Initialize(self, rangeDimension)


    def SetOriginalDataArray(self, setOriginalDataArray: 'itkArrayD') -> "void":
        """
        SetOriginalDataArray(itkCumulativeGaussianCostFunction self, itkArrayD setOriginalDataArray)

        Set the
        original data array. 
        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SetOriginalDataArray(self, setOriginalDataArray)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkCumulativeGaussianCostFunction

    def cast(obj: 'itkLightObject') -> "itkCumulativeGaussianCostFunction *":
        """cast(itkLightObject obj) -> itkCumulativeGaussianCostFunction"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCumulativeGaussianCostFunction

        Create a new object of the class itkCumulativeGaussianCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCumulativeGaussianCostFunction.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCumulativeGaussianCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCumulativeGaussianCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCumulativeGaussianCostFunction.Clone = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Clone, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.GetValuePointer = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetValuePointer, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.CalculateFitError = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_CalculateFitError, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.EvaluateCumulativeGaussian = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_EvaluateCumulativeGaussian, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Initialize, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.SetOriginalDataArray = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SetOriginalDataArray, None, itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction_swigregister = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_swigregister
itkCumulativeGaussianCostFunction_swigregister(itkCumulativeGaussianCostFunction)

def itkCumulativeGaussianCostFunction___New_orig__() -> "itkCumulativeGaussianCostFunction_Pointer":
    """itkCumulativeGaussianCostFunction___New_orig__() -> itkCumulativeGaussianCostFunction_Pointer"""
    return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__()

def itkCumulativeGaussianCostFunction_cast(obj: 'itkLightObject') -> "itkCumulativeGaussianCostFunction *":
    """itkCumulativeGaussianCostFunction_cast(itkLightObject obj) -> itkCumulativeGaussianCostFunction"""
    return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast(obj)



