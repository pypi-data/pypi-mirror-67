# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkExpandImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkExpandImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkExpandImageFilterPython
            return _itkExpandImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkExpandImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkExpandImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkExpandImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkInterpolateImageFunctionPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkImagePython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkArrayPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkExpandImageFilterIVF43IVF43_New():
  return itkExpandImageFilterIVF43IVF43.New()


def itkExpandImageFilterIVF42IVF42_New():
  return itkExpandImageFilterIVF42IVF42.New()


def itkExpandImageFilterIVF33IVF33_New():
  return itkExpandImageFilterIVF33IVF33.New()


def itkExpandImageFilterIVF32IVF32_New():
  return itkExpandImageFilterIVF32IVF32.New()


def itkExpandImageFilterIVF23IVF23_New():
  return itkExpandImageFilterIVF23IVF23.New()


def itkExpandImageFilterIVF22IVF22_New():
  return itkExpandImageFilterIVF22IVF22.New()


def itkExpandImageFilterID3ID3_New():
  return itkExpandImageFilterID3ID3.New()


def itkExpandImageFilterID2ID2_New():
  return itkExpandImageFilterID2ID2.New()


def itkExpandImageFilterIF3IF3_New():
  return itkExpandImageFilterIF3IF3.New()


def itkExpandImageFilterIF2IF2_New():
  return itkExpandImageFilterIF2IF2.New()


def itkExpandImageFilterIUS3IUS3_New():
  return itkExpandImageFilterIUS3IUS3.New()


def itkExpandImageFilterIUS2IUS2_New():
  return itkExpandImageFilterIUS2IUS2.New()


def itkExpandImageFilterIUC3IUC3_New():
  return itkExpandImageFilterIUC3IUC3.New()


def itkExpandImageFilterIUC2IUC2_New():
  return itkExpandImageFilterIUC2IUC2.New()


def itkExpandImageFilterISS3ISS3_New():
  return itkExpandImageFilterISS3ISS3.New()


def itkExpandImageFilterISS2ISS2_New():
  return itkExpandImageFilterISS2ISS2.New()

class itkExpandImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkExpandImageFilterID2ID2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterID2ID2_Pointer":
        """Clone(itkExpandImageFilterID2ID2 self) -> itkExpandImageFilterID2ID2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionID2D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterID2ID2 self, itkInterpolateImageFunctionID2D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionID2D *":
        """GetModifiableInterpolator(itkExpandImageFilterID2ID2 self) -> itkInterpolateImageFunctionID2D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionID2D *":
        """
        GetInterpolator(itkExpandImageFilterID2ID2 self) -> itkInterpolateImageFunctionID2D
        GetInterpolator(itkExpandImageFilterID2ID2 self) -> itkInterpolateImageFunctionID2D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterID2ID2 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterID2ID2 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterID2ID2 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterID2ID2 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterID2ID2 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterID2ID2"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterID2ID2

        Create a new object of the class itkExpandImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterID2ID2.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_Clone, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetInterpolator, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetModifiableInterpolator, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetInterpolator, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetExpandFactors, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetExpandFactors, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateOutputInformation, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateInputRequestedRegion, None, itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_swigregister
itkExpandImageFilterID2ID2_swigregister(itkExpandImageFilterID2ID2)

def itkExpandImageFilterID2ID2___New_orig__() -> "itkExpandImageFilterID2ID2_Pointer":
    """itkExpandImageFilterID2ID2___New_orig__() -> itkExpandImageFilterID2ID2_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2___New_orig__()

def itkExpandImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkExpandImageFilterID2ID2 *":
    """itkExpandImageFilterID2ID2_cast(itkLightObject obj) -> itkExpandImageFilterID2ID2"""
    return _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_cast(obj)

class itkExpandImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkExpandImageFilterID3ID3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterID3ID3_Pointer":
        """Clone(itkExpandImageFilterID3ID3 self) -> itkExpandImageFilterID3ID3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionID3D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterID3ID3 self, itkInterpolateImageFunctionID3D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionID3D *":
        """GetModifiableInterpolator(itkExpandImageFilterID3ID3 self) -> itkInterpolateImageFunctionID3D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionID3D *":
        """
        GetInterpolator(itkExpandImageFilterID3ID3 self) -> itkInterpolateImageFunctionID3D
        GetInterpolator(itkExpandImageFilterID3ID3 self) -> itkInterpolateImageFunctionID3D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterID3ID3 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterID3ID3 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterID3ID3 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterID3ID3 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterID3ID3 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterID3ID3"""
        return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterID3ID3

        Create a new object of the class itkExpandImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterID3ID3.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_Clone, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetInterpolator, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetModifiableInterpolator, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetInterpolator, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetExpandFactors, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetExpandFactors, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateOutputInformation, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateInputRequestedRegion, None, itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_swigregister
itkExpandImageFilterID3ID3_swigregister(itkExpandImageFilterID3ID3)

def itkExpandImageFilterID3ID3___New_orig__() -> "itkExpandImageFilterID3ID3_Pointer":
    """itkExpandImageFilterID3ID3___New_orig__() -> itkExpandImageFilterID3ID3_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3___New_orig__()

def itkExpandImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkExpandImageFilterID3ID3 *":
    """itkExpandImageFilterID3ID3_cast(itkLightObject obj) -> itkExpandImageFilterID3ID3"""
    return _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_cast(obj)

class itkExpandImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkExpandImageFilterIF2IF2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIF2IF2_Pointer":
        """Clone(itkExpandImageFilterIF2IF2 self) -> itkExpandImageFilterIF2IF2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF2D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIF2IF2 self, itkInterpolateImageFunctionIF2D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF2D *":
        """GetModifiableInterpolator(itkExpandImageFilterIF2IF2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF2D *":
        """
        GetInterpolator(itkExpandImageFilterIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        GetInterpolator(itkExpandImageFilterIF2IF2 self) -> itkInterpolateImageFunctionIF2D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIF2IF2 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIF2IF2 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIF2IF2 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIF2IF2 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIF2IF2 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIF2IF2"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIF2IF2

        Create a new object of the class itkExpandImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIF2IF2.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_Clone, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetInterpolator, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetModifiableInterpolator, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetInterpolator, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetExpandFactors, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetExpandFactors, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateOutputInformation, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateInputRequestedRegion, None, itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_swigregister
itkExpandImageFilterIF2IF2_swigregister(itkExpandImageFilterIF2IF2)

def itkExpandImageFilterIF2IF2___New_orig__() -> "itkExpandImageFilterIF2IF2_Pointer":
    """itkExpandImageFilterIF2IF2___New_orig__() -> itkExpandImageFilterIF2IF2_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2___New_orig__()

def itkExpandImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIF2IF2 *":
    """itkExpandImageFilterIF2IF2_cast(itkLightObject obj) -> itkExpandImageFilterIF2IF2"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_cast(obj)

class itkExpandImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkExpandImageFilterIF3IF3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIF3IF3_Pointer":
        """Clone(itkExpandImageFilterIF3IF3 self) -> itkExpandImageFilterIF3IF3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIF3D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIF3IF3 self, itkInterpolateImageFunctionIF3D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIF3D *":
        """GetModifiableInterpolator(itkExpandImageFilterIF3IF3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIF3D *":
        """
        GetInterpolator(itkExpandImageFilterIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        GetInterpolator(itkExpandImageFilterIF3IF3 self) -> itkInterpolateImageFunctionIF3D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIF3IF3 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIF3IF3 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIF3IF3 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIF3IF3 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIF3IF3 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIF3IF3"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIF3IF3

        Create a new object of the class itkExpandImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIF3IF3.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_Clone, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetInterpolator, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetModifiableInterpolator, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetInterpolator, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetExpandFactors, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetExpandFactors, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateOutputInformation, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateInputRequestedRegion, None, itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_swigregister
itkExpandImageFilterIF3IF3_swigregister(itkExpandImageFilterIF3IF3)

def itkExpandImageFilterIF3IF3___New_orig__() -> "itkExpandImageFilterIF3IF3_Pointer":
    """itkExpandImageFilterIF3IF3___New_orig__() -> itkExpandImageFilterIF3IF3_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3___New_orig__()

def itkExpandImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIF3IF3 *":
    """itkExpandImageFilterIF3IF3_cast(itkLightObject obj) -> itkExpandImageFilterIF3IF3"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_cast(obj)

class itkExpandImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkExpandImageFilterISS2ISS2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterISS2ISS2_Pointer":
        """Clone(itkExpandImageFilterISS2ISS2 self) -> itkExpandImageFilterISS2ISS2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS2D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterISS2ISS2 self, itkInterpolateImageFunctionISS2D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS2D *":
        """GetModifiableInterpolator(itkExpandImageFilterISS2ISS2 self) -> itkInterpolateImageFunctionISS2D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS2D *":
        """
        GetInterpolator(itkExpandImageFilterISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        GetInterpolator(itkExpandImageFilterISS2ISS2 self) -> itkInterpolateImageFunctionISS2D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterISS2ISS2 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterISS2ISS2 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterISS2ISS2 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterISS2ISS2 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterISS2ISS2 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterISS2ISS2"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterISS2ISS2

        Create a new object of the class itkExpandImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterISS2ISS2.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_Clone, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetInterpolator, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetModifiableInterpolator, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetInterpolator, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetExpandFactors, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetExpandFactors, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateOutputInformation, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateInputRequestedRegion, None, itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_swigregister
itkExpandImageFilterISS2ISS2_swigregister(itkExpandImageFilterISS2ISS2)

def itkExpandImageFilterISS2ISS2___New_orig__() -> "itkExpandImageFilterISS2ISS2_Pointer":
    """itkExpandImageFilterISS2ISS2___New_orig__() -> itkExpandImageFilterISS2ISS2_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2___New_orig__()

def itkExpandImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkExpandImageFilterISS2ISS2 *":
    """itkExpandImageFilterISS2ISS2_cast(itkLightObject obj) -> itkExpandImageFilterISS2ISS2"""
    return _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_cast(obj)

class itkExpandImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkExpandImageFilterISS3ISS3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterISS3ISS3_Pointer":
        """Clone(itkExpandImageFilterISS3ISS3 self) -> itkExpandImageFilterISS3ISS3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionISS3D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterISS3ISS3 self, itkInterpolateImageFunctionISS3D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionISS3D *":
        """GetModifiableInterpolator(itkExpandImageFilterISS3ISS3 self) -> itkInterpolateImageFunctionISS3D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionISS3D *":
        """
        GetInterpolator(itkExpandImageFilterISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        GetInterpolator(itkExpandImageFilterISS3ISS3 self) -> itkInterpolateImageFunctionISS3D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterISS3ISS3 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterISS3ISS3 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterISS3ISS3 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterISS3ISS3 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterISS3ISS3 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterISS3ISS3"""
        return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterISS3ISS3

        Create a new object of the class itkExpandImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterISS3ISS3.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_Clone, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetInterpolator, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetModifiableInterpolator, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetInterpolator, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetExpandFactors, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetExpandFactors, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateOutputInformation, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateInputRequestedRegion, None, itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_swigregister
itkExpandImageFilterISS3ISS3_swigregister(itkExpandImageFilterISS3ISS3)

def itkExpandImageFilterISS3ISS3___New_orig__() -> "itkExpandImageFilterISS3ISS3_Pointer":
    """itkExpandImageFilterISS3ISS3___New_orig__() -> itkExpandImageFilterISS3ISS3_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3___New_orig__()

def itkExpandImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkExpandImageFilterISS3ISS3 *":
    """itkExpandImageFilterISS3ISS3_cast(itkLightObject obj) -> itkExpandImageFilterISS3ISS3"""
    return _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_cast(obj)

class itkExpandImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkExpandImageFilterIUC2IUC2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIUC2IUC2_Pointer":
        """Clone(itkExpandImageFilterIUC2IUC2 self) -> itkExpandImageFilterIUC2IUC2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC2D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIUC2IUC2 self, itkInterpolateImageFunctionIUC2D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC2D *":
        """GetModifiableInterpolator(itkExpandImageFilterIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC2D *":
        """
        GetInterpolator(itkExpandImageFilterIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        GetInterpolator(itkExpandImageFilterIUC2IUC2 self) -> itkInterpolateImageFunctionIUC2D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIUC2IUC2 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIUC2IUC2 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIUC2IUC2 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIUC2IUC2 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIUC2IUC2 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIUC2IUC2"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUC2IUC2

        Create a new object of the class itkExpandImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIUC2IUC2.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_Clone, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetInterpolator, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetModifiableInterpolator, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetInterpolator, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetExpandFactors, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetExpandFactors, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateOutputInformation, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateInputRequestedRegion, None, itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_swigregister
itkExpandImageFilterIUC2IUC2_swigregister(itkExpandImageFilterIUC2IUC2)

def itkExpandImageFilterIUC2IUC2___New_orig__() -> "itkExpandImageFilterIUC2IUC2_Pointer":
    """itkExpandImageFilterIUC2IUC2___New_orig__() -> itkExpandImageFilterIUC2IUC2_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2___New_orig__()

def itkExpandImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUC2IUC2 *":
    """itkExpandImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkExpandImageFilterIUC2IUC2"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_cast(obj)

class itkExpandImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkExpandImageFilterIUC3IUC3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIUC3IUC3_Pointer":
        """Clone(itkExpandImageFilterIUC3IUC3 self) -> itkExpandImageFilterIUC3IUC3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUC3D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIUC3IUC3 self, itkInterpolateImageFunctionIUC3D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUC3D *":
        """GetModifiableInterpolator(itkExpandImageFilterIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUC3D *":
        """
        GetInterpolator(itkExpandImageFilterIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        GetInterpolator(itkExpandImageFilterIUC3IUC3 self) -> itkInterpolateImageFunctionIUC3D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIUC3IUC3 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIUC3IUC3 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIUC3IUC3 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIUC3IUC3 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIUC3IUC3 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIUC3IUC3"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUC3IUC3

        Create a new object of the class itkExpandImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIUC3IUC3.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_Clone, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetInterpolator, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetModifiableInterpolator, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetInterpolator, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetExpandFactors, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetExpandFactors, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateOutputInformation, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateInputRequestedRegion, None, itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_swigregister
itkExpandImageFilterIUC3IUC3_swigregister(itkExpandImageFilterIUC3IUC3)

def itkExpandImageFilterIUC3IUC3___New_orig__() -> "itkExpandImageFilterIUC3IUC3_Pointer":
    """itkExpandImageFilterIUC3IUC3___New_orig__() -> itkExpandImageFilterIUC3IUC3_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3___New_orig__()

def itkExpandImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUC3IUC3 *":
    """itkExpandImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkExpandImageFilterIUC3IUC3"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_cast(obj)

class itkExpandImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkExpandImageFilterIUS2IUS2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIUS2IUS2_Pointer":
        """Clone(itkExpandImageFilterIUS2IUS2 self) -> itkExpandImageFilterIUS2IUS2_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUS2D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIUS2IUS2 self, itkInterpolateImageFunctionIUS2D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS2D *":
        """GetModifiableInterpolator(itkExpandImageFilterIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS2D *":
        """
        GetInterpolator(itkExpandImageFilterIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D
        GetInterpolator(itkExpandImageFilterIUS2IUS2 self) -> itkInterpolateImageFunctionIUS2D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIUS2IUS2 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIUS2IUS2 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIUS2IUS2 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIUS2IUS2 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIUS2IUS2 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIUS2IUS2"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUS2IUS2

        Create a new object of the class itkExpandImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIUS2IUS2.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_Clone, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetInterpolator, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetModifiableInterpolator, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetInterpolator, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetExpandFactors, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetExpandFactors, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateOutputInformation, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateInputRequestedRegion, None, itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_swigregister
itkExpandImageFilterIUS2IUS2_swigregister(itkExpandImageFilterIUS2IUS2)

def itkExpandImageFilterIUS2IUS2___New_orig__() -> "itkExpandImageFilterIUS2IUS2_Pointer":
    """itkExpandImageFilterIUS2IUS2___New_orig__() -> itkExpandImageFilterIUS2IUS2_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2___New_orig__()

def itkExpandImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUS2IUS2 *":
    """itkExpandImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkExpandImageFilterIUS2IUS2"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_cast(obj)

class itkExpandImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkExpandImageFilterIUS3IUS3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIUS3IUS3_Pointer":
        """Clone(itkExpandImageFilterIUS3IUS3 self) -> itkExpandImageFilterIUS3IUS3_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIUS3D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIUS3IUS3 self, itkInterpolateImageFunctionIUS3D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIUS3D *":
        """GetModifiableInterpolator(itkExpandImageFilterIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIUS3D *":
        """
        GetInterpolator(itkExpandImageFilterIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D
        GetInterpolator(itkExpandImageFilterIUS3IUS3 self) -> itkInterpolateImageFunctionIUS3D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIUS3IUS3 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIUS3IUS3 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIUS3IUS3 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIUS3IUS3 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIUS3IUS3 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIUS3IUS3"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUS3IUS3

        Create a new object of the class itkExpandImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIUS3IUS3.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_Clone, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetInterpolator, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetModifiableInterpolator, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetInterpolator, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetExpandFactors, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetExpandFactors, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateOutputInformation, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateInputRequestedRegion, None, itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_swigregister
itkExpandImageFilterIUS3IUS3_swigregister(itkExpandImageFilterIUS3IUS3)

def itkExpandImageFilterIUS3IUS3___New_orig__() -> "itkExpandImageFilterIUS3IUS3_Pointer":
    """itkExpandImageFilterIUS3IUS3___New_orig__() -> itkExpandImageFilterIUS3IUS3_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3___New_orig__()

def itkExpandImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIUS3IUS3 *":
    """itkExpandImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkExpandImageFilterIUS3IUS3"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_cast(obj)

class itkExpandImageFilterIVF22IVF22(itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF22IVF22_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF22IVF22_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF22IVF22_Pointer":
        """Clone(itkExpandImageFilterIVF22IVF22 self) -> itkExpandImageFilterIVF22IVF22_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIVF22D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF22IVF22 self, itkInterpolateImageFunctionIVF22D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIVF22D *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF22IVF22 self) -> itkInterpolateImageFunctionIVF22D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIVF22D *":
        """
        GetInterpolator(itkExpandImageFilterIVF22IVF22 self) -> itkInterpolateImageFunctionIVF22D
        GetInterpolator(itkExpandImageFilterIVF22IVF22 self) -> itkInterpolateImageFunctionIVF22D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF22IVF22 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIVF22IVF22 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF22IVF22 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF22IVF22 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF22IVF22 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF22IVF22

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF22IVF22 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF22IVF22"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF22IVF22

        Create a new object of the class itkExpandImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF22IVF22.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_Clone, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetInterpolator, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetModifiableInterpolator, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetInterpolator, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetExpandFactors, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetExpandFactors, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateOutputInformation, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_swigregister
itkExpandImageFilterIVF22IVF22_swigregister(itkExpandImageFilterIVF22IVF22)

def itkExpandImageFilterIVF22IVF22___New_orig__() -> "itkExpandImageFilterIVF22IVF22_Pointer":
    """itkExpandImageFilterIVF22IVF22___New_orig__() -> itkExpandImageFilterIVF22IVF22_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22___New_orig__()

def itkExpandImageFilterIVF22IVF22_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF22IVF22 *":
    """itkExpandImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkExpandImageFilterIVF22IVF22"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_cast(obj)

class itkExpandImageFilterIVF23IVF23(itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF23IVF23_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF23IVF23_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF23IVF23_Pointer":
        """Clone(itkExpandImageFilterIVF23IVF23 self) -> itkExpandImageFilterIVF23IVF23_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_Clone(self)


    def SetInterpolator(self, _arg: 'itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > *') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF23IVF23 self, itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > * _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF23IVF23 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > *"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > *":
        """
        GetInterpolator(itkExpandImageFilterIVF23IVF23 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > const
        GetInterpolator(itkExpandImageFilterIVF23IVF23 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,2 >,3 >,double > *
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF23IVF23 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIVF23IVF23 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF23IVF23 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF23IVF23 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF23IVF23 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF23IVF23

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF23IVF23 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF23IVF23"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF23IVF23

        Create a new object of the class itkExpandImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF23IVF23.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_Clone, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetInterpolator, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetModifiableInterpolator, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetInterpolator, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetExpandFactors, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetExpandFactors, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateOutputInformation, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_swigregister
itkExpandImageFilterIVF23IVF23_swigregister(itkExpandImageFilterIVF23IVF23)

def itkExpandImageFilterIVF23IVF23___New_orig__() -> "itkExpandImageFilterIVF23IVF23_Pointer":
    """itkExpandImageFilterIVF23IVF23___New_orig__() -> itkExpandImageFilterIVF23IVF23_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23___New_orig__()

def itkExpandImageFilterIVF23IVF23_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF23IVF23 *":
    """itkExpandImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkExpandImageFilterIVF23IVF23"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_cast(obj)

class itkExpandImageFilterIVF32IVF32(itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF32IVF32_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF32IVF32_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF32IVF32_Pointer":
        """Clone(itkExpandImageFilterIVF32IVF32 self) -> itkExpandImageFilterIVF32IVF32_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_Clone(self)


    def SetInterpolator(self, _arg: 'itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > *') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF32IVF32 self, itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > * _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF32IVF32 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > *"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > *":
        """
        GetInterpolator(itkExpandImageFilterIVF32IVF32 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > const
        GetInterpolator(itkExpandImageFilterIVF32IVF32 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,3 >,2 >,double > *
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF32IVF32 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIVF32IVF32 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF32IVF32 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF32IVF32 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF32IVF32 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF32IVF32

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF32IVF32 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF32IVF32"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF32IVF32

        Create a new object of the class itkExpandImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF32IVF32.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_Clone, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetInterpolator, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetModifiableInterpolator, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetInterpolator, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetExpandFactors, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetExpandFactors, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateOutputInformation, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_swigregister
itkExpandImageFilterIVF32IVF32_swigregister(itkExpandImageFilterIVF32IVF32)

def itkExpandImageFilterIVF32IVF32___New_orig__() -> "itkExpandImageFilterIVF32IVF32_Pointer":
    """itkExpandImageFilterIVF32IVF32___New_orig__() -> itkExpandImageFilterIVF32IVF32_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32___New_orig__()

def itkExpandImageFilterIVF32IVF32_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF32IVF32 *":
    """itkExpandImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkExpandImageFilterIVF32IVF32"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_cast(obj)

class itkExpandImageFilterIVF33IVF33(itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF33IVF33_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF33IVF33_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF33IVF33_Pointer":
        """Clone(itkExpandImageFilterIVF33IVF33 self) -> itkExpandImageFilterIVF33IVF33_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_Clone(self)


    def SetInterpolator(self, _arg: 'itkInterpolateImageFunctionIVF33D') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF33IVF33 self, itkInterpolateImageFunctionIVF33D _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itkInterpolateImageFunctionIVF33D *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF33IVF33 self) -> itkInterpolateImageFunctionIVF33D"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itkInterpolateImageFunctionIVF33D *":
        """
        GetInterpolator(itkExpandImageFilterIVF33IVF33 self) -> itkInterpolateImageFunctionIVF33D
        GetInterpolator(itkExpandImageFilterIVF33IVF33 self) -> itkInterpolateImageFunctionIVF33D
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF33IVF33 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIVF33IVF33 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF33IVF33 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF33IVF33 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF33IVF33 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF33IVF33

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF33IVF33 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF33IVF33"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF33IVF33

        Create a new object of the class itkExpandImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF33IVF33.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_Clone, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetInterpolator, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetModifiableInterpolator, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetInterpolator, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetExpandFactors, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetExpandFactors, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateOutputInformation, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_swigregister
itkExpandImageFilterIVF33IVF33_swigregister(itkExpandImageFilterIVF33IVF33)

def itkExpandImageFilterIVF33IVF33___New_orig__() -> "itkExpandImageFilterIVF33IVF33_Pointer":
    """itkExpandImageFilterIVF33IVF33___New_orig__() -> itkExpandImageFilterIVF33IVF33_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33___New_orig__()

def itkExpandImageFilterIVF33IVF33_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF33IVF33 *":
    """itkExpandImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkExpandImageFilterIVF33IVF33"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_cast(obj)

class itkExpandImageFilterIVF42IVF42(itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF42IVF42_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF42IVF42_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF42IVF42_Pointer":
        """Clone(itkExpandImageFilterIVF42IVF42 self) -> itkExpandImageFilterIVF42IVF42_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_Clone(self)


    def SetInterpolator(self, _arg: 'itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > *') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF42IVF42 self, itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > * _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF42IVF42 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > *"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > *":
        """
        GetInterpolator(itkExpandImageFilterIVF42IVF42 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > const
        GetInterpolator(itkExpandImageFilterIVF42IVF42 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,2 >,double > *
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF42IVF42 self, itkFixedArrayUI2 _arg)
        SetExpandFactors(itkExpandImageFilterIVF42IVF42 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI2 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF42IVF42 self) -> itkFixedArrayUI2

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF42IVF42 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF42IVF42 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF42IVF42

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF42IVF42 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF42IVF42"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF42IVF42

        Create a new object of the class itkExpandImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF42IVF42.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_Clone, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetInterpolator, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetModifiableInterpolator, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetInterpolator, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetExpandFactors, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetExpandFactors, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateOutputInformation, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_swigregister
itkExpandImageFilterIVF42IVF42_swigregister(itkExpandImageFilterIVF42IVF42)

def itkExpandImageFilterIVF42IVF42___New_orig__() -> "itkExpandImageFilterIVF42IVF42_Pointer":
    """itkExpandImageFilterIVF42IVF42___New_orig__() -> itkExpandImageFilterIVF42IVF42_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42___New_orig__()

def itkExpandImageFilterIVF42IVF42_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF42IVF42 *":
    """itkExpandImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkExpandImageFilterIVF42IVF42"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_cast(obj)

class itkExpandImageFilterIVF43IVF43(itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    """


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction

    C++ includes: itkExpandImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExpandImageFilterIVF43IVF43_Pointer":
        """__New_orig__() -> itkExpandImageFilterIVF43IVF43_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExpandImageFilterIVF43IVF43_Pointer":
        """Clone(itkExpandImageFilterIVF43IVF43 self) -> itkExpandImageFilterIVF43IVF43_Pointer"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_Clone(self)


    def SetInterpolator(self, _arg: 'itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > *') -> "void":
        """
        SetInterpolator(itkExpandImageFilterIVF43IVF43 self, itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > * _arg)

        Get/Set the
        interpolator function. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetInterpolator(self, _arg)


    def GetModifiableInterpolator(self) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > *":
        """GetModifiableInterpolator(itkExpandImageFilterIVF43IVF43 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > *"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > *":
        """
        GetInterpolator(itkExpandImageFilterIVF43IVF43 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > const
        GetInterpolator(itkExpandImageFilterIVF43IVF43 self) -> itk::InterpolateImageFunction< itk::Image< itk::Vector< float,4 >,3 >,double > *
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetInterpolator(self, *args)


    def SetExpandFactors(self, *args) -> "void":
        """
        SetExpandFactors(itkExpandImageFilterIVF43IVF43 self, itkFixedArrayUI3 _arg)
        SetExpandFactors(itkExpandImageFilterIVF43IVF43 self, unsigned int const factor)

        Set the expand
        factors. Values are clamped to a minimum value of 1. Default is 1 for
        all dimensions. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetExpandFactors(self, *args)


    def GetExpandFactors(self) -> "itkFixedArrayUI3 const &":
        """
        GetExpandFactors(itkExpandImageFilterIVF43IVF43 self) -> itkFixedArrayUI3

        Get the expand
        factors. 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetExpandFactors(self)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkExpandImageFilterIVF43IVF43 self)

        ExpandImageFilter produces an image which is a different resolution
        and with a different pixel spacing than its input image. As such,
        ExpandImageFilter needs to provide an implementation for
        UpdateOutputInformation() in order to inform the pipeline execution
        model. The original documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkExpandImageFilterIVF43IVF43 self)

        ExpandImageFilter needs a smaller input requested region than the
        output requested region. As such, ShrinkImageFilter needs to provide
        an implementation for GenerateInputRequestedRegion() in order to
        inform the pipeline execution model. See:
        ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF43IVF43

    def cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF43IVF43 *":
        """cast(itkLightObject obj) -> itkExpandImageFilterIVF43IVF43"""
        return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF43IVF43

        Create a new object of the class itkExpandImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExpandImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExpandImageFilterIVF43IVF43.Clone = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_Clone, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.SetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetInterpolator, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.GetModifiableInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetModifiableInterpolator, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.GetInterpolator = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetInterpolator, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.SetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetExpandFactors, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.GetExpandFactors = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetExpandFactors, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.GenerateOutputInformation = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateOutputInformation, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43.GenerateInputRequestedRegion = new_instancemethod(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateInputRequestedRegion, None, itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43_swigregister = _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_swigregister
itkExpandImageFilterIVF43IVF43_swigregister(itkExpandImageFilterIVF43IVF43)

def itkExpandImageFilterIVF43IVF43___New_orig__() -> "itkExpandImageFilterIVF43IVF43_Pointer":
    """itkExpandImageFilterIVF43IVF43___New_orig__() -> itkExpandImageFilterIVF43IVF43_Pointer"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43___New_orig__()

def itkExpandImageFilterIVF43IVF43_cast(obj: 'itkLightObject') -> "itkExpandImageFilterIVF43IVF43 *":
    """itkExpandImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkExpandImageFilterIVF43IVF43"""
    return _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def expand_image_filter(*args, **kwargs):
    """Procedural interface for ExpandImageFilter"""
    import itk
    instance = itk.ExpandImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def expand_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ExpandImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ExpandImageFilter.values()[0]
    else:
        filter_object = itk.ExpandImageFilter

    expand_image_filter.__doc__ = filter_object.__doc__
    expand_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    expand_image_filter.__doc__ += "Available Keyword Arguments:\n"
    expand_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



