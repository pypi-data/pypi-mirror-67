# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkContourExtractor2DImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkContourExtractor2DImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkContourExtractor2DImageFilterPython
            return _itkContourExtractor2DImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkContourExtractor2DImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkContourExtractor2DImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkContourExtractor2DImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkVectorPython
import itkFixedArrayPython
import itkImageRegionPython
import ITKCommonBasePython
import itkImageToPathFilterPython
import itkPathSourcePython
import itkPolyLineParametricPathPython
import itkParametricPathPython
import itkPathBasePython
import itkVectorContainerPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython

def itkContourExtractor2DImageFilterID2_New():
  return itkContourExtractor2DImageFilterID2.New()


def itkContourExtractor2DImageFilterIF2_New():
  return itkContourExtractor2DImageFilterIF2.New()


def itkContourExtractor2DImageFilterIUS2_New():
  return itkContourExtractor2DImageFilterIUS2.New()


def itkContourExtractor2DImageFilterIUC2_New():
  return itkContourExtractor2DImageFilterIUC2.New()


def itkContourExtractor2DImageFilterISS2_New():
  return itkContourExtractor2DImageFilterISS2.New()

class itkContourExtractor2DImageFilterID2(itkImageToPathFilterPython.itkImageToPathFilterID2PLPP2):
    """


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath

    C++ includes: itkContourExtractor2DImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkContourExtractor2DImageFilterID2_Pointer":
        """__New_orig__() -> itkContourExtractor2DImageFilterID2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkContourExtractor2DImageFilterID2_Pointer":
        """Clone(itkContourExtractor2DImageFilterID2 self) -> itkContourExtractor2DImageFilterID2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_Clone(self)


    def SetReverseContourOrientation(self, _arg: 'bool const') -> "void":
        """
        SetReverseContourOrientation(itkContourExtractor2DImageFilterID2 self, bool const _arg)

        Control the orientation of the contours with reference to the image
        gradient. (See class documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetReverseContourOrientation(self, _arg)


    def GetReverseContourOrientation(self) -> "bool const &":
        """GetReverseContourOrientation(itkContourExtractor2DImageFilterID2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetReverseContourOrientation(self)


    def ReverseContourOrientationOn(self) -> "void":
        """ReverseContourOrientationOn(itkContourExtractor2DImageFilterID2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOn(self)


    def ReverseContourOrientationOff(self) -> "void":
        """ReverseContourOrientationOff(itkContourExtractor2DImageFilterID2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOff(self)


    def SetVertexConnectHighPixels(self, _arg: 'bool const') -> "void":
        """
        SetVertexConnectHighPixels(itkContourExtractor2DImageFilterID2 self, bool const _arg)

        Control
        whether high- or low-valued pixels are vertex-connected. Default is
        for low-valued pixels to be vertex-connected. (See class
        documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetVertexConnectHighPixels(self, _arg)


    def GetVertexConnectHighPixels(self) -> "bool const &":
        """GetVertexConnectHighPixels(itkContourExtractor2DImageFilterID2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetVertexConnectHighPixels(self)


    def VertexConnectHighPixelsOn(self) -> "void":
        """VertexConnectHighPixelsOn(itkContourExtractor2DImageFilterID2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOn(self)


    def VertexConnectHighPixelsOff(self) -> "void":
        """VertexConnectHighPixelsOff(itkContourExtractor2DImageFilterID2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOff(self)


    def SetRequestedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetRequestedRegion(itkContourExtractor2DImageFilterID2 self, itkImageRegion2 region)

        Control whether
        the largest possible input region is used, or if a custom requested
        region is to be used. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetRequestedRegion(self, region)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """GetRequestedRegion(itkContourExtractor2DImageFilterID2 self) -> itkImageRegion2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetRequestedRegion(self)


    def ClearRequestedRegion(self) -> "void":
        """ClearRequestedRegion(itkContourExtractor2DImageFilterID2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ClearRequestedRegion(self)


    def SetContourValue(self, _arg: 'double const') -> "void":
        """
        SetContourValue(itkContourExtractor2DImageFilterID2 self, double const _arg)

        Set/Get the image
        intensity value that the contours should follow. This is the
        equivalent of an iso-value in Marching Squares. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetContourValue(self, _arg)


    def GetContourValue(self) -> "double const &":
        """GetContourValue(itkContourExtractor2DImageFilterID2 self) -> double const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetContourValue(self)

    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_DimensionShouldBe2
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputPixelTypeComparable
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterID2

    def cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterID2 *":
        """cast(itkLightObject obj) -> itkContourExtractor2DImageFilterID2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterID2

        Create a new object of the class itkContourExtractor2DImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkContourExtractor2DImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkContourExtractor2DImageFilterID2.Clone = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_Clone, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.SetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetReverseContourOrientation, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.GetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetReverseContourOrientation, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.ReverseContourOrientationOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOn, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.ReverseContourOrientationOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ReverseContourOrientationOff, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.SetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.GetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.VertexConnectHighPixelsOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOn, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.VertexConnectHighPixelsOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_VertexConnectHighPixelsOff, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.SetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetRequestedRegion, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.GetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetRequestedRegion, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.ClearRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_ClearRequestedRegion, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.SetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_SetContourValue, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2.GetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_GetContourValue, None, itkContourExtractor2DImageFilterID2)
itkContourExtractor2DImageFilterID2_swigregister = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_swigregister
itkContourExtractor2DImageFilterID2_swigregister(itkContourExtractor2DImageFilterID2)

def itkContourExtractor2DImageFilterID2___New_orig__() -> "itkContourExtractor2DImageFilterID2_Pointer":
    """itkContourExtractor2DImageFilterID2___New_orig__() -> itkContourExtractor2DImageFilterID2_Pointer"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2___New_orig__()

def itkContourExtractor2DImageFilterID2_cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterID2 *":
    """itkContourExtractor2DImageFilterID2_cast(itkLightObject obj) -> itkContourExtractor2DImageFilterID2"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterID2_cast(obj)

class itkContourExtractor2DImageFilterIF2(itkImageToPathFilterPython.itkImageToPathFilterIF2PLPP2):
    """


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath

    C++ includes: itkContourExtractor2DImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkContourExtractor2DImageFilterIF2_Pointer":
        """__New_orig__() -> itkContourExtractor2DImageFilterIF2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkContourExtractor2DImageFilterIF2_Pointer":
        """Clone(itkContourExtractor2DImageFilterIF2 self) -> itkContourExtractor2DImageFilterIF2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_Clone(self)


    def SetReverseContourOrientation(self, _arg: 'bool const') -> "void":
        """
        SetReverseContourOrientation(itkContourExtractor2DImageFilterIF2 self, bool const _arg)

        Control the orientation of the contours with reference to the image
        gradient. (See class documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetReverseContourOrientation(self, _arg)


    def GetReverseContourOrientation(self) -> "bool const &":
        """GetReverseContourOrientation(itkContourExtractor2DImageFilterIF2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetReverseContourOrientation(self)


    def ReverseContourOrientationOn(self) -> "void":
        """ReverseContourOrientationOn(itkContourExtractor2DImageFilterIF2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOn(self)


    def ReverseContourOrientationOff(self) -> "void":
        """ReverseContourOrientationOff(itkContourExtractor2DImageFilterIF2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOff(self)


    def SetVertexConnectHighPixels(self, _arg: 'bool const') -> "void":
        """
        SetVertexConnectHighPixels(itkContourExtractor2DImageFilterIF2 self, bool const _arg)

        Control
        whether high- or low-valued pixels are vertex-connected. Default is
        for low-valued pixels to be vertex-connected. (See class
        documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetVertexConnectHighPixels(self, _arg)


    def GetVertexConnectHighPixels(self) -> "bool const &":
        """GetVertexConnectHighPixels(itkContourExtractor2DImageFilterIF2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetVertexConnectHighPixels(self)


    def VertexConnectHighPixelsOn(self) -> "void":
        """VertexConnectHighPixelsOn(itkContourExtractor2DImageFilterIF2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOn(self)


    def VertexConnectHighPixelsOff(self) -> "void":
        """VertexConnectHighPixelsOff(itkContourExtractor2DImageFilterIF2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOff(self)


    def SetRequestedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetRequestedRegion(itkContourExtractor2DImageFilterIF2 self, itkImageRegion2 region)

        Control whether
        the largest possible input region is used, or if a custom requested
        region is to be used. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetRequestedRegion(self, region)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """GetRequestedRegion(itkContourExtractor2DImageFilterIF2 self) -> itkImageRegion2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetRequestedRegion(self)


    def ClearRequestedRegion(self) -> "void":
        """ClearRequestedRegion(itkContourExtractor2DImageFilterIF2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ClearRequestedRegion(self)


    def SetContourValue(self, _arg: 'double const') -> "void":
        """
        SetContourValue(itkContourExtractor2DImageFilterIF2 self, double const _arg)

        Set/Get the image
        intensity value that the contours should follow. This is the
        equivalent of an iso-value in Marching Squares. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetContourValue(self, _arg)


    def GetContourValue(self) -> "double const &":
        """GetContourValue(itkContourExtractor2DImageFilterIF2 self) -> double const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetContourValue(self)

    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_DimensionShouldBe2
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputPixelTypeComparable
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIF2

    def cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIF2 *":
        """cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIF2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIF2

        Create a new object of the class itkContourExtractor2DImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkContourExtractor2DImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkContourExtractor2DImageFilterIF2.Clone = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_Clone, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.SetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetReverseContourOrientation, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.GetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetReverseContourOrientation, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.ReverseContourOrientationOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOn, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.ReverseContourOrientationOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ReverseContourOrientationOff, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.SetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.GetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.VertexConnectHighPixelsOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOn, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.VertexConnectHighPixelsOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_VertexConnectHighPixelsOff, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.SetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetRequestedRegion, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.GetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetRequestedRegion, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.ClearRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_ClearRequestedRegion, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.SetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_SetContourValue, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2.GetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_GetContourValue, None, itkContourExtractor2DImageFilterIF2)
itkContourExtractor2DImageFilterIF2_swigregister = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_swigregister
itkContourExtractor2DImageFilterIF2_swigregister(itkContourExtractor2DImageFilterIF2)

def itkContourExtractor2DImageFilterIF2___New_orig__() -> "itkContourExtractor2DImageFilterIF2_Pointer":
    """itkContourExtractor2DImageFilterIF2___New_orig__() -> itkContourExtractor2DImageFilterIF2_Pointer"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2___New_orig__()

def itkContourExtractor2DImageFilterIF2_cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIF2 *":
    """itkContourExtractor2DImageFilterIF2_cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIF2"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIF2_cast(obj)

class itkContourExtractor2DImageFilterISS2(itkImageToPathFilterPython.itkImageToPathFilterISS2PLPP2):
    """


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath

    C++ includes: itkContourExtractor2DImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkContourExtractor2DImageFilterISS2_Pointer":
        """__New_orig__() -> itkContourExtractor2DImageFilterISS2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkContourExtractor2DImageFilterISS2_Pointer":
        """Clone(itkContourExtractor2DImageFilterISS2 self) -> itkContourExtractor2DImageFilterISS2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_Clone(self)


    def SetReverseContourOrientation(self, _arg: 'bool const') -> "void":
        """
        SetReverseContourOrientation(itkContourExtractor2DImageFilterISS2 self, bool const _arg)

        Control the orientation of the contours with reference to the image
        gradient. (See class documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetReverseContourOrientation(self, _arg)


    def GetReverseContourOrientation(self) -> "bool const &":
        """GetReverseContourOrientation(itkContourExtractor2DImageFilterISS2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetReverseContourOrientation(self)


    def ReverseContourOrientationOn(self) -> "void":
        """ReverseContourOrientationOn(itkContourExtractor2DImageFilterISS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOn(self)


    def ReverseContourOrientationOff(self) -> "void":
        """ReverseContourOrientationOff(itkContourExtractor2DImageFilterISS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOff(self)


    def SetVertexConnectHighPixels(self, _arg: 'bool const') -> "void":
        """
        SetVertexConnectHighPixels(itkContourExtractor2DImageFilterISS2 self, bool const _arg)

        Control
        whether high- or low-valued pixels are vertex-connected. Default is
        for low-valued pixels to be vertex-connected. (See class
        documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetVertexConnectHighPixels(self, _arg)


    def GetVertexConnectHighPixels(self) -> "bool const &":
        """GetVertexConnectHighPixels(itkContourExtractor2DImageFilterISS2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetVertexConnectHighPixels(self)


    def VertexConnectHighPixelsOn(self) -> "void":
        """VertexConnectHighPixelsOn(itkContourExtractor2DImageFilterISS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOn(self)


    def VertexConnectHighPixelsOff(self) -> "void":
        """VertexConnectHighPixelsOff(itkContourExtractor2DImageFilterISS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOff(self)


    def SetRequestedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetRequestedRegion(itkContourExtractor2DImageFilterISS2 self, itkImageRegion2 region)

        Control whether
        the largest possible input region is used, or if a custom requested
        region is to be used. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetRequestedRegion(self, region)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """GetRequestedRegion(itkContourExtractor2DImageFilterISS2 self) -> itkImageRegion2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetRequestedRegion(self)


    def ClearRequestedRegion(self) -> "void":
        """ClearRequestedRegion(itkContourExtractor2DImageFilterISS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ClearRequestedRegion(self)


    def SetContourValue(self, _arg: 'double const') -> "void":
        """
        SetContourValue(itkContourExtractor2DImageFilterISS2 self, double const _arg)

        Set/Get the image
        intensity value that the contours should follow. This is the
        equivalent of an iso-value in Marching Squares. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetContourValue(self, _arg)


    def GetContourValue(self) -> "double const &":
        """GetContourValue(itkContourExtractor2DImageFilterISS2 self) -> double const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetContourValue(self)

    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_DimensionShouldBe2
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputPixelTypeComparable
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterISS2

    def cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterISS2 *":
        """cast(itkLightObject obj) -> itkContourExtractor2DImageFilterISS2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterISS2

        Create a new object of the class itkContourExtractor2DImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkContourExtractor2DImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkContourExtractor2DImageFilterISS2.Clone = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_Clone, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.SetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetReverseContourOrientation, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.GetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetReverseContourOrientation, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.ReverseContourOrientationOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOn, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.ReverseContourOrientationOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ReverseContourOrientationOff, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.SetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.GetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.VertexConnectHighPixelsOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOn, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.VertexConnectHighPixelsOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_VertexConnectHighPixelsOff, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.SetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetRequestedRegion, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.GetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetRequestedRegion, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.ClearRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_ClearRequestedRegion, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.SetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_SetContourValue, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2.GetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_GetContourValue, None, itkContourExtractor2DImageFilterISS2)
itkContourExtractor2DImageFilterISS2_swigregister = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_swigregister
itkContourExtractor2DImageFilterISS2_swigregister(itkContourExtractor2DImageFilterISS2)

def itkContourExtractor2DImageFilterISS2___New_orig__() -> "itkContourExtractor2DImageFilterISS2_Pointer":
    """itkContourExtractor2DImageFilterISS2___New_orig__() -> itkContourExtractor2DImageFilterISS2_Pointer"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2___New_orig__()

def itkContourExtractor2DImageFilterISS2_cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterISS2 *":
    """itkContourExtractor2DImageFilterISS2_cast(itkLightObject obj) -> itkContourExtractor2DImageFilterISS2"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterISS2_cast(obj)

class itkContourExtractor2DImageFilterIUC2(itkImageToPathFilterPython.itkImageToPathFilterIUC2PLPP2):
    """


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath

    C++ includes: itkContourExtractor2DImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkContourExtractor2DImageFilterIUC2_Pointer":
        """__New_orig__() -> itkContourExtractor2DImageFilterIUC2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkContourExtractor2DImageFilterIUC2_Pointer":
        """Clone(itkContourExtractor2DImageFilterIUC2 self) -> itkContourExtractor2DImageFilterIUC2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_Clone(self)


    def SetReverseContourOrientation(self, _arg: 'bool const') -> "void":
        """
        SetReverseContourOrientation(itkContourExtractor2DImageFilterIUC2 self, bool const _arg)

        Control the orientation of the contours with reference to the image
        gradient. (See class documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetReverseContourOrientation(self, _arg)


    def GetReverseContourOrientation(self) -> "bool const &":
        """GetReverseContourOrientation(itkContourExtractor2DImageFilterIUC2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetReverseContourOrientation(self)


    def ReverseContourOrientationOn(self) -> "void":
        """ReverseContourOrientationOn(itkContourExtractor2DImageFilterIUC2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOn(self)


    def ReverseContourOrientationOff(self) -> "void":
        """ReverseContourOrientationOff(itkContourExtractor2DImageFilterIUC2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOff(self)


    def SetVertexConnectHighPixels(self, _arg: 'bool const') -> "void":
        """
        SetVertexConnectHighPixels(itkContourExtractor2DImageFilterIUC2 self, bool const _arg)

        Control
        whether high- or low-valued pixels are vertex-connected. Default is
        for low-valued pixels to be vertex-connected. (See class
        documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetVertexConnectHighPixels(self, _arg)


    def GetVertexConnectHighPixels(self) -> "bool const &":
        """GetVertexConnectHighPixels(itkContourExtractor2DImageFilterIUC2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetVertexConnectHighPixels(self)


    def VertexConnectHighPixelsOn(self) -> "void":
        """VertexConnectHighPixelsOn(itkContourExtractor2DImageFilterIUC2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOn(self)


    def VertexConnectHighPixelsOff(self) -> "void":
        """VertexConnectHighPixelsOff(itkContourExtractor2DImageFilterIUC2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOff(self)


    def SetRequestedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetRequestedRegion(itkContourExtractor2DImageFilterIUC2 self, itkImageRegion2 region)

        Control whether
        the largest possible input region is used, or if a custom requested
        region is to be used. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetRequestedRegion(self, region)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """GetRequestedRegion(itkContourExtractor2DImageFilterIUC2 self) -> itkImageRegion2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetRequestedRegion(self)


    def ClearRequestedRegion(self) -> "void":
        """ClearRequestedRegion(itkContourExtractor2DImageFilterIUC2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ClearRequestedRegion(self)


    def SetContourValue(self, _arg: 'double const') -> "void":
        """
        SetContourValue(itkContourExtractor2DImageFilterIUC2 self, double const _arg)

        Set/Get the image
        intensity value that the contours should follow. This is the
        equivalent of an iso-value in Marching Squares. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetContourValue(self, _arg)


    def GetContourValue(self) -> "double const &":
        """GetContourValue(itkContourExtractor2DImageFilterIUC2 self) -> double const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetContourValue(self)

    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_DimensionShouldBe2
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputPixelTypeComparable
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIUC2

    def cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIUC2 *":
        """cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIUC2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIUC2

        Create a new object of the class itkContourExtractor2DImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkContourExtractor2DImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkContourExtractor2DImageFilterIUC2.Clone = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_Clone, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.SetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetReverseContourOrientation, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.GetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetReverseContourOrientation, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.ReverseContourOrientationOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOn, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.ReverseContourOrientationOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ReverseContourOrientationOff, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.SetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.GetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.VertexConnectHighPixelsOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOn, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.VertexConnectHighPixelsOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_VertexConnectHighPixelsOff, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.SetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetRequestedRegion, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.GetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetRequestedRegion, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.ClearRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_ClearRequestedRegion, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.SetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_SetContourValue, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2.GetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_GetContourValue, None, itkContourExtractor2DImageFilterIUC2)
itkContourExtractor2DImageFilterIUC2_swigregister = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_swigregister
itkContourExtractor2DImageFilterIUC2_swigregister(itkContourExtractor2DImageFilterIUC2)

def itkContourExtractor2DImageFilterIUC2___New_orig__() -> "itkContourExtractor2DImageFilterIUC2_Pointer":
    """itkContourExtractor2DImageFilterIUC2___New_orig__() -> itkContourExtractor2DImageFilterIUC2_Pointer"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2___New_orig__()

def itkContourExtractor2DImageFilterIUC2_cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIUC2 *":
    """itkContourExtractor2DImageFilterIUC2_cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIUC2"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUC2_cast(obj)

class itkContourExtractor2DImageFilterIUS2(itkImageToPathFilterPython.itkImageToPathFilterIUS2PLPP2):
    """


    Computes a list of PolyLineParametricPath objects from the contours in
    a 2D image.

    Uses the "marching squares" method to compute a the iso-valued
    contours of the input 2D image for a given intensity value. Multiple
    outputs may be produced because an image can have multiple contours at
    a given level, so it is advised to call GetNumberOfIndexedOutputs()
    and GetOutput(n) to retrieve all of the contours. The contour value to
    be extracted can be set with SetContourValue(). Image intensities will
    be linearly interpolated to provide sub-pixel resolution for the
    output contours.

    The marching squares algorithm is a special case of the marching cubes
    algorithm (Lorensen, William and Harvey E. Cline. Marching Cubes: A
    High Resolution 3D Surface Construction Algorithm. Computer Graphics
    (SIGGRAPH 87 Proceedings) 21(4) July 1987, p. 163-170). A simple
    explanation is available
    here:http://users.polytech.unice.fr/~lingrand/MarchingCubes/algo.html

    There is a single ambiguous case in the marching squares algorithm: if
    a given 2x2-pixel square has two high-valued and two low-valued
    pixels, each pair diagonally adjacent. (Where high- and low-valued is
    with respect to the contour value sought.) In this case, either the
    high-valued pixels can be connected into the same "object" (where
    groups of pixels encircled by a given contour are considered an
    object), or the low-valued pixels can be connected. This is the "face
    connected" versus "face + vertex connected" (or 4- versus
    4-connected) distinction: high-valued pixels most be treated as one,
    and low-valued as the other. By default, high-valued pixels are
    treated as "face-connected" and low-valued pixels are treated as
    "face + vertex" connected. To reverse this, call
    VertexConnectHighPixelsOn();

    Outputs are not guaranteed to be closed paths: contours which
    intersect the image edge will be left open. All other paths will be
    closed. (The closedness of a path can be tested by checking whether
    the beginning point is the same as the end point.)

    Produced paths are oriented. Following the path from beginning to end,
    image intensity values lower than the contour value are to the left of
    the path and intensity values greater than the contour value are to
    the right. In other words, the image gradient at a path segment is
    (approximately) in the direct of that segment rotated right by 90
    degrees, because the image intensity values increase from left-to-
    right across the segment. This means that the generated contours will
    circle clockwise around "hills" of above-contour-value intensity,
    and counter-clockwise around "depressions" of below-contour-value
    intensity. This convention can be reversed by calling
    ReverseContourOrientationOn().

    By default the input image's largest possible region will be
    processed; call SetRequestedRegion() to process a different region, or
    ClearRequestedRegion() to revert to the default value. Note that the
    requested regions are usually set on the output; however since paths
    have no notion of a "region", this must be set at the filter level.

    This class was contributed to the Insight Journal by Zachary
    Pincus.https://hdl.handle.net/1926/165

    See:  Image

    See:   Path

    See:   PolyLineParametricPath

    C++ includes: itkContourExtractor2DImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkContourExtractor2DImageFilterIUS2_Pointer":
        """__New_orig__() -> itkContourExtractor2DImageFilterIUS2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkContourExtractor2DImageFilterIUS2_Pointer":
        """Clone(itkContourExtractor2DImageFilterIUS2 self) -> itkContourExtractor2DImageFilterIUS2_Pointer"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_Clone(self)


    def SetReverseContourOrientation(self, _arg: 'bool const') -> "void":
        """
        SetReverseContourOrientation(itkContourExtractor2DImageFilterIUS2 self, bool const _arg)

        Control the orientation of the contours with reference to the image
        gradient. (See class documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetReverseContourOrientation(self, _arg)


    def GetReverseContourOrientation(self) -> "bool const &":
        """GetReverseContourOrientation(itkContourExtractor2DImageFilterIUS2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetReverseContourOrientation(self)


    def ReverseContourOrientationOn(self) -> "void":
        """ReverseContourOrientationOn(itkContourExtractor2DImageFilterIUS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOn(self)


    def ReverseContourOrientationOff(self) -> "void":
        """ReverseContourOrientationOff(itkContourExtractor2DImageFilterIUS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOff(self)


    def SetVertexConnectHighPixels(self, _arg: 'bool const') -> "void":
        """
        SetVertexConnectHighPixels(itkContourExtractor2DImageFilterIUS2 self, bool const _arg)

        Control
        whether high- or low-valued pixels are vertex-connected. Default is
        for low-valued pixels to be vertex-connected. (See class
        documentation.) 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetVertexConnectHighPixels(self, _arg)


    def GetVertexConnectHighPixels(self) -> "bool const &":
        """GetVertexConnectHighPixels(itkContourExtractor2DImageFilterIUS2 self) -> bool const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetVertexConnectHighPixels(self)


    def VertexConnectHighPixelsOn(self) -> "void":
        """VertexConnectHighPixelsOn(itkContourExtractor2DImageFilterIUS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOn(self)


    def VertexConnectHighPixelsOff(self) -> "void":
        """VertexConnectHighPixelsOff(itkContourExtractor2DImageFilterIUS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOff(self)


    def SetRequestedRegion(self, region: 'itkImageRegion2') -> "void":
        """
        SetRequestedRegion(itkContourExtractor2DImageFilterIUS2 self, itkImageRegion2 region)

        Control whether
        the largest possible input region is used, or if a custom requested
        region is to be used. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetRequestedRegion(self, region)


    def GetRequestedRegion(self) -> "itkImageRegion2 const &":
        """GetRequestedRegion(itkContourExtractor2DImageFilterIUS2 self) -> itkImageRegion2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetRequestedRegion(self)


    def ClearRequestedRegion(self) -> "void":
        """ClearRequestedRegion(itkContourExtractor2DImageFilterIUS2 self)"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ClearRequestedRegion(self)


    def SetContourValue(self, _arg: 'double const') -> "void":
        """
        SetContourValue(itkContourExtractor2DImageFilterIUS2 self, double const _arg)

        Set/Get the image
        intensity value that the contours should follow. This is the
        equivalent of an iso-value in Marching Squares. 
        """
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetContourValue(self, _arg)


    def GetContourValue(self) -> "double const &":
        """GetContourValue(itkContourExtractor2DImageFilterIUS2 self) -> double const &"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetContourValue(self)

    DimensionShouldBe2 = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_DimensionShouldBe2
    InputPixelTypeComparable = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputPixelTypeComparable
    InputHasPixelTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputHasPixelTraitsCheck
    InputHasNumericTraitsCheck = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkContourExtractor2DImageFilterPython.delete_itkContourExtractor2DImageFilterIUS2

    def cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIUS2 *":
        """cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIUS2"""
        return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkContourExtractor2DImageFilterIUS2

        Create a new object of the class itkContourExtractor2DImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourExtractor2DImageFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkContourExtractor2DImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkContourExtractor2DImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkContourExtractor2DImageFilterIUS2.Clone = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_Clone, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.SetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetReverseContourOrientation, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.GetReverseContourOrientation = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetReverseContourOrientation, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.ReverseContourOrientationOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOn, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.ReverseContourOrientationOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ReverseContourOrientationOff, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.SetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.GetVertexConnectHighPixels = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetVertexConnectHighPixels, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.VertexConnectHighPixelsOn = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOn, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.VertexConnectHighPixelsOff = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_VertexConnectHighPixelsOff, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.SetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetRequestedRegion, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.GetRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetRequestedRegion, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.ClearRequestedRegion = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_ClearRequestedRegion, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.SetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_SetContourValue, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2.GetContourValue = new_instancemethod(_itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_GetContourValue, None, itkContourExtractor2DImageFilterIUS2)
itkContourExtractor2DImageFilterIUS2_swigregister = _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_swigregister
itkContourExtractor2DImageFilterIUS2_swigregister(itkContourExtractor2DImageFilterIUS2)

def itkContourExtractor2DImageFilterIUS2___New_orig__() -> "itkContourExtractor2DImageFilterIUS2_Pointer":
    """itkContourExtractor2DImageFilterIUS2___New_orig__() -> itkContourExtractor2DImageFilterIUS2_Pointer"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2___New_orig__()

def itkContourExtractor2DImageFilterIUS2_cast(obj: 'itkLightObject') -> "itkContourExtractor2DImageFilterIUS2 *":
    """itkContourExtractor2DImageFilterIUS2_cast(itkLightObject obj) -> itkContourExtractor2DImageFilterIUS2"""
    return _itkContourExtractor2DImageFilterPython.itkContourExtractor2DImageFilterIUS2_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def contour_extractor2_d_image_filter(*args, **kwargs):
    """Procedural interface for ContourExtractor2DImageFilter"""
    import itk
    instance = itk.ContourExtractor2DImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def contour_extractor2_d_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ContourExtractor2DImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ContourExtractor2DImageFilter.values()[0]
    else:
        filter_object = itk.ContourExtractor2DImageFilter

    contour_extractor2_d_image_filter.__doc__ = filter_object.__doc__
    contour_extractor2_d_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    contour_extractor2_d_image_filter.__doc__ += "Available Keyword Arguments:\n"
    contour_extractor2_d_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



