# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDisplacementFieldTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDisplacementFieldTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkDisplacementFieldTransformPython
            return _itkDisplacementFieldTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDisplacementFieldTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDisplacementFieldTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDisplacementFieldTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkTransformBasePython
import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkPointPython
import itkOptimizerParametersPython
import itkArrayPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkVariableLengthVectorPython
import itkArray2DPython
import itkDiffusionTensor3DPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython

def itkDisplacementFieldTransformD3_New():
  return itkDisplacementFieldTransformD3.New()


def itkDisplacementFieldTransformD2_New():
  return itkDisplacementFieldTransformD2.New()

class itkDisplacementFieldTransformD2(itkTransformBasePython.itkTransformD22):
    """


    Provides local/dense/high-dimensionality transformation via a a
    displacement field.

    The displacement field stores vectors of displacements, with dimension
    NDimensions. Transformation is performed at a given point by adding
    the displacement at that point to the input point.

    T(x, p), x is the position, p is the local parameter at position x.
    For a 2D example:

    x = (x0, x1), p = (p0, p1)

    then T(x, p) is defined as:

    T(x, p) = (T0, T1) = (x0+p0, x1+p1)

    During transformation, out-of-bounds input points are returned with
    zero displacement.

    The displacement field is defined using an itkImage, and must be set
    before use by the user, using SetDisplacementField. The image has the
    same dimensionality as the input and output spaces, defined by
    template parameter NDimensions, and is an image of vectors of type
    OutputVectorType, with dimensionality NDimensions as well.

    An interpolator of type VectorInterpolateImageFunction is used with
    the displacement field image. By default,
    VectorLinearInterpolateImageFunction is used, and the user can
    override using SetInterpolator.

    The displacement field data is stored using the common
    OptimizerParameters type in conjunction with the
    ImageVectorOptimizerParametersHelper class. This allows access of the
    displacement field image as if it were an itkArray, allowing
    transparent use with other classes. WARNING:  The SetParameters method
    will copy the passed parameters, which can be costly since
    displacement fields are dense and thus potentially very large.  The
    UpdateTransformParameters method simply adds the provided update
    array, applying the usual optional scaling factor. Derived classes may
    provide different behavior.

    Because this is a local transform, methods that have a version that
    takes a point must be used, such as TransformVector,
    TransformCovariantVector, and TransformDiffusionTensor. Also,
    ComputeJacobianWithRespectToParameters simply returns an identity
    matrix (see method documentation), and
    ComputeJacobianWithRespectToPosition should be used.

    C++ includes: itkDisplacementFieldTransform.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldTransformD2_Pointer":
        """__New_orig__() -> itkDisplacementFieldTransformD2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldTransformD2_Pointer":
        """Clone(itkDisplacementFieldTransformD2 self) -> itkDisplacementFieldTransformD2_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_Clone(self)


    def SetDisplacementField(self, field: 'itkImageVD22') -> "void":
        """
        SetDisplacementField(itkDisplacementFieldTransformD2 self, itkImageVD22 field)

        Get/Set the
        displacement field. Set the displacement field. Create special set
        accessor to update interpolator and assign displacement field to
        transform parameters container. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDisplacementField(self, field)


    def GetModifiableDisplacementField(self) -> "itkImageVD22 *":
        """GetModifiableDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableDisplacementField(self)


    def GetDisplacementField(self, *args) -> "itkImageVD22 *":
        """
        GetDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22
        GetDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementField(self, *args)


    def SetInverseDisplacementField(self, inverseDisplacementField: 'itkImageVD22') -> "void":
        """
        SetInverseDisplacementField(itkDisplacementFieldTransformD2 self, itkImageVD22 inverseDisplacementField)

        Get/Set
        the inverse displacement field. This must be supplied by the user for
        GetInverse() to work. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseDisplacementField(self, inverseDisplacementField)


    def GetModifiableInverseDisplacementField(self) -> "itkImageVD22 *":
        """GetModifiableInverseDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseDisplacementField(self)


    def GetInverseDisplacementField(self, *args) -> "itkImageVD22 *":
        """
        GetInverseDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22
        GetInverseDisplacementField(itkDisplacementFieldTransformD2 self) -> itkImageVD22
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseDisplacementField(self, *args)


    def SetInterpolator(self, interpolator: 'itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *') -> "void":
        """
        SetInterpolator(itkDisplacementFieldTransformD2 self, itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > * interpolator)

        Get/Set the
        interpolator. Create out own set accessor that assigns the
        displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *":
        """GetModifiableInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *":
        """
        GetInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > const
        GetInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInterpolator(self, *args)


    def SetInverseInterpolator(self, interpolator: 'itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *') -> "void":
        """
        SetInverseInterpolator(itkDisplacementFieldTransformD2 self, itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > * interpolator)

        Get/Set the
        interpolator for the inverse field. Create out own set accessor that
        assigns the displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseInterpolator(self, interpolator)


    def GetModifiableInverseInterpolator(self) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *":
        """GetModifiableInverseInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseInterpolator(self)


    def GetInverseInterpolator(self, *args) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *":
        """
        GetInverseInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > const
        GetInverseInterpolator(itkDisplacementFieldTransformD2 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,2 >,2 >,double > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseInterpolator(self, *args)


    def GetDisplacementFieldSetTime(self) -> "unsigned long const &":
        """
        GetDisplacementFieldSetTime(itkDisplacementFieldTransformD2 self) -> unsigned long const &

        Get the
        modification time of displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementFieldSetTime(self)


    def TransformVector(self, *args) -> "vnl_vector_fixed< double,2 >":
        """
        TransformVector(itkDisplacementFieldTransformD2 self, itkVectorD2 arg0) -> itkVectorD2
        TransformVector(itkDisplacementFieldTransformD2 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD
        TransformVector(itkDisplacementFieldTransformD2 self, vnl_vector_fixed< double,2 > const & arg0) -> vnl_vector_fixed< double,2 >

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformVector(self, *args)


    def TransformDiffusionTensor(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformDiffusionTensor(itkDisplacementFieldTransformD2 self, itkDiffusionTensor3DD arg0) -> itkDiffusionTensor3DD
        TransformDiffusionTensor(itkDisplacementFieldTransformD2 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformDiffusionTensor(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformCovariantVector(itkDisplacementFieldTransformD2 self, itkCovariantVectorD2 arg0) -> itkCovariantVectorD2
        TransformCovariantVector(itkDisplacementFieldTransformD2 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformCovariantVector(self, *args)


    def ComputeJacobianWithRespectToParameters(self, *args) -> "void":
        """
        ComputeJacobianWithRespectToParameters(itkDisplacementFieldTransformD2 self, itkPointD2 arg0, itkArray2DD j)
        ComputeJacobianWithRespectToParameters(itkDisplacementFieldTransformD2 self, itkIndex2 arg0, itkArray2DD j)

        Compute the
        jacobian with respect to the parameters at an index. Simply returns
        identity matrix, sized [NDimensions, NDimensions]. See
        ComputeJacobianWithRespectToParameters( InputPointType, ... ) for
        rationale. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToParameters(self, *args)


    def ComputeJacobianWithRespectToPosition(self, *args) -> "void":
        """
        ComputeJacobianWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkPointD2 x, vnl_matrix_fixedD_2_2 j)
        ComputeJacobianWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkIndex2 x, vnl_matrix_fixedD_2_2 j)

        Compute the jacobian with respect to the position, by index. j will
        be resized as needed. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToPosition(self, *args)


    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args) -> "void":
        """
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkPointD2 point, vnl_matrix_fixedD_2_2 jacobian, bool useSVD=False)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkPointD2 point, vnl_matrix_fixedD_2_2 jacobian)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkIndex2 index, vnl_matrix_fixedD_2_2 jacobian, bool useSVD=False)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD2 self, itkIndex2 index, vnl_matrix_fixedD_2_2 jacobian)

        Compute the inverse jacobian of the forward displacement field with
        respect to the position, by index.Note that this is different than the
        jacobian of the inverse displacement field. This takes advantage of
        the ability to compute the inverse jacobian of a displacement field by
        simply reversing the sign of the forward jacobian. However, a more
        accurate method for computing the inverse jacobian is to take the
        inverse of the jacobian matrix. This method is more computationally
        expensive and may be used by setting useSVD to true 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)


    def UpdateTransformParameters(self, update: 'itkArrayD', factor: 'double'=1.) -> "void":
        """
        UpdateTransformParameters(itkDisplacementFieldTransformD2 self, itkArrayD update, double factor=1.)
        UpdateTransformParameters(itkDisplacementFieldTransformD2 self, itkArrayD update)

        Update
        the transform's parameters by the values in update.

        Parameters:
        -----------

        update:  must be of the same length as returned by
        GetNumberOfParameters(). Throw an exception otherwise.

        factor:  is a scalar multiplier for each value in update.
        SetParameters is called at the end of this method, to allow the
        transform to perform any required operations on the updated parameters
        - typically a conversion to member variables for use in
        TransformPoint. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_UpdateTransformParameters(self, update, factor)


    def GetInverse(self, inverse: 'itkDisplacementFieldTransformD2') -> "bool":
        """
        GetInverse(itkDisplacementFieldTransformD2 self, itkDisplacementFieldTransformD2 inverse) -> bool

        Return an inverse of
        this transform. Note that the inverse displacement field must be set
        by the user. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverse(self, inverse)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkDisplacementFieldTransformD2 self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetIdentity(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """
        SetCoordinateTolerance(itkDisplacementFieldTransformD2 self, double const _arg)

        Set/Get the
        coordinate tolerance. This tolerance is used when comparing the space
        defined by deformation fields and it's inverse to ensure they occupy
        the same physical space.

        See:  ImageToImageFilterCommon::SetGlobalDefaultCoordinateTolerance 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkDisplacementFieldTransformD2 self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """
        SetDirectionTolerance(itkDisplacementFieldTransformD2 self, double const _arg)

        Set/Get the
        direction tolerance. This tolerance is used to when comparing the
        orientation of the deformation fields and it's inverse to ensure they
        occupy the same physical space.

        See:  ImageToImageFilterCommon::SetGlobalDefaultDirectionTolerance 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkDisplacementFieldTransformD2 self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDirectionTolerance(self)

    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformD2

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldTransformD2 *":
        """cast(itkLightObject obj) -> itkDisplacementFieldTransformD2"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformD2

        Create a new object of the class itkDisplacementFieldTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldTransformD2.Clone = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_Clone, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetModifiableDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetModifiableInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseDisplacementField, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetModifiableInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetInverseInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetModifiableInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetModifiableInverseInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseInterpolator, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetDisplacementFieldSetTime = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDisplacementFieldSetTime, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.TransformVector = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformVector, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.TransformDiffusionTensor = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformDiffusionTensor, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.TransformCovariantVector = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_TransformCovariantVector, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.ComputeJacobianWithRespectToParameters = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToParameters, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.ComputeJacobianWithRespectToPosition = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_ComputeJacobianWithRespectToPosition, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetInverseJacobianOfForwardFieldWithRespectToPosition = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverseJacobianOfForwardFieldWithRespectToPosition, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.UpdateTransformParameters = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_UpdateTransformParameters, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetInverse = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetInverse, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetIdentity = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetIdentity, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetCoordinateTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetCoordinateTolerance, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetCoordinateTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetCoordinateTolerance, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.SetDirectionTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_SetDirectionTolerance, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2.GetDirectionTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_GetDirectionTolerance, None, itkDisplacementFieldTransformD2)
itkDisplacementFieldTransformD2_swigregister = _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_swigregister
itkDisplacementFieldTransformD2_swigregister(itkDisplacementFieldTransformD2)

def itkDisplacementFieldTransformD2___New_orig__() -> "itkDisplacementFieldTransformD2_Pointer":
    """itkDisplacementFieldTransformD2___New_orig__() -> itkDisplacementFieldTransformD2_Pointer"""
    return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2___New_orig__()

def itkDisplacementFieldTransformD2_cast(obj: 'itkLightObject') -> "itkDisplacementFieldTransformD2 *":
    """itkDisplacementFieldTransformD2_cast(itkLightObject obj) -> itkDisplacementFieldTransformD2"""
    return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD2_cast(obj)

class itkDisplacementFieldTransformD3(itkTransformBasePython.itkTransformD33):
    """


    Provides local/dense/high-dimensionality transformation via a a
    displacement field.

    The displacement field stores vectors of displacements, with dimension
    NDimensions. Transformation is performed at a given point by adding
    the displacement at that point to the input point.

    T(x, p), x is the position, p is the local parameter at position x.
    For a 2D example:

    x = (x0, x1), p = (p0, p1)

    then T(x, p) is defined as:

    T(x, p) = (T0, T1) = (x0+p0, x1+p1)

    During transformation, out-of-bounds input points are returned with
    zero displacement.

    The displacement field is defined using an itkImage, and must be set
    before use by the user, using SetDisplacementField. The image has the
    same dimensionality as the input and output spaces, defined by
    template parameter NDimensions, and is an image of vectors of type
    OutputVectorType, with dimensionality NDimensions as well.

    An interpolator of type VectorInterpolateImageFunction is used with
    the displacement field image. By default,
    VectorLinearInterpolateImageFunction is used, and the user can
    override using SetInterpolator.

    The displacement field data is stored using the common
    OptimizerParameters type in conjunction with the
    ImageVectorOptimizerParametersHelper class. This allows access of the
    displacement field image as if it were an itkArray, allowing
    transparent use with other classes. WARNING:  The SetParameters method
    will copy the passed parameters, which can be costly since
    displacement fields are dense and thus potentially very large.  The
    UpdateTransformParameters method simply adds the provided update
    array, applying the usual optional scaling factor. Derived classes may
    provide different behavior.

    Because this is a local transform, methods that have a version that
    takes a point must be used, such as TransformVector,
    TransformCovariantVector, and TransformDiffusionTensor. Also,
    ComputeJacobianWithRespectToParameters simply returns an identity
    matrix (see method documentation), and
    ComputeJacobianWithRespectToPosition should be used.

    C++ includes: itkDisplacementFieldTransform.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldTransformD3_Pointer":
        """__New_orig__() -> itkDisplacementFieldTransformD3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldTransformD3_Pointer":
        """Clone(itkDisplacementFieldTransformD3 self) -> itkDisplacementFieldTransformD3_Pointer"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_Clone(self)


    def SetDisplacementField(self, field: 'itkImageVD33') -> "void":
        """
        SetDisplacementField(itkDisplacementFieldTransformD3 self, itkImageVD33 field)

        Get/Set the
        displacement field. Set the displacement field. Create special set
        accessor to update interpolator and assign displacement field to
        transform parameters container. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDisplacementField(self, field)


    def GetModifiableDisplacementField(self) -> "itkImageVD33 *":
        """GetModifiableDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableDisplacementField(self)


    def GetDisplacementField(self, *args) -> "itkImageVD33 *":
        """
        GetDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33
        GetDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementField(self, *args)


    def SetInverseDisplacementField(self, inverseDisplacementField: 'itkImageVD33') -> "void":
        """
        SetInverseDisplacementField(itkDisplacementFieldTransformD3 self, itkImageVD33 inverseDisplacementField)

        Get/Set
        the inverse displacement field. This must be supplied by the user for
        GetInverse() to work. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseDisplacementField(self, inverseDisplacementField)


    def GetModifiableInverseDisplacementField(self) -> "itkImageVD33 *":
        """GetModifiableInverseDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseDisplacementField(self)


    def GetInverseDisplacementField(self, *args) -> "itkImageVD33 *":
        """
        GetInverseDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33
        GetInverseDisplacementField(itkDisplacementFieldTransformD3 self) -> itkImageVD33
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseDisplacementField(self, *args)


    def SetInterpolator(self, interpolator: 'itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *') -> "void":
        """
        SetInterpolator(itkDisplacementFieldTransformD3 self, itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > * interpolator)

        Get/Set the
        interpolator. Create out own set accessor that assigns the
        displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInterpolator(self, interpolator)


    def GetModifiableInterpolator(self) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *":
        """GetModifiableInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInterpolator(self)


    def GetInterpolator(self, *args) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *":
        """
        GetInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > const
        GetInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInterpolator(self, *args)


    def SetInverseInterpolator(self, interpolator: 'itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *') -> "void":
        """
        SetInverseInterpolator(itkDisplacementFieldTransformD3 self, itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > * interpolator)

        Get/Set the
        interpolator for the inverse field. Create out own set accessor that
        assigns the displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseInterpolator(self, interpolator)


    def GetModifiableInverseInterpolator(self) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *":
        """GetModifiableInverseInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseInterpolator(self)


    def GetInverseInterpolator(self, *args) -> "itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *":
        """
        GetInverseInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > const
        GetInverseInterpolator(itkDisplacementFieldTransformD3 self) -> itk::VectorInterpolateImageFunction< itk::Image< itk::Vector< double,3 >,3 >,double > *
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseInterpolator(self, *args)


    def GetDisplacementFieldSetTime(self) -> "unsigned long const &":
        """
        GetDisplacementFieldSetTime(itkDisplacementFieldTransformD3 self) -> unsigned long const &

        Get the
        modification time of displacement field. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementFieldSetTime(self)


    def TransformVector(self, *args) -> "vnl_vector_fixed< double,3 >":
        """
        TransformVector(itkDisplacementFieldTransformD3 self, itkVectorD3 arg0) -> itkVectorD3
        TransformVector(itkDisplacementFieldTransformD3 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD
        TransformVector(itkDisplacementFieldTransformD3 self, vnl_vector_fixed< double,3 > const & arg0) -> vnl_vector_fixed< double,3 >

        Method to transform
        a vector stored in a VectorImage, at a point. For global transforms,
        point is ignored and TransformVector( vector ) is called. Local
        transforms (e.g. deformation field transform) must override and
        provide required behavior. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformVector(self, *args)


    def TransformDiffusionTensor(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformDiffusionTensor(itkDisplacementFieldTransformD3 self, itkDiffusionTensor3DD arg0) -> itkDiffusionTensor3DD
        TransformDiffusionTensor(itkDisplacementFieldTransformD3 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformDiffusionTensor(self, *args)


    def TransformCovariantVector(self, *args) -> "itkVariableLengthVectorD":
        """
        TransformCovariantVector(itkDisplacementFieldTransformD3 self, itkCovariantVectorD3 arg0) -> itkCovariantVectorD3
        TransformCovariantVector(itkDisplacementFieldTransformD3 self, itkVariableLengthVectorD arg0) -> itkVariableLengthVectorD

        Method to
        transform a CovariantVector, using a point. Global transforms can
        ignore the point parameter. Local transforms (e.g. deformation field
        transform) must override and provide required behavior. By default,
        point is ignored and TransformCovariantVector(vector) is called 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformCovariantVector(self, *args)


    def ComputeJacobianWithRespectToParameters(self, *args) -> "void":
        """
        ComputeJacobianWithRespectToParameters(itkDisplacementFieldTransformD3 self, itkPointD3 arg0, itkArray2DD j)
        ComputeJacobianWithRespectToParameters(itkDisplacementFieldTransformD3 self, itkIndex3 arg0, itkArray2DD j)

        Compute the
        jacobian with respect to the parameters at an index. Simply returns
        identity matrix, sized [NDimensions, NDimensions]. See
        ComputeJacobianWithRespectToParameters( InputPointType, ... ) for
        rationale. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToParameters(self, *args)


    def ComputeJacobianWithRespectToPosition(self, *args) -> "void":
        """
        ComputeJacobianWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkPointD3 x, vnl_matrix_fixedD_3_3 j)
        ComputeJacobianWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkIndex3 x, vnl_matrix_fixedD_3_3 j)

        Compute the jacobian with respect to the position, by index. j will
        be resized as needed. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToPosition(self, *args)


    def GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args) -> "void":
        """
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkPointD3 point, vnl_matrix_fixedD_3_3 jacobian, bool useSVD=False)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkPointD3 point, vnl_matrix_fixedD_3_3 jacobian)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkIndex3 index, vnl_matrix_fixedD_3_3 jacobian, bool useSVD=False)
        GetInverseJacobianOfForwardFieldWithRespectToPosition(itkDisplacementFieldTransformD3 self, itkIndex3 index, vnl_matrix_fixedD_3_3 jacobian)

        Compute the inverse jacobian of the forward displacement field with
        respect to the position, by index.Note that this is different than the
        jacobian of the inverse displacement field. This takes advantage of
        the ability to compute the inverse jacobian of a displacement field by
        simply reversing the sign of the forward jacobian. However, a more
        accurate method for computing the inverse jacobian is to take the
        inverse of the jacobian matrix. This method is more computationally
        expensive and may be used by setting useSVD to true 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseJacobianOfForwardFieldWithRespectToPosition(self, *args)


    def UpdateTransformParameters(self, update: 'itkArrayD', factor: 'double'=1.) -> "void":
        """
        UpdateTransformParameters(itkDisplacementFieldTransformD3 self, itkArrayD update, double factor=1.)
        UpdateTransformParameters(itkDisplacementFieldTransformD3 self, itkArrayD update)

        Update
        the transform's parameters by the values in update.

        Parameters:
        -----------

        update:  must be of the same length as returned by
        GetNumberOfParameters(). Throw an exception otherwise.

        factor:  is a scalar multiplier for each value in update.
        SetParameters is called at the end of this method, to allow the
        transform to perform any required operations on the updated parameters
        - typically a conversion to member variables for use in
        TransformPoint. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_UpdateTransformParameters(self, update, factor)


    def GetInverse(self, inverse: 'itkDisplacementFieldTransformD3') -> "bool":
        """
        GetInverse(itkDisplacementFieldTransformD3 self, itkDisplacementFieldTransformD3 inverse) -> bool

        Return an inverse of
        this transform. Note that the inverse displacement field must be set
        by the user. 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverse(self, inverse)


    def SetIdentity(self) -> "void":
        """SetIdentity(itkDisplacementFieldTransformD3 self)"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetIdentity(self)


    def SetCoordinateTolerance(self, _arg: 'double const') -> "void":
        """
        SetCoordinateTolerance(itkDisplacementFieldTransformD3 self, double const _arg)

        Set/Get the
        coordinate tolerance. This tolerance is used when comparing the space
        defined by deformation fields and it's inverse to ensure they occupy
        the same physical space.

        See:  ImageToImageFilterCommon::SetGlobalDefaultCoordinateTolerance 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self) -> "double":
        """GetCoordinateTolerance(itkDisplacementFieldTransformD3 self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg: 'double const') -> "void":
        """
        SetDirectionTolerance(itkDisplacementFieldTransformD3 self, double const _arg)

        Set/Get the
        direction tolerance. This tolerance is used to when comparing the
        orientation of the deformation fields and it's inverse to ensure they
        occupy the same physical space.

        See:  ImageToImageFilterCommon::SetGlobalDefaultDirectionTolerance 
        """
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self) -> "double":
        """GetDirectionTolerance(itkDisplacementFieldTransformD3 self) -> double"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDirectionTolerance(self)

    __swig_destroy__ = _itkDisplacementFieldTransformPython.delete_itkDisplacementFieldTransformD3

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldTransformD3 *":
        """cast(itkLightObject obj) -> itkDisplacementFieldTransformD3"""
        return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldTransformD3

        Create a new object of the class itkDisplacementFieldTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldTransformD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldTransformD3.Clone = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_Clone, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetModifiableDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetModifiableInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetInverseDisplacementField = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseDisplacementField, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetModifiableInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetInverseInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetModifiableInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetModifiableInverseInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetInverseInterpolator = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseInterpolator, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetDisplacementFieldSetTime = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDisplacementFieldSetTime, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.TransformVector = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformVector, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.TransformDiffusionTensor = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformDiffusionTensor, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.TransformCovariantVector = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_TransformCovariantVector, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.ComputeJacobianWithRespectToParameters = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToParameters, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.ComputeJacobianWithRespectToPosition = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_ComputeJacobianWithRespectToPosition, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetInverseJacobianOfForwardFieldWithRespectToPosition = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverseJacobianOfForwardFieldWithRespectToPosition, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.UpdateTransformParameters = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_UpdateTransformParameters, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetInverse = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetInverse, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetIdentity = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetIdentity, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetCoordinateTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetCoordinateTolerance, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetCoordinateTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetCoordinateTolerance, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.SetDirectionTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_SetDirectionTolerance, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3.GetDirectionTolerance = new_instancemethod(_itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_GetDirectionTolerance, None, itkDisplacementFieldTransformD3)
itkDisplacementFieldTransformD3_swigregister = _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_swigregister
itkDisplacementFieldTransformD3_swigregister(itkDisplacementFieldTransformD3)

def itkDisplacementFieldTransformD3___New_orig__() -> "itkDisplacementFieldTransformD3_Pointer":
    """itkDisplacementFieldTransformD3___New_orig__() -> itkDisplacementFieldTransformD3_Pointer"""
    return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3___New_orig__()

def itkDisplacementFieldTransformD3_cast(obj: 'itkLightObject') -> "itkDisplacementFieldTransformD3 *":
    """itkDisplacementFieldTransformD3_cast(itkLightObject obj) -> itkDisplacementFieldTransformD3"""
    return _itkDisplacementFieldTransformPython.itkDisplacementFieldTransformD3_cast(obj)



