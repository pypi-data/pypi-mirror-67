# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkWeightedAddImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkWeightedAddImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkWeightedAddImageFilterPython
            return _itkWeightedAddImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkWeightedAddImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkWeightedAddImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkWeightedAddImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkBinaryGeneratorImageFilterPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterBPython

def itkWeightedAddImageFilterID3ID3ID3_New():
  return itkWeightedAddImageFilterID3ID3ID3.New()


def itkWeightedAddImageFilterID2ID2ID2_New():
  return itkWeightedAddImageFilterID2ID2ID2.New()


def itkWeightedAddImageFilterIF3IF3IF3_New():
  return itkWeightedAddImageFilterIF3IF3IF3.New()


def itkWeightedAddImageFilterIF2IF2IF2_New():
  return itkWeightedAddImageFilterIF2IF2IF2.New()


def itkWeightedAddImageFilterIUS3IUS3IUS3_New():
  return itkWeightedAddImageFilterIUS3IUS3IUS3.New()


def itkWeightedAddImageFilterIUS2IUS2IUS2_New():
  return itkWeightedAddImageFilterIUS2IUS2IUS2.New()


def itkWeightedAddImageFilterIUC3IUC3IUC3_New():
  return itkWeightedAddImageFilterIUC3IUC3IUC3.New()


def itkWeightedAddImageFilterIUC2IUC2IUC2_New():
  return itkWeightedAddImageFilterIUC2IUC2IUC2.New()


def itkWeightedAddImageFilterISS3ISS3ISS3_New():
  return itkWeightedAddImageFilterISS3ISS3ISS3.New()


def itkWeightedAddImageFilterISS2ISS2ISS2_New():
  return itkWeightedAddImageFilterISS2ISS2ISS2.New()

class itkWeightedAddImageFilterID2ID2ID2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterID2ID2ID2_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterID2ID2ID2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterID2ID2ID2_Pointer":
        """Clone(itkWeightedAddImageFilterID2ID2ID2 self) -> itkWeightedAddImageFilterID2ID2ID2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterID2ID2ID2 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterID2ID2ID2 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterID2ID2ID2

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterID2ID2ID2 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterID2ID2ID2"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterID2ID2ID2

        Create a new object of the class itkWeightedAddImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterID2ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterID2ID2ID2.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_Clone, None, itkWeightedAddImageFilterID2ID2ID2)
itkWeightedAddImageFilterID2ID2ID2.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_SetAlpha, None, itkWeightedAddImageFilterID2ID2ID2)
itkWeightedAddImageFilterID2ID2ID2.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_GetAlpha, None, itkWeightedAddImageFilterID2ID2ID2)
itkWeightedAddImageFilterID2ID2ID2_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_swigregister
itkWeightedAddImageFilterID2ID2ID2_swigregister(itkWeightedAddImageFilterID2ID2ID2)

def itkWeightedAddImageFilterID2ID2ID2___New_orig__() -> "itkWeightedAddImageFilterID2ID2ID2_Pointer":
    """itkWeightedAddImageFilterID2ID2ID2___New_orig__() -> itkWeightedAddImageFilterID2ID2ID2_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2___New_orig__()

def itkWeightedAddImageFilterID2ID2ID2_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterID2ID2ID2 *":
    """itkWeightedAddImageFilterID2ID2ID2_cast(itkLightObject obj) -> itkWeightedAddImageFilterID2ID2ID2"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID2ID2ID2_cast(obj)

class itkWeightedAddImageFilterID3ID3ID3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterID3ID3ID3_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterID3ID3ID3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterID3ID3ID3_Pointer":
        """Clone(itkWeightedAddImageFilterID3ID3ID3 self) -> itkWeightedAddImageFilterID3ID3ID3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterID3ID3ID3 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterID3ID3ID3 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterID3ID3ID3

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterID3ID3ID3 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterID3ID3ID3"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterID3ID3ID3

        Create a new object of the class itkWeightedAddImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterID3ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterID3ID3ID3.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_Clone, None, itkWeightedAddImageFilterID3ID3ID3)
itkWeightedAddImageFilterID3ID3ID3.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_SetAlpha, None, itkWeightedAddImageFilterID3ID3ID3)
itkWeightedAddImageFilterID3ID3ID3.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_GetAlpha, None, itkWeightedAddImageFilterID3ID3ID3)
itkWeightedAddImageFilterID3ID3ID3_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_swigregister
itkWeightedAddImageFilterID3ID3ID3_swigregister(itkWeightedAddImageFilterID3ID3ID3)

def itkWeightedAddImageFilterID3ID3ID3___New_orig__() -> "itkWeightedAddImageFilterID3ID3ID3_Pointer":
    """itkWeightedAddImageFilterID3ID3ID3___New_orig__() -> itkWeightedAddImageFilterID3ID3ID3_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3___New_orig__()

def itkWeightedAddImageFilterID3ID3ID3_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterID3ID3ID3 *":
    """itkWeightedAddImageFilterID3ID3ID3_cast(itkLightObject obj) -> itkWeightedAddImageFilterID3ID3ID3"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterID3ID3ID3_cast(obj)

class itkWeightedAddImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIF2IF2IF2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIF2IF2IF2_Pointer":
        """Clone(itkWeightedAddImageFilterIF2IF2IF2 self) -> itkWeightedAddImageFilterIF2IF2IF2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIF2IF2IF2 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIF2IF2IF2 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIF2IF2IF2"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIF2IF2IF2

        Create a new object of the class itkWeightedAddImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_Clone, None, itkWeightedAddImageFilterIF2IF2IF2)
itkWeightedAddImageFilterIF2IF2IF2.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_SetAlpha, None, itkWeightedAddImageFilterIF2IF2IF2)
itkWeightedAddImageFilterIF2IF2IF2.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_GetAlpha, None, itkWeightedAddImageFilterIF2IF2IF2)
itkWeightedAddImageFilterIF2IF2IF2_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_swigregister
itkWeightedAddImageFilterIF2IF2IF2_swigregister(itkWeightedAddImageFilterIF2IF2IF2)

def itkWeightedAddImageFilterIF2IF2IF2___New_orig__() -> "itkWeightedAddImageFilterIF2IF2IF2_Pointer":
    """itkWeightedAddImageFilterIF2IF2IF2___New_orig__() -> itkWeightedAddImageFilterIF2IF2IF2_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2___New_orig__()

def itkWeightedAddImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIF2IF2IF2 *":
    """itkWeightedAddImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkWeightedAddImageFilterIF2IF2IF2"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF2IF2IF2_cast(obj)

class itkWeightedAddImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIF3IF3IF3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIF3IF3IF3_Pointer":
        """Clone(itkWeightedAddImageFilterIF3IF3IF3 self) -> itkWeightedAddImageFilterIF3IF3IF3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIF3IF3IF3 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIF3IF3IF3 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIF3IF3IF3"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIF3IF3IF3

        Create a new object of the class itkWeightedAddImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_Clone, None, itkWeightedAddImageFilterIF3IF3IF3)
itkWeightedAddImageFilterIF3IF3IF3.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_SetAlpha, None, itkWeightedAddImageFilterIF3IF3IF3)
itkWeightedAddImageFilterIF3IF3IF3.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_GetAlpha, None, itkWeightedAddImageFilterIF3IF3IF3)
itkWeightedAddImageFilterIF3IF3IF3_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_swigregister
itkWeightedAddImageFilterIF3IF3IF3_swigregister(itkWeightedAddImageFilterIF3IF3IF3)

def itkWeightedAddImageFilterIF3IF3IF3___New_orig__() -> "itkWeightedAddImageFilterIF3IF3IF3_Pointer":
    """itkWeightedAddImageFilterIF3IF3IF3___New_orig__() -> itkWeightedAddImageFilterIF3IF3IF3_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3___New_orig__()

def itkWeightedAddImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIF3IF3IF3 *":
    """itkWeightedAddImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkWeightedAddImageFilterIF3IF3IF3"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIF3IF3IF3_cast(obj)

class itkWeightedAddImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkWeightedAddImageFilterISS2ISS2ISS2 self) -> itkWeightedAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterISS2ISS2ISS2 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterISS2ISS2ISS2 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterISS2ISS2ISS2"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterISS2ISS2ISS2

        Create a new object of the class itkWeightedAddImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_Clone, None, itkWeightedAddImageFilterISS2ISS2ISS2)
itkWeightedAddImageFilterISS2ISS2ISS2.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_SetAlpha, None, itkWeightedAddImageFilterISS2ISS2ISS2)
itkWeightedAddImageFilterISS2ISS2ISS2.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_GetAlpha, None, itkWeightedAddImageFilterISS2ISS2ISS2)
itkWeightedAddImageFilterISS2ISS2ISS2_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_swigregister
itkWeightedAddImageFilterISS2ISS2ISS2_swigregister(itkWeightedAddImageFilterISS2ISS2ISS2)

def itkWeightedAddImageFilterISS2ISS2ISS2___New_orig__() -> "itkWeightedAddImageFilterISS2ISS2ISS2_Pointer":
    """itkWeightedAddImageFilterISS2ISS2ISS2___New_orig__() -> itkWeightedAddImageFilterISS2ISS2ISS2_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2___New_orig__()

def itkWeightedAddImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterISS2ISS2ISS2 *":
    """itkWeightedAddImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkWeightedAddImageFilterISS2ISS2ISS2"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS2ISS2ISS2_cast(obj)

class itkWeightedAddImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkWeightedAddImageFilterISS3ISS3ISS3 self) -> itkWeightedAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterISS3ISS3ISS3 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterISS3ISS3ISS3 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterISS3ISS3ISS3"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterISS3ISS3ISS3

        Create a new object of the class itkWeightedAddImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_Clone, None, itkWeightedAddImageFilterISS3ISS3ISS3)
itkWeightedAddImageFilterISS3ISS3ISS3.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_SetAlpha, None, itkWeightedAddImageFilterISS3ISS3ISS3)
itkWeightedAddImageFilterISS3ISS3ISS3.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_GetAlpha, None, itkWeightedAddImageFilterISS3ISS3ISS3)
itkWeightedAddImageFilterISS3ISS3ISS3_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_swigregister
itkWeightedAddImageFilterISS3ISS3ISS3_swigregister(itkWeightedAddImageFilterISS3ISS3ISS3)

def itkWeightedAddImageFilterISS3ISS3ISS3___New_orig__() -> "itkWeightedAddImageFilterISS3ISS3ISS3_Pointer":
    """itkWeightedAddImageFilterISS3ISS3ISS3___New_orig__() -> itkWeightedAddImageFilterISS3ISS3ISS3_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3___New_orig__()

def itkWeightedAddImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterISS3ISS3ISS3 *":
    """itkWeightedAddImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkWeightedAddImageFilterISS3ISS3ISS3"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterISS3ISS3ISS3_cast(obj)

class itkWeightedAddImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkWeightedAddImageFilterIUC2IUC2IUC2 self) -> itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIUC2IUC2IUC2 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIUC2IUC2IUC2 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIUC2IUC2IUC2"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUC2IUC2IUC2

        Create a new object of the class itkWeightedAddImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_Clone, None, itkWeightedAddImageFilterIUC2IUC2IUC2)
itkWeightedAddImageFilterIUC2IUC2IUC2.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_SetAlpha, None, itkWeightedAddImageFilterIUC2IUC2IUC2)
itkWeightedAddImageFilterIUC2IUC2IUC2.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_GetAlpha, None, itkWeightedAddImageFilterIUC2IUC2IUC2)
itkWeightedAddImageFilterIUC2IUC2IUC2_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_swigregister
itkWeightedAddImageFilterIUC2IUC2IUC2_swigregister(itkWeightedAddImageFilterIUC2IUC2IUC2)

def itkWeightedAddImageFilterIUC2IUC2IUC2___New_orig__() -> "itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer":
    """itkWeightedAddImageFilterIUC2IUC2IUC2___New_orig__() -> itkWeightedAddImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2___New_orig__()

def itkWeightedAddImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUC2IUC2IUC2 *":
    """itkWeightedAddImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkWeightedAddImageFilterIUC2IUC2IUC2"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC2IUC2IUC2_cast(obj)

class itkWeightedAddImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkWeightedAddImageFilterIUC3IUC3IUC3 self) -> itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIUC3IUC3IUC3 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIUC3IUC3IUC3 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIUC3IUC3IUC3"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUC3IUC3IUC3

        Create a new object of the class itkWeightedAddImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_Clone, None, itkWeightedAddImageFilterIUC3IUC3IUC3)
itkWeightedAddImageFilterIUC3IUC3IUC3.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_SetAlpha, None, itkWeightedAddImageFilterIUC3IUC3IUC3)
itkWeightedAddImageFilterIUC3IUC3IUC3.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_GetAlpha, None, itkWeightedAddImageFilterIUC3IUC3IUC3)
itkWeightedAddImageFilterIUC3IUC3IUC3_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_swigregister
itkWeightedAddImageFilterIUC3IUC3IUC3_swigregister(itkWeightedAddImageFilterIUC3IUC3IUC3)

def itkWeightedAddImageFilterIUC3IUC3IUC3___New_orig__() -> "itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer":
    """itkWeightedAddImageFilterIUC3IUC3IUC3___New_orig__() -> itkWeightedAddImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3___New_orig__()

def itkWeightedAddImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUC3IUC3IUC3 *":
    """itkWeightedAddImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkWeightedAddImageFilterIUC3IUC3IUC3"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUC3IUC3IUC3_cast(obj)

class itkWeightedAddImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkWeightedAddImageFilterIUS2IUS2IUS2 self) -> itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIUS2IUS2IUS2 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIUS2IUS2IUS2 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIUS2IUS2IUS2"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUS2IUS2IUS2

        Create a new object of the class itkWeightedAddImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_Clone, None, itkWeightedAddImageFilterIUS2IUS2IUS2)
itkWeightedAddImageFilterIUS2IUS2IUS2.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_SetAlpha, None, itkWeightedAddImageFilterIUS2IUS2IUS2)
itkWeightedAddImageFilterIUS2IUS2IUS2.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_GetAlpha, None, itkWeightedAddImageFilterIUS2IUS2IUS2)
itkWeightedAddImageFilterIUS2IUS2IUS2_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_swigregister
itkWeightedAddImageFilterIUS2IUS2IUS2_swigregister(itkWeightedAddImageFilterIUS2IUS2IUS2)

def itkWeightedAddImageFilterIUS2IUS2IUS2___New_orig__() -> "itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer":
    """itkWeightedAddImageFilterIUS2IUS2IUS2___New_orig__() -> itkWeightedAddImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2___New_orig__()

def itkWeightedAddImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUS2IUS2IUS2 *":
    """itkWeightedAddImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkWeightedAddImageFilterIUS2IUS2IUS2"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS2IUS2IUS2_cast(obj)

class itkWeightedAddImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """


    Computes a weighted sum of two images pixel-wise.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum will be cast to the pixel
    type of the output image.

    The total operation over one pixel will be

    The alpha parameter is set using SetAlpha.

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkWeightedAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkWeightedAddImageFilterIUS3IUS3IUS3 self) -> itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Clone(self)


    def SetAlpha(self, alpha: 'double') -> "void":
        """
        SetAlpha(itkWeightedAddImageFilterIUS3IUS3IUS3 self, double alpha)

        Set the weight for the
        first operand of the weighted addition 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_SetAlpha(self, alpha)


    def GetAlpha(self) -> "double":
        """
        GetAlpha(itkWeightedAddImageFilterIUS3IUS3IUS3 self) -> double

        Returns the current alpha
        value setting 
        """
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_GetAlpha(self)

    Input1HasNumericTraitsCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input1HasNumericTraitsCheck
    Input1RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input1RealTypeMultiplyCheck
    Input2RealTypeMultiplyCheck = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Input2RealTypeMultiplyCheck
    __swig_destroy__ = _itkWeightedAddImageFilterPython.delete_itkWeightedAddImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkWeightedAddImageFilterIUS3IUS3IUS3"""
        return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkWeightedAddImageFilterIUS3IUS3IUS3

        Create a new object of the class itkWeightedAddImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWeightedAddImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkWeightedAddImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkWeightedAddImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkWeightedAddImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_Clone, None, itkWeightedAddImageFilterIUS3IUS3IUS3)
itkWeightedAddImageFilterIUS3IUS3IUS3.SetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_SetAlpha, None, itkWeightedAddImageFilterIUS3IUS3IUS3)
itkWeightedAddImageFilterIUS3IUS3IUS3.GetAlpha = new_instancemethod(_itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_GetAlpha, None, itkWeightedAddImageFilterIUS3IUS3IUS3)
itkWeightedAddImageFilterIUS3IUS3IUS3_swigregister = _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_swigregister
itkWeightedAddImageFilterIUS3IUS3IUS3_swigregister(itkWeightedAddImageFilterIUS3IUS3IUS3)

def itkWeightedAddImageFilterIUS3IUS3IUS3___New_orig__() -> "itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer":
    """itkWeightedAddImageFilterIUS3IUS3IUS3___New_orig__() -> itkWeightedAddImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3___New_orig__()

def itkWeightedAddImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkWeightedAddImageFilterIUS3IUS3IUS3 *":
    """itkWeightedAddImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkWeightedAddImageFilterIUS3IUS3IUS3"""
    return _itkWeightedAddImageFilterPython.itkWeightedAddImageFilterIUS3IUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def weighted_add_image_filter(*args, **kwargs):
    """Procedural interface for WeightedAddImageFilter"""
    import itk
    instance = itk.WeightedAddImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def weighted_add_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.WeightedAddImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.WeightedAddImageFilter.values()[0]
    else:
        filter_object = itk.WeightedAddImageFilter

    weighted_add_image_filter.__doc__ = filter_object.__doc__
    weighted_add_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    weighted_add_image_filter.__doc__ += "Available Keyword Arguments:\n"
    weighted_add_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



