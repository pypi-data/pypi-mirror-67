# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMultiplyImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMultiplyImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkMultiplyImageFilterPython
            return _itkMultiplyImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMultiplyImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMultiplyImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMultiplyImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkBinaryGeneratorImageFilterPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterBPython

def itkMultiplyImageFilterICF3IF3ICF3_New():
  return itkMultiplyImageFilterICF3IF3ICF3.New()


def itkMultiplyImageFilterICF2IF2ICF2_New():
  return itkMultiplyImageFilterICF2IF2ICF2.New()


def itkMultiplyImageFilterICF3ICF3ICF3_New():
  return itkMultiplyImageFilterICF3ICF3ICF3.New()


def itkMultiplyImageFilterICF2ICF2ICF2_New():
  return itkMultiplyImageFilterICF2ICF2ICF2.New()


def itkMultiplyImageFilterID3ID3ID3_New():
  return itkMultiplyImageFilterID3ID3ID3.New()


def itkMultiplyImageFilterID2ID2ID2_New():
  return itkMultiplyImageFilterID2ID2ID2.New()


def itkMultiplyImageFilterIF3IF3IF3_New():
  return itkMultiplyImageFilterIF3IF3IF3.New()


def itkMultiplyImageFilterIF2IF2IF2_New():
  return itkMultiplyImageFilterIF2IF2IF2.New()


def itkMultiplyImageFilterIUS3IUS3IUS3_New():
  return itkMultiplyImageFilterIUS3IUS3IUS3.New()


def itkMultiplyImageFilterIUS2IUS2IUS2_New():
  return itkMultiplyImageFilterIUS2IUS2IUS2.New()


def itkMultiplyImageFilterIUC3IUC3IUC3_New():
  return itkMultiplyImageFilterIUC3IUC3IUC3.New()


def itkMultiplyImageFilterIUC2IUC2IUC2_New():
  return itkMultiplyImageFilterIUC2IUC2IUC2.New()


def itkMultiplyImageFilterISS3ISS3ISS3_New():
  return itkMultiplyImageFilterISS3ISS3ISS3.New()


def itkMultiplyImageFilterISS2ISS2ISS2_New():
  return itkMultiplyImageFilterISS2ISS2ISS2.New()

class itkMultiplyImageFilterICF2ICF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterICF2ICF2ICF2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterICF2ICF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterICF2ICF2ICF2_Pointer":
        """Clone(itkMultiplyImageFilterICF2ICF2ICF2 self) -> itkMultiplyImageFilterICF2ICF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2ICF2ICF2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF2ICF2ICF2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterICF2ICF2ICF2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2ICF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2ICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2ICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterICF2ICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterICF2ICF2ICF2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Clone, None, itkMultiplyImageFilterICF2ICF2ICF2)
itkMultiplyImageFilterICF2ICF2ICF2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_swigregister
itkMultiplyImageFilterICF2ICF2ICF2_swigregister(itkMultiplyImageFilterICF2ICF2ICF2)

def itkMultiplyImageFilterICF2ICF2ICF2___New_orig__() -> "itkMultiplyImageFilterICF2ICF2ICF2_Pointer":
    """itkMultiplyImageFilterICF2ICF2ICF2___New_orig__() -> itkMultiplyImageFilterICF2ICF2ICF2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2___New_orig__()

def itkMultiplyImageFilterICF2ICF2ICF2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF2ICF2ICF2 *":
    """itkMultiplyImageFilterICF2ICF2ICF2_cast(itkLightObject obj) -> itkMultiplyImageFilterICF2ICF2ICF2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_cast(obj)

class itkMultiplyImageFilterICF2IF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterICF2IF2ICF2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterICF2IF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterICF2IF2ICF2_Pointer":
        """Clone(itkMultiplyImageFilterICF2IF2ICF2 self) -> itkMultiplyImageFilterICF2IF2ICF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2IF2ICF2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF2IF2ICF2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterICF2IF2ICF2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2IF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2IF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2IF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterICF2IF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterICF2IF2ICF2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Clone, None, itkMultiplyImageFilterICF2IF2ICF2)
itkMultiplyImageFilterICF2IF2ICF2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_swigregister
itkMultiplyImageFilterICF2IF2ICF2_swigregister(itkMultiplyImageFilterICF2IF2ICF2)

def itkMultiplyImageFilterICF2IF2ICF2___New_orig__() -> "itkMultiplyImageFilterICF2IF2ICF2_Pointer":
    """itkMultiplyImageFilterICF2IF2ICF2___New_orig__() -> itkMultiplyImageFilterICF2IF2ICF2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2___New_orig__()

def itkMultiplyImageFilterICF2IF2ICF2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF2IF2ICF2 *":
    """itkMultiplyImageFilterICF2IF2ICF2_cast(itkLightObject obj) -> itkMultiplyImageFilterICF2IF2ICF2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_cast(obj)

class itkMultiplyImageFilterICF3ICF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterICF3ICF3ICF3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterICF3ICF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterICF3ICF3ICF3_Pointer":
        """Clone(itkMultiplyImageFilterICF3ICF3ICF3 self) -> itkMultiplyImageFilterICF3ICF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3ICF3ICF3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF3ICF3ICF3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterICF3ICF3ICF3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3ICF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3ICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3ICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterICF3ICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterICF3ICF3ICF3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Clone, None, itkMultiplyImageFilterICF3ICF3ICF3)
itkMultiplyImageFilterICF3ICF3ICF3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_swigregister
itkMultiplyImageFilterICF3ICF3ICF3_swigregister(itkMultiplyImageFilterICF3ICF3ICF3)

def itkMultiplyImageFilterICF3ICF3ICF3___New_orig__() -> "itkMultiplyImageFilterICF3ICF3ICF3_Pointer":
    """itkMultiplyImageFilterICF3ICF3ICF3___New_orig__() -> itkMultiplyImageFilterICF3ICF3ICF3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3___New_orig__()

def itkMultiplyImageFilterICF3ICF3ICF3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF3ICF3ICF3 *":
    """itkMultiplyImageFilterICF3ICF3ICF3_cast(itkLightObject obj) -> itkMultiplyImageFilterICF3ICF3ICF3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_cast(obj)

class itkMultiplyImageFilterICF3IF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterICF3IF3ICF3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterICF3IF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterICF3IF3ICF3_Pointer":
        """Clone(itkMultiplyImageFilterICF3IF3ICF3 self) -> itkMultiplyImageFilterICF3IF3ICF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3IF3ICF3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF3IF3ICF3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterICF3IF3ICF3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3IF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3IF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3IF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterICF3IF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterICF3IF3ICF3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Clone, None, itkMultiplyImageFilterICF3IF3ICF3)
itkMultiplyImageFilterICF3IF3ICF3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_swigregister
itkMultiplyImageFilterICF3IF3ICF3_swigregister(itkMultiplyImageFilterICF3IF3ICF3)

def itkMultiplyImageFilterICF3IF3ICF3___New_orig__() -> "itkMultiplyImageFilterICF3IF3ICF3_Pointer":
    """itkMultiplyImageFilterICF3IF3ICF3___New_orig__() -> itkMultiplyImageFilterICF3IF3ICF3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3___New_orig__()

def itkMultiplyImageFilterICF3IF3ICF3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterICF3IF3ICF3 *":
    """itkMultiplyImageFilterICF3IF3ICF3_cast(itkLightObject obj) -> itkMultiplyImageFilterICF3IF3ICF3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_cast(obj)

class itkMultiplyImageFilterID2ID2ID2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterID2ID2ID2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterID2ID2ID2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterID2ID2ID2_Pointer":
        """Clone(itkMultiplyImageFilterID2ID2ID2 self) -> itkMultiplyImageFilterID2ID2ID2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID2ID2ID2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterID2ID2ID2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterID2ID2ID2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID2ID2ID2

        Create a new object of the class itkMultiplyImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID2ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterID2ID2ID2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Clone, None, itkMultiplyImageFilterID2ID2ID2)
itkMultiplyImageFilterID2ID2ID2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_swigregister
itkMultiplyImageFilterID2ID2ID2_swigregister(itkMultiplyImageFilterID2ID2ID2)

def itkMultiplyImageFilterID2ID2ID2___New_orig__() -> "itkMultiplyImageFilterID2ID2ID2_Pointer":
    """itkMultiplyImageFilterID2ID2ID2___New_orig__() -> itkMultiplyImageFilterID2ID2ID2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2___New_orig__()

def itkMultiplyImageFilterID2ID2ID2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterID2ID2ID2 *":
    """itkMultiplyImageFilterID2ID2ID2_cast(itkLightObject obj) -> itkMultiplyImageFilterID2ID2ID2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_cast(obj)

class itkMultiplyImageFilterID3ID3ID3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterID3ID3ID3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterID3ID3ID3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterID3ID3ID3_Pointer":
        """Clone(itkMultiplyImageFilterID3ID3ID3 self) -> itkMultiplyImageFilterID3ID3ID3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID3ID3ID3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterID3ID3ID3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterID3ID3ID3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID3ID3ID3

        Create a new object of the class itkMultiplyImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID3ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterID3ID3ID3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Clone, None, itkMultiplyImageFilterID3ID3ID3)
itkMultiplyImageFilterID3ID3ID3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_swigregister
itkMultiplyImageFilterID3ID3ID3_swigregister(itkMultiplyImageFilterID3ID3ID3)

def itkMultiplyImageFilterID3ID3ID3___New_orig__() -> "itkMultiplyImageFilterID3ID3ID3_Pointer":
    """itkMultiplyImageFilterID3ID3ID3___New_orig__() -> itkMultiplyImageFilterID3ID3ID3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3___New_orig__()

def itkMultiplyImageFilterID3ID3ID3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterID3ID3ID3 *":
    """itkMultiplyImageFilterID3ID3ID3_cast(itkLightObject obj) -> itkMultiplyImageFilterID3ID3ID3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_cast(obj)

class itkMultiplyImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIF2IF2IF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIF2IF2IF2_Pointer":
        """Clone(itkMultiplyImageFilterIF2IF2IF2 self) -> itkMultiplyImageFilterIF2IF2IF2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIF2IF2IF2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF2IF2IF2

        Create a new object of the class itkMultiplyImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Clone, None, itkMultiplyImageFilterIF2IF2IF2)
itkMultiplyImageFilterIF2IF2IF2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_swigregister
itkMultiplyImageFilterIF2IF2IF2_swigregister(itkMultiplyImageFilterIF2IF2IF2)

def itkMultiplyImageFilterIF2IF2IF2___New_orig__() -> "itkMultiplyImageFilterIF2IF2IF2_Pointer":
    """itkMultiplyImageFilterIF2IF2IF2___New_orig__() -> itkMultiplyImageFilterIF2IF2IF2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2___New_orig__()

def itkMultiplyImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIF2IF2IF2 *":
    """itkMultiplyImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkMultiplyImageFilterIF2IF2IF2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_cast(obj)

class itkMultiplyImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIF3IF3IF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIF3IF3IF3_Pointer":
        """Clone(itkMultiplyImageFilterIF3IF3IF3 self) -> itkMultiplyImageFilterIF3IF3IF3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIF3IF3IF3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF3IF3IF3

        Create a new object of the class itkMultiplyImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Clone, None, itkMultiplyImageFilterIF3IF3IF3)
itkMultiplyImageFilterIF3IF3IF3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_swigregister
itkMultiplyImageFilterIF3IF3IF3_swigregister(itkMultiplyImageFilterIF3IF3IF3)

def itkMultiplyImageFilterIF3IF3IF3___New_orig__() -> "itkMultiplyImageFilterIF3IF3IF3_Pointer":
    """itkMultiplyImageFilterIF3IF3IF3___New_orig__() -> itkMultiplyImageFilterIF3IF3IF3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3___New_orig__()

def itkMultiplyImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIF3IF3IF3 *":
    """itkMultiplyImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkMultiplyImageFilterIF3IF3IF3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_cast(obj)

class itkMultiplyImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkMultiplyImageFilterISS2ISS2ISS2 self) -> itkMultiplyImageFilterISS2ISS2ISS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterISS2ISS2ISS2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS2ISS2ISS2

        Create a new object of the class itkMultiplyImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Clone, None, itkMultiplyImageFilterISS2ISS2ISS2)
itkMultiplyImageFilterISS2ISS2ISS2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_swigregister
itkMultiplyImageFilterISS2ISS2ISS2_swigregister(itkMultiplyImageFilterISS2ISS2ISS2)

def itkMultiplyImageFilterISS2ISS2ISS2___New_orig__() -> "itkMultiplyImageFilterISS2ISS2ISS2_Pointer":
    """itkMultiplyImageFilterISS2ISS2ISS2___New_orig__() -> itkMultiplyImageFilterISS2ISS2ISS2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2___New_orig__()

def itkMultiplyImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterISS2ISS2ISS2 *":
    """itkMultiplyImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkMultiplyImageFilterISS2ISS2ISS2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_cast(obj)

class itkMultiplyImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkMultiplyImageFilterISS3ISS3ISS3 self) -> itkMultiplyImageFilterISS3ISS3ISS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterISS3ISS3ISS3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS3ISS3ISS3

        Create a new object of the class itkMultiplyImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Clone, None, itkMultiplyImageFilterISS3ISS3ISS3)
itkMultiplyImageFilterISS3ISS3ISS3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_swigregister
itkMultiplyImageFilterISS3ISS3ISS3_swigregister(itkMultiplyImageFilterISS3ISS3ISS3)

def itkMultiplyImageFilterISS3ISS3ISS3___New_orig__() -> "itkMultiplyImageFilterISS3ISS3ISS3_Pointer":
    """itkMultiplyImageFilterISS3ISS3ISS3___New_orig__() -> itkMultiplyImageFilterISS3ISS3ISS3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3___New_orig__()

def itkMultiplyImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterISS3ISS3ISS3 *":
    """itkMultiplyImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkMultiplyImageFilterISS3ISS3ISS3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_cast(obj)

class itkMultiplyImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkMultiplyImageFilterIUC2IUC2IUC2 self) -> itkMultiplyImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIUC2IUC2IUC2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC2IUC2IUC2

        Create a new object of the class itkMultiplyImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Clone, None, itkMultiplyImageFilterIUC2IUC2IUC2)
itkMultiplyImageFilterIUC2IUC2IUC2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_swigregister
itkMultiplyImageFilterIUC2IUC2IUC2_swigregister(itkMultiplyImageFilterIUC2IUC2IUC2)

def itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__() -> "itkMultiplyImageFilterIUC2IUC2IUC2_Pointer":
    """itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__() -> itkMultiplyImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__()

def itkMultiplyImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUC2IUC2IUC2 *":
    """itkMultiplyImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkMultiplyImageFilterIUC2IUC2IUC2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_cast(obj)

class itkMultiplyImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkMultiplyImageFilterIUC3IUC3IUC3 self) -> itkMultiplyImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIUC3IUC3IUC3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC3IUC3IUC3

        Create a new object of the class itkMultiplyImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Clone, None, itkMultiplyImageFilterIUC3IUC3IUC3)
itkMultiplyImageFilterIUC3IUC3IUC3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_swigregister
itkMultiplyImageFilterIUC3IUC3IUC3_swigregister(itkMultiplyImageFilterIUC3IUC3IUC3)

def itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__() -> "itkMultiplyImageFilterIUC3IUC3IUC3_Pointer":
    """itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__() -> itkMultiplyImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__()

def itkMultiplyImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUC3IUC3IUC3 *":
    """itkMultiplyImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkMultiplyImageFilterIUC3IUC3IUC3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_cast(obj)

class itkMultiplyImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkMultiplyImageFilterIUS2IUS2IUS2 self) -> itkMultiplyImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIUS2IUS2IUS2"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS2IUS2IUS2

        Create a new object of the class itkMultiplyImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Clone, None, itkMultiplyImageFilterIUS2IUS2IUS2)
itkMultiplyImageFilterIUS2IUS2IUS2_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_swigregister
itkMultiplyImageFilterIUS2IUS2IUS2_swigregister(itkMultiplyImageFilterIUS2IUS2IUS2)

def itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__() -> "itkMultiplyImageFilterIUS2IUS2IUS2_Pointer":
    """itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__() -> itkMultiplyImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__()

def itkMultiplyImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUS2IUS2IUS2 *":
    """itkMultiplyImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkMultiplyImageFilterIUS2IUS2IUS2"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_cast(obj)

class itkMultiplyImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    \\sphinx
    \\sphinxexample{Filtering/ImageIntensity/MultiplyTwoImages,Multiply
    Two Images} \\sphinxexample{Filtering/ImageIntensity/MultiplyImageBy
    Scalar,Multiply Image By Scalar} \\endsphinx

    C++ includes: itkMultiplyImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultiplyImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkMultiplyImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultiplyImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkMultiplyImageFilterIUS3IUS3IUS3 self) -> itkMultiplyImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Clone(self)

    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Input1Input2OutputMultiplyOperatorCheck
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkMultiplyImageFilterIUS3IUS3IUS3"""
        return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS3IUS3IUS3

        Create a new object of the class itkMultiplyImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Clone, None, itkMultiplyImageFilterIUS3IUS3IUS3)
itkMultiplyImageFilterIUS3IUS3IUS3_swigregister = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_swigregister
itkMultiplyImageFilterIUS3IUS3IUS3_swigregister(itkMultiplyImageFilterIUS3IUS3IUS3)

def itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__() -> "itkMultiplyImageFilterIUS3IUS3IUS3_Pointer":
    """itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__() -> itkMultiplyImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__()

def itkMultiplyImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkMultiplyImageFilterIUS3IUS3IUS3 *":
    """itkMultiplyImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkMultiplyImageFilterIUS3IUS3IUS3"""
    return _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multiply_image_filter(*args, **kwargs):
    """Procedural interface for MultiplyImageFilter"""
    import itk
    instance = itk.MultiplyImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def multiply_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MultiplyImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MultiplyImageFilter.values()[0]
    else:
        filter_object = itk.MultiplyImageFilter

    multiply_image_filter.__doc__ = filter_object.__doc__
    multiply_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    multiply_image_filter.__doc__ += "Available Keyword Arguments:\n"
    multiply_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



