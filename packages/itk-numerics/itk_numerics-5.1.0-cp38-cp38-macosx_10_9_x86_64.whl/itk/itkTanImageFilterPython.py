# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTanImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTanImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTanImageFilterPython
            return _itkTanImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTanImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTanImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTanImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkUnaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkTanImageFilterID3ID3_New():
  return itkTanImageFilterID3ID3.New()


def itkTanImageFilterID2ID2_New():
  return itkTanImageFilterID2ID2.New()


def itkTanImageFilterIF3IF3_New():
  return itkTanImageFilterIF3IF3.New()


def itkTanImageFilterIF2IF2_New():
  return itkTanImageFilterIF2IF2.New()

class itkTanImageFilterID2ID2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    """


    Computes the tangent of each input pixel.

    The computations are performed using std::tan(x).

    C++ includes: itkTanImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTanImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkTanImageFilterID2ID2_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTanImageFilterID2ID2_Pointer":
        """Clone(itkTanImageFilterID2ID2 self) -> itkTanImageFilterID2ID2_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterID2ID2_Clone(self)

    InputConvertibleToDoubleCheck = _itkTanImageFilterPython.itkTanImageFilterID2ID2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkTanImageFilterPython.itkTanImageFilterID2ID2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkTanImageFilterPython.delete_itkTanImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkTanImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkTanImageFilterID2ID2"""
        return _itkTanImageFilterPython.itkTanImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTanImageFilterID2ID2

        Create a new object of the class itkTanImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTanImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTanImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTanImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTanImageFilterID2ID2.Clone = new_instancemethod(_itkTanImageFilterPython.itkTanImageFilterID2ID2_Clone, None, itkTanImageFilterID2ID2)
itkTanImageFilterID2ID2_swigregister = _itkTanImageFilterPython.itkTanImageFilterID2ID2_swigregister
itkTanImageFilterID2ID2_swigregister(itkTanImageFilterID2ID2)

def itkTanImageFilterID2ID2___New_orig__() -> "itkTanImageFilterID2ID2_Pointer":
    """itkTanImageFilterID2ID2___New_orig__() -> itkTanImageFilterID2ID2_Pointer"""
    return _itkTanImageFilterPython.itkTanImageFilterID2ID2___New_orig__()

def itkTanImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkTanImageFilterID2ID2 *":
    """itkTanImageFilterID2ID2_cast(itkLightObject obj) -> itkTanImageFilterID2ID2"""
    return _itkTanImageFilterPython.itkTanImageFilterID2ID2_cast(obj)

class itkTanImageFilterID3ID3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    """


    Computes the tangent of each input pixel.

    The computations are performed using std::tan(x).

    C++ includes: itkTanImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTanImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkTanImageFilterID3ID3_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTanImageFilterID3ID3_Pointer":
        """Clone(itkTanImageFilterID3ID3 self) -> itkTanImageFilterID3ID3_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterID3ID3_Clone(self)

    InputConvertibleToDoubleCheck = _itkTanImageFilterPython.itkTanImageFilterID3ID3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkTanImageFilterPython.itkTanImageFilterID3ID3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkTanImageFilterPython.delete_itkTanImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkTanImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkTanImageFilterID3ID3"""
        return _itkTanImageFilterPython.itkTanImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTanImageFilterID3ID3

        Create a new object of the class itkTanImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTanImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTanImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTanImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTanImageFilterID3ID3.Clone = new_instancemethod(_itkTanImageFilterPython.itkTanImageFilterID3ID3_Clone, None, itkTanImageFilterID3ID3)
itkTanImageFilterID3ID3_swigregister = _itkTanImageFilterPython.itkTanImageFilterID3ID3_swigregister
itkTanImageFilterID3ID3_swigregister(itkTanImageFilterID3ID3)

def itkTanImageFilterID3ID3___New_orig__() -> "itkTanImageFilterID3ID3_Pointer":
    """itkTanImageFilterID3ID3___New_orig__() -> itkTanImageFilterID3ID3_Pointer"""
    return _itkTanImageFilterPython.itkTanImageFilterID3ID3___New_orig__()

def itkTanImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkTanImageFilterID3ID3 *":
    """itkTanImageFilterID3ID3_cast(itkLightObject obj) -> itkTanImageFilterID3ID3"""
    return _itkTanImageFilterPython.itkTanImageFilterID3ID3_cast(obj)

class itkTanImageFilterIF2IF2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    """


    Computes the tangent of each input pixel.

    The computations are performed using std::tan(x).

    C++ includes: itkTanImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTanImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkTanImageFilterIF2IF2_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTanImageFilterIF2IF2_Pointer":
        """Clone(itkTanImageFilterIF2IF2 self) -> itkTanImageFilterIF2IF2_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterIF2IF2_Clone(self)

    InputConvertibleToDoubleCheck = _itkTanImageFilterPython.itkTanImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkTanImageFilterPython.itkTanImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkTanImageFilterPython.delete_itkTanImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkTanImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkTanImageFilterIF2IF2"""
        return _itkTanImageFilterPython.itkTanImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTanImageFilterIF2IF2

        Create a new object of the class itkTanImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTanImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTanImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTanImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTanImageFilterIF2IF2.Clone = new_instancemethod(_itkTanImageFilterPython.itkTanImageFilterIF2IF2_Clone, None, itkTanImageFilterIF2IF2)
itkTanImageFilterIF2IF2_swigregister = _itkTanImageFilterPython.itkTanImageFilterIF2IF2_swigregister
itkTanImageFilterIF2IF2_swigregister(itkTanImageFilterIF2IF2)

def itkTanImageFilterIF2IF2___New_orig__() -> "itkTanImageFilterIF2IF2_Pointer":
    """itkTanImageFilterIF2IF2___New_orig__() -> itkTanImageFilterIF2IF2_Pointer"""
    return _itkTanImageFilterPython.itkTanImageFilterIF2IF2___New_orig__()

def itkTanImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkTanImageFilterIF2IF2 *":
    """itkTanImageFilterIF2IF2_cast(itkLightObject obj) -> itkTanImageFilterIF2IF2"""
    return _itkTanImageFilterPython.itkTanImageFilterIF2IF2_cast(obj)

class itkTanImageFilterIF3IF3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    """


    Computes the tangent of each input pixel.

    The computations are performed using std::tan(x).

    C++ includes: itkTanImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkTanImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkTanImageFilterIF3IF3_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkTanImageFilterIF3IF3_Pointer":
        """Clone(itkTanImageFilterIF3IF3 self) -> itkTanImageFilterIF3IF3_Pointer"""
        return _itkTanImageFilterPython.itkTanImageFilterIF3IF3_Clone(self)

    InputConvertibleToDoubleCheck = _itkTanImageFilterPython.itkTanImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkTanImageFilterPython.itkTanImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkTanImageFilterPython.delete_itkTanImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkTanImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkTanImageFilterIF3IF3"""
        return _itkTanImageFilterPython.itkTanImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTanImageFilterIF3IF3

        Create a new object of the class itkTanImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTanImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTanImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTanImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTanImageFilterIF3IF3.Clone = new_instancemethod(_itkTanImageFilterPython.itkTanImageFilterIF3IF3_Clone, None, itkTanImageFilterIF3IF3)
itkTanImageFilterIF3IF3_swigregister = _itkTanImageFilterPython.itkTanImageFilterIF3IF3_swigregister
itkTanImageFilterIF3IF3_swigregister(itkTanImageFilterIF3IF3)

def itkTanImageFilterIF3IF3___New_orig__() -> "itkTanImageFilterIF3IF3_Pointer":
    """itkTanImageFilterIF3IF3___New_orig__() -> itkTanImageFilterIF3IF3_Pointer"""
    return _itkTanImageFilterPython.itkTanImageFilterIF3IF3___New_orig__()

def itkTanImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkTanImageFilterIF3IF3 *":
    """itkTanImageFilterIF3IF3_cast(itkLightObject obj) -> itkTanImageFilterIF3IF3"""
    return _itkTanImageFilterPython.itkTanImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def tan_image_filter(*args, **kwargs):
    """Procedural interface for TanImageFilter"""
    import itk
    instance = itk.TanImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def tan_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TanImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TanImageFilter.values()[0]
    else:
        filter_object = itk.TanImageFilter

    tan_image_filter.__doc__ = filter_object.__doc__
    tan_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    tan_image_filter.__doc__ += "Available Keyword Arguments:\n"
    tan_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



