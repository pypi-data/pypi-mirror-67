# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkImagePCAShapeModelEstimatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkImagePCAShapeModelEstimatorPython', [dirname(__file__)])
        except ImportError:
            import _itkImagePCAShapeModelEstimatorPython
            return _itkImagePCAShapeModelEstimatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkImagePCAShapeModelEstimatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkImagePCAShapeModelEstimatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkImagePCAShapeModelEstimatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkImageShapeModelEstimatorBasePython
import itkImageToImageFilterAPython
import ITKCommonBasePython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkImagePCAShapeModelEstimatorID3ID3_New():
  return itkImagePCAShapeModelEstimatorID3ID3.New()


def itkImagePCAShapeModelEstimatorID3IF3_New():
  return itkImagePCAShapeModelEstimatorID3IF3.New()


def itkImagePCAShapeModelEstimatorIF3ID3_New():
  return itkImagePCAShapeModelEstimatorIF3ID3.New()


def itkImagePCAShapeModelEstimatorIF3IF3_New():
  return itkImagePCAShapeModelEstimatorIF3IF3.New()


def itkImagePCAShapeModelEstimatorIUS3ID3_New():
  return itkImagePCAShapeModelEstimatorIUS3ID3.New()


def itkImagePCAShapeModelEstimatorIUS3IF3_New():
  return itkImagePCAShapeModelEstimatorIUS3IF3.New()


def itkImagePCAShapeModelEstimatorIUC3ID3_New():
  return itkImagePCAShapeModelEstimatorIUC3ID3.New()


def itkImagePCAShapeModelEstimatorIUC3IF3_New():
  return itkImagePCAShapeModelEstimatorIUC3IF3.New()


def itkImagePCAShapeModelEstimatorISS3ID3_New():
  return itkImagePCAShapeModelEstimatorISS3ID3.New()


def itkImagePCAShapeModelEstimatorISS3IF3_New():
  return itkImagePCAShapeModelEstimatorISS3IF3.New()


def itkImagePCAShapeModelEstimatorID2ID2_New():
  return itkImagePCAShapeModelEstimatorID2ID2.New()


def itkImagePCAShapeModelEstimatorID2IF2_New():
  return itkImagePCAShapeModelEstimatorID2IF2.New()


def itkImagePCAShapeModelEstimatorIF2ID2_New():
  return itkImagePCAShapeModelEstimatorIF2ID2.New()


def itkImagePCAShapeModelEstimatorIF2IF2_New():
  return itkImagePCAShapeModelEstimatorIF2IF2.New()


def itkImagePCAShapeModelEstimatorIUS2ID2_New():
  return itkImagePCAShapeModelEstimatorIUS2ID2.New()


def itkImagePCAShapeModelEstimatorIUS2IF2_New():
  return itkImagePCAShapeModelEstimatorIUS2IF2.New()


def itkImagePCAShapeModelEstimatorIUC2ID2_New():
  return itkImagePCAShapeModelEstimatorIUC2ID2.New()


def itkImagePCAShapeModelEstimatorIUC2IF2_New():
  return itkImagePCAShapeModelEstimatorIUC2IF2.New()


def itkImagePCAShapeModelEstimatorISS2ID2_New():
  return itkImagePCAShapeModelEstimatorISS2ID2.New()


def itkImagePCAShapeModelEstimatorISS2IF2_New():
  return itkImagePCAShapeModelEstimatorISS2IF2.New()

class itkImagePCAShapeModelEstimatorID2ID2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID2ID2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorID2ID2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorID2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorID2ID2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorID2ID2 self) -> itkImagePCAShapeModelEstimatorID2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID2ID2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID2ID2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorID2ID2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID2ID2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID2ID2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID2ID2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorID2ID2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_Clone, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_GetEigenValues, None, itkImagePCAShapeModelEstimatorID2ID2)
itkImagePCAShapeModelEstimatorID2ID2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_swigregister
itkImagePCAShapeModelEstimatorID2ID2_swigregister(itkImagePCAShapeModelEstimatorID2ID2)

def itkImagePCAShapeModelEstimatorID2ID2___New_orig__() -> "itkImagePCAShapeModelEstimatorID2ID2_Pointer":
    """itkImagePCAShapeModelEstimatorID2ID2___New_orig__() -> itkImagePCAShapeModelEstimatorID2ID2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2___New_orig__()

def itkImagePCAShapeModelEstimatorID2ID2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID2ID2 *":
    """itkImagePCAShapeModelEstimatorID2ID2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID2ID2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2ID2_cast(obj)

class itkImagePCAShapeModelEstimatorID2IF2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID2IF2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorID2IF2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorID2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorID2IF2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorID2IF2 self) -> itkImagePCAShapeModelEstimatorID2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID2IF2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID2IF2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorID2IF2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID2IF2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID2IF2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID2IF2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorID2IF2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_Clone, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_GetEigenValues, None, itkImagePCAShapeModelEstimatorID2IF2)
itkImagePCAShapeModelEstimatorID2IF2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_swigregister
itkImagePCAShapeModelEstimatorID2IF2_swigregister(itkImagePCAShapeModelEstimatorID2IF2)

def itkImagePCAShapeModelEstimatorID2IF2___New_orig__() -> "itkImagePCAShapeModelEstimatorID2IF2_Pointer":
    """itkImagePCAShapeModelEstimatorID2IF2___New_orig__() -> itkImagePCAShapeModelEstimatorID2IF2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2___New_orig__()

def itkImagePCAShapeModelEstimatorID2IF2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID2IF2 *":
    """itkImagePCAShapeModelEstimatorID2IF2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID2IF2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID2IF2_cast(obj)

class itkImagePCAShapeModelEstimatorID3ID3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID3ID3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorID3ID3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorID3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorID3ID3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorID3ID3 self) -> itkImagePCAShapeModelEstimatorID3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID3ID3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID3ID3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorID3ID3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID3ID3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID3ID3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID3ID3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorID3ID3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_Clone, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_GetEigenValues, None, itkImagePCAShapeModelEstimatorID3ID3)
itkImagePCAShapeModelEstimatorID3ID3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_swigregister
itkImagePCAShapeModelEstimatorID3ID3_swigregister(itkImagePCAShapeModelEstimatorID3ID3)

def itkImagePCAShapeModelEstimatorID3ID3___New_orig__() -> "itkImagePCAShapeModelEstimatorID3ID3_Pointer":
    """itkImagePCAShapeModelEstimatorID3ID3___New_orig__() -> itkImagePCAShapeModelEstimatorID3ID3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3___New_orig__()

def itkImagePCAShapeModelEstimatorID3ID3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID3ID3 *":
    """itkImagePCAShapeModelEstimatorID3ID3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID3ID3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3ID3_cast(obj)

class itkImagePCAShapeModelEstimatorID3IF3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseID3IF3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorID3IF3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorID3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorID3IF3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorID3IF3 self) -> itkImagePCAShapeModelEstimatorID3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID3IF3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorID3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID3IF3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorID3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorID3IF3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorID3IF3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID3IF3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID3IF3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorID3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorID3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorID3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorID3IF3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_Clone, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_GetEigenValues, None, itkImagePCAShapeModelEstimatorID3IF3)
itkImagePCAShapeModelEstimatorID3IF3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_swigregister
itkImagePCAShapeModelEstimatorID3IF3_swigregister(itkImagePCAShapeModelEstimatorID3IF3)

def itkImagePCAShapeModelEstimatorID3IF3___New_orig__() -> "itkImagePCAShapeModelEstimatorID3IF3_Pointer":
    """itkImagePCAShapeModelEstimatorID3IF3___New_orig__() -> itkImagePCAShapeModelEstimatorID3IF3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3___New_orig__()

def itkImagePCAShapeModelEstimatorID3IF3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorID3IF3 *":
    """itkImagePCAShapeModelEstimatorID3IF3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorID3IF3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorID3IF3_cast(obj)

class itkImagePCAShapeModelEstimatorIF2ID2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2ID2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIF2ID2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIF2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIF2ID2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIF2ID2 self) -> itkImagePCAShapeModelEstimatorIF2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF2ID2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF2ID2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIF2ID2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF2ID2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF2ID2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF2ID2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIF2ID2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_Clone, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIF2ID2)
itkImagePCAShapeModelEstimatorIF2ID2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_swigregister
itkImagePCAShapeModelEstimatorIF2ID2_swigregister(itkImagePCAShapeModelEstimatorIF2ID2)

def itkImagePCAShapeModelEstimatorIF2ID2___New_orig__() -> "itkImagePCAShapeModelEstimatorIF2ID2_Pointer":
    """itkImagePCAShapeModelEstimatorIF2ID2___New_orig__() -> itkImagePCAShapeModelEstimatorIF2ID2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2___New_orig__()

def itkImagePCAShapeModelEstimatorIF2ID2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF2ID2 *":
    """itkImagePCAShapeModelEstimatorIF2ID2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF2ID2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2ID2_cast(obj)

class itkImagePCAShapeModelEstimatorIF2IF2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF2IF2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIF2IF2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIF2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIF2IF2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIF2IF2 self) -> itkImagePCAShapeModelEstimatorIF2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF2IF2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF2IF2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIF2IF2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF2IF2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF2IF2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF2IF2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIF2IF2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_Clone, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIF2IF2)
itkImagePCAShapeModelEstimatorIF2IF2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_swigregister
itkImagePCAShapeModelEstimatorIF2IF2_swigregister(itkImagePCAShapeModelEstimatorIF2IF2)

def itkImagePCAShapeModelEstimatorIF2IF2___New_orig__() -> "itkImagePCAShapeModelEstimatorIF2IF2_Pointer":
    """itkImagePCAShapeModelEstimatorIF2IF2___New_orig__() -> itkImagePCAShapeModelEstimatorIF2IF2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2___New_orig__()

def itkImagePCAShapeModelEstimatorIF2IF2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF2IF2 *":
    """itkImagePCAShapeModelEstimatorIF2IF2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF2IF2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF2IF2_cast(obj)

class itkImagePCAShapeModelEstimatorIF3ID3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3ID3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIF3ID3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIF3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIF3ID3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIF3ID3 self) -> itkImagePCAShapeModelEstimatorIF3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF3ID3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF3ID3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIF3ID3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF3ID3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF3ID3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF3ID3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIF3ID3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_Clone, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIF3ID3)
itkImagePCAShapeModelEstimatorIF3ID3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_swigregister
itkImagePCAShapeModelEstimatorIF3ID3_swigregister(itkImagePCAShapeModelEstimatorIF3ID3)

def itkImagePCAShapeModelEstimatorIF3ID3___New_orig__() -> "itkImagePCAShapeModelEstimatorIF3ID3_Pointer":
    """itkImagePCAShapeModelEstimatorIF3ID3___New_orig__() -> itkImagePCAShapeModelEstimatorIF3ID3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3___New_orig__()

def itkImagePCAShapeModelEstimatorIF3ID3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF3ID3 *":
    """itkImagePCAShapeModelEstimatorIF3ID3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF3ID3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3ID3_cast(obj)

class itkImagePCAShapeModelEstimatorIF3IF3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIF3IF3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIF3IF3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIF3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIF3IF3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIF3IF3 self) -> itkImagePCAShapeModelEstimatorIF3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF3IF3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIF3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF3IF3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIF3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIF3IF3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIF3IF3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF3IF3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF3IF3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIF3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIF3IF3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_Clone, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIF3IF3)
itkImagePCAShapeModelEstimatorIF3IF3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_swigregister
itkImagePCAShapeModelEstimatorIF3IF3_swigregister(itkImagePCAShapeModelEstimatorIF3IF3)

def itkImagePCAShapeModelEstimatorIF3IF3___New_orig__() -> "itkImagePCAShapeModelEstimatorIF3IF3_Pointer":
    """itkImagePCAShapeModelEstimatorIF3IF3___New_orig__() -> itkImagePCAShapeModelEstimatorIF3IF3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3___New_orig__()

def itkImagePCAShapeModelEstimatorIF3IF3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIF3IF3 *":
    """itkImagePCAShapeModelEstimatorIF3IF3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIF3IF3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIF3IF3_cast(obj)

class itkImagePCAShapeModelEstimatorISS2ID2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2ID2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorISS2ID2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorISS2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorISS2ID2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorISS2ID2 self) -> itkImagePCAShapeModelEstimatorISS2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS2ID2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS2ID2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorISS2ID2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS2ID2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS2ID2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS2ID2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorISS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorISS2ID2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_Clone, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_GetEigenValues, None, itkImagePCAShapeModelEstimatorISS2ID2)
itkImagePCAShapeModelEstimatorISS2ID2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_swigregister
itkImagePCAShapeModelEstimatorISS2ID2_swigregister(itkImagePCAShapeModelEstimatorISS2ID2)

def itkImagePCAShapeModelEstimatorISS2ID2___New_orig__() -> "itkImagePCAShapeModelEstimatorISS2ID2_Pointer":
    """itkImagePCAShapeModelEstimatorISS2ID2___New_orig__() -> itkImagePCAShapeModelEstimatorISS2ID2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2___New_orig__()

def itkImagePCAShapeModelEstimatorISS2ID2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS2ID2 *":
    """itkImagePCAShapeModelEstimatorISS2ID2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS2ID2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2ID2_cast(obj)

class itkImagePCAShapeModelEstimatorISS2IF2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS2IF2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorISS2IF2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorISS2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorISS2IF2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorISS2IF2 self) -> itkImagePCAShapeModelEstimatorISS2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS2IF2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS2IF2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorISS2IF2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS2IF2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS2IF2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS2IF2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorISS2IF2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_Clone, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_GetEigenValues, None, itkImagePCAShapeModelEstimatorISS2IF2)
itkImagePCAShapeModelEstimatorISS2IF2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_swigregister
itkImagePCAShapeModelEstimatorISS2IF2_swigregister(itkImagePCAShapeModelEstimatorISS2IF2)

def itkImagePCAShapeModelEstimatorISS2IF2___New_orig__() -> "itkImagePCAShapeModelEstimatorISS2IF2_Pointer":
    """itkImagePCAShapeModelEstimatorISS2IF2___New_orig__() -> itkImagePCAShapeModelEstimatorISS2IF2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2___New_orig__()

def itkImagePCAShapeModelEstimatorISS2IF2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS2IF2 *":
    """itkImagePCAShapeModelEstimatorISS2IF2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS2IF2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS2IF2_cast(obj)

class itkImagePCAShapeModelEstimatorISS3ID3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3ID3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorISS3ID3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorISS3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorISS3ID3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorISS3ID3 self) -> itkImagePCAShapeModelEstimatorISS3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS3ID3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS3ID3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorISS3ID3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS3ID3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS3ID3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS3ID3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorISS3ID3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_Clone, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_GetEigenValues, None, itkImagePCAShapeModelEstimatorISS3ID3)
itkImagePCAShapeModelEstimatorISS3ID3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_swigregister
itkImagePCAShapeModelEstimatorISS3ID3_swigregister(itkImagePCAShapeModelEstimatorISS3ID3)

def itkImagePCAShapeModelEstimatorISS3ID3___New_orig__() -> "itkImagePCAShapeModelEstimatorISS3ID3_Pointer":
    """itkImagePCAShapeModelEstimatorISS3ID3___New_orig__() -> itkImagePCAShapeModelEstimatorISS3ID3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3___New_orig__()

def itkImagePCAShapeModelEstimatorISS3ID3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS3ID3 *":
    """itkImagePCAShapeModelEstimatorISS3ID3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS3ID3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3ID3_cast(obj)

class itkImagePCAShapeModelEstimatorISS3IF3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseISS3IF3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorISS3IF3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorISS3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorISS3IF3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorISS3IF3 self) -> itkImagePCAShapeModelEstimatorISS3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS3IF3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorISS3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS3IF3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorISS3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorISS3IF3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorISS3IF3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS3IF3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS3IF3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorISS3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorISS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorISS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorISS3IF3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_Clone, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_GetEigenValues, None, itkImagePCAShapeModelEstimatorISS3IF3)
itkImagePCAShapeModelEstimatorISS3IF3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_swigregister
itkImagePCAShapeModelEstimatorISS3IF3_swigregister(itkImagePCAShapeModelEstimatorISS3IF3)

def itkImagePCAShapeModelEstimatorISS3IF3___New_orig__() -> "itkImagePCAShapeModelEstimatorISS3IF3_Pointer":
    """itkImagePCAShapeModelEstimatorISS3IF3___New_orig__() -> itkImagePCAShapeModelEstimatorISS3IF3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3___New_orig__()

def itkImagePCAShapeModelEstimatorISS3IF3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorISS3IF3 *":
    """itkImagePCAShapeModelEstimatorISS3IF3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorISS3IF3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorISS3IF3_cast(obj)

class itkImagePCAShapeModelEstimatorIUC2ID2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2ID2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUC2ID2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUC2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUC2ID2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUC2ID2 self) -> itkImagePCAShapeModelEstimatorIUC2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC2ID2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC2ID2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUC2ID2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC2ID2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC2ID2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUC2ID2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_Clone, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUC2ID2)
itkImagePCAShapeModelEstimatorIUC2ID2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_swigregister
itkImagePCAShapeModelEstimatorIUC2ID2_swigregister(itkImagePCAShapeModelEstimatorIUC2ID2)

def itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__() -> "itkImagePCAShapeModelEstimatorIUC2ID2_Pointer":
    """itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__() -> itkImagePCAShapeModelEstimatorIUC2ID2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2___New_orig__()

def itkImagePCAShapeModelEstimatorIUC2ID2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC2ID2 *":
    """itkImagePCAShapeModelEstimatorIUC2ID2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC2ID2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2ID2_cast(obj)

class itkImagePCAShapeModelEstimatorIUC2IF2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC2IF2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUC2IF2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUC2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUC2IF2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUC2IF2 self) -> itkImagePCAShapeModelEstimatorIUC2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC2IF2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC2IF2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUC2IF2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC2IF2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC2IF2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUC2IF2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_Clone, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUC2IF2)
itkImagePCAShapeModelEstimatorIUC2IF2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_swigregister
itkImagePCAShapeModelEstimatorIUC2IF2_swigregister(itkImagePCAShapeModelEstimatorIUC2IF2)

def itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__() -> "itkImagePCAShapeModelEstimatorIUC2IF2_Pointer":
    """itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__() -> itkImagePCAShapeModelEstimatorIUC2IF2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2___New_orig__()

def itkImagePCAShapeModelEstimatorIUC2IF2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC2IF2 *":
    """itkImagePCAShapeModelEstimatorIUC2IF2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC2IF2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC2IF2_cast(obj)

class itkImagePCAShapeModelEstimatorIUC3ID3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3ID3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUC3ID3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUC3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUC3ID3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUC3ID3 self) -> itkImagePCAShapeModelEstimatorIUC3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC3ID3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC3ID3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUC3ID3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC3ID3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC3ID3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUC3ID3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_Clone, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUC3ID3)
itkImagePCAShapeModelEstimatorIUC3ID3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_swigregister
itkImagePCAShapeModelEstimatorIUC3ID3_swigregister(itkImagePCAShapeModelEstimatorIUC3ID3)

def itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__() -> "itkImagePCAShapeModelEstimatorIUC3ID3_Pointer":
    """itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__() -> itkImagePCAShapeModelEstimatorIUC3ID3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3___New_orig__()

def itkImagePCAShapeModelEstimatorIUC3ID3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC3ID3 *":
    """itkImagePCAShapeModelEstimatorIUC3ID3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC3ID3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3ID3_cast(obj)

class itkImagePCAShapeModelEstimatorIUC3IF3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUC3IF3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUC3IF3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUC3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUC3IF3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUC3IF3 self) -> itkImagePCAShapeModelEstimatorIUC3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC3IF3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUC3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC3IF3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUC3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUC3IF3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC3IF3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC3IF3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUC3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUC3IF3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_Clone, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUC3IF3)
itkImagePCAShapeModelEstimatorIUC3IF3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_swigregister
itkImagePCAShapeModelEstimatorIUC3IF3_swigregister(itkImagePCAShapeModelEstimatorIUC3IF3)

def itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__() -> "itkImagePCAShapeModelEstimatorIUC3IF3_Pointer":
    """itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__() -> itkImagePCAShapeModelEstimatorIUC3IF3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3___New_orig__()

def itkImagePCAShapeModelEstimatorIUC3IF3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUC3IF3 *":
    """itkImagePCAShapeModelEstimatorIUC3IF3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUC3IF3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUC3IF3_cast(obj)

class itkImagePCAShapeModelEstimatorIUS2ID2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2ID2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUS2ID2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUS2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUS2ID2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUS2ID2 self) -> itkImagePCAShapeModelEstimatorIUS2ID2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS2ID2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS2ID2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS2ID2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUS2ID2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS2ID2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS2ID2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS2ID2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUS2ID2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_Clone, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUS2ID2)
itkImagePCAShapeModelEstimatorIUS2ID2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_swigregister
itkImagePCAShapeModelEstimatorIUS2ID2_swigregister(itkImagePCAShapeModelEstimatorIUS2ID2)

def itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__() -> "itkImagePCAShapeModelEstimatorIUS2ID2_Pointer":
    """itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__() -> itkImagePCAShapeModelEstimatorIUS2ID2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2___New_orig__()

def itkImagePCAShapeModelEstimatorIUS2ID2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS2ID2 *":
    """itkImagePCAShapeModelEstimatorIUS2ID2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS2ID2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2ID2_cast(obj)

class itkImagePCAShapeModelEstimatorIUS2IF2(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS2IF2):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUS2IF2_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUS2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUS2IF2_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUS2IF2 self) -> itkImagePCAShapeModelEstimatorIUS2IF2_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS2IF2 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS2IF2 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS2IF2 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUS2IF2 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS2IF2 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS2IF2"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS2IF2

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUS2IF2.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_Clone, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUS2IF2)
itkImagePCAShapeModelEstimatorIUS2IF2_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_swigregister
itkImagePCAShapeModelEstimatorIUS2IF2_swigregister(itkImagePCAShapeModelEstimatorIUS2IF2)

def itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__() -> "itkImagePCAShapeModelEstimatorIUS2IF2_Pointer":
    """itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__() -> itkImagePCAShapeModelEstimatorIUS2IF2_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2___New_orig__()

def itkImagePCAShapeModelEstimatorIUS2IF2_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS2IF2 *":
    """itkImagePCAShapeModelEstimatorIUS2IF2_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS2IF2"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS2IF2_cast(obj)

class itkImagePCAShapeModelEstimatorIUS3ID3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3ID3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUS3ID3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUS3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUS3ID3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUS3ID3 self) -> itkImagePCAShapeModelEstimatorIUS3ID3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS3ID3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS3ID3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS3ID3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUS3ID3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS3ID3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS3ID3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS3ID3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUS3ID3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_Clone, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUS3ID3)
itkImagePCAShapeModelEstimatorIUS3ID3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_swigregister
itkImagePCAShapeModelEstimatorIUS3ID3_swigregister(itkImagePCAShapeModelEstimatorIUS3ID3)

def itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__() -> "itkImagePCAShapeModelEstimatorIUS3ID3_Pointer":
    """itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__() -> itkImagePCAShapeModelEstimatorIUS3ID3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3___New_orig__()

def itkImagePCAShapeModelEstimatorIUS3ID3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS3ID3 *":
    """itkImagePCAShapeModelEstimatorIUS3ID3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS3ID3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3ID3_cast(obj)

class itkImagePCAShapeModelEstimatorIUS3IF3(itkImageShapeModelEstimatorBasePython.itkImageShapeModelEstimatorBaseIUS3IF3):
    """


    Base class for ImagePCAShapeModelEstimator object.

    itkImagePCAShapeModelEstimator performs a principal component analysis
    (PCA) on a set of images. The user specifies the number of training
    images and also the number of desired largest principal components
    needed. The ITK pipeline mechanism sets up the storage for both input
    and output images. The number of output images are the user specified
    number of desired largest principal components plus 1 (for the mean
    image).

    The algorithm uses the VNL library to perform the eigen analysis. To
    speed the computation of the instead of performing the eigen analysis
    of the covariance vector A*A' where A is a matrix with p x t, p =
    number of pixels or voxels in each images and t = number of training
    images, we calculate the eigen vectors of the inner product matrix
    A'*A. The resulting eigen vectors (E) are then multiplied with the the
    matrix A to get the principal components. The covariance matrix has a
    dimension of p x p. Since number of pixels in any image being
    typically very high the eigen decomposition becomes computationally
    expensive. The inner product on the other hand has the dimension of t
    x t, where t is typically much smaller that p. Hence the eigen
    decomposition (most compute intensive part) is an orders of magnitude
    faster.

    The Update() function enables the calculation of the various models,
    creates the membership function objects and populates them.

    \\sphinx \\sphinxexample{Filtering/ImageStatistics/ComputePCAShape
    FromSample,Compute PCA Shape From Training Sample} \\endsphinx

    C++ includes: itkImagePCAShapeModelEstimator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImagePCAShapeModelEstimatorIUS3IF3_Pointer":
        """__New_orig__() -> itkImagePCAShapeModelEstimatorIUS3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImagePCAShapeModelEstimatorIUS3IF3_Pointer":
        """Clone(itkImagePCAShapeModelEstimatorIUS3IF3 self) -> itkImagePCAShapeModelEstimatorIUS3IF3_Pointer"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_Clone(self)


    def SetNumberOfPrincipalComponentsRequired(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS3IF3 self, unsigned int n)

        Set/Get the number
        of required largest principal components. The filter produces the
        required number of principal components plus one outputs. Output index
        0 represents the mean image and the remaining outputs the requested
        principal components. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfPrincipalComponentsRequired(self, n)


    def GetNumberOfPrincipalComponentsRequired(self) -> "unsigned int":
        """GetNumberOfPrincipalComponentsRequired(itkImagePCAShapeModelEstimatorIUS3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfPrincipalComponentsRequired(self)


    def SetNumberOfTrainingImages(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS3IF3 self, unsigned int n)

        Set/Get
        the number of training images in the input. 
        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfTrainingImages(self, n)


    def GetNumberOfTrainingImages(self) -> "unsigned int":
        """GetNumberOfTrainingImages(itkImagePCAShapeModelEstimatorIUS3IF3 self) -> unsigned int"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfTrainingImages(self)


    def GetEigenValues(self) -> "vnl_vectorD":
        """
        GetEigenValues(itkImagePCAShapeModelEstimatorIUS3IF3 self) -> vnl_vectorD

        Get the eigen values

        """
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetEigenValues(self)

    __swig_destroy__ = _itkImagePCAShapeModelEstimatorPython.delete_itkImagePCAShapeModelEstimatorIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS3IF3 *":
        """cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS3IF3"""
        return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImagePCAShapeModelEstimatorIUS3IF3

        Create a new object of the class itkImagePCAShapeModelEstimatorIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImagePCAShapeModelEstimatorIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImagePCAShapeModelEstimatorIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImagePCAShapeModelEstimatorIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImagePCAShapeModelEstimatorIUS3IF3.Clone = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_Clone, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3.SetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3.GetNumberOfPrincipalComponentsRequired = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfPrincipalComponentsRequired, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3.SetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_SetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3.GetNumberOfTrainingImages = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetNumberOfTrainingImages, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3.GetEigenValues = new_instancemethod(_itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_GetEigenValues, None, itkImagePCAShapeModelEstimatorIUS3IF3)
itkImagePCAShapeModelEstimatorIUS3IF3_swigregister = _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_swigregister
itkImagePCAShapeModelEstimatorIUS3IF3_swigregister(itkImagePCAShapeModelEstimatorIUS3IF3)

def itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__() -> "itkImagePCAShapeModelEstimatorIUS3IF3_Pointer":
    """itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__() -> itkImagePCAShapeModelEstimatorIUS3IF3_Pointer"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3___New_orig__()

def itkImagePCAShapeModelEstimatorIUS3IF3_cast(obj: 'itkLightObject') -> "itkImagePCAShapeModelEstimatorIUS3IF3 *":
    """itkImagePCAShapeModelEstimatorIUS3IF3_cast(itkLightObject obj) -> itkImagePCAShapeModelEstimatorIUS3IF3"""
    return _itkImagePCAShapeModelEstimatorPython.itkImagePCAShapeModelEstimatorIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_pca_shape_model_estimator(*args, **kwargs):
    """Procedural interface for ImagePCAShapeModelEstimator"""
    import itk
    instance = itk.ImagePCAShapeModelEstimator.New(*args, **kwargs)
    return instance.__internal_call__()

def image_pca_shape_model_estimator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImagePCAShapeModelEstimator, itkTemplate.itkTemplate):
        filter_object = itk.ImagePCAShapeModelEstimator.values()[0]
    else:
        filter_object = itk.ImagePCAShapeModelEstimator

    image_pca_shape_model_estimator.__doc__ = filter_object.__doc__
    image_pca_shape_model_estimator.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_pca_shape_model_estimator.__doc__ += "Available Keyword Arguments:\n"
    image_pca_shape_model_estimator.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



