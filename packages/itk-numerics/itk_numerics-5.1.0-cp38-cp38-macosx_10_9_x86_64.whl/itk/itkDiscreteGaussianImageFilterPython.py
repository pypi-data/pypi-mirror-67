# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDiscreteGaussianImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDiscreteGaussianImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDiscreteGaussianImageFilterPython
            return _itkDiscreteGaussianImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDiscreteGaussianImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDiscreteGaussianImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDiscreteGaussianImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageBoundaryConditionPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkDiscreteGaussianImageFilterID3ID3_New():
  return itkDiscreteGaussianImageFilterID3ID3.New()


def itkDiscreteGaussianImageFilterID2ID2_New():
  return itkDiscreteGaussianImageFilterID2ID2.New()


def itkDiscreteGaussianImageFilterIF3IF3_New():
  return itkDiscreteGaussianImageFilterIF3IF3.New()


def itkDiscreteGaussianImageFilterIF2IF2_New():
  return itkDiscreteGaussianImageFilterIF2IF2.New()


def itkDiscreteGaussianImageFilterIUS3IUS3_New():
  return itkDiscreteGaussianImageFilterIUS3IUS3.New()


def itkDiscreteGaussianImageFilterIUS2IUS2_New():
  return itkDiscreteGaussianImageFilterIUS2IUS2.New()


def itkDiscreteGaussianImageFilterIUC3IUC3_New():
  return itkDiscreteGaussianImageFilterIUC3IUC3.New()


def itkDiscreteGaussianImageFilterIUC2IUC2_New():
  return itkDiscreteGaussianImageFilterIUC2IUC2.New()


def itkDiscreteGaussianImageFilterISS3ISS3_New():
  return itkDiscreteGaussianImageFilterISS3ISS3.New()


def itkDiscreteGaussianImageFilterISS2ISS2_New():
  return itkDiscreteGaussianImageFilterISS2ISS2.New()

class itkDiscreteGaussianImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterID2ID2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterID2ID2_Pointer":
        """Clone(itkDiscreteGaussianImageFilterID2ID2 self) -> itkDiscreteGaussianImageFilterID2ID2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkDiscreteGaussianImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterID2ID2 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterID2ID2 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterID2ID2 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionID2') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterID2ID2 self, itkImageBoundaryConditionID2 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionID2 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterID2ID2 self) -> itkImageBoundaryConditionID2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionID2') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterID2ID2 self, itkImageBoundaryConditionID2 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionID2 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterID2ID2 self) -> itkImageBoundaryConditionID2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetVariance(itkDiscreteGaussianImageFilterID2ID2 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterID2ID2 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterID2ID2 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterID2ID2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterID2ID2 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterID2ID2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterID2ID2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterID2ID2 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterID2ID2 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterID2ID2 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterID2ID2 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterID2ID2 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterID2ID2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterID2ID2 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterID2ID2 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterID2ID2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterID2ID2

        Create a new object of the class itkDiscreteGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterID2ID2.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_Clone, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetVariance, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumError, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetVariance, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigmaArray, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigma, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigmaArray, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigma, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumError, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_swigregister
itkDiscreteGaussianImageFilterID2ID2_swigregister(itkDiscreteGaussianImageFilterID2ID2)

def itkDiscreteGaussianImageFilterID2ID2___New_orig__() -> "itkDiscreteGaussianImageFilterID2ID2_Pointer":
    """itkDiscreteGaussianImageFilterID2ID2___New_orig__() -> itkDiscreteGaussianImageFilterID2ID2_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2___New_orig__()

def itkDiscreteGaussianImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterID2ID2 *":
    """itkDiscreteGaussianImageFilterID2ID2_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterID2ID2"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_cast(obj)

class itkDiscreteGaussianImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterID3ID3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterID3ID3_Pointer":
        """Clone(itkDiscreteGaussianImageFilterID3ID3 self) -> itkDiscreteGaussianImageFilterID3ID3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkDiscreteGaussianImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterID3ID3 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterID3ID3 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterID3ID3 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionID3') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterID3ID3 self, itkImageBoundaryConditionID3 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionID3 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterID3ID3 self) -> itkImageBoundaryConditionID3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionID3') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterID3ID3 self, itkImageBoundaryConditionID3 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionID3 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterID3ID3 self) -> itkImageBoundaryConditionID3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetVariance(itkDiscreteGaussianImageFilterID3ID3 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterID3ID3 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterID3ID3 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterID3ID3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterID3ID3 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterID3ID3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterID3ID3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterID3ID3 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterID3ID3 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterID3ID3 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterID3ID3 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterID3ID3 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterID3ID3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterID3ID3 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterID3ID3 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterID3ID3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterID3ID3

        Create a new object of the class itkDiscreteGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterID3ID3.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_Clone, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetVariance, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumError, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetVariance, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigmaArray, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigma, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigmaArray, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigma, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumError, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_swigregister
itkDiscreteGaussianImageFilterID3ID3_swigregister(itkDiscreteGaussianImageFilterID3ID3)

def itkDiscreteGaussianImageFilterID3ID3___New_orig__() -> "itkDiscreteGaussianImageFilterID3ID3_Pointer":
    """itkDiscreteGaussianImageFilterID3ID3___New_orig__() -> itkDiscreteGaussianImageFilterID3ID3_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3___New_orig__()

def itkDiscreteGaussianImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterID3ID3 *":
    """itkDiscreteGaussianImageFilterID3ID3_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterID3ID3"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_cast(obj)

class itkDiscreteGaussianImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIF2IF2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIF2IF2_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkDiscreteGaussianImageFilterIF2IF2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIF2IF2 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIF2IF2 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIF2IF2 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIF2') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIF2IF2 self, itkImageBoundaryConditionIF2 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIF2 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkImageBoundaryConditionIF2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIF2') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIF2IF2 self, itkImageBoundaryConditionIF2 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIF2 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkImageBoundaryConditionIF2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIF2IF2 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIF2IF2 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIF2IF2 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIF2IF2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIF2IF2 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIF2IF2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIF2IF2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIF2IF2 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIF2IF2 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIF2IF2 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIF2IF2 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIF2IF2 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIF2IF2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIF2IF2 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIF2IF2 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIF2IF2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIF2IF2

        Create a new object of the class itkDiscreteGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIF2IF2.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_Clone, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetVariance, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumError, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetVariance, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigmaArray, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigma, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigmaArray, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigma, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumError, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_swigregister
itkDiscreteGaussianImageFilterIF2IF2_swigregister(itkDiscreteGaussianImageFilterIF2IF2)

def itkDiscreteGaussianImageFilterIF2IF2___New_orig__() -> "itkDiscreteGaussianImageFilterIF2IF2_Pointer":
    """itkDiscreteGaussianImageFilterIF2IF2___New_orig__() -> itkDiscreteGaussianImageFilterIF2IF2_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2___New_orig__()

def itkDiscreteGaussianImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIF2IF2 *":
    """itkDiscreteGaussianImageFilterIF2IF2_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIF2IF2"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_cast(obj)

class itkDiscreteGaussianImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIF3IF3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIF3IF3_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkDiscreteGaussianImageFilterIF3IF3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIF3IF3 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIF3IF3 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIF3IF3 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIF3') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIF3IF3 self, itkImageBoundaryConditionIF3 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIF3 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkImageBoundaryConditionIF3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIF3') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIF3IF3 self, itkImageBoundaryConditionIF3 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIF3 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkImageBoundaryConditionIF3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIF3IF3 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIF3IF3 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIF3IF3 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIF3IF3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIF3IF3 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIF3IF3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIF3IF3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIF3IF3 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIF3IF3 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIF3IF3 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIF3IF3 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIF3IF3 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIF3IF3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIF3IF3 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIF3IF3 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIF3IF3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIF3IF3

        Create a new object of the class itkDiscreteGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIF3IF3.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_Clone, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetVariance, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumError, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetVariance, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigmaArray, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigma, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigmaArray, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigma, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumError, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_swigregister
itkDiscreteGaussianImageFilterIF3IF3_swigregister(itkDiscreteGaussianImageFilterIF3IF3)

def itkDiscreteGaussianImageFilterIF3IF3___New_orig__() -> "itkDiscreteGaussianImageFilterIF3IF3_Pointer":
    """itkDiscreteGaussianImageFilterIF3IF3___New_orig__() -> itkDiscreteGaussianImageFilterIF3IF3_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3___New_orig__()

def itkDiscreteGaussianImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIF3IF3 *":
    """itkDiscreteGaussianImageFilterIF3IF3_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIF3IF3"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_cast(obj)

class itkDiscreteGaussianImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterISS2ISS2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterISS2ISS2_Pointer":
        """Clone(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkDiscreteGaussianImageFilterISS2ISS2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterISS2ISS2 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterISS2ISS2 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterISS2ISS2 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterISS2ISS2 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionISS2') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterISS2ISS2 self, itkImageBoundaryConditionISS2 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionISS2 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkImageBoundaryConditionISS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionISS2') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterISS2ISS2 self, itkImageBoundaryConditionISS2 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionISS2 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkImageBoundaryConditionISS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterISS2ISS2 self, itkFixedArrayD2 _arg)
        SetVariance(itkDiscreteGaussianImageFilterISS2ISS2 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterISS2ISS2 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterISS2ISS2 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterISS2ISS2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterISS2ISS2 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterISS2ISS2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterISS2ISS2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterISS2ISS2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterISS2ISS2 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterISS2ISS2 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterISS2ISS2 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterISS2ISS2 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterISS2ISS2 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterISS2ISS2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterISS2ISS2 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterISS2ISS2 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterISS2ISS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterISS2ISS2

        Create a new object of the class itkDiscreteGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterISS2ISS2.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_Clone, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetVariance, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumError, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetVariance, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigmaArray, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigma, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigmaArray, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigma, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumError, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_swigregister
itkDiscreteGaussianImageFilterISS2ISS2_swigregister(itkDiscreteGaussianImageFilterISS2ISS2)

def itkDiscreteGaussianImageFilterISS2ISS2___New_orig__() -> "itkDiscreteGaussianImageFilterISS2ISS2_Pointer":
    """itkDiscreteGaussianImageFilterISS2ISS2___New_orig__() -> itkDiscreteGaussianImageFilterISS2ISS2_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2___New_orig__()

def itkDiscreteGaussianImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterISS2ISS2 *":
    """itkDiscreteGaussianImageFilterISS2ISS2_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterISS2ISS2"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_cast(obj)

class itkDiscreteGaussianImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterISS3ISS3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterISS3ISS3_Pointer":
        """Clone(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkDiscreteGaussianImageFilterISS3ISS3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterISS3ISS3 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterISS3ISS3 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterISS3ISS3 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterISS3ISS3 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionISS3') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterISS3ISS3 self, itkImageBoundaryConditionISS3 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionISS3 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkImageBoundaryConditionISS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionISS3') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterISS3ISS3 self, itkImageBoundaryConditionISS3 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionISS3 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkImageBoundaryConditionISS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterISS3ISS3 self, itkFixedArrayD3 _arg)
        SetVariance(itkDiscreteGaussianImageFilterISS3ISS3 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterISS3ISS3 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterISS3ISS3 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterISS3ISS3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterISS3ISS3 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterISS3ISS3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterISS3ISS3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterISS3ISS3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterISS3ISS3 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterISS3ISS3 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterISS3ISS3 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterISS3ISS3 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterISS3ISS3 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterISS3ISS3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterISS3ISS3 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterISS3ISS3 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterISS3ISS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterISS3ISS3

        Create a new object of the class itkDiscreteGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterISS3ISS3.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_Clone, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetVariance, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumError, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetVariance, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigmaArray, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigma, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigmaArray, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigma, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumError, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_swigregister
itkDiscreteGaussianImageFilterISS3ISS3_swigregister(itkDiscreteGaussianImageFilterISS3ISS3)

def itkDiscreteGaussianImageFilterISS3ISS3___New_orig__() -> "itkDiscreteGaussianImageFilterISS3ISS3_Pointer":
    """itkDiscreteGaussianImageFilterISS3ISS3___New_orig__() -> itkDiscreteGaussianImageFilterISS3ISS3_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3___New_orig__()

def itkDiscreteGaussianImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterISS3ISS3 *":
    """itkDiscreteGaussianImageFilterISS3ISS3_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterISS3ISS3"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_cast(obj)

class itkDiscreteGaussianImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIUC2IUC2_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkDiscreteGaussianImageFilterIUC2IUC2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUC2IUC2 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIUC2IUC2 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUC2') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUC2IUC2 self, itkImageBoundaryConditionIUC2 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIUC2 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkImageBoundaryConditionIUC2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUC2') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUC2IUC2 self, itkImageBoundaryConditionIUC2 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIUC2 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkImageBoundaryConditionIUC2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIUC2IUC2 self, itkFixedArrayD2 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIUC2IUC2 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIUC2IUC2 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIUC2IUC2 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIUC2IUC2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIUC2IUC2 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIUC2IUC2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC2IUC2 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC2IUC2 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC2IUC2 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIUC2IUC2 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIUC2IUC2 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIUC2IUC2 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIUC2IUC2 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUC2IUC2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUC2IUC2

        Create a new object of the class itkDiscreteGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIUC2IUC2.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_Clone, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetVariance, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumError, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetVariance, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigmaArray, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigma, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigmaArray, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigma, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumError, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_swigregister
itkDiscreteGaussianImageFilterIUC2IUC2_swigregister(itkDiscreteGaussianImageFilterIUC2IUC2)

def itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__() -> "itkDiscreteGaussianImageFilterIUC2IUC2_Pointer":
    """itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__() -> itkDiscreteGaussianImageFilterIUC2IUC2_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__()

def itkDiscreteGaussianImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUC2IUC2 *":
    """itkDiscreteGaussianImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUC2IUC2"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_cast(obj)

class itkDiscreteGaussianImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIUC3IUC3_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkDiscreteGaussianImageFilterIUC3IUC3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUC3IUC3 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIUC3IUC3 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUC3') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUC3IUC3 self, itkImageBoundaryConditionIUC3 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIUC3 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkImageBoundaryConditionIUC3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUC3') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUC3IUC3 self, itkImageBoundaryConditionIUC3 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIUC3 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkImageBoundaryConditionIUC3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIUC3IUC3 self, itkFixedArrayD3 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIUC3IUC3 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIUC3IUC3 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIUC3IUC3 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIUC3IUC3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIUC3IUC3 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIUC3IUC3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC3IUC3 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC3IUC3 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUC3IUC3 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIUC3IUC3 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIUC3IUC3 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIUC3IUC3 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIUC3IUC3 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUC3IUC3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUC3IUC3

        Create a new object of the class itkDiscreteGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIUC3IUC3.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_Clone, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetVariance, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumError, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetVariance, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigmaArray, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigma, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigmaArray, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigma, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumError, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_swigregister
itkDiscreteGaussianImageFilterIUC3IUC3_swigregister(itkDiscreteGaussianImageFilterIUC3IUC3)

def itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__() -> "itkDiscreteGaussianImageFilterIUC3IUC3_Pointer":
    """itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__() -> itkDiscreteGaussianImageFilterIUC3IUC3_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__()

def itkDiscreteGaussianImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUC3IUC3 *":
    """itkDiscreteGaussianImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUC3IUC3"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_cast(obj)

class itkDiscreteGaussianImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIUS2IUS2_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkDiscreteGaussianImageFilterIUS2IUS2_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkFixedArrayD2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUS2IUS2 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIUS2IUS2 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUS2') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUS2IUS2 self, itkImageBoundaryConditionIUS2 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIUS2 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkImageBoundaryConditionIUS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUS2') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUS2IUS2 self, itkImageBoundaryConditionIUS2 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIUS2 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkImageBoundaryConditionIUS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIUS2IUS2 self, itkFixedArrayD2 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIUS2IUS2 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIUS2IUS2 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIUS2IUS2 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD2') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIUS2IUS2 self, itkFixedArrayD2 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIUS2IUS2 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD2":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> itkFixedArrayD2

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIUS2IUS2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS2IUS2 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS2IUS2 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS2IUS2 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIUS2IUS2 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIUS2IUS2 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIUS2IUS2 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIUS2IUS2 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUS2IUS2"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUS2IUS2

        Create a new object of the class itkDiscreteGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIUS2IUS2.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_Clone, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetVariance, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumError, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetVariance, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigmaArray, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigma, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigmaArray, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigma, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumError, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_swigregister
itkDiscreteGaussianImageFilterIUS2IUS2_swigregister(itkDiscreteGaussianImageFilterIUS2IUS2)

def itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__() -> "itkDiscreteGaussianImageFilterIUS2IUS2_Pointer":
    """itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__() -> itkDiscreteGaussianImageFilterIUS2IUS2_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__()

def itkDiscreteGaussianImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUS2IUS2 *":
    """itkDiscreteGaussianImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUS2IUS2"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_cast(obj)

class itkDiscreteGaussianImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter  \\sphinx
    \\sphinxexample{Filtering/Smoothing/SmoothWithRecursiveG
    aussian,Computes the smoothing with Gaussian kernel} \\endsphinx

    C++ includes: itkDiscreteGaussianImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDiscreteGaussianImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkDiscreteGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDiscreteGaussianImageFilterIUS3IUS3_Pointer":
        """Clone(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkDiscreteGaussianImageFilterIUS3IUS3_Pointer"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkFixedArrayD3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumError(self)


    def GetMaximumKernelWidth(self) -> "int":
        """
        GetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> int

        Set the
        kernel to be no wider than MaximumKernelWidth pixels, even if
        MaximumError demands it. The default is 32 pixels. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumKernelWidth(self)


    def SetMaximumKernelWidth(self, _arg: 'int const') -> "void":
        """SetMaximumKernelWidth(itkDiscreteGaussianImageFilterIUS3IUS3 self, int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumKernelWidth(self, _arg)


    def GetFilterDimensionality(self) -> "unsigned int":
        """
        GetFilterDimensionality(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> unsigned int

        Set the
        number of dimensions to smooth. Defaults to the image dimension. Can
        be set to less than ImageDimension, smoothing all the dimensions less
        than FilterDimensionality. For instance, to smooth the slices of a
        volume without smoothing in Z, set the FilterDimensionality to 2. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkDiscreteGaussianImageFilterIUS3IUS3 self, unsigned int const _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetFilterDimensionality(self, _arg)


    def SetInputBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUS3') -> "void":
        """
        SetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUS3IUS3 self, itkImageBoundaryConditionIUS3 _arg)

        Set/get
        the boundary condition. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetInputBoundaryCondition(self, _arg)


    def GetInputBoundaryCondition(self) -> "itkImageBoundaryConditionIUS3 *":
        """GetInputBoundaryCondition(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkImageBoundaryConditionIUS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetInputBoundaryCondition(self)


    def SetRealBoundaryCondition(self, _arg: 'itkImageBoundaryConditionIUS3') -> "void":
        """SetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUS3IUS3 self, itkImageBoundaryConditionIUS3 _arg)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetRealBoundaryCondition(self, _arg)


    def GetRealBoundaryCondition(self) -> "itkImageBoundaryConditionIUS3 *":
        """GetRealBoundaryCondition(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkImageBoundaryConditionIUS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetRealBoundaryCondition(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkDiscreteGaussianImageFilterIUS3IUS3 self, itkFixedArrayD3 _arg)
        SetVariance(itkDiscreteGaussianImageFilterIUS3IUS3 self, double const v)
        SetVariance(itkDiscreteGaussianImageFilterIUS3IUS3 self, double const * v)
        SetVariance(itkDiscreteGaussianImageFilterIUS3IUS3 self, float const * v)

        Convenience Set methods
        for setting all dimensional parameters to the same values. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetVariance(self, *args)


    def SetSigmaArray(self, sigmas: 'itkFixedArrayD3') -> "void":
        """
        SetSigmaArray(itkDiscreteGaussianImageFilterIUS3IUS3 self, itkFixedArrayD3 sigmas)

        Set the standard
        deviation of the Gaussian used for smoothing. Sigma is measured in the
        units of image spacing. You may use the method SetSigma to set the
        same value across each axis or use the method SetSigmaArray if you
        need different values along each axis. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigmaArray(self, sigmas)


    def SetSigma(self, sigma: 'double') -> "void":
        """SetSigma(itkDiscreteGaussianImageFilterIUS3IUS3 self, double sigma)"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigma(self, sigma)


    def GetSigmaArray(self) -> "itkFixedArrayD3":
        """
        GetSigmaArray(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> itkFixedArrayD3

        Get the Sigma value.

        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigmaArray(self)


    def GetSigma(self) -> "double":
        """
        GetSigma(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> double

        Get the Sigma scalar. If
        the Sigma is anisotropic, we will just return the Sigma along the
        first dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigma(self)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkDiscreteGaussianImageFilterIUS3IUS3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS3IUS3 self, double const v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS3IUS3 self, double const * v)
        SetMaximumError(itkDiscreteGaussianImageFilterIUS3IUS3 self, float const * v)

        The algorithm will
        size the discrete kernel so that the error resulting from truncation
        of the kernel is no greater than MaximumError. The default is 0.01 in
        each dimension. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumError(self, *args)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDiscreteGaussianImageFilterIUS3IUS3 self)

        Use the image
        spacing information in calculations. Use this option if you want to
        specify Gaussian variance in real world units. Default is
        ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDiscreteGaussianImageFilterIUS3IUS3 self)

        Ignore the
        image spacing. Use this option if you want to specify Gaussian
        variance in pixels. Default is ImageSpacingOn. 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDiscreteGaussianImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDiscreteGaussianImageFilterIUS3IUS3 self) -> bool"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetUseImageSpacing(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDiscreteGaussianImageFilterIUS3IUS3 self)

        DiscreteGaussianImageFilter needs a larger input requested region than
        the output requested region (larger by the size of the Gaussian
        kernel). As such, DiscreteGaussianImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. See:
        ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)

    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUS3IUS3"""
        return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUS3IUS3

        Create a new object of the class itkDiscreteGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscreteGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDiscreteGaussianImageFilterIUS3IUS3.Clone = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_Clone, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetVariance, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumError, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetMaximumKernelWidth = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumKernelWidth, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetFilterDimensionality = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetFilterDimensionality, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetInputBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetInputBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetRealBoundaryCondition = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetRealBoundaryCondition, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetVariance = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetVariance, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigmaArray, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigma, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetSigmaArray = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigmaArray, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetSigma = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigma, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetMaximumError = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumError, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetUseImageSpacingOn = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOn, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetUseImageSpacingOff = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOff, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.SetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GetUseImageSpacing = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetUseImageSpacing, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3.GenerateInputRequestedRegion = new_instancemethod(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GenerateInputRequestedRegion, None, itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3_swigregister = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_swigregister
itkDiscreteGaussianImageFilterIUS3IUS3_swigregister(itkDiscreteGaussianImageFilterIUS3IUS3)

def itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__() -> "itkDiscreteGaussianImageFilterIUS3IUS3_Pointer":
    """itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__() -> itkDiscreteGaussianImageFilterIUS3IUS3_Pointer"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__()

def itkDiscreteGaussianImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkDiscreteGaussianImageFilterIUS3IUS3 *":
    """itkDiscreteGaussianImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkDiscreteGaussianImageFilterIUS3IUS3"""
    return _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def discrete_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for DiscreteGaussianImageFilter"""
    import itk
    instance = itk.DiscreteGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def discrete_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DiscreteGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DiscreteGaussianImageFilter.values()[0]
    else:
        filter_object = itk.DiscreteGaussianImageFilter

    discrete_gaussian_image_filter.__doc__ = filter_object.__doc__
    discrete_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    discrete_gaussian_image_filter.__doc__ += "Available Keyword Arguments:\n"
    discrete_gaussian_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



