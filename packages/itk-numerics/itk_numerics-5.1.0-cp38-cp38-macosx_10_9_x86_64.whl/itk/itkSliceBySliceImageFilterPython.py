# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSliceBySliceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSliceBySliceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSliceBySliceImageFilterPython
            return _itkSliceBySliceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSliceBySliceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSliceBySliceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSliceBySliceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def itkSliceBySliceImageFilterICF3ICF3_New():
  return itkSliceBySliceImageFilterICF3ICF3.New()


def itkSliceBySliceImageFilterIRGBUC3IRGBUC3_New():
  return itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New()


def itkSliceBySliceImageFilterID3ID3_New():
  return itkSliceBySliceImageFilterID3ID3.New()


def itkSliceBySliceImageFilterIF3IF3_New():
  return itkSliceBySliceImageFilterIF3IF3.New()


def itkSliceBySliceImageFilterIUS3IUS3_New():
  return itkSliceBySliceImageFilterIUS3IUS3.New()


def itkSliceBySliceImageFilterIUC3IUC3_New():
  return itkSliceBySliceImageFilterIUC3IUC3.New()


def itkSliceBySliceImageFilterISS3ISS3_New():
  return itkSliceBySliceImageFilterISS3ISS3.New()

class itkSliceBySliceImageFilterICF3ICF3(itkImageToImageFilterBPython.itkImageToImageFilterICF3ICF3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterICF3ICF3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterICF3ICF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterICF3ICF3_Pointer":
        """Clone(itkSliceBySliceImageFilterICF3ICF3 self) -> itkSliceBySliceImageFilterICF3ICF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterICF3ICF3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterICF3ICF3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterICF2ICF2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterICF3ICF3 self, itkImageToImageFilterICF2ICF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterICF2ICF2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageToImageFilterICF2ICF2
        GetFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageToImageFilterICF2ICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterICF2ICF2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterICF3ICF3 self, itkImageToImageFilterICF2ICF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterICF2ICF2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageToImageFilterICF2ICF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterICF2ICF2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageToImageFilterICF2ICF2
        GetInputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageToImageFilterICF2ICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceICF2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterICF3ICF3 self, itkImageSourceICF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceICF2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageSourceICF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceICF2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageSourceICF2
        GetOutputFilter(itkSliceBySliceImageFilterICF3ICF3 self) -> itkImageSourceICF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterICF3ICF3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterICF3ICF3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterICF3ICF3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterICF3ICF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterICF3ICF3

        Create a new object of the class itkSliceBySliceImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterICF3ICF3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_Clone, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetDimension, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetDimension, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetInputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetInputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_SetOutputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetOutputFilter, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_GetSliceIndex, None, itkSliceBySliceImageFilterICF3ICF3)
itkSliceBySliceImageFilterICF3ICF3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_swigregister
itkSliceBySliceImageFilterICF3ICF3_swigregister(itkSliceBySliceImageFilterICF3ICF3)

def itkSliceBySliceImageFilterICF3ICF3___New_orig__() -> "itkSliceBySliceImageFilterICF3ICF3_Pointer":
    """itkSliceBySliceImageFilterICF3ICF3___New_orig__() -> itkSliceBySliceImageFilterICF3ICF3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3___New_orig__()

def itkSliceBySliceImageFilterICF3ICF3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterICF3ICF3 *":
    """itkSliceBySliceImageFilterICF3ICF3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterICF3ICF3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterICF3ICF3_cast(obj)

class itkSliceBySliceImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterID3ID3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterID3ID3_Pointer":
        """Clone(itkSliceBySliceImageFilterID3ID3 self) -> itkSliceBySliceImageFilterID3ID3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterID3ID3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterID2ID2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterID3ID3 self, itkImageToImageFilterID2ID2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterID2ID2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageToImageFilterID2ID2
        GetFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageToImageFilterID2ID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterID2ID2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterID3ID3 self, itkImageToImageFilterID2ID2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterID2ID2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageToImageFilterID2ID2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterID2ID2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageToImageFilterID2ID2
        GetInputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageToImageFilterID2ID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceID2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterID3ID3 self, itkImageSourceID2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceID2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageSourceID2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceID2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageSourceID2
        GetOutputFilter(itkSliceBySliceImageFilterID3ID3 self) -> itkImageSourceID2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterID3ID3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterID3ID3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterID3ID3

        Create a new object of the class itkSliceBySliceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterID3ID3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_Clone, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetDimension, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetDimension, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetInputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetInputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_SetOutputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetOutputFilter, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_GetSliceIndex, None, itkSliceBySliceImageFilterID3ID3)
itkSliceBySliceImageFilterID3ID3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_swigregister
itkSliceBySliceImageFilterID3ID3_swigregister(itkSliceBySliceImageFilterID3ID3)

def itkSliceBySliceImageFilterID3ID3___New_orig__() -> "itkSliceBySliceImageFilterID3ID3_Pointer":
    """itkSliceBySliceImageFilterID3ID3___New_orig__() -> itkSliceBySliceImageFilterID3ID3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3___New_orig__()

def itkSliceBySliceImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterID3ID3 *":
    """itkSliceBySliceImageFilterID3ID3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterID3ID3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterID3ID3_cast(obj)

class itkSliceBySliceImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterIF3IF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterIF3IF3_Pointer":
        """Clone(itkSliceBySliceImageFilterIF3IF3 self) -> itkSliceBySliceImageFilterIF3IF3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterIF3IF3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterIF2IF2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterIF3IF3 self, itkImageToImageFilterIF2IF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterIF2IF2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageToImageFilterIF2IF2
        GetFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageToImageFilterIF2IF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterIF2IF2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterIF3IF3 self, itkImageToImageFilterIF2IF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterIF2IF2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageToImageFilterIF2IF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterIF2IF2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageToImageFilterIF2IF2
        GetInputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageToImageFilterIF2IF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceIF2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterIF3IF3 self, itkImageSourceIF2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceIF2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageSourceIF2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceIF2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageSourceIF2
        GetOutputFilter(itkSliceBySliceImageFilterIF3IF3 self) -> itkImageSourceIF2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterIF3IF3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterIF3IF3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIF3IF3

        Create a new object of the class itkSliceBySliceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterIF3IF3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_Clone, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetDimension, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetDimension, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetInputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetInputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_SetOutputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetOutputFilter, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_GetSliceIndex, None, itkSliceBySliceImageFilterIF3IF3)
itkSliceBySliceImageFilterIF3IF3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_swigregister
itkSliceBySliceImageFilterIF3IF3_swigregister(itkSliceBySliceImageFilterIF3IF3)

def itkSliceBySliceImageFilterIF3IF3___New_orig__() -> "itkSliceBySliceImageFilterIF3IF3_Pointer":
    """itkSliceBySliceImageFilterIF3IF3___New_orig__() -> itkSliceBySliceImageFilterIF3IF3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3___New_orig__()

def itkSliceBySliceImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIF3IF3 *":
    """itkSliceBySliceImageFilterIF3IF3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterIF3IF3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIF3IF3_cast(obj)

class itkSliceBySliceImageFilterIRGBUC3IRGBUC3(itkImageToImageFilterAPython.itkImageToImageFilterIRGBUC3IRGBUC3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer":
        """Clone(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterIRGBUC2IRGBUC2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self, itkImageToImageFilterIRGBUC2IRGBUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterIRGBUC2IRGBUC2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        GetFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterIRGBUC2IRGBUC2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self, itkImageToImageFilterIRGBUC2IRGBUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterIRGBUC2IRGBUC2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageToImageFilterIRGBUC2IRGBUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterIRGBUC2IRGBUC2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        GetInputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageToImageFilterIRGBUC2IRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceIRGBUC2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self, itkImageSourceIRGBUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceIRGBUC2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageSourceIRGBUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceIRGBUC2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageSourceIRGBUC2
        GetOutputFilter(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> itkImageSourceIRGBUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterIRGBUC3IRGBUC3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIRGBUC3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIRGBUC3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3

        Create a new object of the class itkSliceBySliceImageFilterIRGBUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIRGBUC3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterIRGBUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterIRGBUC3IRGBUC3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Clone, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetDimension, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetDimension, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetInputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetInputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_SetOutputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetOutputFilter, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_GetSliceIndex, None, itkSliceBySliceImageFilterIRGBUC3IRGBUC3)
itkSliceBySliceImageFilterIRGBUC3IRGBUC3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_swigregister
itkSliceBySliceImageFilterIRGBUC3IRGBUC3_swigregister(itkSliceBySliceImageFilterIRGBUC3IRGBUC3)

def itkSliceBySliceImageFilterIRGBUC3IRGBUC3___New_orig__() -> "itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer":
    """itkSliceBySliceImageFilterIRGBUC3IRGBUC3___New_orig__() -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3___New_orig__()

def itkSliceBySliceImageFilterIRGBUC3IRGBUC3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIRGBUC3IRGBUC3 *":
    """itkSliceBySliceImageFilterIRGBUC3IRGBUC3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterIRGBUC3IRGBUC3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIRGBUC3IRGBUC3_cast(obj)

class itkSliceBySliceImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterISS3ISS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterISS3ISS3_Pointer":
        """Clone(itkSliceBySliceImageFilterISS3ISS3 self) -> itkSliceBySliceImageFilterISS3ISS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterISS3ISS3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterISS3ISS3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterISS2ISS2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterISS3ISS3 self, itkImageToImageFilterISS2ISS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterISS2ISS2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageToImageFilterISS2ISS2
        GetFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageToImageFilterISS2ISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterISS2ISS2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterISS3ISS3 self, itkImageToImageFilterISS2ISS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterISS2ISS2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageToImageFilterISS2ISS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterISS2ISS2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageToImageFilterISS2ISS2
        GetInputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageToImageFilterISS2ISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceISS2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterISS3ISS3 self, itkImageSourceISS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceISS2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageSourceISS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceISS2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageSourceISS2
        GetOutputFilter(itkSliceBySliceImageFilterISS3ISS3 self) -> itkImageSourceISS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterISS3ISS3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterISS3ISS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterISS3ISS3

        Create a new object of the class itkSliceBySliceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterISS3ISS3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_Clone, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetDimension, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetDimension, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetInputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetInputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_SetOutputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetOutputFilter, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_GetSliceIndex, None, itkSliceBySliceImageFilterISS3ISS3)
itkSliceBySliceImageFilterISS3ISS3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_swigregister
itkSliceBySliceImageFilterISS3ISS3_swigregister(itkSliceBySliceImageFilterISS3ISS3)

def itkSliceBySliceImageFilterISS3ISS3___New_orig__() -> "itkSliceBySliceImageFilterISS3ISS3_Pointer":
    """itkSliceBySliceImageFilterISS3ISS3___New_orig__() -> itkSliceBySliceImageFilterISS3ISS3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3___New_orig__()

def itkSliceBySliceImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterISS3ISS3 *":
    """itkSliceBySliceImageFilterISS3ISS3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterISS3ISS3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterISS3ISS3_cast(obj)

class itkSliceBySliceImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterIUC3IUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterIUC3IUC3_Pointer":
        """Clone(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkSliceBySliceImageFilterIUC3IUC3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterIUC3IUC3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterIUC3IUC3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterIUC2IUC2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterIUC3IUC3 self, itkImageToImageFilterIUC2IUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterIUC2IUC2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageToImageFilterIUC2IUC2
        GetFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageToImageFilterIUC2IUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterIUC2IUC2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterIUC3IUC3 self, itkImageToImageFilterIUC2IUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterIUC2IUC2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageToImageFilterIUC2IUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterIUC2IUC2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageToImageFilterIUC2IUC2
        GetInputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageToImageFilterIUC2IUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceIUC2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterIUC3IUC3 self, itkImageSourceIUC2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceIUC2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageSourceIUC2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceIUC2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageSourceIUC2
        GetOutputFilter(itkSliceBySliceImageFilterIUC3IUC3 self) -> itkImageSourceIUC2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterIUC3IUC3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterIUC3IUC3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUC3IUC3

        Create a new object of the class itkSliceBySliceImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterIUC3IUC3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_Clone, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetDimension, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetDimension, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetInputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetInputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_SetOutputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetOutputFilter, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_GetSliceIndex, None, itkSliceBySliceImageFilterIUC3IUC3)
itkSliceBySliceImageFilterIUC3IUC3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_swigregister
itkSliceBySliceImageFilterIUC3IUC3_swigregister(itkSliceBySliceImageFilterIUC3IUC3)

def itkSliceBySliceImageFilterIUC3IUC3___New_orig__() -> "itkSliceBySliceImageFilterIUC3IUC3_Pointer":
    """itkSliceBySliceImageFilterIUC3IUC3___New_orig__() -> itkSliceBySliceImageFilterIUC3IUC3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3___New_orig__()

def itkSliceBySliceImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIUC3IUC3 *":
    """itkSliceBySliceImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterIUC3IUC3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUC3IUC3_cast(obj)

class itkSliceBySliceImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Apply a filter or a pipeline slice by slice on an image.

    SliceBySliceImageFilter let the user apply a filter or a pipeline of
    filters on the slices of an image. The filters must work on images
    smaller of one dimension than the input and output images of the
    SliceBySliceImageFilter - if the SliceBySliceImageFilter work on 3D
    images, the filters used internally must work on 2D images.

    The dimension along which the slices are extracted can be selected
    with SetDimension() and defaults to the last one.

    SliceBySliceImageFilter takes the input and the output filters of a
    pipeline as parameter. They can be set with SetInputFilter() and
    SetOutputFilter(). The pipeline will be run once per slice.

    If there is only one filter to apply to the slices of the input image,
    the SetFilter() method can be used to set the filter passed as
    parameter both as the input and as the output filter.

    SliceBySliceImageFilter can take several images as input. In that
    case, the same number of slices will be passed to the input filter. If
    the output filter produce several output slices,
    SliceBySliceImageFilter produce the same number of output images. The
    input images are passed with the same input number to the input filter
    - if SetInput( 3, img ) is used on the SliceBySliceImageFilter the
    corresponding slice will be passed to the input filter with SetInput(
    3, img ). Seehttps://www.itk.org/pipermail/insight-
    users/2008-May/026112.html for an example of usage of that feature
    with MaskImageFilter.

    The input requested region is enlarged to cover whole slices, but not
    in the slice direction - however, the internal pipeline only requests
    the output requested region for that slice (the requested region per
    slice is not enlarged to the whole slice unless done by the internal
    filters ).

    The output images of SliceBySliceImageFilter must be of the same size
    than the input images. All the input images must be of the same pixel
    type. All the output images must be of the same pixel type.

    Gaetan Lehmann  This class was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/368

    C++ includes: itkSliceBySliceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSliceBySliceImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkSliceBySliceImageFilterIUS3IUS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSliceBySliceImageFilterIUS3IUS3_Pointer":
        """Clone(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkSliceBySliceImageFilterIUS3IUS3_Pointer"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_Clone(self)


    def SetDimension(self, _arg: 'unsigned int const') -> "void":
        """SetDimension(itkSliceBySliceImageFilterIUS3IUS3 self, unsigned int const _arg)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetDimension(self, _arg)


    def GetDimension(self) -> "unsigned int":
        """GetDimension(itkSliceBySliceImageFilterIUS3IUS3 self) -> unsigned int"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetDimension(self)


    def SetFilter(self, filter: 'itkImageToImageFilterIUS2IUS2') -> "void":
        """SetFilter(itkSliceBySliceImageFilterIUS3IUS3 self, itkImageToImageFilterIUS2IUS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetFilter(self, filter)


    def GetFilter(self, *args) -> "itkImageToImageFilterIUS2IUS2 const *":
        """
        GetFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageToImageFilterIUS2IUS2
        GetFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageToImageFilterIUS2IUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetFilter(self, *args)


    def SetInputFilter(self, filter: 'itkImageToImageFilterIUS2IUS2') -> "void":
        """SetInputFilter(itkSliceBySliceImageFilterIUS3IUS3 self, itkImageToImageFilterIUS2IUS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetInputFilter(self, filter)


    def GetModifiableInputFilter(self) -> "itkImageToImageFilterIUS2IUS2 *":
        """GetModifiableInputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageToImageFilterIUS2IUS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableInputFilter(self)


    def GetInputFilter(self, *args) -> "itkImageToImageFilterIUS2IUS2 *":
        """
        GetInputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageToImageFilterIUS2IUS2
        GetInputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageToImageFilterIUS2IUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetInputFilter(self, *args)


    def SetOutputFilter(self, filter: 'itkImageSourceIUS2') -> "void":
        """SetOutputFilter(itkSliceBySliceImageFilterIUS3IUS3 self, itkImageSourceIUS2 filter)"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetOutputFilter(self, filter)


    def GetModifiableOutputFilter(self) -> "itkImageSourceIUS2 *":
        """GetModifiableOutputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageSourceIUS2"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableOutputFilter(self)


    def GetOutputFilter(self, *args) -> "itkImageSourceIUS2 *":
        """
        GetOutputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageSourceIUS2
        GetOutputFilter(itkSliceBySliceImageFilterIUS3IUS3 self) -> itkImageSourceIUS2
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetOutputFilter(self, *args)


    def GetSliceIndex(self) -> "long":
        """
        GetSliceIndex(itkSliceBySliceImageFilterIUS3IUS3 self) -> long

        The index of the
        slice currently processed by the filter. This is intended to be used
        with the IterationEvent sent before the processing of each object. It
        contains a relevant value only during the filter update. 
        """
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetSliceIndex(self)

    __swig_destroy__ = _itkSliceBySliceImageFilterPython.delete_itkSliceBySliceImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkSliceBySliceImageFilterIUS3IUS3"""
        return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSliceBySliceImageFilterIUS3IUS3

        Create a new object of the class itkSliceBySliceImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSliceBySliceImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSliceBySliceImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSliceBySliceImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSliceBySliceImageFilterIUS3IUS3.Clone = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_Clone, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.SetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetDimension, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetDimension = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetDimension, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.SetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.SetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetInputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetModifiableInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableInputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetInputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetInputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.SetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_SetOutputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetModifiableOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetModifiableOutputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetOutputFilter = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetOutputFilter, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3.GetSliceIndex = new_instancemethod(_itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_GetSliceIndex, None, itkSliceBySliceImageFilterIUS3IUS3)
itkSliceBySliceImageFilterIUS3IUS3_swigregister = _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_swigregister
itkSliceBySliceImageFilterIUS3IUS3_swigregister(itkSliceBySliceImageFilterIUS3IUS3)

def itkSliceBySliceImageFilterIUS3IUS3___New_orig__() -> "itkSliceBySliceImageFilterIUS3IUS3_Pointer":
    """itkSliceBySliceImageFilterIUS3IUS3___New_orig__() -> itkSliceBySliceImageFilterIUS3IUS3_Pointer"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3___New_orig__()

def itkSliceBySliceImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkSliceBySliceImageFilterIUS3IUS3 *":
    """itkSliceBySliceImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkSliceBySliceImageFilterIUS3IUS3"""
    return _itkSliceBySliceImageFilterPython.itkSliceBySliceImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def slice_by_slice_image_filter(*args, **kwargs):
    """Procedural interface for SliceBySliceImageFilter"""
    import itk
    instance = itk.SliceBySliceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def slice_by_slice_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SliceBySliceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SliceBySliceImageFilter.values()[0]
    else:
        filter_object = itk.SliceBySliceImageFilter

    slice_by_slice_image_filter.__doc__ = filter_object.__doc__
    slice_by_slice_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    slice_by_slice_image_filter.__doc__ += "Available Keyword Arguments:\n"
    slice_by_slice_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



