# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAsinImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAsinImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAsinImageFilterPython
            return _itkAsinImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAsinImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAsinImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAsinImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkUnaryGeneratorImageFilterPython
import itkInPlaceImageFilterBPython
import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkAsinImageFilterID3ID3_New():
  return itkAsinImageFilterID3ID3.New()


def itkAsinImageFilterID2ID2_New():
  return itkAsinImageFilterID2ID2.New()


def itkAsinImageFilterIF3IF3_New():
  return itkAsinImageFilterIF3IF3.New()


def itkAsinImageFilterIF2IF2_New():
  return itkAsinImageFilterIF2IF2.New()


def itkAsinImageFilterIUS3IUS3_New():
  return itkAsinImageFilterIUS3IUS3.New()


def itkAsinImageFilterIUS2IUS2_New():
  return itkAsinImageFilterIUS2IUS2.New()


def itkAsinImageFilterIUC3IUC3_New():
  return itkAsinImageFilterIUC3IUC3.New()


def itkAsinImageFilterIUC2IUC2_New():
  return itkAsinImageFilterIUC2IUC2.New()


def itkAsinImageFilterISS3ISS3_New():
  return itkAsinImageFilterISS3ISS3.New()


def itkAsinImageFilterISS2ISS2_New():
  return itkAsinImageFilterISS2ISS2.New()

class itkAsinImageFilterID2ID2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkAsinImageFilterID2ID2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterID2ID2_Pointer":
        """Clone(itkAsinImageFilterID2ID2 self) -> itkAsinImageFilterID2ID2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterID2ID2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID2ID2

        Create a new object of the class itkAsinImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterID2ID2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterID2ID2_Clone, None, itkAsinImageFilterID2ID2)
itkAsinImageFilterID2ID2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_swigregister
itkAsinImageFilterID2ID2_swigregister(itkAsinImageFilterID2ID2)

def itkAsinImageFilterID2ID2___New_orig__() -> "itkAsinImageFilterID2ID2_Pointer":
    """itkAsinImageFilterID2ID2___New_orig__() -> itkAsinImageFilterID2ID2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2___New_orig__()

def itkAsinImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterID2ID2 *":
    """itkAsinImageFilterID2ID2_cast(itkLightObject obj) -> itkAsinImageFilterID2ID2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_cast(obj)

class itkAsinImageFilterID3ID3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkAsinImageFilterID3ID3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterID3ID3_Pointer":
        """Clone(itkAsinImageFilterID3ID3 self) -> itkAsinImageFilterID3ID3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterID3ID3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID3ID3

        Create a new object of the class itkAsinImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterID3ID3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterID3ID3_Clone, None, itkAsinImageFilterID3ID3)
itkAsinImageFilterID3ID3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_swigregister
itkAsinImageFilterID3ID3_swigregister(itkAsinImageFilterID3ID3)

def itkAsinImageFilterID3ID3___New_orig__() -> "itkAsinImageFilterID3ID3_Pointer":
    """itkAsinImageFilterID3ID3___New_orig__() -> itkAsinImageFilterID3ID3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3___New_orig__()

def itkAsinImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterID3ID3 *":
    """itkAsinImageFilterID3ID3_cast(itkLightObject obj) -> itkAsinImageFilterID3ID3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_cast(obj)

class itkAsinImageFilterIF2IF2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF2IF2_Pointer":
        """Clone(itkAsinImageFilterIF2IF2 self) -> itkAsinImageFilterIF2IF2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF2IF2

        Create a new object of the class itkAsinImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF2IF2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone, None, itkAsinImageFilterIF2IF2)
itkAsinImageFilterIF2IF2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_swigregister
itkAsinImageFilterIF2IF2_swigregister(itkAsinImageFilterIF2IF2)

def itkAsinImageFilterIF2IF2___New_orig__() -> "itkAsinImageFilterIF2IF2_Pointer":
    """itkAsinImageFilterIF2IF2___New_orig__() -> itkAsinImageFilterIF2IF2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__()

def itkAsinImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF2IF2 *":
    """itkAsinImageFilterIF2IF2_cast(itkLightObject obj) -> itkAsinImageFilterIF2IF2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast(obj)

class itkAsinImageFilterIF3IF3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIF3IF3_Pointer":
        """Clone(itkAsinImageFilterIF3IF3 self) -> itkAsinImageFilterIF3IF3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF3IF3

        Create a new object of the class itkAsinImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIF3IF3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone, None, itkAsinImageFilterIF3IF3)
itkAsinImageFilterIF3IF3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_swigregister
itkAsinImageFilterIF3IF3_swigregister(itkAsinImageFilterIF3IF3)

def itkAsinImageFilterIF3IF3___New_orig__() -> "itkAsinImageFilterIF3IF3_Pointer":
    """itkAsinImageFilterIF3IF3___New_orig__() -> itkAsinImageFilterIF3IF3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__()

def itkAsinImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIF3IF3 *":
    """itkAsinImageFilterIF3IF3_cast(itkLightObject obj) -> itkAsinImageFilterIF3IF3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast(obj)

class itkAsinImageFilterISS2ISS2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS2ISS2_Pointer":
        """Clone(itkAsinImageFilterISS2ISS2 self) -> itkAsinImageFilterISS2ISS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS2ISS2

        Create a new object of the class itkAsinImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS2ISS2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone, None, itkAsinImageFilterISS2ISS2)
itkAsinImageFilterISS2ISS2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_swigregister
itkAsinImageFilterISS2ISS2_swigregister(itkAsinImageFilterISS2ISS2)

def itkAsinImageFilterISS2ISS2___New_orig__() -> "itkAsinImageFilterISS2ISS2_Pointer":
    """itkAsinImageFilterISS2ISS2___New_orig__() -> itkAsinImageFilterISS2ISS2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__()

def itkAsinImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS2ISS2 *":
    """itkAsinImageFilterISS2ISS2_cast(itkLightObject obj) -> itkAsinImageFilterISS2ISS2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast(obj)

class itkAsinImageFilterISS3ISS3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterISS3ISS3_Pointer":
        """Clone(itkAsinImageFilterISS3ISS3 self) -> itkAsinImageFilterISS3ISS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS3ISS3

        Create a new object of the class itkAsinImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterISS3ISS3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone, None, itkAsinImageFilterISS3ISS3)
itkAsinImageFilterISS3ISS3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_swigregister
itkAsinImageFilterISS3ISS3_swigregister(itkAsinImageFilterISS3ISS3)

def itkAsinImageFilterISS3ISS3___New_orig__() -> "itkAsinImageFilterISS3ISS3_Pointer":
    """itkAsinImageFilterISS3ISS3___New_orig__() -> itkAsinImageFilterISS3ISS3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__()

def itkAsinImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterISS3ISS3 *":
    """itkAsinImageFilterISS3ISS3_cast(itkLightObject obj) -> itkAsinImageFilterISS3ISS3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast(obj)

class itkAsinImageFilterIUC2IUC2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC2IUC2_Pointer":
        """Clone(itkAsinImageFilterIUC2IUC2 self) -> itkAsinImageFilterIUC2IUC2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC2IUC2

        Create a new object of the class itkAsinImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC2IUC2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone, None, itkAsinImageFilterIUC2IUC2)
itkAsinImageFilterIUC2IUC2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_swigregister
itkAsinImageFilterIUC2IUC2_swigregister(itkAsinImageFilterIUC2IUC2)

def itkAsinImageFilterIUC2IUC2___New_orig__() -> "itkAsinImageFilterIUC2IUC2_Pointer":
    """itkAsinImageFilterIUC2IUC2___New_orig__() -> itkAsinImageFilterIUC2IUC2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__()

def itkAsinImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC2IUC2 *":
    """itkAsinImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAsinImageFilterIUC2IUC2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast(obj)

class itkAsinImageFilterIUC3IUC3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUC3IUC3_Pointer":
        """Clone(itkAsinImageFilterIUC3IUC3 self) -> itkAsinImageFilterIUC3IUC3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC3IUC3

        Create a new object of the class itkAsinImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUC3IUC3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone, None, itkAsinImageFilterIUC3IUC3)
itkAsinImageFilterIUC3IUC3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_swigregister
itkAsinImageFilterIUC3IUC3_swigregister(itkAsinImageFilterIUC3IUC3)

def itkAsinImageFilterIUC3IUC3___New_orig__() -> "itkAsinImageFilterIUC3IUC3_Pointer":
    """itkAsinImageFilterIUC3IUC3___New_orig__() -> itkAsinImageFilterIUC3IUC3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__()

def itkAsinImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUC3IUC3 *":
    """itkAsinImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAsinImageFilterIUC3IUC3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast(obj)

class itkAsinImageFilterIUS2IUS2(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS2IUS2_Pointer":
        """Clone(itkAsinImageFilterIUS2IUS2 self) -> itkAsinImageFilterIUS2IUS2_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS2IUS2

        Create a new object of the class itkAsinImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS2IUS2.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone, None, itkAsinImageFilterIUS2IUS2)
itkAsinImageFilterIUS2IUS2_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_swigregister
itkAsinImageFilterIUS2IUS2_swigregister(itkAsinImageFilterIUS2IUS2)

def itkAsinImageFilterIUS2IUS2___New_orig__() -> "itkAsinImageFilterIUS2IUS2_Pointer":
    """itkAsinImageFilterIUS2IUS2___New_orig__() -> itkAsinImageFilterIUS2IUS2_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__()

def itkAsinImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS2IUS2 *":
    """itkAsinImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAsinImageFilterIUS2IUS2"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast(obj)

class itkAsinImageFilterIUS3IUS3(itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    """


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND)

    C++ includes: itkAsinImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAsinImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAsinImageFilterIUS3IUS3_Pointer":
        """Clone(itkAsinImageFilterIUS3IUS3 self) -> itkAsinImageFilterIUS3IUS3_Pointer"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone(self)

    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3"""
        return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS3IUS3

        Create a new object of the class itkAsinImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAsinImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAsinImageFilterIUS3IUS3.Clone = new_instancemethod(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone, None, itkAsinImageFilterIUS3IUS3)
itkAsinImageFilterIUS3IUS3_swigregister = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_swigregister
itkAsinImageFilterIUS3IUS3_swigregister(itkAsinImageFilterIUS3IUS3)

def itkAsinImageFilterIUS3IUS3___New_orig__() -> "itkAsinImageFilterIUS3IUS3_Pointer":
    """itkAsinImageFilterIUS3IUS3___New_orig__() -> itkAsinImageFilterIUS3IUS3_Pointer"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__()

def itkAsinImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkAsinImageFilterIUS3IUS3 *":
    """itkAsinImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAsinImageFilterIUS3IUS3"""
    return _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def asin_image_filter(*args, **kwargs):
    """Procedural interface for AsinImageFilter"""
    import itk
    instance = itk.AsinImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def asin_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AsinImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AsinImageFilter.values()[0]
    else:
        filter_object = itk.AsinImageFilter

    asin_image_filter.__doc__ = filter_object.__doc__
    asin_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    asin_image_filter.__doc__ += "Available Keyword Arguments:\n"
    asin_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



