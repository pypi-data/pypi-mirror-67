# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDivideImageFilterPython
else:
    import _itkDivideImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDivideImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDivideImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import ITKCommonBasePython
import pyBasePython
import itkBinaryGeneratorImageFilterPython
import itkRGBPixelPython
import itkFixedArrayPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkPointPython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSymmetricSecondRankTensorPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython

def itkDivideImageFilterICF3IF3ICF3_New():
  return itkDivideImageFilterICF3IF3ICF3.New()


def itkDivideImageFilterICF2IF2ICF2_New():
  return itkDivideImageFilterICF2IF2ICF2.New()


def itkDivideImageFilterICF3ICF3ICF3_New():
  return itkDivideImageFilterICF3ICF3ICF3.New()


def itkDivideImageFilterICF2ICF2ICF2_New():
  return itkDivideImageFilterICF2ICF2ICF2.New()


def itkDivideImageFilterID3ID3ID3_New():
  return itkDivideImageFilterID3ID3ID3.New()


def itkDivideImageFilterID2ID2ID2_New():
  return itkDivideImageFilterID2ID2ID2.New()


def itkDivideImageFilterIF3IF3IF3_New():
  return itkDivideImageFilterIF3IF3IF3.New()


def itkDivideImageFilterIF2IF2IF2_New():
  return itkDivideImageFilterIF2IF2IF2.New()


def itkDivideImageFilterIUS3IUS3IUS3_New():
  return itkDivideImageFilterIUS3IUS3IUS3.New()


def itkDivideImageFilterIUS2IUS2IUS2_New():
  return itkDivideImageFilterIUS2IUS2IUS2.New()


def itkDivideImageFilterIUC3IUC3IUC3_New():
  return itkDivideImageFilterIUC3IUC3IUC3.New()


def itkDivideImageFilterIUC2IUC2IUC2_New():
  return itkDivideImageFilterIUC2IUC2IUC2.New()


def itkDivideImageFilterISS3ISS3ISS3_New():
  return itkDivideImageFilterISS3ISS3ISS3.New()


def itkDivideImageFilterISS2ISS2ISS2_New():
  return itkDivideImageFilterISS2ISS2ISS2.New()

class itkDivideImageFilterICF2ICF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    r"""Proxy of C++ itkDivideImageFilterICF2ICF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2ICF2ICF2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2ICF2ICF2

        Create a new object of the class itkDivideImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2ICF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2ICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2ICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF2ICF2ICF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_swigregister(itkDivideImageFilterICF2ICF2ICF2)
itkDivideImageFilterICF2ICF2ICF2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__
itkDivideImageFilterICF2ICF2ICF2_cast = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast

class itkDivideImageFilterICF2IF2ICF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    r"""Proxy of C++ itkDivideImageFilterICF2IF2ICF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2IF2ICF2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2IF2ICF2

        Create a new object of the class itkDivideImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF2IF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF2IF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2IF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF2IF2ICF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_swigregister(itkDivideImageFilterICF2IF2ICF2)
itkDivideImageFilterICF2IF2ICF2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__
itkDivideImageFilterICF2IF2ICF2_cast = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast

class itkDivideImageFilterICF3ICF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    r"""Proxy of C++ itkDivideImageFilterICF3ICF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3ICF3ICF3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3ICF3ICF3

        Create a new object of the class itkDivideImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3ICF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3ICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3ICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF3ICF3ICF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_swigregister(itkDivideImageFilterICF3ICF3ICF3)
itkDivideImageFilterICF3ICF3ICF3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__
itkDivideImageFilterICF3ICF3ICF3_cast = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast

class itkDivideImageFilterICF3IF3ICF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    r"""Proxy of C++ itkDivideImageFilterICF3IF3ICF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3IF3ICF3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3IF3ICF3

        Create a new object of the class itkDivideImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterICF3IF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterICF3IF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3IF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterICF3IF3ICF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_swigregister(itkDivideImageFilterICF3IF3ICF3)
itkDivideImageFilterICF3IF3ICF3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__
itkDivideImageFilterICF3IF3ICF3_cast = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast

class itkDivideImageFilterID2ID2ID2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""Proxy of C++ itkDivideImageFilterID2ID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID2ID2ID2

        Create a new object of the class itkDivideImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterID2ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterID2ID2ID2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_swigregister(itkDivideImageFilterID2ID2ID2)
itkDivideImageFilterID2ID2ID2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2___New_orig__
itkDivideImageFilterID2ID2ID2_cast = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_cast

class itkDivideImageFilterID3ID3ID3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""Proxy of C++ itkDivideImageFilterID3ID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID3ID3ID3

        Create a new object of the class itkDivideImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterID3ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterID3ID3ID3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_swigregister(itkDivideImageFilterID3ID3ID3)
itkDivideImageFilterID3ID3ID3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3___New_orig__
itkDivideImageFilterID3ID3ID3_cast = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_cast

class itkDivideImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""Proxy of C++ itkDivideImageFilterIF2IF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF2IF2IF2

        Create a new object of the class itkDivideImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIF2IF2IF2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_swigregister(itkDivideImageFilterIF2IF2IF2)
itkDivideImageFilterIF2IF2IF2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__
itkDivideImageFilterIF2IF2IF2_cast = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast

class itkDivideImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""Proxy of C++ itkDivideImageFilterIF3IF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF3IF3IF3

        Create a new object of the class itkDivideImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIF3IF3IF3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_swigregister(itkDivideImageFilterIF3IF3IF3)
itkDivideImageFilterIF3IF3IF3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__
itkDivideImageFilterIF3IF3IF3_cast = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast

class itkDivideImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""Proxy of C++ itkDivideImageFilterISS2ISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS2ISS2ISS2

        Create a new object of the class itkDivideImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterISS2ISS2ISS2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_swigregister(itkDivideImageFilterISS2ISS2ISS2)
itkDivideImageFilterISS2ISS2ISS2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2___New_orig__
itkDivideImageFilterISS2ISS2ISS2_cast = _itkDivideImageFilterPython.itkDivideImageFilterISS2ISS2ISS2_cast

class itkDivideImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""Proxy of C++ itkDivideImageFilterISS3ISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterISS3ISS3ISS3

        Create a new object of the class itkDivideImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterISS3ISS3ISS3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_swigregister(itkDivideImageFilterISS3ISS3ISS3)
itkDivideImageFilterISS3ISS3ISS3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3___New_orig__
itkDivideImageFilterISS3ISS3ISS3_cast = _itkDivideImageFilterPython.itkDivideImageFilterISS3ISS3ISS3_cast

class itkDivideImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""Proxy of C++ itkDivideImageFilterIUC2IUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC2IUC2IUC2

        Create a new object of the class itkDivideImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUC2IUC2IUC2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_swigregister(itkDivideImageFilterIUC2IUC2IUC2)
itkDivideImageFilterIUC2IUC2IUC2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__
itkDivideImageFilterIUC2IUC2IUC2_cast = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast

class itkDivideImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""Proxy of C++ itkDivideImageFilterIUC3IUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC3IUC3IUC3

        Create a new object of the class itkDivideImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUC3IUC3IUC3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_swigregister(itkDivideImageFilterIUC3IUC3IUC3)
itkDivideImageFilterIUC3IUC3IUC3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__
itkDivideImageFilterIUC3IUC3IUC3_cast = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast

class itkDivideImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""Proxy of C++ itkDivideImageFilterIUS2IUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS2IUS2IUS2

        Create a new object of the class itkDivideImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUS2IUS2IUS2 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_swigregister(itkDivideImageFilterIUS2IUS2IUS2)
itkDivideImageFilterIUS2IUS2IUS2___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__
itkDivideImageFilterIUS2IUS2IUS2_cast = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast

class itkDivideImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""Proxy of C++ itkDivideImageFilterIUS3IUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Clone)
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_IntConvertibleToInput2Check
    
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Input1Input2OutputDivisionOperatorsCheck
    
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS3IUS3IUS3

        Create a new object of the class itkDivideImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDivideImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDivideImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDivideImageFilterIUS3IUS3IUS3 in _itkDivideImageFilterPython:
_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_swigregister(itkDivideImageFilterIUS3IUS3IUS3)
itkDivideImageFilterIUS3IUS3IUS3___New_orig__ = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__
itkDivideImageFilterIUS3IUS3IUS3_cast = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def divide_image_filter(*args, **kwargs):
    """Procedural interface for DivideImageFilter"""
    import itk
    instance = itk.DivideImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def divide_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DivideImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DivideImageFilter.values()[0]
    else:
        filter_object = itk.DivideImageFilter

    divide_image_filter.__doc__ = filter_object.__doc__
    divide_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    divide_image_filter.__doc__ += "Available Keyword Arguments:\n"
    divide_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



