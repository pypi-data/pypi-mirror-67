# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAdaptiveHistogramEqualizationImageFilterPython
else:
    import _itkAdaptiveHistogramEqualizationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAdaptiveHistogramEqualizationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAdaptiveHistogramEqualizationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkImagePython
import itkPointPython
import itkFixedArrayPython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkRGBAPixelPython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkNeighborhoodPython
import itkBoxImageFilterPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkAdaptiveHistogramEqualizationImageFilterID3_New():
  return itkAdaptiveHistogramEqualizationImageFilterID3.New()


def itkAdaptiveHistogramEqualizationImageFilterID2_New():
  return itkAdaptiveHistogramEqualizationImageFilterID2.New()


def itkAdaptiveHistogramEqualizationImageFilterIF3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF3.New()


def itkAdaptiveHistogramEqualizationImageFilterIF2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF2.New()


def itkAdaptiveHistogramEqualizationImageFilterIUS3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS3.New()


def itkAdaptiveHistogramEqualizationImageFilterIUS2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS2.New()


def itkAdaptiveHistogramEqualizationImageFilterIUC3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC3.New()


def itkAdaptiveHistogramEqualizationImageFilterIUC2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC2.New()


def itkAdaptiveHistogramEqualizationImageFilterISS3_New():
  return itkAdaptiveHistogramEqualizationImageFilterISS3.New()


def itkAdaptiveHistogramEqualizationImageFilterISS2_New():
  return itkAdaptiveHistogramEqualizationImageFilterISS2.New()


def itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New()


def itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_New():
  return itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New()


def itkMovingHistogramImageFilterBaseID3ID3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New()


def itkMovingHistogramImageFilterBaseID2ID2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New()


def itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New()


def itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_New():
  return itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New()


def itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_New():
  return itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New()


def itkKernelImageFilterID3ID3Neighborhood_New():
  return itkKernelImageFilterID3ID3Neighborhood.New()


def itkKernelImageFilterID2ID2Neighborhood_New():
  return itkKernelImageFilterID2ID2Neighborhood.New()


def itkKernelImageFilterIF3IF3Neighborhood_New():
  return itkKernelImageFilterIF3IF3Neighborhood.New()


def itkKernelImageFilterIF2IF2Neighborhood_New():
  return itkKernelImageFilterIF2IF2Neighborhood.New()


def itkKernelImageFilterIUS3IUS3Neighborhood_New():
  return itkKernelImageFilterIUS3IUS3Neighborhood.New()


def itkKernelImageFilterIUS2IUS2Neighborhood_New():
  return itkKernelImageFilterIUS2IUS2Neighborhood.New()


def itkKernelImageFilterIUC3IUC3Neighborhood_New():
  return itkKernelImageFilterIUC3IUC3Neighborhood.New()


def itkKernelImageFilterIUC2IUC2Neighborhood_New():
  return itkKernelImageFilterIUC2IUC2Neighborhood.New()


def itkKernelImageFilterISS3ISS3Neighborhood_New():
  return itkKernelImageFilterISS3ISS3Neighborhood.New()


def itkKernelImageFilterISS2ISS2Neighborhood_New():
  return itkKernelImageFilterISS2ISS2Neighborhood.New()

class itkAdaptiveEqualizationHistogramDD(object):
    r"""Proxy of C++ itkAdaptiveEqualizationHistogramDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddPixel)
    RemovePixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemovePixel)
    GetValue = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_GetValue)
    AddBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_AddBoundary)
    RemoveBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_RemoveBoundary)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetBeta)
    SetKernelSize = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetKernelSize)
    SetMinimum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMinimum)
    SetMaximum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_SetMaximum)

    def __init__(self, *args):
        r"""
        __init__(itkAdaptiveEqualizationHistogramDD self) -> itkAdaptiveEqualizationHistogramDD
        __init__(itkAdaptiveEqualizationHistogramDD self, itkAdaptiveEqualizationHistogramDD arg0) -> itkAdaptiveEqualizationHistogramDD
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramDD(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramDD

# Register itkAdaptiveEqualizationHistogramDD in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramDD_swigregister(itkAdaptiveEqualizationHistogramDD)

class itkAdaptiveEqualizationHistogramFF(object):
    r"""Proxy of C++ itkAdaptiveEqualizationHistogramFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddPixel)
    RemovePixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemovePixel)
    GetValue = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_GetValue)
    AddBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_AddBoundary)
    RemoveBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_RemoveBoundary)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetBeta)
    SetKernelSize = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetKernelSize)
    SetMinimum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMinimum)
    SetMaximum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_SetMaximum)

    def __init__(self, *args):
        r"""
        __init__(itkAdaptiveEqualizationHistogramFF self) -> itkAdaptiveEqualizationHistogramFF
        __init__(itkAdaptiveEqualizationHistogramFF self, itkAdaptiveEqualizationHistogramFF arg0) -> itkAdaptiveEqualizationHistogramFF
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramFF(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramFF

# Register itkAdaptiveEqualizationHistogramFF in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramFF_swigregister(itkAdaptiveEqualizationHistogramFF)

class itkAdaptiveEqualizationHistogramSSSS(object):
    r"""Proxy of C++ itkAdaptiveEqualizationHistogramSSSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddPixel)
    RemovePixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemovePixel)
    GetValue = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_GetValue)
    AddBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_AddBoundary)
    RemoveBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_RemoveBoundary)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetBeta)
    SetKernelSize = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetKernelSize)
    SetMinimum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMinimum)
    SetMaximum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_SetMaximum)

    def __init__(self, *args):
        r"""
        __init__(itkAdaptiveEqualizationHistogramSSSS self) -> itkAdaptiveEqualizationHistogramSSSS
        __init__(itkAdaptiveEqualizationHistogramSSSS self, itkAdaptiveEqualizationHistogramSSSS arg0) -> itkAdaptiveEqualizationHistogramSSSS
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramSSSS(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramSSSS

# Register itkAdaptiveEqualizationHistogramSSSS in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramSSSS_swigregister(itkAdaptiveEqualizationHistogramSSSS)

class itkAdaptiveEqualizationHistogramUCUC(object):
    r"""Proxy of C++ itkAdaptiveEqualizationHistogramUCUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddPixel)
    RemovePixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemovePixel)
    GetValue = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_GetValue)
    AddBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_AddBoundary)
    RemoveBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_RemoveBoundary)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetBeta)
    SetKernelSize = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetKernelSize)
    SetMinimum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMinimum)
    SetMaximum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_SetMaximum)

    def __init__(self, *args):
        r"""
        __init__(itkAdaptiveEqualizationHistogramUCUC self) -> itkAdaptiveEqualizationHistogramUCUC
        __init__(itkAdaptiveEqualizationHistogramUCUC self, itkAdaptiveEqualizationHistogramUCUC arg0) -> itkAdaptiveEqualizationHistogramUCUC
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramUCUC(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramUCUC

# Register itkAdaptiveEqualizationHistogramUCUC in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUCUC_swigregister(itkAdaptiveEqualizationHistogramUCUC)

class itkAdaptiveEqualizationHistogramUSUS(object):
    r"""Proxy of C++ itkAdaptiveEqualizationHistogramUSUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AddPixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddPixel)
    RemovePixel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemovePixel)
    GetValue = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_GetValue)
    AddBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_AddBoundary)
    RemoveBoundary = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_RemoveBoundary)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetBeta)
    SetKernelSize = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetKernelSize)
    SetMinimum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMinimum)
    SetMaximum = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_SetMaximum)

    def __init__(self, *args):
        r"""
        __init__(itkAdaptiveEqualizationHistogramUSUS self) -> itkAdaptiveEqualizationHistogramUSUS
        __init__(itkAdaptiveEqualizationHistogramUSUS self, itkAdaptiveEqualizationHistogramUSUS arg0) -> itkAdaptiveEqualizationHistogramUSUS
        """
        _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_swiginit(self, _itkAdaptiveHistogramEqualizationImageFilterPython.new_itkAdaptiveEqualizationHistogramUSUS(*args))
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveEqualizationHistogramUSUS

# Register itkAdaptiveEqualizationHistogramUSUS in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveEqualizationHistogramUSUS_swigregister(itkAdaptiveEqualizationHistogramUSUS)

class itkKernelImageFilterID2ID2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    r"""Proxy of C++ itkKernelImageFilterID2ID2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterID2ID2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID2ID2Neighborhood

        Create a new object of the class itkKernelImageFilterID2ID2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID2ID2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID2ID2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID2ID2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterID2ID2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_swigregister(itkKernelImageFilterID2ID2Neighborhood)
itkKernelImageFilterID2ID2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood___New_orig__
itkKernelImageFilterID2ID2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID2ID2Neighborhood_cast

class itkKernelImageFilterID3ID3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    r"""Proxy of C++ itkKernelImageFilterID3ID3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterID3ID3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID3ID3Neighborhood

        Create a new object of the class itkKernelImageFilterID3ID3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID3ID3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID3ID3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID3ID3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterID3ID3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_swigregister(itkKernelImageFilterID3ID3Neighborhood)
itkKernelImageFilterID3ID3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood___New_orig__
itkKernelImageFilterID3ID3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterID3ID3Neighborhood_cast

class itkKernelImageFilterIF2IF2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    r"""Proxy of C++ itkKernelImageFilterIF2IF2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIF2IF2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF2IF2Neighborhood

        Create a new object of the class itkKernelImageFilterIF2IF2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF2IF2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF2IF2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF2IF2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIF2IF2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_swigregister(itkKernelImageFilterIF2IF2Neighborhood)
itkKernelImageFilterIF2IF2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood___New_orig__
itkKernelImageFilterIF2IF2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF2IF2Neighborhood_cast

class itkKernelImageFilterIF3IF3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    r"""Proxy of C++ itkKernelImageFilterIF3IF3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIF3IF3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF3IF3Neighborhood

        Create a new object of the class itkKernelImageFilterIF3IF3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF3IF3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF3IF3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF3IF3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIF3IF3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_swigregister(itkKernelImageFilterIF3IF3Neighborhood)
itkKernelImageFilterIF3IF3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood___New_orig__
itkKernelImageFilterIF3IF3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIF3IF3Neighborhood_cast

class itkKernelImageFilterISS2ISS2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    r"""Proxy of C++ itkKernelImageFilterISS2ISS2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterISS2ISS2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS2ISS2Neighborhood

        Create a new object of the class itkKernelImageFilterISS2ISS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS2ISS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS2ISS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS2ISS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterISS2ISS2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_swigregister(itkKernelImageFilterISS2ISS2Neighborhood)
itkKernelImageFilterISS2ISS2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood___New_orig__
itkKernelImageFilterISS2ISS2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS2ISS2Neighborhood_cast

class itkKernelImageFilterISS3ISS3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    r"""Proxy of C++ itkKernelImageFilterISS3ISS3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterISS3ISS3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS3ISS3Neighborhood

        Create a new object of the class itkKernelImageFilterISS3ISS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS3ISS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS3ISS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS3ISS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterISS3ISS3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_swigregister(itkKernelImageFilterISS3ISS3Neighborhood)
itkKernelImageFilterISS3ISS3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood___New_orig__
itkKernelImageFilterISS3ISS3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterISS3ISS3Neighborhood_cast

class itkKernelImageFilterIUC2IUC2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    r"""Proxy of C++ itkKernelImageFilterIUC2IUC2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUC2IUC2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC2IUC2Neighborhood

        Create a new object of the class itkKernelImageFilterIUC2IUC2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC2IUC2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC2IUC2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC2IUC2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUC2IUC2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_swigregister(itkKernelImageFilterIUC2IUC2Neighborhood)
itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood___New_orig__
itkKernelImageFilterIUC2IUC2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC2IUC2Neighborhood_cast

class itkKernelImageFilterIUC3IUC3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    r"""Proxy of C++ itkKernelImageFilterIUC3IUC3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUC3IUC3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC3IUC3Neighborhood

        Create a new object of the class itkKernelImageFilterIUC3IUC3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC3IUC3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC3IUC3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC3IUC3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUC3IUC3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_swigregister(itkKernelImageFilterIUC3IUC3Neighborhood)
itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood___New_orig__
itkKernelImageFilterIUC3IUC3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUC3IUC3Neighborhood_cast

class itkKernelImageFilterIUS2IUS2Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    r"""Proxy of C++ itkKernelImageFilterIUS2IUS2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUS2IUS2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS2IUS2Neighborhood

        Create a new object of the class itkKernelImageFilterIUS2IUS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS2IUS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS2IUS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS2IUS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUS2IUS2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_swigregister(itkKernelImageFilterIUS2IUS2Neighborhood)
itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood___New_orig__
itkKernelImageFilterIUS2IUS2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS2IUS2Neighborhood_cast

class itkKernelImageFilterIUS3IUS3Neighborhood(itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    r"""Proxy of C++ itkKernelImageFilterIUS3IUS3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_Clone)
    SetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetKernel)
    GetKernel = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_GetKernel)
    SetRadius = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_SetRadius)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkKernelImageFilterIUS3IUS3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS3IUS3Neighborhood

        Create a new object of the class itkKernelImageFilterIUS3IUS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS3IUS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS3IUS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS3IUS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkKernelImageFilterIUS3IUS3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_swigregister(itkKernelImageFilterIUS3IUS3Neighborhood)
itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood___New_orig__
itkKernelImageFilterIUS3IUS3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkKernelImageFilterIUS3IUS3Neighborhood_cast

class itkMovingHistogramImageFilterBaseID2ID2Neighborhood(itkKernelImageFilterID2ID2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseID2ID2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseID2ID2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID2ID2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseID2ID2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID2ID2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID2ID2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseID2ID2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseID2ID2Neighborhood)
itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID2ID2Neighborhood_cast

class itkMovingHistogramImageFilterBaseID3ID3Neighborhood(itkKernelImageFilterID3ID3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseID3ID3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseID3ID3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID3ID3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseID3ID3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID3ID3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID3ID3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseID3ID3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseID3ID3Neighborhood)
itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseID3ID3Neighborhood_cast

class itkMovingHistogramImageFilterBaseIF2IF2Neighborhood(itkKernelImageFilterIF2IF2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIF2IF2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIF2IF2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF2IF2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIF2IF2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF2IF2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIF2IF2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood)
itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF2IF2Neighborhood_cast

class itkMovingHistogramImageFilterBaseIF3IF3Neighborhood(itkKernelImageFilterIF3IF3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIF3IF3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIF3IF3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF3IF3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIF3IF3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF3IF3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIF3IF3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood)
itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIF3IF3Neighborhood_cast

class itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood(itkKernelImageFilterISS2ISS2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood)
itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood_cast

class itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood(itkKernelImageFilterISS3ISS3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood)
itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood_cast

class itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood(itkKernelImageFilterIUC2IUC2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood)
itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood_cast

class itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood(itkKernelImageFilterIUC3IUC3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood)
itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood_cast

class itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood(itkKernelImageFilterIUS2IUS2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood)
itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood_cast

class itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood(itkKernelImageFilterIUS3IUS3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_Clone)
    GetPixelsPerTranslation = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_GetPixelsPerTranslation)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_swigregister(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood)
itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood___New_orig__
itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood_cast

class itkMovingHistogramImageFilterID2ID2NeighborhoodAHE(itkMovingHistogramImageFilterBaseID2ID2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterID2ID2NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterID2ID2NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterID2ID2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterID2ID2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterID2ID2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterID2ID2NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE)
itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID2ID2NeighborhoodAHE_cast

class itkMovingHistogramImageFilterID3ID3NeighborhoodAHE(itkMovingHistogramImageFilterBaseID3ID3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterID3ID3NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterID3ID3NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterID3ID3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterID3ID3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterID3ID3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterID3ID3NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE)
itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterID3ID3NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIF2IF2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE)
itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIF3IF3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE)
itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE_cast

class itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE(itkMovingHistogramImageFilterBaseISS2ISS2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE)
itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE_cast

class itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE(itkMovingHistogramImageFilterBaseISS3ISS3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE)
itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUC2IUC2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE)
itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUC3IUC3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE)
itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUS2IUS2Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE)
itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE_cast

class itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE(itkMovingHistogramImageFilterBaseIUS3IUS3Neighborhood):
    r"""Proxy of C++ itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_Clone)
    ConfigureHistogram = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_ConfigureHistogram)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE

        Create a new object of the class itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_swigregister(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE)
itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE___New_orig__
itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE_cast

class itkAdaptiveHistogramEqualizationImageFilterID2(itkMovingHistogramImageFilterID2ID2NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID2
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterID2 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_swigregister(itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__
itkAdaptiveHistogramEqualizationImageFilterID2_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast

class itkAdaptiveHistogramEqualizationImageFilterID3(itkMovingHistogramImageFilterID3ID3NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID3
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterID3 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_swigregister(itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__
itkAdaptiveHistogramEqualizationImageFilterID3_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast

class itkAdaptiveHistogramEqualizationImageFilterIF2(itkMovingHistogramImageFilterIF2IF2NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF2
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIF2 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIF2_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast

class itkAdaptiveHistogramEqualizationImageFilterIF3(itkMovingHistogramImageFilterIF3IF3NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF3
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIF3 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIF3_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast

class itkAdaptiveHistogramEqualizationImageFilterISS2(itkMovingHistogramImageFilterISS2ISS2NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterISS2
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterISS2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterISS2 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_swigregister(itkAdaptiveHistogramEqualizationImageFilterISS2)
itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2___New_orig__
itkAdaptiveHistogramEqualizationImageFilterISS2_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS2_cast

class itkAdaptiveHistogramEqualizationImageFilterISS3(itkMovingHistogramImageFilterISS3ISS3NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterISS3
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterISS3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterISS3 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_swigregister(itkAdaptiveHistogramEqualizationImageFilterISS3)
itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3___New_orig__
itkAdaptiveHistogramEqualizationImageFilterISS3_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterISS3_cast

class itkAdaptiveHistogramEqualizationImageFilterIUC2(itkMovingHistogramImageFilterIUC2IUC2NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC2
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIUC2 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIUC2_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast

class itkAdaptiveHistogramEqualizationImageFilterIUC3(itkMovingHistogramImageFilterIUC3IUC3NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC3
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIUC3 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIUC3_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast

class itkAdaptiveHistogramEqualizationImageFilterIUS2(itkMovingHistogramImageFilterIUS2IUS2NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS2
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS2

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIUS2 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIUS2_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast

class itkAdaptiveHistogramEqualizationImageFilterIUS3(itkMovingHistogramImageFilterIUS3IUS3NeighborhoodAHE):
    r"""Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetAlpha)
    SetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetBeta)
    GetBeta = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetBeta)
    SetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetUseLookupTable)
    GetUseLookupTable = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetUseLookupTable)
    UseLookupTableOn = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOn)
    UseLookupTableOff = _swig_new_instance_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOff)
    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS3
    cast = _swig_new_static_method(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS3

        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdaptiveHistogramEqualizationImageFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAdaptiveHistogramEqualizationImageFilterIUS3 in _itkAdaptiveHistogramEqualizationImageFilterPython:
_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__ = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__
itkAdaptiveHistogramEqualizationImageFilterIUS3_cast = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def kernel_image_filter(*args, **kwargs):
    """Procedural interface for KernelImageFilter"""
    import itk
    instance = itk.KernelImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def kernel_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.KernelImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.KernelImageFilter.values()[0]
    else:
        filter_object = itk.KernelImageFilter

    kernel_image_filter.__doc__ = filter_object.__doc__
    kernel_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    kernel_image_filter.__doc__ += "Available Keyword Arguments:\n"
    kernel_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilter"""
    import itk
    instance = itk.MovingHistogramImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilter.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilter

    moving_histogram_image_filter.__doc__ = filter_object.__doc__
    moving_histogram_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter.__doc__ += "Available Keyword Arguments:\n"
    moving_histogram_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def adaptive_histogram_equalization_image_filter(*args, **kwargs):
    """Procedural interface for AdaptiveHistogramEqualizationImageFilter"""
    import itk
    instance = itk.AdaptiveHistogramEqualizationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def adaptive_histogram_equalization_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AdaptiveHistogramEqualizationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AdaptiveHistogramEqualizationImageFilter.values()[0]
    else:
        filter_object = itk.AdaptiveHistogramEqualizationImageFilter

    adaptive_histogram_equalization_image_filter.__doc__ = filter_object.__doc__
    adaptive_histogram_equalization_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    adaptive_histogram_equalization_image_filter.__doc__ += "Available Keyword Arguments:\n"
    adaptive_histogram_equalization_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter_base(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilterBase"""
    import itk
    instance = itk.MovingHistogramImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilterBase.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilterBase

    moving_histogram_image_filter_base.__doc__ = filter_object.__doc__
    moving_histogram_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter_base.__doc__ += "Available Keyword Arguments:\n"
    moving_histogram_image_filter_base.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



