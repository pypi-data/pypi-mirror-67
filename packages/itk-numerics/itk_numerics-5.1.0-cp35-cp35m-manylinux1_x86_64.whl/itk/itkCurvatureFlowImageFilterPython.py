# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCurvatureFlowImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCurvatureFlowImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCurvatureFlowImageFilterPython
            return _itkCurvatureFlowImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCurvatureFlowImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCurvatureFlowImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCurvatureFlowImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkDenseFiniteDifferenceImageFilterPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkFiniteDifferenceFunctionPython

def itkCurvatureFlowImageFilterID3ID3_New():
  return itkCurvatureFlowImageFilterID3ID3.New()


def itkCurvatureFlowImageFilterID2ID2_New():
  return itkCurvatureFlowImageFilterID2ID2.New()


def itkCurvatureFlowImageFilterIF3IF3_New():
  return itkCurvatureFlowImageFilterIF3IF3.New()


def itkCurvatureFlowImageFilterIF2IF2_New():
  return itkCurvatureFlowImageFilterIF2IF2.New()

class itkCurvatureFlowImageFilterID2ID2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    """


    Denoise an image using curvature driven flow.

    CurvatureFlowImageFilter implements a curvature driven image denoising
    algorithm. Iso- brightness contours in the grayscale input image are
    viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = \\kappa |\\nabla I| \\] where $ \\kappa $ is the
    curvature.

    The advantage of this approach is that sharp boundaries are preserved
    with smoothing occurring only within a region. However, it should be
    noted that continuous application of this scheme will result in the
    eventual removal of all information as each contour shrinks to zero
    and disappear.

    Note that unlike level set segmentation algorithms, the image to be
    denoised is already the level set and can be set directly as the input
    using the SetInput() method.

    This filter has two parameters: the number of update iterations to be
    performed and the timestep between each update.

    The timestep should be "small enough" to ensure numerical stability.
    Stability is guarantee when the timestep meets the CFL (Courant-
    Friedrichs-Levy) condition. Broadly speaking, this condition ensures
    that each contour does not move more than one grid position at each
    timestep. In the literature, the timestep is typically user specified
    and have to manually tuned to the application.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a CurvatureFlowFunction object.
    A zero flux Neumann boundary condition when computing derivatives near
    the data boundary.

    This filter may be streamed. To support streaming this filter produces
    a padded output which takes into account edge effects. The size of the
    padding is m_NumberOfIterations on each edge. Users of this filter
    should only make use of the center valid central region.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a floating point type. This filter works for any
    dimensional images.  Reference: "Level Set Methods and Fast Marching
    Methods", J.A. Sethian, Cambridge Press, Chapter 16, Second edition,
    1999.

    See:  DenseFiniteDifferenceImageFilter

    See:  CurvatureFlowFunction

    See:   MinMaxCurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter  Input/Output
    Restrictions: TInputImage and TOutputImage must have the same
    dimension. TOutputImage's pixel type must be a real number type.

    C++ includes: itkCurvatureFlowImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCurvatureFlowImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCurvatureFlowImageFilterID2ID2_Pointer":
        """Clone(itkCurvatureFlowImageFilterID2ID2 self) -> itkCurvatureFlowImageFilterID2ID2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_Clone(self)


    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkCurvatureFlowImageFilterID2ID2 self, double const _arg)

        Set the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """
        GetTimeStep(itkCurvatureFlowImageFilterID2ID2 self) -> double

        Get the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetTimeStep(self)

    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDoubleAdditiveOperatorsCheck
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID2ID2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID2ID2

        Create a new object of the class itkCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterID2ID2.Clone = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_Clone, None, itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_SetTimeStep, None, itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetTimeStep, None, itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_swigregister
itkCurvatureFlowImageFilterID2ID2_swigregister(itkCurvatureFlowImageFilterID2ID2)

def itkCurvatureFlowImageFilterID2ID2___New_orig__() -> "itkCurvatureFlowImageFilterID2ID2_Pointer":
    """itkCurvatureFlowImageFilterID2ID2___New_orig__() -> itkCurvatureFlowImageFilterID2ID2_Pointer"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2___New_orig__()

def itkCurvatureFlowImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterID2ID2 *":
    """itkCurvatureFlowImageFilterID2ID2_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID2ID2"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_cast(obj)

class itkCurvatureFlowImageFilterID3ID3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    """


    Denoise an image using curvature driven flow.

    CurvatureFlowImageFilter implements a curvature driven image denoising
    algorithm. Iso- brightness contours in the grayscale input image are
    viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = \\kappa |\\nabla I| \\] where $ \\kappa $ is the
    curvature.

    The advantage of this approach is that sharp boundaries are preserved
    with smoothing occurring only within a region. However, it should be
    noted that continuous application of this scheme will result in the
    eventual removal of all information as each contour shrinks to zero
    and disappear.

    Note that unlike level set segmentation algorithms, the image to be
    denoised is already the level set and can be set directly as the input
    using the SetInput() method.

    This filter has two parameters: the number of update iterations to be
    performed and the timestep between each update.

    The timestep should be "small enough" to ensure numerical stability.
    Stability is guarantee when the timestep meets the CFL (Courant-
    Friedrichs-Levy) condition. Broadly speaking, this condition ensures
    that each contour does not move more than one grid position at each
    timestep. In the literature, the timestep is typically user specified
    and have to manually tuned to the application.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a CurvatureFlowFunction object.
    A zero flux Neumann boundary condition when computing derivatives near
    the data boundary.

    This filter may be streamed. To support streaming this filter produces
    a padded output which takes into account edge effects. The size of the
    padding is m_NumberOfIterations on each edge. Users of this filter
    should only make use of the center valid central region.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a floating point type. This filter works for any
    dimensional images.  Reference: "Level Set Methods and Fast Marching
    Methods", J.A. Sethian, Cambridge Press, Chapter 16, Second edition,
    1999.

    See:  DenseFiniteDifferenceImageFilter

    See:  CurvatureFlowFunction

    See:   MinMaxCurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter  Input/Output
    Restrictions: TInputImage and TOutputImage must have the same
    dimension. TOutputImage's pixel type must be a real number type.

    C++ includes: itkCurvatureFlowImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCurvatureFlowImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCurvatureFlowImageFilterID3ID3_Pointer":
        """Clone(itkCurvatureFlowImageFilterID3ID3 self) -> itkCurvatureFlowImageFilterID3ID3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_Clone(self)


    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkCurvatureFlowImageFilterID3ID3 self, double const _arg)

        Set the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """
        GetTimeStep(itkCurvatureFlowImageFilterID3ID3 self) -> double

        Get the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetTimeStep(self)

    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDoubleAdditiveOperatorsCheck
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID3ID3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID3ID3

        Create a new object of the class itkCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterID3ID3.Clone = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_Clone, None, itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_SetTimeStep, None, itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetTimeStep, None, itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_swigregister
itkCurvatureFlowImageFilterID3ID3_swigregister(itkCurvatureFlowImageFilterID3ID3)

def itkCurvatureFlowImageFilterID3ID3___New_orig__() -> "itkCurvatureFlowImageFilterID3ID3_Pointer":
    """itkCurvatureFlowImageFilterID3ID3___New_orig__() -> itkCurvatureFlowImageFilterID3ID3_Pointer"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3___New_orig__()

def itkCurvatureFlowImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterID3ID3 *":
    """itkCurvatureFlowImageFilterID3ID3_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID3ID3"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_cast(obj)

class itkCurvatureFlowImageFilterIF2IF2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    """


    Denoise an image using curvature driven flow.

    CurvatureFlowImageFilter implements a curvature driven image denoising
    algorithm. Iso- brightness contours in the grayscale input image are
    viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = \\kappa |\\nabla I| \\] where $ \\kappa $ is the
    curvature.

    The advantage of this approach is that sharp boundaries are preserved
    with smoothing occurring only within a region. However, it should be
    noted that continuous application of this scheme will result in the
    eventual removal of all information as each contour shrinks to zero
    and disappear.

    Note that unlike level set segmentation algorithms, the image to be
    denoised is already the level set and can be set directly as the input
    using the SetInput() method.

    This filter has two parameters: the number of update iterations to be
    performed and the timestep between each update.

    The timestep should be "small enough" to ensure numerical stability.
    Stability is guarantee when the timestep meets the CFL (Courant-
    Friedrichs-Levy) condition. Broadly speaking, this condition ensures
    that each contour does not move more than one grid position at each
    timestep. In the literature, the timestep is typically user specified
    and have to manually tuned to the application.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a CurvatureFlowFunction object.
    A zero flux Neumann boundary condition when computing derivatives near
    the data boundary.

    This filter may be streamed. To support streaming this filter produces
    a padded output which takes into account edge effects. The size of the
    padding is m_NumberOfIterations on each edge. Users of this filter
    should only make use of the center valid central region.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a floating point type. This filter works for any
    dimensional images.  Reference: "Level Set Methods and Fast Marching
    Methods", J.A. Sethian, Cambridge Press, Chapter 16, Second edition,
    1999.

    See:  DenseFiniteDifferenceImageFilter

    See:  CurvatureFlowFunction

    See:   MinMaxCurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter  Input/Output
    Restrictions: TInputImage and TOutputImage must have the same
    dimension. TOutputImage's pixel type must be a real number type.

    C++ includes: itkCurvatureFlowImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCurvatureFlowImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCurvatureFlowImageFilterIF2IF2_Pointer":
        """Clone(itkCurvatureFlowImageFilterIF2IF2 self) -> itkCurvatureFlowImageFilterIF2IF2_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_Clone(self)


    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkCurvatureFlowImageFilterIF2IF2 self, double const _arg)

        Set the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """
        GetTimeStep(itkCurvatureFlowImageFilterIF2IF2 self) -> double

        Get the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetTimeStep(self)

    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDoubleAdditiveOperatorsCheck
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF2IF2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF2IF2

        Create a new object of the class itkCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterIF2IF2.Clone = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_Clone, None, itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_SetTimeStep, None, itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetTimeStep, None, itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_swigregister
itkCurvatureFlowImageFilterIF2IF2_swigregister(itkCurvatureFlowImageFilterIF2IF2)

def itkCurvatureFlowImageFilterIF2IF2___New_orig__() -> "itkCurvatureFlowImageFilterIF2IF2_Pointer":
    """itkCurvatureFlowImageFilterIF2IF2___New_orig__() -> itkCurvatureFlowImageFilterIF2IF2_Pointer"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2___New_orig__()

def itkCurvatureFlowImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterIF2IF2 *":
    """itkCurvatureFlowImageFilterIF2IF2_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF2IF2"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_cast(obj)

class itkCurvatureFlowImageFilterIF3IF3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    """


    Denoise an image using curvature driven flow.

    CurvatureFlowImageFilter implements a curvature driven image denoising
    algorithm. Iso- brightness contours in the grayscale input image are
    viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = \\kappa |\\nabla I| \\] where $ \\kappa $ is the
    curvature.

    The advantage of this approach is that sharp boundaries are preserved
    with smoothing occurring only within a region. However, it should be
    noted that continuous application of this scheme will result in the
    eventual removal of all information as each contour shrinks to zero
    and disappear.

    Note that unlike level set segmentation algorithms, the image to be
    denoised is already the level set and can be set directly as the input
    using the SetInput() method.

    This filter has two parameters: the number of update iterations to be
    performed and the timestep between each update.

    The timestep should be "small enough" to ensure numerical stability.
    Stability is guarantee when the timestep meets the CFL (Courant-
    Friedrichs-Levy) condition. Broadly speaking, this condition ensures
    that each contour does not move more than one grid position at each
    timestep. In the literature, the timestep is typically user specified
    and have to manually tuned to the application.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a CurvatureFlowFunction object.
    A zero flux Neumann boundary condition when computing derivatives near
    the data boundary.

    This filter may be streamed. To support streaming this filter produces
    a padded output which takes into account edge effects. The size of the
    padding is m_NumberOfIterations on each edge. Users of this filter
    should only make use of the center valid central region.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a floating point type. This filter works for any
    dimensional images.  Reference: "Level Set Methods and Fast Marching
    Methods", J.A. Sethian, Cambridge Press, Chapter 16, Second edition,
    1999.

    See:  DenseFiniteDifferenceImageFilter

    See:  CurvatureFlowFunction

    See:   MinMaxCurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter  Input/Output
    Restrictions: TInputImage and TOutputImage must have the same
    dimension. TOutputImage's pixel type must be a real number type.

    C++ includes: itkCurvatureFlowImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCurvatureFlowImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCurvatureFlowImageFilterIF3IF3_Pointer":
        """Clone(itkCurvatureFlowImageFilterIF3IF3 self) -> itkCurvatureFlowImageFilterIF3IF3_Pointer"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_Clone(self)


    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkCurvatureFlowImageFilterIF3IF3 self, double const _arg)

        Set the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """
        GetTimeStep(itkCurvatureFlowImageFilterIF3IF3 self) -> double

        Get the timestep
        parameter. 
        """
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetTimeStep(self)

    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDoubleAdditiveOperatorsCheck
    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF3IF3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF3IF3

        Create a new object of the class itkCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCurvatureFlowImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterIF3IF3.Clone = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_Clone, None, itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_SetTimeStep, None, itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetTimeStep, None, itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_swigregister
itkCurvatureFlowImageFilterIF3IF3_swigregister(itkCurvatureFlowImageFilterIF3IF3)

def itkCurvatureFlowImageFilterIF3IF3___New_orig__() -> "itkCurvatureFlowImageFilterIF3IF3_Pointer":
    """itkCurvatureFlowImageFilterIF3IF3___New_orig__() -> itkCurvatureFlowImageFilterIF3IF3_Pointer"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3___New_orig__()

def itkCurvatureFlowImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkCurvatureFlowImageFilterIF3IF3 *":
    """itkCurvatureFlowImageFilterIF3IF3_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF3IF3"""
    return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def curvature_flow_image_filter(*args, **kwargs):
    """Procedural interface for CurvatureFlowImageFilter"""
    import itk
    instance = itk.CurvatureFlowImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def curvature_flow_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CurvatureFlowImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CurvatureFlowImageFilter.values()[0]
    else:
        filter_object = itk.CurvatureFlowImageFilter

    curvature_flow_image_filter.__doc__ = filter_object.__doc__
    curvature_flow_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    curvature_flow_image_filter.__doc__ += "Available Keyword Arguments:\n"
    curvature_flow_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



