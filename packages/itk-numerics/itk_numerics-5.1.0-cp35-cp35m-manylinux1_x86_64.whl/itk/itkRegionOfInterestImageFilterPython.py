# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRegionOfInterestImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRegionOfInterestImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRegionOfInterestImageFilterPython
            return _itkRegionOfInterestImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRegionOfInterestImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRegionOfInterestImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRegionOfInterestImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImageSourcePython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkRegionOfInterestImageFilterVID3VID3_New():
  return itkRegionOfInterestImageFilterVID3VID3.New()


def itkRegionOfInterestImageFilterVIF3VIF3_New():
  return itkRegionOfInterestImageFilterVIF3VIF3.New()


def itkRegionOfInterestImageFilterVIUS3VIUS3_New():
  return itkRegionOfInterestImageFilterVIUS3VIUS3.New()


def itkRegionOfInterestImageFilterVIUC3VIUC3_New():
  return itkRegionOfInterestImageFilterVIUC3VIUC3.New()


def itkRegionOfInterestImageFilterVISS3VISS3_New():
  return itkRegionOfInterestImageFilterVISS3VISS3.New()


def itkRegionOfInterestImageFilterVID2VID2_New():
  return itkRegionOfInterestImageFilterVID2VID2.New()


def itkRegionOfInterestImageFilterVIF2VIF2_New():
  return itkRegionOfInterestImageFilterVIF2VIF2.New()


def itkRegionOfInterestImageFilterVIUS2VIUS2_New():
  return itkRegionOfInterestImageFilterVIUS2VIUS2.New()


def itkRegionOfInterestImageFilterVIUC2VIUC2_New():
  return itkRegionOfInterestImageFilterVIUC2VIUC2.New()


def itkRegionOfInterestImageFilterVISS2VISS2_New():
  return itkRegionOfInterestImageFilterVISS2VISS2.New()


def itkRegionOfInterestImageFilterID3ID3_New():
  return itkRegionOfInterestImageFilterID3ID3.New()


def itkRegionOfInterestImageFilterID2ID2_New():
  return itkRegionOfInterestImageFilterID2ID2.New()


def itkRegionOfInterestImageFilterIF3IF3_New():
  return itkRegionOfInterestImageFilterIF3IF3.New()


def itkRegionOfInterestImageFilterIF2IF2_New():
  return itkRegionOfInterestImageFilterIF2IF2.New()


def itkRegionOfInterestImageFilterIUS3IUS3_New():
  return itkRegionOfInterestImageFilterIUS3IUS3.New()


def itkRegionOfInterestImageFilterIUS2IUS2_New():
  return itkRegionOfInterestImageFilterIUS2IUS2.New()


def itkRegionOfInterestImageFilterIUC3IUC3_New():
  return itkRegionOfInterestImageFilterIUC3IUC3.New()


def itkRegionOfInterestImageFilterIUC2IUC2_New():
  return itkRegionOfInterestImageFilterIUC2IUC2.New()


def itkRegionOfInterestImageFilterISS3ISS3_New():
  return itkRegionOfInterestImageFilterISS3ISS3.New()


def itkRegionOfInterestImageFilterISS2ISS2_New():
  return itkRegionOfInterestImageFilterISS2ISS2.New()

class itkRegionOfInterestImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterID2ID2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterID2ID2_Pointer":
        """Clone(itkRegionOfInterestImageFilterID2ID2 self) -> itkRegionOfInterestImageFilterID2ID2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterID2ID2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterID2ID2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterID2ID2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterID2ID2

        Create a new object of the class itkRegionOfInterestImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterID2ID2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_Clone, None, itkRegionOfInterestImageFilterID2ID2)
itkRegionOfInterestImageFilterID2ID2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterID2ID2)
itkRegionOfInterestImageFilterID2ID2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterID2ID2)
itkRegionOfInterestImageFilterID2ID2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_swigregister
itkRegionOfInterestImageFilterID2ID2_swigregister(itkRegionOfInterestImageFilterID2ID2)

def itkRegionOfInterestImageFilterID2ID2___New_orig__() -> "itkRegionOfInterestImageFilterID2ID2_Pointer":
    """itkRegionOfInterestImageFilterID2ID2___New_orig__() -> itkRegionOfInterestImageFilterID2ID2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2___New_orig__()

def itkRegionOfInterestImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterID2ID2 *":
    """itkRegionOfInterestImageFilterID2ID2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterID2ID2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID2ID2_cast(obj)

class itkRegionOfInterestImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterID3ID3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterID3ID3_Pointer":
        """Clone(itkRegionOfInterestImageFilterID3ID3 self) -> itkRegionOfInterestImageFilterID3ID3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterID3ID3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterID3ID3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterID3ID3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterID3ID3

        Create a new object of the class itkRegionOfInterestImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterID3ID3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_Clone, None, itkRegionOfInterestImageFilterID3ID3)
itkRegionOfInterestImageFilterID3ID3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterID3ID3)
itkRegionOfInterestImageFilterID3ID3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterID3ID3)
itkRegionOfInterestImageFilterID3ID3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_swigregister
itkRegionOfInterestImageFilterID3ID3_swigregister(itkRegionOfInterestImageFilterID3ID3)

def itkRegionOfInterestImageFilterID3ID3___New_orig__() -> "itkRegionOfInterestImageFilterID3ID3_Pointer":
    """itkRegionOfInterestImageFilterID3ID3___New_orig__() -> itkRegionOfInterestImageFilterID3ID3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3___New_orig__()

def itkRegionOfInterestImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterID3ID3 *":
    """itkRegionOfInterestImageFilterID3ID3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterID3ID3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterID3ID3_cast(obj)

class itkRegionOfInterestImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIF2IF2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIF2IF2_Pointer":
        """Clone(itkRegionOfInterestImageFilterIF2IF2 self) -> itkRegionOfInterestImageFilterIF2IF2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIF2IF2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIF2IF2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIF2IF2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIF2IF2

        Create a new object of the class itkRegionOfInterestImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIF2IF2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_Clone, None, itkRegionOfInterestImageFilterIF2IF2)
itkRegionOfInterestImageFilterIF2IF2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIF2IF2)
itkRegionOfInterestImageFilterIF2IF2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIF2IF2)
itkRegionOfInterestImageFilterIF2IF2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_swigregister
itkRegionOfInterestImageFilterIF2IF2_swigregister(itkRegionOfInterestImageFilterIF2IF2)

def itkRegionOfInterestImageFilterIF2IF2___New_orig__() -> "itkRegionOfInterestImageFilterIF2IF2_Pointer":
    """itkRegionOfInterestImageFilterIF2IF2___New_orig__() -> itkRegionOfInterestImageFilterIF2IF2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2___New_orig__()

def itkRegionOfInterestImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIF2IF2 *":
    """itkRegionOfInterestImageFilterIF2IF2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIF2IF2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF2IF2_cast(obj)

class itkRegionOfInterestImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIF3IF3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIF3IF3_Pointer":
        """Clone(itkRegionOfInterestImageFilterIF3IF3 self) -> itkRegionOfInterestImageFilterIF3IF3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIF3IF3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIF3IF3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIF3IF3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIF3IF3

        Create a new object of the class itkRegionOfInterestImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIF3IF3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_Clone, None, itkRegionOfInterestImageFilterIF3IF3)
itkRegionOfInterestImageFilterIF3IF3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIF3IF3)
itkRegionOfInterestImageFilterIF3IF3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIF3IF3)
itkRegionOfInterestImageFilterIF3IF3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_swigregister
itkRegionOfInterestImageFilterIF3IF3_swigregister(itkRegionOfInterestImageFilterIF3IF3)

def itkRegionOfInterestImageFilterIF3IF3___New_orig__() -> "itkRegionOfInterestImageFilterIF3IF3_Pointer":
    """itkRegionOfInterestImageFilterIF3IF3___New_orig__() -> itkRegionOfInterestImageFilterIF3IF3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3___New_orig__()

def itkRegionOfInterestImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIF3IF3 *":
    """itkRegionOfInterestImageFilterIF3IF3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIF3IF3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIF3IF3_cast(obj)

class itkRegionOfInterestImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterISS2ISS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterISS2ISS2_Pointer":
        """Clone(itkRegionOfInterestImageFilterISS2ISS2 self) -> itkRegionOfInterestImageFilterISS2ISS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterISS2ISS2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterISS2ISS2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterISS2ISS2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterISS2ISS2

        Create a new object of the class itkRegionOfInterestImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterISS2ISS2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_Clone, None, itkRegionOfInterestImageFilterISS2ISS2)
itkRegionOfInterestImageFilterISS2ISS2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterISS2ISS2)
itkRegionOfInterestImageFilterISS2ISS2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterISS2ISS2)
itkRegionOfInterestImageFilterISS2ISS2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_swigregister
itkRegionOfInterestImageFilterISS2ISS2_swigregister(itkRegionOfInterestImageFilterISS2ISS2)

def itkRegionOfInterestImageFilterISS2ISS2___New_orig__() -> "itkRegionOfInterestImageFilterISS2ISS2_Pointer":
    """itkRegionOfInterestImageFilterISS2ISS2___New_orig__() -> itkRegionOfInterestImageFilterISS2ISS2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2___New_orig__()

def itkRegionOfInterestImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterISS2ISS2 *":
    """itkRegionOfInterestImageFilterISS2ISS2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterISS2ISS2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS2ISS2_cast(obj)

class itkRegionOfInterestImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterISS3ISS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterISS3ISS3_Pointer":
        """Clone(itkRegionOfInterestImageFilterISS3ISS3 self) -> itkRegionOfInterestImageFilterISS3ISS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterISS3ISS3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterISS3ISS3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterISS3ISS3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterISS3ISS3

        Create a new object of the class itkRegionOfInterestImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterISS3ISS3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_Clone, None, itkRegionOfInterestImageFilterISS3ISS3)
itkRegionOfInterestImageFilterISS3ISS3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterISS3ISS3)
itkRegionOfInterestImageFilterISS3ISS3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterISS3ISS3)
itkRegionOfInterestImageFilterISS3ISS3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_swigregister
itkRegionOfInterestImageFilterISS3ISS3_swigregister(itkRegionOfInterestImageFilterISS3ISS3)

def itkRegionOfInterestImageFilterISS3ISS3___New_orig__() -> "itkRegionOfInterestImageFilterISS3ISS3_Pointer":
    """itkRegionOfInterestImageFilterISS3ISS3___New_orig__() -> itkRegionOfInterestImageFilterISS3ISS3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3___New_orig__()

def itkRegionOfInterestImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterISS3ISS3 *":
    """itkRegionOfInterestImageFilterISS3ISS3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterISS3ISS3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterISS3ISS3_cast(obj)

class itkRegionOfInterestImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIUC2IUC2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIUC2IUC2_Pointer":
        """Clone(itkRegionOfInterestImageFilterIUC2IUC2 self) -> itkRegionOfInterestImageFilterIUC2IUC2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIUC2IUC2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIUC2IUC2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUC2IUC2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUC2IUC2

        Create a new object of the class itkRegionOfInterestImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIUC2IUC2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_Clone, None, itkRegionOfInterestImageFilterIUC2IUC2)
itkRegionOfInterestImageFilterIUC2IUC2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIUC2IUC2)
itkRegionOfInterestImageFilterIUC2IUC2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIUC2IUC2)
itkRegionOfInterestImageFilterIUC2IUC2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_swigregister
itkRegionOfInterestImageFilterIUC2IUC2_swigregister(itkRegionOfInterestImageFilterIUC2IUC2)

def itkRegionOfInterestImageFilterIUC2IUC2___New_orig__() -> "itkRegionOfInterestImageFilterIUC2IUC2_Pointer":
    """itkRegionOfInterestImageFilterIUC2IUC2___New_orig__() -> itkRegionOfInterestImageFilterIUC2IUC2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2___New_orig__()

def itkRegionOfInterestImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUC2IUC2 *":
    """itkRegionOfInterestImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUC2IUC2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC2IUC2_cast(obj)

class itkRegionOfInterestImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIUC3IUC3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIUC3IUC3_Pointer":
        """Clone(itkRegionOfInterestImageFilterIUC3IUC3 self) -> itkRegionOfInterestImageFilterIUC3IUC3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIUC3IUC3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIUC3IUC3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUC3IUC3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUC3IUC3

        Create a new object of the class itkRegionOfInterestImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIUC3IUC3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_Clone, None, itkRegionOfInterestImageFilterIUC3IUC3)
itkRegionOfInterestImageFilterIUC3IUC3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIUC3IUC3)
itkRegionOfInterestImageFilterIUC3IUC3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIUC3IUC3)
itkRegionOfInterestImageFilterIUC3IUC3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_swigregister
itkRegionOfInterestImageFilterIUC3IUC3_swigregister(itkRegionOfInterestImageFilterIUC3IUC3)

def itkRegionOfInterestImageFilterIUC3IUC3___New_orig__() -> "itkRegionOfInterestImageFilterIUC3IUC3_Pointer":
    """itkRegionOfInterestImageFilterIUC3IUC3___New_orig__() -> itkRegionOfInterestImageFilterIUC3IUC3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3___New_orig__()

def itkRegionOfInterestImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUC3IUC3 *":
    """itkRegionOfInterestImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUC3IUC3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUC3IUC3_cast(obj)

class itkRegionOfInterestImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIUS2IUS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIUS2IUS2_Pointer":
        """Clone(itkRegionOfInterestImageFilterIUS2IUS2 self) -> itkRegionOfInterestImageFilterIUS2IUS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIUS2IUS2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIUS2IUS2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUS2IUS2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUS2IUS2

        Create a new object of the class itkRegionOfInterestImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIUS2IUS2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_Clone, None, itkRegionOfInterestImageFilterIUS2IUS2)
itkRegionOfInterestImageFilterIUS2IUS2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIUS2IUS2)
itkRegionOfInterestImageFilterIUS2IUS2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIUS2IUS2)
itkRegionOfInterestImageFilterIUS2IUS2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_swigregister
itkRegionOfInterestImageFilterIUS2IUS2_swigregister(itkRegionOfInterestImageFilterIUS2IUS2)

def itkRegionOfInterestImageFilterIUS2IUS2___New_orig__() -> "itkRegionOfInterestImageFilterIUS2IUS2_Pointer":
    """itkRegionOfInterestImageFilterIUS2IUS2___New_orig__() -> itkRegionOfInterestImageFilterIUS2IUS2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2___New_orig__()

def itkRegionOfInterestImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUS2IUS2 *":
    """itkRegionOfInterestImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUS2IUS2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS2IUS2_cast(obj)

class itkRegionOfInterestImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterIUS3IUS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterIUS3IUS3_Pointer":
        """Clone(itkRegionOfInterestImageFilterIUS3IUS3 self) -> itkRegionOfInterestImageFilterIUS3IUS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterIUS3IUS3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterIUS3IUS3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUS3IUS3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterIUS3IUS3

        Create a new object of the class itkRegionOfInterestImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterIUS3IUS3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_Clone, None, itkRegionOfInterestImageFilterIUS3IUS3)
itkRegionOfInterestImageFilterIUS3IUS3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterIUS3IUS3)
itkRegionOfInterestImageFilterIUS3IUS3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterIUS3IUS3)
itkRegionOfInterestImageFilterIUS3IUS3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_swigregister
itkRegionOfInterestImageFilterIUS3IUS3_swigregister(itkRegionOfInterestImageFilterIUS3IUS3)

def itkRegionOfInterestImageFilterIUS3IUS3___New_orig__() -> "itkRegionOfInterestImageFilterIUS3IUS3_Pointer":
    """itkRegionOfInterestImageFilterIUS3IUS3___New_orig__() -> itkRegionOfInterestImageFilterIUS3IUS3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3___New_orig__()

def itkRegionOfInterestImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterIUS3IUS3 *":
    """itkRegionOfInterestImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterIUS3IUS3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterIUS3IUS3_cast(obj)

class itkRegionOfInterestImageFilterVID2VID2(itkImageToImageFilterAPython.itkImageToImageFilterVID2VID2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVID2VID2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVID2VID2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVID2VID2_Pointer":
        """Clone(itkRegionOfInterestImageFilterVID2VID2 self) -> itkRegionOfInterestImageFilterVID2VID2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVID2VID2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVID2VID2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVID2VID2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVID2VID2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVID2VID2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVID2VID2

        Create a new object of the class itkRegionOfInterestImageFilterVID2VID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVID2VID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVID2VID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVID2VID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVID2VID2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_Clone, None, itkRegionOfInterestImageFilterVID2VID2)
itkRegionOfInterestImageFilterVID2VID2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVID2VID2)
itkRegionOfInterestImageFilterVID2VID2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVID2VID2)
itkRegionOfInterestImageFilterVID2VID2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_swigregister
itkRegionOfInterestImageFilterVID2VID2_swigregister(itkRegionOfInterestImageFilterVID2VID2)

def itkRegionOfInterestImageFilterVID2VID2___New_orig__() -> "itkRegionOfInterestImageFilterVID2VID2_Pointer":
    """itkRegionOfInterestImageFilterVID2VID2___New_orig__() -> itkRegionOfInterestImageFilterVID2VID2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2___New_orig__()

def itkRegionOfInterestImageFilterVID2VID2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVID2VID2 *":
    """itkRegionOfInterestImageFilterVID2VID2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVID2VID2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID2VID2_cast(obj)

class itkRegionOfInterestImageFilterVID3VID3(itkImageToImageFilterAPython.itkImageToImageFilterVID3VID3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVID3VID3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVID3VID3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVID3VID3_Pointer":
        """Clone(itkRegionOfInterestImageFilterVID3VID3 self) -> itkRegionOfInterestImageFilterVID3VID3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVID3VID3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVID3VID3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVID3VID3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVID3VID3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVID3VID3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVID3VID3

        Create a new object of the class itkRegionOfInterestImageFilterVID3VID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVID3VID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVID3VID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVID3VID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVID3VID3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_Clone, None, itkRegionOfInterestImageFilterVID3VID3)
itkRegionOfInterestImageFilterVID3VID3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVID3VID3)
itkRegionOfInterestImageFilterVID3VID3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVID3VID3)
itkRegionOfInterestImageFilterVID3VID3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_swigregister
itkRegionOfInterestImageFilterVID3VID3_swigregister(itkRegionOfInterestImageFilterVID3VID3)

def itkRegionOfInterestImageFilterVID3VID3___New_orig__() -> "itkRegionOfInterestImageFilterVID3VID3_Pointer":
    """itkRegionOfInterestImageFilterVID3VID3___New_orig__() -> itkRegionOfInterestImageFilterVID3VID3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3___New_orig__()

def itkRegionOfInterestImageFilterVID3VID3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVID3VID3 *":
    """itkRegionOfInterestImageFilterVID3VID3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVID3VID3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVID3VID3_cast(obj)

class itkRegionOfInterestImageFilterVIF2VIF2(itkImageToImageFilterAPython.itkImageToImageFilterVIF2VIF2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIF2VIF2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIF2VIF2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIF2VIF2_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIF2VIF2 self) -> itkRegionOfInterestImageFilterVIF2VIF2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIF2VIF2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIF2VIF2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIF2VIF2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIF2VIF2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIF2VIF2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIF2VIF2

        Create a new object of the class itkRegionOfInterestImageFilterVIF2VIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIF2VIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIF2VIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIF2VIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIF2VIF2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_Clone, None, itkRegionOfInterestImageFilterVIF2VIF2)
itkRegionOfInterestImageFilterVIF2VIF2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIF2VIF2)
itkRegionOfInterestImageFilterVIF2VIF2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIF2VIF2)
itkRegionOfInterestImageFilterVIF2VIF2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_swigregister
itkRegionOfInterestImageFilterVIF2VIF2_swigregister(itkRegionOfInterestImageFilterVIF2VIF2)

def itkRegionOfInterestImageFilterVIF2VIF2___New_orig__() -> "itkRegionOfInterestImageFilterVIF2VIF2_Pointer":
    """itkRegionOfInterestImageFilterVIF2VIF2___New_orig__() -> itkRegionOfInterestImageFilterVIF2VIF2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2___New_orig__()

def itkRegionOfInterestImageFilterVIF2VIF2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIF2VIF2 *":
    """itkRegionOfInterestImageFilterVIF2VIF2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIF2VIF2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF2VIF2_cast(obj)

class itkRegionOfInterestImageFilterVIF3VIF3(itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIF3VIF3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIF3VIF3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIF3VIF3_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIF3VIF3 self) -> itkRegionOfInterestImageFilterVIF3VIF3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIF3VIF3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIF3VIF3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIF3VIF3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIF3VIF3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIF3VIF3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIF3VIF3

        Create a new object of the class itkRegionOfInterestImageFilterVIF3VIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIF3VIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIF3VIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIF3VIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIF3VIF3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_Clone, None, itkRegionOfInterestImageFilterVIF3VIF3)
itkRegionOfInterestImageFilterVIF3VIF3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIF3VIF3)
itkRegionOfInterestImageFilterVIF3VIF3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIF3VIF3)
itkRegionOfInterestImageFilterVIF3VIF3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_swigregister
itkRegionOfInterestImageFilterVIF3VIF3_swigregister(itkRegionOfInterestImageFilterVIF3VIF3)

def itkRegionOfInterestImageFilterVIF3VIF3___New_orig__() -> "itkRegionOfInterestImageFilterVIF3VIF3_Pointer":
    """itkRegionOfInterestImageFilterVIF3VIF3___New_orig__() -> itkRegionOfInterestImageFilterVIF3VIF3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3___New_orig__()

def itkRegionOfInterestImageFilterVIF3VIF3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIF3VIF3 *":
    """itkRegionOfInterestImageFilterVIF3VIF3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIF3VIF3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIF3VIF3_cast(obj)

class itkRegionOfInterestImageFilterVISS2VISS2(itkImageToImageFilterAPython.itkImageToImageFilterVISS2VISS2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVISS2VISS2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVISS2VISS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVISS2VISS2_Pointer":
        """Clone(itkRegionOfInterestImageFilterVISS2VISS2 self) -> itkRegionOfInterestImageFilterVISS2VISS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVISS2VISS2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVISS2VISS2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVISS2VISS2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVISS2VISS2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVISS2VISS2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVISS2VISS2

        Create a new object of the class itkRegionOfInterestImageFilterVISS2VISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVISS2VISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVISS2VISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVISS2VISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVISS2VISS2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_Clone, None, itkRegionOfInterestImageFilterVISS2VISS2)
itkRegionOfInterestImageFilterVISS2VISS2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVISS2VISS2)
itkRegionOfInterestImageFilterVISS2VISS2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVISS2VISS2)
itkRegionOfInterestImageFilterVISS2VISS2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_swigregister
itkRegionOfInterestImageFilterVISS2VISS2_swigregister(itkRegionOfInterestImageFilterVISS2VISS2)

def itkRegionOfInterestImageFilterVISS2VISS2___New_orig__() -> "itkRegionOfInterestImageFilterVISS2VISS2_Pointer":
    """itkRegionOfInterestImageFilterVISS2VISS2___New_orig__() -> itkRegionOfInterestImageFilterVISS2VISS2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2___New_orig__()

def itkRegionOfInterestImageFilterVISS2VISS2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVISS2VISS2 *":
    """itkRegionOfInterestImageFilterVISS2VISS2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVISS2VISS2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS2VISS2_cast(obj)

class itkRegionOfInterestImageFilterVISS3VISS3(itkImageToImageFilterAPython.itkImageToImageFilterVISS3VISS3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVISS3VISS3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVISS3VISS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVISS3VISS3_Pointer":
        """Clone(itkRegionOfInterestImageFilterVISS3VISS3 self) -> itkRegionOfInterestImageFilterVISS3VISS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVISS3VISS3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVISS3VISS3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVISS3VISS3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVISS3VISS3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVISS3VISS3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVISS3VISS3

        Create a new object of the class itkRegionOfInterestImageFilterVISS3VISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVISS3VISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVISS3VISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVISS3VISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVISS3VISS3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_Clone, None, itkRegionOfInterestImageFilterVISS3VISS3)
itkRegionOfInterestImageFilterVISS3VISS3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVISS3VISS3)
itkRegionOfInterestImageFilterVISS3VISS3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVISS3VISS3)
itkRegionOfInterestImageFilterVISS3VISS3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_swigregister
itkRegionOfInterestImageFilterVISS3VISS3_swigregister(itkRegionOfInterestImageFilterVISS3VISS3)

def itkRegionOfInterestImageFilterVISS3VISS3___New_orig__() -> "itkRegionOfInterestImageFilterVISS3VISS3_Pointer":
    """itkRegionOfInterestImageFilterVISS3VISS3___New_orig__() -> itkRegionOfInterestImageFilterVISS3VISS3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3___New_orig__()

def itkRegionOfInterestImageFilterVISS3VISS3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVISS3VISS3 *":
    """itkRegionOfInterestImageFilterVISS3VISS3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVISS3VISS3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVISS3VISS3_cast(obj)

class itkRegionOfInterestImageFilterVIUC2VIUC2(itkImageToImageFilterAPython.itkImageToImageFilterVIUC2VIUC2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIUC2VIUC2 self) -> itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIUC2VIUC2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIUC2VIUC2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIUC2VIUC2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUC2VIUC2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUC2VIUC2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIUC2VIUC2

        Create a new object of the class itkRegionOfInterestImageFilterVIUC2VIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIUC2VIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIUC2VIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIUC2VIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIUC2VIUC2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_Clone, None, itkRegionOfInterestImageFilterVIUC2VIUC2)
itkRegionOfInterestImageFilterVIUC2VIUC2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUC2VIUC2)
itkRegionOfInterestImageFilterVIUC2VIUC2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUC2VIUC2)
itkRegionOfInterestImageFilterVIUC2VIUC2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_swigregister
itkRegionOfInterestImageFilterVIUC2VIUC2_swigregister(itkRegionOfInterestImageFilterVIUC2VIUC2)

def itkRegionOfInterestImageFilterVIUC2VIUC2___New_orig__() -> "itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer":
    """itkRegionOfInterestImageFilterVIUC2VIUC2___New_orig__() -> itkRegionOfInterestImageFilterVIUC2VIUC2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2___New_orig__()

def itkRegionOfInterestImageFilterVIUC2VIUC2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUC2VIUC2 *":
    """itkRegionOfInterestImageFilterVIUC2VIUC2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUC2VIUC2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC2VIUC2_cast(obj)

class itkRegionOfInterestImageFilterVIUC3VIUC3(itkImageToImageFilterAPython.itkImageToImageFilterVIUC3VIUC3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIUC3VIUC3 self) -> itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIUC3VIUC3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIUC3VIUC3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIUC3VIUC3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUC3VIUC3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUC3VIUC3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIUC3VIUC3

        Create a new object of the class itkRegionOfInterestImageFilterVIUC3VIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIUC3VIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIUC3VIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIUC3VIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIUC3VIUC3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_Clone, None, itkRegionOfInterestImageFilterVIUC3VIUC3)
itkRegionOfInterestImageFilterVIUC3VIUC3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUC3VIUC3)
itkRegionOfInterestImageFilterVIUC3VIUC3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUC3VIUC3)
itkRegionOfInterestImageFilterVIUC3VIUC3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_swigregister
itkRegionOfInterestImageFilterVIUC3VIUC3_swigregister(itkRegionOfInterestImageFilterVIUC3VIUC3)

def itkRegionOfInterestImageFilterVIUC3VIUC3___New_orig__() -> "itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer":
    """itkRegionOfInterestImageFilterVIUC3VIUC3___New_orig__() -> itkRegionOfInterestImageFilterVIUC3VIUC3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3___New_orig__()

def itkRegionOfInterestImageFilterVIUC3VIUC3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUC3VIUC3 *":
    """itkRegionOfInterestImageFilterVIUC3VIUC3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUC3VIUC3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUC3VIUC3_cast(obj)

class itkRegionOfInterestImageFilterVIUS2VIUS2(itkImageToImageFilterAPython.itkImageToImageFilterVIUS2VIUS2):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIUS2VIUS2 self) -> itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion2') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIUS2VIUS2 self, itkImageRegion2 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion2":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIUS2VIUS2 self) -> itkImageRegion2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIUS2VIUS2

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUS2VIUS2 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUS2VIUS2"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIUS2VIUS2

        Create a new object of the class itkRegionOfInterestImageFilterVIUS2VIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIUS2VIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIUS2VIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIUS2VIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIUS2VIUS2.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_Clone, None, itkRegionOfInterestImageFilterVIUS2VIUS2)
itkRegionOfInterestImageFilterVIUS2VIUS2.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUS2VIUS2)
itkRegionOfInterestImageFilterVIUS2VIUS2.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUS2VIUS2)
itkRegionOfInterestImageFilterVIUS2VIUS2_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_swigregister
itkRegionOfInterestImageFilterVIUS2VIUS2_swigregister(itkRegionOfInterestImageFilterVIUS2VIUS2)

def itkRegionOfInterestImageFilterVIUS2VIUS2___New_orig__() -> "itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer":
    """itkRegionOfInterestImageFilterVIUS2VIUS2___New_orig__() -> itkRegionOfInterestImageFilterVIUS2VIUS2_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2___New_orig__()

def itkRegionOfInterestImageFilterVIUS2VIUS2_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUS2VIUS2 *":
    """itkRegionOfInterestImageFilterVIUS2VIUS2_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUS2VIUS2"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS2VIUS2_cast(obj)

class itkRegionOfInterestImageFilterVIUS3VIUS3(itkImageToImageFilterAPython.itkImageToImageFilterVIUS3VIUS3):
    """


    Extract a region of interest from the input image.

    This filter produces an output image of the same dimension as the
    input image. The user specifies the region of the input image that
    will be contained in the output image. The origin coordinates of the
    output images will be computed in such a way that if mapped to
    physical space, the output image will overlay the input image with
    perfect registration. In other words, a registration process between
    the output image and the input image will return an identity
    transform.

    If you are interested in changing the dimension of the image, you may
    want from a slice of a 3D image.

    The region to extract is set using the method SetRegionOfInterest.

    See:  ExtractImageFilter

    C++ includes: itkRegionOfInterestImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer":
        """__New_orig__() -> itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer":
        """Clone(itkRegionOfInterestImageFilterVIUS3VIUS3 self) -> itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_Clone(self)


    def SetRegionOfInterest(self, _arg: 'itkImageRegion3') -> "void":
        """
        SetRegionOfInterest(itkRegionOfInterestImageFilterVIUS3VIUS3 self, itkImageRegion3 _arg)

        Set/Get the
        output image region. 
        """
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_SetRegionOfInterest(self, _arg)


    def GetRegionOfInterest(self) -> "itkImageRegion3":
        """GetRegionOfInterest(itkRegionOfInterestImageFilterVIUS3VIUS3 self) -> itkImageRegion3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_GetRegionOfInterest(self)

    SameDimensionCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_SameDimensionCheck
    InputConvertibleToOutputCheck = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkRegionOfInterestImageFilterPython.delete_itkRegionOfInterestImageFilterVIUS3VIUS3

    def cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUS3VIUS3 *":
        """cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUS3VIUS3"""
        return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegionOfInterestImageFilterVIUS3VIUS3

        Create a new object of the class itkRegionOfInterestImageFilterVIUS3VIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegionOfInterestImageFilterVIUS3VIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegionOfInterestImageFilterVIUS3VIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegionOfInterestImageFilterVIUS3VIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegionOfInterestImageFilterVIUS3VIUS3.Clone = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_Clone, None, itkRegionOfInterestImageFilterVIUS3VIUS3)
itkRegionOfInterestImageFilterVIUS3VIUS3.SetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_SetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUS3VIUS3)
itkRegionOfInterestImageFilterVIUS3VIUS3.GetRegionOfInterest = new_instancemethod(_itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_GetRegionOfInterest, None, itkRegionOfInterestImageFilterVIUS3VIUS3)
itkRegionOfInterestImageFilterVIUS3VIUS3_swigregister = _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_swigregister
itkRegionOfInterestImageFilterVIUS3VIUS3_swigregister(itkRegionOfInterestImageFilterVIUS3VIUS3)

def itkRegionOfInterestImageFilterVIUS3VIUS3___New_orig__() -> "itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer":
    """itkRegionOfInterestImageFilterVIUS3VIUS3___New_orig__() -> itkRegionOfInterestImageFilterVIUS3VIUS3_Pointer"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3___New_orig__()

def itkRegionOfInterestImageFilterVIUS3VIUS3_cast(obj: 'itkLightObject') -> "itkRegionOfInterestImageFilterVIUS3VIUS3 *":
    """itkRegionOfInterestImageFilterVIUS3VIUS3_cast(itkLightObject obj) -> itkRegionOfInterestImageFilterVIUS3VIUS3"""
    return _itkRegionOfInterestImageFilterPython.itkRegionOfInterestImageFilterVIUS3VIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def region_of_interest_image_filter(*args, **kwargs):
    """Procedural interface for RegionOfInterestImageFilter"""
    import itk
    instance = itk.RegionOfInterestImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def region_of_interest_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RegionOfInterestImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RegionOfInterestImageFilter.values()[0]
    else:
        filter_object = itk.RegionOfInterestImageFilter

    region_of_interest_image_filter.__doc__ = filter_object.__doc__
    region_of_interest_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    region_of_interest_image_filter.__doc__ += "Available Keyword Arguments:\n"
    region_of_interest_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



