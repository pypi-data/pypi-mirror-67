# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAddImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAddImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAddImageFilterPython
            return _itkAddImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAddImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAddImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAddImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkBinaryGeneratorImageFilterPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkFixedArrayPython
import vnl_vector_refPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import ITKCommonBasePython
import itkImagePython
import itkPointPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkAddImageFilterID3ID3ID3_New():
  return itkAddImageFilterID3ID3ID3.New()


def itkAddImageFilterID2ID2ID2_New():
  return itkAddImageFilterID2ID2ID2.New()


def itkAddImageFilterIF3IF3IF3_New():
  return itkAddImageFilterIF3IF3IF3.New()


def itkAddImageFilterIF2IF2IF2_New():
  return itkAddImageFilterIF2IF2IF2.New()


def itkAddImageFilterIUS3IUS3IUS3_New():
  return itkAddImageFilterIUS3IUS3IUS3.New()


def itkAddImageFilterIUS2IUS2IUS2_New():
  return itkAddImageFilterIUS2IUS2IUS2.New()


def itkAddImageFilterIUC3IUC3IUC3_New():
  return itkAddImageFilterIUC3IUC3IUC3.New()


def itkAddImageFilterIUC2IUC2IUC2_New():
  return itkAddImageFilterIUC2IUC2IUC2.New()


def itkAddImageFilterISS3ISS3ISS3_New():
  return itkAddImageFilterISS3ISS3ISS3.New()


def itkAddImageFilterISS2ISS2ISS2_New():
  return itkAddImageFilterISS2ISS2ISS2.New()

class itkAddImageFilterID2ID2ID2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterID2ID2ID2_Pointer":
        """__New_orig__() -> itkAddImageFilterID2ID2ID2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterID2ID2ID2_Pointer":
        """Clone(itkAddImageFilterID2ID2ID2 self) -> itkAddImageFilterID2ID2ID2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID2ID2ID2

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterID2ID2ID2 *":
        """cast(itkLightObject obj) -> itkAddImageFilterID2ID2ID2"""
        return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID2ID2ID2

        Create a new object of the class itkAddImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID2ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterID2ID2ID2.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Clone, None, itkAddImageFilterID2ID2ID2)
itkAddImageFilterID2ID2ID2_swigregister = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_swigregister
itkAddImageFilterID2ID2ID2_swigregister(itkAddImageFilterID2ID2ID2)

def itkAddImageFilterID2ID2ID2___New_orig__() -> "itkAddImageFilterID2ID2ID2_Pointer":
    """itkAddImageFilterID2ID2ID2___New_orig__() -> itkAddImageFilterID2ID2ID2_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2___New_orig__()

def itkAddImageFilterID2ID2ID2_cast(obj: 'itkLightObject') -> "itkAddImageFilterID2ID2ID2 *":
    """itkAddImageFilterID2ID2ID2_cast(itkLightObject obj) -> itkAddImageFilterID2ID2ID2"""
    return _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_cast(obj)

class itkAddImageFilterID3ID3ID3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterID3ID3ID3_Pointer":
        """__New_orig__() -> itkAddImageFilterID3ID3ID3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterID3ID3ID3_Pointer":
        """Clone(itkAddImageFilterID3ID3ID3 self) -> itkAddImageFilterID3ID3ID3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID3ID3ID3

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterID3ID3ID3 *":
        """cast(itkLightObject obj) -> itkAddImageFilterID3ID3ID3"""
        return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID3ID3ID3

        Create a new object of the class itkAddImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID3ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterID3ID3ID3.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Clone, None, itkAddImageFilterID3ID3ID3)
itkAddImageFilterID3ID3ID3_swigregister = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_swigregister
itkAddImageFilterID3ID3ID3_swigregister(itkAddImageFilterID3ID3ID3)

def itkAddImageFilterID3ID3ID3___New_orig__() -> "itkAddImageFilterID3ID3ID3_Pointer":
    """itkAddImageFilterID3ID3ID3___New_orig__() -> itkAddImageFilterID3ID3ID3_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3___New_orig__()

def itkAddImageFilterID3ID3ID3_cast(obj: 'itkLightObject') -> "itkAddImageFilterID3ID3ID3 *":
    """itkAddImageFilterID3ID3ID3_cast(itkLightObject obj) -> itkAddImageFilterID3ID3ID3"""
    return _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_cast(obj)

class itkAddImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkAddImageFilterIF2IF2IF2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIF2IF2IF2_Pointer":
        """Clone(itkAddImageFilterIF2IF2IF2 self) -> itkAddImageFilterIF2IF2IF2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIF2IF2IF2"""
        return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF2IF2IF2

        Create a new object of the class itkAddImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Clone, None, itkAddImageFilterIF2IF2IF2)
itkAddImageFilterIF2IF2IF2_swigregister = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_swigregister
itkAddImageFilterIF2IF2IF2_swigregister(itkAddImageFilterIF2IF2IF2)

def itkAddImageFilterIF2IF2IF2___New_orig__() -> "itkAddImageFilterIF2IF2IF2_Pointer":
    """itkAddImageFilterIF2IF2IF2___New_orig__() -> itkAddImageFilterIF2IF2IF2_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2___New_orig__()

def itkAddImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkAddImageFilterIF2IF2IF2 *":
    """itkAddImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkAddImageFilterIF2IF2IF2"""
    return _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_cast(obj)

class itkAddImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkAddImageFilterIF3IF3IF3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIF3IF3IF3_Pointer":
        """Clone(itkAddImageFilterIF3IF3IF3 self) -> itkAddImageFilterIF3IF3IF3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIF3IF3IF3"""
        return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF3IF3IF3

        Create a new object of the class itkAddImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Clone, None, itkAddImageFilterIF3IF3IF3)
itkAddImageFilterIF3IF3IF3_swigregister = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_swigregister
itkAddImageFilterIF3IF3IF3_swigregister(itkAddImageFilterIF3IF3IF3)

def itkAddImageFilterIF3IF3IF3___New_orig__() -> "itkAddImageFilterIF3IF3IF3_Pointer":
    """itkAddImageFilterIF3IF3IF3___New_orig__() -> itkAddImageFilterIF3IF3IF3_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3___New_orig__()

def itkAddImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkAddImageFilterIF3IF3IF3 *":
    """itkAddImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkAddImageFilterIF3IF3IF3"""
    return _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_cast(obj)

class itkAddImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkAddImageFilterISS2ISS2ISS2 self) -> itkAddImageFilterISS2ISS2ISS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAddImageFilterISS2ISS2ISS2"""
        return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS2ISS2ISS2

        Create a new object of the class itkAddImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Clone, None, itkAddImageFilterISS2ISS2ISS2)
itkAddImageFilterISS2ISS2ISS2_swigregister = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_swigregister
itkAddImageFilterISS2ISS2ISS2_swigregister(itkAddImageFilterISS2ISS2ISS2)

def itkAddImageFilterISS2ISS2ISS2___New_orig__() -> "itkAddImageFilterISS2ISS2ISS2_Pointer":
    """itkAddImageFilterISS2ISS2ISS2___New_orig__() -> itkAddImageFilterISS2ISS2ISS2_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2___New_orig__()

def itkAddImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkAddImageFilterISS2ISS2ISS2 *":
    """itkAddImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkAddImageFilterISS2ISS2ISS2"""
    return _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_cast(obj)

class itkAddImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkAddImageFilterISS3ISS3ISS3 self) -> itkAddImageFilterISS3ISS3ISS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAddImageFilterISS3ISS3ISS3"""
        return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS3ISS3ISS3

        Create a new object of the class itkAddImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Clone, None, itkAddImageFilterISS3ISS3ISS3)
itkAddImageFilterISS3ISS3ISS3_swigregister = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_swigregister
itkAddImageFilterISS3ISS3ISS3_swigregister(itkAddImageFilterISS3ISS3ISS3)

def itkAddImageFilterISS3ISS3ISS3___New_orig__() -> "itkAddImageFilterISS3ISS3ISS3_Pointer":
    """itkAddImageFilterISS3ISS3ISS3___New_orig__() -> itkAddImageFilterISS3ISS3ISS3_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3___New_orig__()

def itkAddImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkAddImageFilterISS3ISS3ISS3 *":
    """itkAddImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkAddImageFilterISS3ISS3ISS3"""
    return _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_cast(obj)

class itkAddImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkAddImageFilterIUC2IUC2IUC2 self) -> itkAddImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIUC2IUC2IUC2"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC2IUC2IUC2

        Create a new object of the class itkAddImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Clone, None, itkAddImageFilterIUC2IUC2IUC2)
itkAddImageFilterIUC2IUC2IUC2_swigregister = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_swigregister
itkAddImageFilterIUC2IUC2IUC2_swigregister(itkAddImageFilterIUC2IUC2IUC2)

def itkAddImageFilterIUC2IUC2IUC2___New_orig__() -> "itkAddImageFilterIUC2IUC2IUC2_Pointer":
    """itkAddImageFilterIUC2IUC2IUC2___New_orig__() -> itkAddImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2___New_orig__()

def itkAddImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkAddImageFilterIUC2IUC2IUC2 *":
    """itkAddImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkAddImageFilterIUC2IUC2IUC2"""
    return _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_cast(obj)

class itkAddImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkAddImageFilterIUC3IUC3IUC3 self) -> itkAddImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIUC3IUC3IUC3"""
        return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC3IUC3IUC3

        Create a new object of the class itkAddImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Clone, None, itkAddImageFilterIUC3IUC3IUC3)
itkAddImageFilterIUC3IUC3IUC3_swigregister = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_swigregister
itkAddImageFilterIUC3IUC3IUC3_swigregister(itkAddImageFilterIUC3IUC3IUC3)

def itkAddImageFilterIUC3IUC3IUC3___New_orig__() -> "itkAddImageFilterIUC3IUC3IUC3_Pointer":
    """itkAddImageFilterIUC3IUC3IUC3___New_orig__() -> itkAddImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3___New_orig__()

def itkAddImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkAddImageFilterIUC3IUC3IUC3 *":
    """itkAddImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkAddImageFilterIUC3IUC3IUC3"""
    return _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_cast(obj)

class itkAddImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkAddImageFilterIUS2IUS2IUS2 self) -> itkAddImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIUS2IUS2IUS2"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS2IUS2IUS2

        Create a new object of the class itkAddImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Clone, None, itkAddImageFilterIUS2IUS2IUS2)
itkAddImageFilterIUS2IUS2IUS2_swigregister = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_swigregister
itkAddImageFilterIUS2IUS2IUS2_swigregister(itkAddImageFilterIUS2IUS2IUS2)

def itkAddImageFilterIUS2IUS2IUS2___New_orig__() -> "itkAddImageFilterIUS2IUS2IUS2_Pointer":
    """itkAddImageFilterIUS2IUS2IUS2___New_orig__() -> itkAddImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2___New_orig__()

def itkAddImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkAddImageFilterIUS2IUS2IUS2 *":
    """itkAddImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkAddImageFilterIUS2IUS2IUS2"""
    return _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_cast(obj)

class itkAddImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    pixels are vectors of the same dimension, and to store the resulting
    vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.

    C++ includes: itkAddImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAddImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAddImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkAddImageFilterIUS3IUS3IUS3 self) -> itkAddImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Clone(self)

    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Input1Input2OutputAdditiveOperatorsCheck
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAddImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAddImageFilterIUS3IUS3IUS3"""
        return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS3IUS3IUS3

        Create a new object of the class itkAddImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAddImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAddImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Clone, None, itkAddImageFilterIUS3IUS3IUS3)
itkAddImageFilterIUS3IUS3IUS3_swigregister = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_swigregister
itkAddImageFilterIUS3IUS3IUS3_swigregister(itkAddImageFilterIUS3IUS3IUS3)

def itkAddImageFilterIUS3IUS3IUS3___New_orig__() -> "itkAddImageFilterIUS3IUS3IUS3_Pointer":
    """itkAddImageFilterIUS3IUS3IUS3___New_orig__() -> itkAddImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3___New_orig__()

def itkAddImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkAddImageFilterIUS3IUS3IUS3 *":
    """itkAddImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkAddImageFilterIUS3IUS3IUS3"""
    return _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def add_image_filter(*args, **kwargs):
    """Procedural interface for AddImageFilter"""
    import itk
    instance = itk.AddImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def add_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AddImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AddImageFilter.values()[0]
    else:
        filter_object = itk.AddImageFilter

    add_image_filter.__doc__ = filter_object.__doc__
    add_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    add_image_filter.__doc__ += "Available Keyword Arguments:\n"
    add_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



