# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ITKOptimizersBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKOptimizersBasePython', [dirname(__file__)])
        except ImportError:
            import _ITKOptimizersBasePython
            return _ITKOptimizersBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKOptimizersBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKOptimizersBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKOptimizersBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import ITKCostFunctionsPython
import itkOptimizerParametersPython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import itkArray2DPython
import itkCostFunctionPython
import vnl_least_squares_functionPython

def itkRegularStepGradientDescentOptimizer_New():
  return itkRegularStepGradientDescentOptimizer.New()


def itkGradientDescentOptimizer_New():
  return itkGradientDescentOptimizer.New()


def itkSPSAOptimizer_New():
  return itkSPSAOptimizer.New()


def itkFRPROptimizer_New():
  return itkFRPROptimizer.New()


def itkInitializationBiasedParticleSwarmOptimizer_New():
  return itkInitializationBiasedParticleSwarmOptimizer.New()


def itkParticleSwarmOptimizer_New():
  return itkParticleSwarmOptimizer.New()


def itkParticleSwarmOptimizerBase_New():
  return itkParticleSwarmOptimizerBase.New()


def itkVersorRigid3DTransformOptimizer_New():
  return itkVersorRigid3DTransformOptimizer.New()


def itkPowellOptimizer_New():
  return itkPowellOptimizer.New()


def itkLBFGSBOptimizer_New():
  return itkLBFGSBOptimizer.New()


def itkExhaustiveOptimizer_New():
  return itkExhaustiveOptimizer.New()


def itkCumulativeGaussianOptimizer_New():
  return itkCumulativeGaussianOptimizer.New()


def itkAmoebaOptimizer_New():
  return itkAmoebaOptimizer.New()


def itkVersorTransformOptimizer_New():
  return itkVersorTransformOptimizer.New()


def itkRegularStepGradientDescentBaseOptimizer_New():
  return itkRegularStepGradientDescentBaseOptimizer.New()


def itkQuaternionRigidTransformGradientDescentOptimizer_New():
  return itkQuaternionRigidTransformGradientDescentOptimizer.New()


def itkOnePlusOneEvolutionaryOptimizer_New():
  return itkOnePlusOneEvolutionaryOptimizer.New()


def itkLevenbergMarquardtOptimizer_New():
  return itkLevenbergMarquardtOptimizer.New()


def itkLBFGSOptimizer_New():
  return itkLBFGSOptimizer.New()


def itkConjugateGradientOptimizer_New():
  return itkConjugateGradientOptimizer.New()


def itkMultipleValuedNonLinearVnlOptimizer_New():
  return itkMultipleValuedNonLinearVnlOptimizer.New()


def itkMultipleValuedNonLinearOptimizer_New():
  return itkMultipleValuedNonLinearOptimizer.New()


def itkSingleValuedNonLinearVnlOptimizer_New():
  return itkSingleValuedNonLinearVnlOptimizer.New()


def itkSingleValuedNonLinearOptimizer_New():
  return itkSingleValuedNonLinearOptimizer.New()


def itkNonLinearOptimizer_New():
  return itkNonLinearOptimizer.New()


def itkOptimizer_New():
  return itkOptimizer.New()

class itkFRPROptimizerEnums(object):
    """Proxy of C++ itkFRPROptimizerEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Optimization_FletchReeves = _ITKOptimizersBasePython.itkFRPROptimizerEnums_Optimization_FletchReeves
    Optimization_PolakRibiere = _ITKOptimizersBasePython.itkFRPROptimizerEnums_Optimization_PolakRibiere

    def __init__(self, *args):
        """
        __init__(itkFRPROptimizerEnums self) -> itkFRPROptimizerEnums
        __init__(itkFRPROptimizerEnums self, itkFRPROptimizerEnums arg0) -> itkFRPROptimizerEnums
        """
        _ITKOptimizersBasePython.itkFRPROptimizerEnums_swiginit(self, _ITKOptimizersBasePython.new_itkFRPROptimizerEnums(*args))
    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkFRPROptimizerEnums
itkFRPROptimizerEnums_swigregister = _ITKOptimizersBasePython.itkFRPROptimizerEnums_swigregister
itkFRPROptimizerEnums_swigregister(itkFRPROptimizerEnums)

class itkGradientDescentOptimizerEnums(object):
    """Proxy of C++ itkGradientDescentOptimizerEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StopConditionGradientDescentOptimizer_MaximumNumberOfIterations = _ITKOptimizersBasePython.itkGradientDescentOptimizerEnums_StopConditionGradientDescentOptimizer_MaximumNumberOfIterations
    StopConditionGradientDescentOptimizer_MetricError = _ITKOptimizersBasePython.itkGradientDescentOptimizerEnums_StopConditionGradientDescentOptimizer_MetricError

    def __init__(self, *args):
        """
        __init__(itkGradientDescentOptimizerEnums self) -> itkGradientDescentOptimizerEnums
        __init__(itkGradientDescentOptimizerEnums self, itkGradientDescentOptimizerEnums arg0) -> itkGradientDescentOptimizerEnums
        """
        _ITKOptimizersBasePython.itkGradientDescentOptimizerEnums_swiginit(self, _ITKOptimizersBasePython.new_itkGradientDescentOptimizerEnums(*args))
    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkGradientDescentOptimizerEnums
itkGradientDescentOptimizerEnums_swigregister = _ITKOptimizersBasePython.itkGradientDescentOptimizerEnums_swigregister
itkGradientDescentOptimizerEnums_swigregister(itkGradientDescentOptimizerEnums)

class itkOptimizer(ITKCommonBasePython.itkObject):
    """


    Generic representation for an optimization method.

    This class is a base for a hierarchy of optimizers. It is not intended
    to be instantiated.

    C++ includes: itkOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkOptimizer_Pointer":
        """__New_orig__() -> itkOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkOptimizer_Pointer":
        """Clone(itkOptimizer self) -> itkOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkOptimizer_Clone(self)


    def SetInitialPosition(self, param: 'itkOptimizerParametersD') -> "void":
        """
        SetInitialPosition(itkOptimizer self, itkOptimizerParametersD param)

        Set the position
        to initialize the optimization. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_SetInitialPosition(self, param)


    def GetInitialPosition(self) -> "itkOptimizerParametersD const &":
        """
        GetInitialPosition(itkOptimizer self) -> itkOptimizerParametersD

        Get the position
        to initialize the optimization. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_GetInitialPosition(self)


    def SetScales(self, scales: 'itkArrayD') -> "void":
        """
        SetScales(itkOptimizer self, itkArrayD scales)

        Set current parameters
        scaling. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_SetScales(self, scales)


    def GetScales(self) -> "itkArrayD const &":
        """
        GetScales(itkOptimizer self) -> itkArrayD

        Get current parameters
        scaling. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_GetScales(self)


    def GetInverseScales(self) -> "itkArrayD const &":
        """GetInverseScales(itkOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkOptimizer_GetInverseScales(self)


    def GetCurrentPosition(self) -> "itkOptimizerParametersD const &":
        """
        GetCurrentPosition(itkOptimizer self) -> itkOptimizerParametersD

        Get current
        position of the optimization. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_GetCurrentPosition(self)


    def StartOptimization(self) -> "void":
        """
        StartOptimization(itkOptimizer self)

        Start
        optimization. 
        """
        return _ITKOptimizersBasePython.itkOptimizer_StartOptimization(self)


    def GetStopConditionDescription(self) -> "std::string const":
        """
        GetStopConditionDescription(itkOptimizer self) -> std::string const

        Get the
        reason for termination 
        """
        return _ITKOptimizersBasePython.itkOptimizer_GetStopConditionDescription(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkOptimizer

    def cast(obj: 'itkLightObject') -> "itkOptimizer *":
        """cast(itkLightObject obj) -> itkOptimizer"""
        return _ITKOptimizersBasePython.itkOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkOptimizer

        Create a new object of the class itkOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_Clone, None, itkOptimizer)
itkOptimizer.SetInitialPosition = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_SetInitialPosition, None, itkOptimizer)
itkOptimizer.GetInitialPosition = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_GetInitialPosition, None, itkOptimizer)
itkOptimizer.SetScales = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_SetScales, None, itkOptimizer)
itkOptimizer.GetScales = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_GetScales, None, itkOptimizer)
itkOptimizer.GetInverseScales = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_GetInverseScales, None, itkOptimizer)
itkOptimizer.GetCurrentPosition = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_GetCurrentPosition, None, itkOptimizer)
itkOptimizer.StartOptimization = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_StartOptimization, None, itkOptimizer)
itkOptimizer.GetStopConditionDescription = new_instancemethod(_ITKOptimizersBasePython.itkOptimizer_GetStopConditionDescription, None, itkOptimizer)
itkOptimizer_swigregister = _ITKOptimizersBasePython.itkOptimizer_swigregister
itkOptimizer_swigregister(itkOptimizer)

def itkOptimizer___New_orig__() -> "itkOptimizer_Pointer":
    """itkOptimizer___New_orig__() -> itkOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkOptimizer___New_orig__()

def itkOptimizer_cast(obj: 'itkLightObject') -> "itkOptimizer *":
    """itkOptimizer_cast(itkLightObject obj) -> itkOptimizer"""
    return _ITKOptimizersBasePython.itkOptimizer_cast(obj)

class itkRegularStepGradientDescentBaseOptimizerEnums(object):
    """Proxy of C++ itkRegularStepGradientDescentBaseOptimizerEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StopCondition_GradientMagnitudeTolerance = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_GradientMagnitudeTolerance
    StopCondition_StepTooSmall = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_StepTooSmall
    StopCondition_ImageNotAvailable = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_ImageNotAvailable
    StopCondition_CostFunctionError = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_CostFunctionError
    StopCondition_MaximumNumberOfIterations = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_MaximumNumberOfIterations
    StopCondition_Unknown = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_StopCondition_Unknown

    def __init__(self, *args):
        """
        __init__(itkRegularStepGradientDescentBaseOptimizerEnums self) -> itkRegularStepGradientDescentBaseOptimizerEnums
        __init__(itkRegularStepGradientDescentBaseOptimizerEnums self, itkRegularStepGradientDescentBaseOptimizerEnums arg0) -> itkRegularStepGradientDescentBaseOptimizerEnums
        """
        _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_swiginit(self, _ITKOptimizersBasePython.new_itkRegularStepGradientDescentBaseOptimizerEnums(*args))
    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkRegularStepGradientDescentBaseOptimizerEnums
itkRegularStepGradientDescentBaseOptimizerEnums_swigregister = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizerEnums_swigregister
itkRegularStepGradientDescentBaseOptimizerEnums_swigregister(itkRegularStepGradientDescentBaseOptimizerEnums)

class itkSPSAOptimizerEnums(object):
    """Proxy of C++ itkSPSAOptimizerEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    StopConditionSPSAOptimizer_Unknown = _ITKOptimizersBasePython.itkSPSAOptimizerEnums_StopConditionSPSAOptimizer_Unknown
    StopConditionSPSAOptimizer_MaximumNumberOfIterations = _ITKOptimizersBasePython.itkSPSAOptimizerEnums_StopConditionSPSAOptimizer_MaximumNumberOfIterations
    StopConditionSPSAOptimizer_BelowTolerance = _ITKOptimizersBasePython.itkSPSAOptimizerEnums_StopConditionSPSAOptimizer_BelowTolerance
    StopConditionSPSAOptimizer_MetricError = _ITKOptimizersBasePython.itkSPSAOptimizerEnums_StopConditionSPSAOptimizer_MetricError

    def __init__(self, *args):
        """
        __init__(itkSPSAOptimizerEnums self) -> itkSPSAOptimizerEnums
        __init__(itkSPSAOptimizerEnums self, itkSPSAOptimizerEnums arg0) -> itkSPSAOptimizerEnums
        """
        _ITKOptimizersBasePython.itkSPSAOptimizerEnums_swiginit(self, _ITKOptimizersBasePython.new_itkSPSAOptimizerEnums(*args))
    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkSPSAOptimizerEnums
itkSPSAOptimizerEnums_swigregister = _ITKOptimizersBasePython.itkSPSAOptimizerEnums_swigregister
itkSPSAOptimizerEnums_swigregister(itkSPSAOptimizerEnums)

class itkNonLinearOptimizer(itkOptimizer):
    """


    Wrap of the vnl_nonlinear_minimizer to be adapted.

    This class is provided to support the structure of an Optimizers
    Hierarchy. It is not intended to be instantiated.

    C++ includes: itkNonLinearOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNonLinearOptimizer_Pointer":
        """__New_orig__() -> itkNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkNonLinearOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNonLinearOptimizer_Pointer":
        """Clone(itkNonLinearOptimizer self) -> itkNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkNonLinearOptimizer_Clone(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkNonLinearOptimizer

    def cast(obj: 'itkLightObject') -> "itkNonLinearOptimizer *":
        """cast(itkLightObject obj) -> itkNonLinearOptimizer"""
        return _ITKOptimizersBasePython.itkNonLinearOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNonLinearOptimizer

        Create a new object of the class itkNonLinearOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNonLinearOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNonLinearOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNonLinearOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNonLinearOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkNonLinearOptimizer_Clone, None, itkNonLinearOptimizer)
itkNonLinearOptimizer_swigregister = _ITKOptimizersBasePython.itkNonLinearOptimizer_swigregister
itkNonLinearOptimizer_swigregister(itkNonLinearOptimizer)

def itkNonLinearOptimizer___New_orig__() -> "itkNonLinearOptimizer_Pointer":
    """itkNonLinearOptimizer___New_orig__() -> itkNonLinearOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkNonLinearOptimizer___New_orig__()

def itkNonLinearOptimizer_cast(obj: 'itkLightObject') -> "itkNonLinearOptimizer *":
    """itkNonLinearOptimizer_cast(itkLightObject obj) -> itkNonLinearOptimizer"""
    return _ITKOptimizersBasePython.itkNonLinearOptimizer_cast(obj)

class itkSingleValuedNonLinearOptimizer(itkNonLinearOptimizer):
    """


    This class is a base for the Optimization methods that optimize a
    single valued function.

    C++ includes: itkSingleValuedNonLinearOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSingleValuedNonLinearOptimizer_Pointer":
        """__New_orig__() -> itkSingleValuedNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSingleValuedNonLinearOptimizer_Pointer":
        """Clone(itkSingleValuedNonLinearOptimizer self) -> itkSingleValuedNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_Clone(self)


    def SetCostFunction(self, costFunction: 'itkSingleValuedCostFunction') -> "void":
        """
        SetCostFunction(itkSingleValuedNonLinearOptimizer self, itkSingleValuedCostFunction costFunction)

        Set the cost
        function. 
        """
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_SetCostFunction(self, costFunction)


    def GetModifiableCostFunction(self) -> "itkSingleValuedCostFunction *":
        """GetModifiableCostFunction(itkSingleValuedNonLinearOptimizer self) -> itkSingleValuedCostFunction"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetModifiableCostFunction(self)


    def GetCostFunction(self, *args) -> "itkSingleValuedCostFunction *":
        """
        GetCostFunction(itkSingleValuedNonLinearOptimizer self) -> itkSingleValuedCostFunction
        GetCostFunction(itkSingleValuedNonLinearOptimizer self) -> itkSingleValuedCostFunction
        """
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetCostFunction(self, *args)


    def GetValue(self, parameters: 'itkOptimizerParametersD') -> "double":
        """
        GetValue(itkSingleValuedNonLinearOptimizer self, itkOptimizerParametersD parameters) -> double

        Get the cost function
        value at the given parameters. 
        """
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetValue(self, parameters)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkSingleValuedNonLinearOptimizer

    def cast(obj: 'itkLightObject') -> "itkSingleValuedNonLinearOptimizer *":
        """cast(itkLightObject obj) -> itkSingleValuedNonLinearOptimizer"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleValuedNonLinearOptimizer

        Create a new object of the class itkSingleValuedNonLinearOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleValuedNonLinearOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleValuedNonLinearOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedNonLinearOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedNonLinearOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_Clone, None, itkSingleValuedNonLinearOptimizer)
itkSingleValuedNonLinearOptimizer.SetCostFunction = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_SetCostFunction, None, itkSingleValuedNonLinearOptimizer)
itkSingleValuedNonLinearOptimizer.GetModifiableCostFunction = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetModifiableCostFunction, None, itkSingleValuedNonLinearOptimizer)
itkSingleValuedNonLinearOptimizer.GetCostFunction = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetCostFunction, None, itkSingleValuedNonLinearOptimizer)
itkSingleValuedNonLinearOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_GetValue, None, itkSingleValuedNonLinearOptimizer)
itkSingleValuedNonLinearOptimizer_swigregister = _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_swigregister
itkSingleValuedNonLinearOptimizer_swigregister(itkSingleValuedNonLinearOptimizer)

def itkSingleValuedNonLinearOptimizer___New_orig__() -> "itkSingleValuedNonLinearOptimizer_Pointer":
    """itkSingleValuedNonLinearOptimizer___New_orig__() -> itkSingleValuedNonLinearOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer___New_orig__()

def itkSingleValuedNonLinearOptimizer_cast(obj: 'itkLightObject') -> "itkSingleValuedNonLinearOptimizer *":
    """itkSingleValuedNonLinearOptimizer_cast(itkLightObject obj) -> itkSingleValuedNonLinearOptimizer"""
    return _ITKOptimizersBasePython.itkSingleValuedNonLinearOptimizer_cast(obj)

class itkSingleValuedNonLinearVnlOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    This class is a base for the Optimization methods that optimize a
    single valued function.

    It is an Adaptor class for optimizers provided by the vnl library

    C++ includes: itkSingleValuedNonLinearVnlOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetMaximize(self) -> "bool const &":
        """
        GetMaximize(itkSingleValuedNonLinearVnlOptimizer self) -> bool const &

        Methods to define
        whether the cost function will be maximized or minimized. By default
        the VNL amoeba optimizer is only a minimizer. Maximization is
        implemented here by notifying the CostFunctionAdaptor which in its
        turn will multiply the function values and its derivative by -1.0. 
        """
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetMaximize(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """SetMaximize(itkSingleValuedNonLinearVnlOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_SetMaximize(self, _arg)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkSingleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkSingleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MaximizeOff(self)


    def GetMinimize(self) -> "bool":
        """GetMinimize(itkSingleValuedNonLinearVnlOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetMinimize(self)


    def SetMinimize(self, v: 'bool') -> "void":
        """SetMinimize(itkSingleValuedNonLinearVnlOptimizer self, bool v)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_SetMinimize(self, v)


    def MinimizeOn(self) -> "void":
        """MinimizeOn(itkSingleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MinimizeOn(self)


    def MinimizeOff(self) -> "void":
        """MinimizeOff(itkSingleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MinimizeOff(self)


    def GetCachedValue(self) -> "double const &":
        """
        GetCachedValue(itkSingleValuedNonLinearVnlOptimizer self) -> double const &

        Return Cached
        Values. These method have the advantage of not triggering a
        recomputation of the metric value, but it has the disadvantage of
        returning a value that may not be the one corresponding to the current
        parameters. For GUI update purposes, this method is a good option, for
        mathematical validation you should rather call GetValue(). 
        """
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedValue(self)


    def GetCachedDerivative(self) -> "itkArrayD const &":
        """GetCachedDerivative(itkSingleValuedNonLinearVnlOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedDerivative(self)


    def GetCachedCurrentPosition(self) -> "itkOptimizerParametersD const &":
        """GetCachedCurrentPosition(itkSingleValuedNonLinearVnlOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedCurrentPosition(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkSingleValuedNonLinearVnlOptimizer

    def cast(obj: 'itkLightObject') -> "itkSingleValuedNonLinearVnlOptimizer *":
        """cast(itkLightObject obj) -> itkSingleValuedNonLinearVnlOptimizer"""
        return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleValuedNonLinearVnlOptimizer

        Create a new object of the class itkSingleValuedNonLinearVnlOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleValuedNonLinearVnlOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleValuedNonLinearVnlOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedNonLinearVnlOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedNonLinearVnlOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetMaximize, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_SetMaximize, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MaximizeOn, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MaximizeOff, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.GetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetMinimize, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.SetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_SetMinimize, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.MinimizeOn = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MinimizeOn, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.MinimizeOff = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_MinimizeOff, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.GetCachedValue = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedValue, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.GetCachedDerivative = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedDerivative, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer.GetCachedCurrentPosition = new_instancemethod(_ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_GetCachedCurrentPosition, None, itkSingleValuedNonLinearVnlOptimizer)
itkSingleValuedNonLinearVnlOptimizer_swigregister = _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_swigregister
itkSingleValuedNonLinearVnlOptimizer_swigregister(itkSingleValuedNonLinearVnlOptimizer)

def itkSingleValuedNonLinearVnlOptimizer_cast(obj: 'itkLightObject') -> "itkSingleValuedNonLinearVnlOptimizer *":
    """itkSingleValuedNonLinearVnlOptimizer_cast(itkLightObject obj) -> itkSingleValuedNonLinearVnlOptimizer"""
    return _ITKOptimizersBasePython.itkSingleValuedNonLinearVnlOptimizer_cast(obj)

class itkAmoebaOptimizer(itkSingleValuedNonLinearVnlOptimizer):
    """


    Wrap of the vnl_amoeba algorithm.

    AmoebaOptimizer is a wrapper around the vnl_amoeba algorithm which is
    an implementation of the Nelder-Meade downhill simplex problem. For
    most problems, it is a few times slower than a Levenberg-Marquardt
    algorithm but does not require derivatives of its cost function. It
    works by creating a simplex (n+1 points in ND space). The cost
    function is evaluated at each corner of the simplex. The simplex is
    then modified (by reflecting a corner about the opposite edge, by
    shrinking the entire simplex, by contracting one edge of the simplex,
    or by expanding the simplex) in searching for the minimum of the cost
    function.

    The methods AutomaticInitialSimplex() and SetInitialSimplexDelta()
    control whether the optimizer defines the initial simplex
    automatically (by constructing a very small simplex around the initial
    position) or uses a user supplied simplex size.

    The method SetOptimizeWithRestarts() indicates that the amoeabe
    algorithm should be rerun after if converges. This heuristic increases
    the chances of escaping from a local optimum. Each time the simplex is
    initialized with the best solution obtained by the previous runs. The
    edge length is half of that from the previous iteration. The heuristic
    is terminated if the total number of iterations is greater-equal than
    the maximal number of iterations (SetMaximumNumberOfIterations) or the
    difference between the current function value and the best function
    value is less than a threshold (SetFunctionConvergenceTolerance) and
    max(|best_parameters_i - current_parameters_i|) is less than a
    threshold (SetParametersConvergenceTolerance).

    C++ includes: itkAmoebaOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAmoebaOptimizer_Pointer":
        """__New_orig__() -> itkAmoebaOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAmoebaOptimizer_Pointer":
        """Clone(itkAmoebaOptimizer self) -> itkAmoebaOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_Clone(self)


    def SetMaximumNumberOfIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumNumberOfIterations(itkAmoebaOptimizer self, unsigned int const _arg)

        Set/Get the maximum number of iterations. The optimization algorithm
        will terminate after the maximum number of iterations has been
        reached. The default value is defined as
        DEFAULT_MAXIMAL_NUMBER_OF_ITERATIONS. 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self) -> "unsigned int":
        """GetMaximumNumberOfIterations(itkAmoebaOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetMaximumNumberOfIterations(self)


    def SetAutomaticInitialSimplex(self, _arg: 'bool const') -> "void":
        """
        SetAutomaticInitialSimplex(itkAmoebaOptimizer self, bool const _arg)

        Set/Get
        the mode which determines how the amoeba algorithm defines the initial
        simplex. Default is AutomaticInitialSimplexOn. If
        AutomaticInitialSimplex is on, the initial simplex is created with a
        default size. If AutomaticInitialSimplex is off, then
        InitialSimplexDelta will be used to define the initial simplex,
        setting the ith corner of the simplex as [x0[0], x0[1], ...,
        x0[i]+InitialSimplexDelta[i], ..., x0[d-1]]. 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetAutomaticInitialSimplex(self, _arg)


    def AutomaticInitialSimplexOn(self) -> "void":
        """AutomaticInitialSimplexOn(itkAmoebaOptimizer self)"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_AutomaticInitialSimplexOn(self)


    def AutomaticInitialSimplexOff(self) -> "void":
        """AutomaticInitialSimplexOff(itkAmoebaOptimizer self)"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_AutomaticInitialSimplexOff(self)


    def GetAutomaticInitialSimplex(self) -> "bool":
        """GetAutomaticInitialSimplex(itkAmoebaOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetAutomaticInitialSimplex(self)


    def SetOptimizeWithRestarts(self, _arg: 'bool const') -> "void":
        """
        SetOptimizeWithRestarts(itkAmoebaOptimizer self, bool const _arg)

        Set/Get the
        mode that determines if we want to use multiple runs of the Amoeba
        optimizer. If true, then the optimizer is rerun after it converges.
        The additional runs are performed using a simplex initialized with the
        best solution obtained by the previous runs. The edge length is half
        of that from the previous iteration. 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetOptimizeWithRestarts(self, _arg)


    def OptimizeWithRestartsOn(self) -> "void":
        """OptimizeWithRestartsOn(itkAmoebaOptimizer self)"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_OptimizeWithRestartsOn(self)


    def OptimizeWithRestartsOff(self) -> "void":
        """OptimizeWithRestartsOff(itkAmoebaOptimizer self)"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_OptimizeWithRestartsOff(self)


    def GetOptimizeWithRestarts(self) -> "bool":
        """GetOptimizeWithRestarts(itkAmoebaOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetOptimizeWithRestarts(self)


    def SetInitialSimplexDelta(self, initialSimplexDelta: 'itkOptimizerParametersD', automaticInitialSimplex: 'bool'=False) -> "void":
        """
        SetInitialSimplexDelta(itkAmoebaOptimizer self, itkOptimizerParametersD initialSimplexDelta, bool automaticInitialSimplex=False)
        SetInitialSimplexDelta(itkAmoebaOptimizer self, itkOptimizerParametersD initialSimplexDelta)

        Set/Get the
        deltas that are used to define the initial simplex when
        AutomaticInitialSimplex is off. 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetInitialSimplexDelta(self, initialSimplexDelta, automaticInitialSimplex)


    def GetInitialSimplexDelta(self) -> "itkOptimizerParametersD":
        """GetInitialSimplexDelta(itkAmoebaOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetInitialSimplexDelta(self)


    def SetParametersConvergenceTolerance(self, _arg: 'double const') -> "void":
        """
        SetParametersConvergenceTolerance(itkAmoebaOptimizer self, double const _arg)

        The optimization algorithm will terminate when the simplex diameter
        and the difference in cost function values at the corners of the
        simplex falls below user specified thresholds. The simplex diameter
        threshold is set via SetParametersConvergenceTolerance(). 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetParametersConvergenceTolerance(self, _arg)


    def GetParametersConvergenceTolerance(self) -> "double":
        """GetParametersConvergenceTolerance(itkAmoebaOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetParametersConvergenceTolerance(self)


    def SetFunctionConvergenceTolerance(self, _arg: 'double const') -> "void":
        """
        SetFunctionConvergenceTolerance(itkAmoebaOptimizer self, double const _arg)

        The
        optimization algorithm will terminate when the simplex diameter and
        the difference in cost function values at the corners of the simplex
        falls below user specified thresholds. The cost function convergence
        threshold is set via SetFunctionConvergenceTolerance(). 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_SetFunctionConvergenceTolerance(self, _arg)


    def GetFunctionConvergenceTolerance(self) -> "double":
        """GetFunctionConvergenceTolerance(itkAmoebaOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetFunctionConvergenceTolerance(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkAmoebaOptimizer self) -> double

        Return Current Value 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetValue(self)


    def GetOptimizer(self) -> "vnl_amoeba *":
        """
        GetOptimizer(itkAmoebaOptimizer self) -> vnl_amoeba *

        Method for getting
        access to the internal optimizer. 
        """
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_GetOptimizer(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkAmoebaOptimizer

    def cast(obj: 'itkLightObject') -> "itkAmoebaOptimizer *":
        """cast(itkLightObject obj) -> itkAmoebaOptimizer"""
        return _ITKOptimizersBasePython.itkAmoebaOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAmoebaOptimizer

        Create a new object of the class itkAmoebaOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAmoebaOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAmoebaOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAmoebaOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAmoebaOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_Clone, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetMaximumNumberOfIterations, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetMaximumNumberOfIterations, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetAutomaticInitialSimplex = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetAutomaticInitialSimplex, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.AutomaticInitialSimplexOn = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_AutomaticInitialSimplexOn, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.AutomaticInitialSimplexOff = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_AutomaticInitialSimplexOff, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetAutomaticInitialSimplex = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetAutomaticInitialSimplex, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetOptimizeWithRestarts = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetOptimizeWithRestarts, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.OptimizeWithRestartsOn = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_OptimizeWithRestartsOn, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.OptimizeWithRestartsOff = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_OptimizeWithRestartsOff, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetOptimizeWithRestarts = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetOptimizeWithRestarts, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetInitialSimplexDelta = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetInitialSimplexDelta, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetInitialSimplexDelta = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetInitialSimplexDelta, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetParametersConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetParametersConvergenceTolerance, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetParametersConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetParametersConvergenceTolerance, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.SetFunctionConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_SetFunctionConvergenceTolerance, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetFunctionConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetFunctionConvergenceTolerance, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetValue, None, itkAmoebaOptimizer)
itkAmoebaOptimizer.GetOptimizer = new_instancemethod(_ITKOptimizersBasePython.itkAmoebaOptimizer_GetOptimizer, None, itkAmoebaOptimizer)
itkAmoebaOptimizer_swigregister = _ITKOptimizersBasePython.itkAmoebaOptimizer_swigregister
itkAmoebaOptimizer_swigregister(itkAmoebaOptimizer)

def itkAmoebaOptimizer___New_orig__() -> "itkAmoebaOptimizer_Pointer":
    """itkAmoebaOptimizer___New_orig__() -> itkAmoebaOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkAmoebaOptimizer___New_orig__()

def itkAmoebaOptimizer_cast(obj: 'itkLightObject') -> "itkAmoebaOptimizer *":
    """itkAmoebaOptimizer_cast(itkLightObject obj) -> itkAmoebaOptimizer"""
    return _ITKOptimizersBasePython.itkAmoebaOptimizer_cast(obj)

class itkConjugateGradientOptimizer(itkSingleValuedNonLinearVnlOptimizer):
    """


    Wrap of the vnl_conjugate_gradient.

    C++ includes: itkConjugateGradientOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConjugateGradientOptimizer_Pointer":
        """__New_orig__() -> itkConjugateGradientOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConjugateGradientOptimizer_Pointer":
        """Clone(itkConjugateGradientOptimizer self) -> itkConjugateGradientOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_Clone(self)


    def GetOptimizer(self) -> "vnl_conjugate_gradient *":
        """
        GetOptimizer(itkConjugateGradientOptimizer self) -> vnl_conjugate_gradient *

        Method for getting
        access to the internal optimizer 
        """
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetOptimizer(self)


    def GetNumberOfIterations(self) -> "unsigned long":
        """
        GetNumberOfIterations(itkConjugateGradientOptimizer self) -> unsigned long

        Return the
        number of iterations performed so far 
        """
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetNumberOfIterations(self)


    def GetCurrentIteration(self) -> "unsigned long":
        """GetCurrentIteration(itkConjugateGradientOptimizer self) -> unsigned long"""
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetCurrentIteration(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkConjugateGradientOptimizer self) -> double

        Return Current Value 
        """
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetValue(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkConjugateGradientOptimizer

    def cast(obj: 'itkLightObject') -> "itkConjugateGradientOptimizer *":
        """cast(itkLightObject obj) -> itkConjugateGradientOptimizer"""
        return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConjugateGradientOptimizer

        Create a new object of the class itkConjugateGradientOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConjugateGradientOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConjugateGradientOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConjugateGradientOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConjugateGradientOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkConjugateGradientOptimizer_Clone, None, itkConjugateGradientOptimizer)
itkConjugateGradientOptimizer.GetOptimizer = new_instancemethod(_ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetOptimizer, None, itkConjugateGradientOptimizer)
itkConjugateGradientOptimizer.GetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetNumberOfIterations, None, itkConjugateGradientOptimizer)
itkConjugateGradientOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetCurrentIteration, None, itkConjugateGradientOptimizer)
itkConjugateGradientOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkConjugateGradientOptimizer_GetValue, None, itkConjugateGradientOptimizer)
itkConjugateGradientOptimizer_swigregister = _ITKOptimizersBasePython.itkConjugateGradientOptimizer_swigregister
itkConjugateGradientOptimizer_swigregister(itkConjugateGradientOptimizer)

def itkConjugateGradientOptimizer___New_orig__() -> "itkConjugateGradientOptimizer_Pointer":
    """itkConjugateGradientOptimizer___New_orig__() -> itkConjugateGradientOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkConjugateGradientOptimizer___New_orig__()

def itkConjugateGradientOptimizer_cast(obj: 'itkLightObject') -> "itkConjugateGradientOptimizer *":
    """itkConjugateGradientOptimizer_cast(itkLightObject obj) -> itkConjugateGradientOptimizer"""
    return _ITKOptimizersBasePython.itkConjugateGradientOptimizer_cast(obj)

class itkExhaustiveOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    Optimizer that fully samples a grid on the parametric space.

    This optimizer is equivalent to an exhaustive search in a discrete
    grid defined over the parametric space. The grid is centered on the
    initial position. The subdivisions of the grid along each one of the
    dimensions of the parametric space is defined by an array of number of
    steps.

    A typical use is to plot the metric space to get an idea of how noisy
    it space with respect to translations along x, y and z in a 3D
    registration application: Here it is assumed that the transform is
    Euler3DTransform.

    The optimizer throws IterationEvents after every iteration. We use
    this to plot the metric space in an image as follows:

    The image size is expected to be 11 x 11 x 11.

    If you wish to use different step lengths along each parametric axis,
    you can use the SetScales() method. This accepts an array, each
    element represents the number of subdivisions per step length. For
    instance scales of [0.5 1 4] along with a step length of 2 will cause
    the optimizer to search the metric space on a grid with x,y,z spacing
    of [1 2 8].

    Physical dimensions of the grid are influenced by both the scales and
    the number of steps along each dimension, a side of the region is
    stepLength*(2*numberOfSteps[d]+1)*scaling[d].

    C++ includes: itkExhaustiveOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkExhaustiveOptimizer_Pointer":
        """__New_orig__() -> itkExhaustiveOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkExhaustiveOptimizer_Pointer":
        """Clone(itkExhaustiveOptimizer self) -> itkExhaustiveOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_Clone(self)


    def StartWalking(self) -> "void":
        """StartWalking(itkExhaustiveOptimizer self)"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_StartWalking(self)


    def ResumeWalking(self) -> "void":
        """ResumeWalking(itkExhaustiveOptimizer self)"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_ResumeWalking(self)


    def StopWalking(self) -> "void":
        """StopWalking(itkExhaustiveOptimizer self)"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_StopWalking(self)


    def SetStepLength(self, _arg: 'double const') -> "void":
        """SetStepLength(itkExhaustiveOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_SetStepLength(self, _arg)


    def SetNumberOfSteps(self, _arg: 'itkArrayUL') -> "void":
        """SetNumberOfSteps(itkExhaustiveOptimizer self, itkArrayUL _arg)"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_SetNumberOfSteps(self, _arg)


    def GetStepLength(self) -> "double const &":
        """GetStepLength(itkExhaustiveOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetStepLength(self)


    def GetNumberOfSteps(self) -> "itkArrayUL const &":
        """GetNumberOfSteps(itkExhaustiveOptimizer self) -> itkArrayUL"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetNumberOfSteps(self)


    def GetCurrentValue(self) -> "double const &":
        """GetCurrentValue(itkExhaustiveOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetCurrentValue(self)


    def GetMaximumMetricValue(self) -> "double const &":
        """GetMaximumMetricValue(itkExhaustiveOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumMetricValue(self)


    def GetMinimumMetricValue(self) -> "double const &":
        """GetMinimumMetricValue(itkExhaustiveOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMinimumMetricValue(self)


    def GetMinimumMetricValuePosition(self) -> "itkOptimizerParametersD const &":
        """GetMinimumMetricValuePosition(itkExhaustiveOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMinimumMetricValuePosition(self)


    def GetMaximumMetricValuePosition(self) -> "itkOptimizerParametersD const &":
        """GetMaximumMetricValuePosition(itkExhaustiveOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumMetricValuePosition(self)


    def GetCurrentIndex(self) -> "itkOptimizerParametersD const &":
        """GetCurrentIndex(itkExhaustiveOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetCurrentIndex(self)


    def GetMaximumNumberOfIterations(self) -> "unsigned long const &":
        """GetMaximumNumberOfIterations(itkExhaustiveOptimizer self) -> unsigned long const &"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumNumberOfIterations(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkExhaustiveOptimizer

    def cast(obj: 'itkLightObject') -> "itkExhaustiveOptimizer *":
        """cast(itkLightObject obj) -> itkExhaustiveOptimizer"""
        return _ITKOptimizersBasePython.itkExhaustiveOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkExhaustiveOptimizer

        Create a new object of the class itkExhaustiveOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExhaustiveOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkExhaustiveOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkExhaustiveOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkExhaustiveOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_Clone, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.StartWalking = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_StartWalking, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.ResumeWalking = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_ResumeWalking, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.StopWalking = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_StopWalking, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.SetStepLength = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_SetStepLength, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.SetNumberOfSteps = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_SetNumberOfSteps, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetStepLength = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetStepLength, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetNumberOfSteps = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetNumberOfSteps, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetCurrentValue = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetCurrentValue, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetMaximumMetricValue = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumMetricValue, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetMinimumMetricValue = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMinimumMetricValue, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetMinimumMetricValuePosition = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMinimumMetricValuePosition, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetMaximumMetricValuePosition = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumMetricValuePosition, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetCurrentIndex = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetCurrentIndex, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer.GetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkExhaustiveOptimizer_GetMaximumNumberOfIterations, None, itkExhaustiveOptimizer)
itkExhaustiveOptimizer_swigregister = _ITKOptimizersBasePython.itkExhaustiveOptimizer_swigregister
itkExhaustiveOptimizer_swigregister(itkExhaustiveOptimizer)

def itkExhaustiveOptimizer___New_orig__() -> "itkExhaustiveOptimizer_Pointer":
    """itkExhaustiveOptimizer___New_orig__() -> itkExhaustiveOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkExhaustiveOptimizer___New_orig__()

def itkExhaustiveOptimizer_cast(obj: 'itkLightObject') -> "itkExhaustiveOptimizer *":
    """itkExhaustiveOptimizer_cast(itkLightObject obj) -> itkExhaustiveOptimizer"""
    return _ITKOptimizersBasePython.itkExhaustiveOptimizer_cast(obj)

class itkGradientDescentOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    Implement a gradient descent optimizer.

    GradientDescentOptimizer implements a simple gradient descent
    optimizer. At each iteration the current position is updated according
    to

    \\[ p_{n+1} = p_n + \\mbox{learningRate} \\,
    \\frac{\\partial f(p_n) }{\\partial p_n} \\]

    The learning rate is a fixed scalar defined via SetLearningRate(). The
    optimizer steps through a user defined number of iterations; no
    convergence checking is done.

    Additionally, user can scale each component, $ \\partial f /
    \\partial p $, by setting a scaling vector using method SetScale().

    See:   RegularStepGradientDescentOptimizer

    C++ includes: itkGradientDescentOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientDescentOptimizer_Pointer":
        """__New_orig__() -> itkGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientDescentOptimizer_Pointer":
        """Clone(itkGradientDescentOptimizer self) -> itkGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_Clone(self)


    def GetMaximize(self) -> "bool const &":
        """
        GetMaximize(itkGradientDescentOptimizer self) -> bool const &

        Methods to configure
        the cost function. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetMaximize(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """SetMaximize(itkGradientDescentOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_SetMaximize(self, _arg)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkGradientDescentOptimizer self)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkGradientDescentOptimizer self)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_MaximizeOff(self)


    def GetMinimize(self) -> "bool":
        """GetMinimize(itkGradientDescentOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetMinimize(self)


    def SetMinimize(self, v: 'bool') -> "void":
        """SetMinimize(itkGradientDescentOptimizer self, bool v)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_SetMinimize(self, v)


    def MinimizeOn(self) -> "void":
        """MinimizeOn(itkGradientDescentOptimizer self)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_MinimizeOn(self)


    def MinimizeOff(self) -> "void":
        """MinimizeOff(itkGradientDescentOptimizer self)"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_MinimizeOff(self)


    def AdvanceOneStep(self) -> "void":
        """
        AdvanceOneStep(itkGradientDescentOptimizer self)

        Advance one step
        following the gradient direction. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_AdvanceOneStep(self)


    def ResumeOptimization(self) -> "void":
        """
        ResumeOptimization(itkGradientDescentOptimizer self)

        Resume
        previously stopped optimization with current parameters See:
        StopOptimization. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_ResumeOptimization(self)


    def StopOptimization(self) -> "void":
        """
        StopOptimization(itkGradientDescentOptimizer self)

        Stop optimization.
        See:   ResumeOptimization 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_StopOptimization(self)


    def SetLearningRate(self, _arg: 'double const') -> "void":
        """
        SetLearningRate(itkGradientDescentOptimizer self, double const _arg)

        Set the learning
        rate. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_SetLearningRate(self, _arg)


    def GetLearningRate(self) -> "double const &":
        """
        GetLearningRate(itkGradientDescentOptimizer self) -> double const &

        Get the learning
        rate. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetLearningRate(self)


    def SetNumberOfIterations(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfIterations(itkGradientDescentOptimizer self, unsigned long const _arg)

        Set the
        number of iterations. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_SetNumberOfIterations(self, _arg)


    def GetNumberOfIterations(self) -> "unsigned long const &":
        """
        GetNumberOfIterations(itkGradientDescentOptimizer self) -> unsigned long const &

        Get the
        number of iterations. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetNumberOfIterations(self)


    def GetCurrentIteration(self) -> "unsigned long":
        """
        GetCurrentIteration(itkGradientDescentOptimizer self) -> unsigned long

        Get the current
        iteration number. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetCurrentIteration(self)


    def GetValue(self) -> "double const &":
        """
        GetValue(itkGradientDescentOptimizer self) -> double const &

        Get the current value. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetValue(self)


    def GetStopCondition(self) -> "itkGradientDescentOptimizerEnums::StopConditionGradientDescentOptimizer const &":
        """
        GetStopCondition(itkGradientDescentOptimizer self) -> itkGradientDescentOptimizerEnums::StopConditionGradientDescentOptimizer const &

        Get Stop
        condition. 
        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetStopCondition(self)


    def GetGradient(self) -> "itkArrayD const &":
        """
        GetGradient(itkGradientDescentOptimizer self) -> itkArrayD

        Get Gradient condition.

        """
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_GetGradient(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkGradientDescentOptimizer

    def cast(obj: 'itkLightObject') -> "itkGradientDescentOptimizer *":
        """cast(itkLightObject obj) -> itkGradientDescentOptimizer"""
        return _ITKOptimizersBasePython.itkGradientDescentOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientDescentOptimizer

        Create a new object of the class itkGradientDescentOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientDescentOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientDescentOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientDescentOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientDescentOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_Clone, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetMaximize, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_SetMaximize, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_MaximizeOn, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_MaximizeOff, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetMinimize, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.SetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_SetMinimize, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.MinimizeOn = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_MinimizeOn, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.MinimizeOff = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_MinimizeOff, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.AdvanceOneStep = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_AdvanceOneStep, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.ResumeOptimization = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_ResumeOptimization, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.StopOptimization = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_StopOptimization, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.SetLearningRate = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_SetLearningRate, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetLearningRate = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetLearningRate, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.SetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_SetNumberOfIterations, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetNumberOfIterations, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetCurrentIteration, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetValue, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetStopCondition = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetStopCondition, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer.GetGradient = new_instancemethod(_ITKOptimizersBasePython.itkGradientDescentOptimizer_GetGradient, None, itkGradientDescentOptimizer)
itkGradientDescentOptimizer_swigregister = _ITKOptimizersBasePython.itkGradientDescentOptimizer_swigregister
itkGradientDescentOptimizer_swigregister(itkGradientDescentOptimizer)

def itkGradientDescentOptimizer___New_orig__() -> "itkGradientDescentOptimizer_Pointer":
    """itkGradientDescentOptimizer___New_orig__() -> itkGradientDescentOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkGradientDescentOptimizer___New_orig__()

def itkGradientDescentOptimizer_cast(obj: 'itkLightObject') -> "itkGradientDescentOptimizer *":
    """itkGradientDescentOptimizer_cast(itkLightObject obj) -> itkGradientDescentOptimizer"""
    return _ITKOptimizersBasePython.itkGradientDescentOptimizer_cast(obj)

class itkLBFGSBOptimizer(itkSingleValuedNonLinearVnlOptimizer):
    """


    Limited memory Broyden Fletcher Goldfarb Shannon minimization with
    simple bounds.

    This class is a wrapper for converted Fortran code for performing
    limited memory Broyden Fletcher Goldfarb Shannon minimization with
    simple bounds. The algorithm mininizes a nonlinear function f(x) of n
    variables subject to simple bound constraints of l <= x <= u.

    See also the documentation in Numerics/lbfgsb.c

    References:

    [1] R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for
    Bound Constrained Optimization, (1995), SIAM Journal on Scientific and
    Statistical Computing , 16, 5, pp. 1190-1208.

    [2] C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778:
    L-BFGS-B, FORTRAN routines for large scale bound constrained
    optimization (1997), ACM Transactions on Mathematical Software, Vol
    23, Num. 4, pp. 550 - 560.

    C++ includes: itkLBFGSBOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLBFGSBOptimizer_Pointer":
        """__New_orig__() -> itkLBFGSBOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLBFGSBOptimizer_Pointer":
        """Clone(itkLBFGSBOptimizer self) -> itkLBFGSBOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_Clone(self)


    def SetTrace(self, flag: 'bool') -> "void":
        """
        SetTrace(itkLBFGSBOptimizer self, bool flag)

        Set/Get the optimizer
        trace flag. If set to true, the optimizer prints out information every
        iteration. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetTrace(self, flag)


    def GetTrace(self) -> "bool":
        """GetTrace(itkLBFGSBOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetTrace(self)


    def TraceOn(self) -> "void":
        """TraceOn(itkLBFGSBOptimizer self)"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_TraceOn(self)


    def TraceOff(self) -> "void":
        """TraceOff(itkLBFGSBOptimizer self)"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_TraceOff(self)


    def SetLowerBound(self, value: 'itkArrayD') -> "void":
        """
        SetLowerBound(itkLBFGSBOptimizer self, itkArrayD value)

        Set the lower bound
        value for each variable. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetLowerBound(self, value)


    def GetLowerBound(self) -> "itkArrayD const &":
        """GetLowerBound(itkLBFGSBOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetLowerBound(self)


    def SetUpperBound(self, value: 'itkArrayD') -> "void":
        """
        SetUpperBound(itkLBFGSBOptimizer self, itkArrayD value)

        Set the upper bound
        value for each variable. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetUpperBound(self, value)


    def GetUpperBound(self) -> "itkArrayD const &":
        """GetUpperBound(itkLBFGSBOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetUpperBound(self)


    def SetBoundSelection(self, select: 'itkArraySL') -> "void":
        """
        SetBoundSelection(itkLBFGSBOptimizer self, itkArraySL select)

        Set the boundary
        condition for each variable, where select[i] = 0 if x[i] is unbounded,
        = 1 if x[i] has only a lower bound, = 2 if x[i] has both lower and
        upper bounds, and = 3 if x[1] has only an upper bound 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetBoundSelection(self, select)


    def GetBoundSelection(self) -> "itkArraySL const &":
        """GetBoundSelection(itkLBFGSBOptimizer self) -> itkArraySL"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetBoundSelection(self)


    def SetCostFunctionConvergenceFactor(self, arg0: 'double') -> "void":
        """
        SetCostFunctionConvergenceFactor(itkLBFGSBOptimizer self, double arg0)

        Set/Get the CostFunctionConvergenceFactor. Algorithm terminates when
        the reduction in cost function is less than factor * epsmcj where
        epsmch is the machine precision. Typical values for factor: 1e+12 for
        low accuracy; 1e+7 for moderate accuracy and 1e+1 for extremely high
        accuracy. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetCostFunctionConvergenceFactor(self, arg0)


    def GetCostFunctionConvergenceFactor(self) -> "double":
        """GetCostFunctionConvergenceFactor(itkLBFGSBOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetCostFunctionConvergenceFactor(self)


    def SetProjectedGradientTolerance(self, arg0: 'double') -> "void":
        """
        SetProjectedGradientTolerance(itkLBFGSBOptimizer self, double arg0)

        Set/Get the ProjectedGradientTolerance. Algorithm terminates when the
        project gradient is below the tolerance. Default value is 1e-5. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetProjectedGradientTolerance(self, arg0)


    def GetProjectedGradientTolerance(self) -> "double":
        """GetProjectedGradientTolerance(itkLBFGSBOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetProjectedGradientTolerance(self)


    def SetMaximumNumberOfIterations(self, arg0: 'unsigned int') -> "void":
        """
        SetMaximumNumberOfIterations(itkLBFGSBOptimizer self, unsigned int arg0)

        Set/Get the MaximumNumberOfIterations. Default is 500 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfIterations(self, arg0)


    def GetMaximumNumberOfIterations(self) -> "unsigned int":
        """GetMaximumNumberOfIterations(itkLBFGSBOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfIterations(self)


    def SetMaximumNumberOfEvaluations(self, arg0: 'unsigned int') -> "void":
        """
        SetMaximumNumberOfEvaluations(itkLBFGSBOptimizer self, unsigned int arg0)

        Set/Get the MaximumNumberOfEvaluations. Default is 500 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfEvaluations(self, arg0)


    def GetMaximumNumberOfEvaluations(self) -> "unsigned int":
        """GetMaximumNumberOfEvaluations(itkLBFGSBOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfEvaluations(self)


    def SetMaximumNumberOfCorrections(self, arg0: 'unsigned int') -> "void":
        """
        SetMaximumNumberOfCorrections(itkLBFGSBOptimizer self, unsigned int arg0)

        Set/Get the MaximumNumberOfCorrections. Default is 5 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfCorrections(self, arg0)


    def GetMaximumNumberOfCorrections(self) -> "unsigned int":
        """GetMaximumNumberOfCorrections(itkLBFGSBOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfCorrections(self)


    def SetScales(self, arg0: 'itkArrayD') -> "void":
        """
        SetScales(itkLBFGSBOptimizer self, itkArrayD arg0)

        This optimizer does not
        support scaling of the derivatives. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_SetScales(self, arg0)


    def GetCurrentIteration(self) -> "unsigned int const &":
        """
        GetCurrentIteration(itkLBFGSBOptimizer self) -> unsigned int const &

        Get the current
        iteration number. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetCurrentIteration(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkLBFGSBOptimizer self) -> double

        Get the current cost
        function value. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetValue(self)


    def GetInfinityNormOfProjectedGradient(self) -> "double const &":
        """
        GetInfinityNormOfProjectedGradient(itkLBFGSBOptimizer self) -> double const &

        Get the current infinity norm of the project gradient of the cost
        function. 
        """
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_GetInfinityNormOfProjectedGradient(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkLBFGSBOptimizer

    def cast(obj: 'itkLightObject') -> "itkLBFGSBOptimizer *":
        """cast(itkLightObject obj) -> itkLBFGSBOptimizer"""
        return _ITKOptimizersBasePython.itkLBFGSBOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLBFGSBOptimizer

        Create a new object of the class itkLBFGSBOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLBFGSBOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLBFGSBOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLBFGSBOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLBFGSBOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_Clone, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetTrace = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetTrace, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetTrace = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetTrace, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.TraceOn = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_TraceOn, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.TraceOff = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_TraceOff, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetLowerBound = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetLowerBound, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetLowerBound = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetLowerBound, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetUpperBound = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetUpperBound, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetUpperBound = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetUpperBound, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetBoundSelection = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetBoundSelection, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetBoundSelection = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetBoundSelection, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetCostFunctionConvergenceFactor = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetCostFunctionConvergenceFactor, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetCostFunctionConvergenceFactor = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetCostFunctionConvergenceFactor, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetProjectedGradientTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetProjectedGradientTolerance, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetProjectedGradientTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetProjectedGradientTolerance, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfIterations, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfIterations, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetMaximumNumberOfEvaluations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfEvaluations, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetMaximumNumberOfEvaluations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfEvaluations, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetMaximumNumberOfCorrections = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetMaximumNumberOfCorrections, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetMaximumNumberOfCorrections = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetMaximumNumberOfCorrections, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.SetScales = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_SetScales, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetCurrentIteration, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetValue, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer.GetInfinityNormOfProjectedGradient = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSBOptimizer_GetInfinityNormOfProjectedGradient, None, itkLBFGSBOptimizer)
itkLBFGSBOptimizer_swigregister = _ITKOptimizersBasePython.itkLBFGSBOptimizer_swigregister
itkLBFGSBOptimizer_swigregister(itkLBFGSBOptimizer)

def itkLBFGSBOptimizer___New_orig__() -> "itkLBFGSBOptimizer_Pointer":
    """itkLBFGSBOptimizer___New_orig__() -> itkLBFGSBOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkLBFGSBOptimizer___New_orig__()

def itkLBFGSBOptimizer_cast(obj: 'itkLightObject') -> "itkLBFGSBOptimizer *":
    """itkLBFGSBOptimizer_cast(itkLightObject obj) -> itkLBFGSBOptimizer"""
    return _ITKOptimizersBasePython.itkLBFGSBOptimizer_cast(obj)

class itkLBFGSOptimizer(itkSingleValuedNonLinearVnlOptimizer):
    """


    Wrap of the vnl_lbfgs algorithm for use in ITKv4 registration
    framework. The vnl_lbfgs is a wrapper for the NETLIB fortran code by
    Nocedal [1].

    LBFGS is a quasi-Newton method. Quasi-Newton methods use an
    approximate estimate of the inverse Hessian $ (\\nabla^2 f(x) )^{-1}
    $ to scale the gradient step: \\[ x_{n+1} = x_n - s (\\nabla^2
    f(x_n) )^{-1} \\nabla f(x) \\] with $ s $ the step size.

    The inverse Hessian is approximated from the gradients of previous
    iteration and thus only the gradient of the objective function is
    required.

    The step size $ s $ is determined through line search with the
    approach by More and Thuente [4]. This line search approach finds a
    step size such that \\[ \\lVert \\nabla f(x + s (\\nabla^2
    f(x_n) )^{-1} \\nabla f(x) ) \\rVert \\le \\nu \\lVert
    \\nabla f(x) \\rVert \\] The parameter $ \\nu $ is set through
    SetLineSearchAccuracy() (default 0.9) The default step length, i.e.
    starting step length for the line search, is set through
    SetDefaultStepLength() (default 1.0).

    The optimization stops when either the gradient satisfies the
    condition \\[ \\lVert \\nabla f(x) \\rVert \\le \\epsilon
    \\max(1, \\lVert X \\rVert) \\] or a maximum number of
    function evaluations has been reached. The tolerance $\\epsilon$ is
    set through SetGradientConvergenceTolerance() (default 1e-5) and the
    maximum number of function evaluations is set through
    SetMaximumNumberOfFunctionEvaluations() (default 2000).

    Note: The scales set through SetScales should be set or left at one.
    Otherwise the Hessian approximation will be disturbed and the
    optimizer is unlikely to find a minima.

    References:

    [1]NETLIB lbfgs

    [2] Jorge Nocedal. Updating Quasi-Newton Matrices with Limited
    Storage. Mathematics of Computation, Vol. 35, No. 151, pp. 773-782,
    1980.

    [3] Dong C. Liu and Jorge Nocedal. On the limited memory BFGS method
    for large scale optimization. Mathematical Programming B, Vol. 45, No.
    3, pp. 503-528, 1989.

    [4] More, J. J. and D. J. Thuente. Line Search Algorithms with
    Guaranteed Sufficient Decrease. ACM Transactions on Mathematical
    Software 20, no. 3 (1994): 286-307.

    C++ includes: itkLBFGSOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLBFGSOptimizer_Pointer":
        """__New_orig__() -> itkLBFGSOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLBFGSOptimizer_Pointer":
        """Clone(itkLBFGSOptimizer self) -> itkLBFGSOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_Clone(self)


    def GetOptimizer(self) -> "vnl_lbfgs *":
        """
        GetOptimizer(itkLBFGSOptimizer self) -> vnl_lbfgs *

        Method for getting
        access to the internal optimizer. 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetOptimizer(self)


    def SetTrace(self, flag: 'bool') -> "void":
        """
        SetTrace(itkLBFGSOptimizer self, bool flag)

        Set/Get the optimizer
        trace flag. If set to true, the optimizer prints out information every
        iteration. 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_SetTrace(self, flag)


    def GetTrace(self) -> "bool":
        """GetTrace(itkLBFGSOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetTrace(self)


    def TraceOn(self) -> "void":
        """TraceOn(itkLBFGSOptimizer self)"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_TraceOn(self)


    def TraceOff(self) -> "void":
        """TraceOff(itkLBFGSOptimizer self)"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_TraceOff(self)


    def SetMaximumNumberOfFunctionEvaluations(self, n: 'unsigned int') -> "void":
        """
        SetMaximumNumberOfFunctionEvaluations(itkLBFGSOptimizer self, unsigned int n)

        Set/Get the maximum number of function evaluations allowed. 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_SetMaximumNumberOfFunctionEvaluations(self, n)


    def GetMaximumNumberOfFunctionEvaluations(self) -> "unsigned int":
        """GetMaximumNumberOfFunctionEvaluations(itkLBFGSOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetMaximumNumberOfFunctionEvaluations(self)


    def SetGradientConvergenceTolerance(self, gtol: 'double') -> "void":
        """
        SetGradientConvergenceTolerance(itkLBFGSOptimizer self, double gtol)

        Set/Get the gradient convergence tolerance. This is a positive real
        number that determines the accuracy with which the solution is to be
        found. The optimization terminates when: ||G|| < gtol max(1,||X||)
        where ||.|| denotes the Euclidean norm. 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_SetGradientConvergenceTolerance(self, gtol)


    def GetGradientConvergenceTolerance(self) -> "double":
        """GetGradientConvergenceTolerance(itkLBFGSOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetGradientConvergenceTolerance(self)


    def SetLineSearchAccuracy(self, tol: 'double') -> "void":
        """
        SetLineSearchAccuracy(itkLBFGSOptimizer self, double tol)

        Set/Get the
        line search accuracy. This is a positive real number with a default
        value of 0.9, which controls the accuracy of the line search. If the
        function and gradient evaluations are inexpensive with respect to the
        cost of the iterations it may be advantageous to set the value to a
        small value (say 0.1). 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_SetLineSearchAccuracy(self, tol)


    def GetLineSearchAccuracy(self) -> "double":
        """GetLineSearchAccuracy(itkLBFGSOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetLineSearchAccuracy(self)


    def SetDefaultStepLength(self, stp: 'double') -> "void":
        """
        SetDefaultStepLength(itkLBFGSOptimizer self, double stp)

        Set/Get the
        default step size. This is a positive real number with a default value
        of 1.0 which determines the stpe size in the line search. 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_SetDefaultStepLength(self, stp)


    def GetDefaultStepLength(self) -> "double":
        """GetDefaultStepLength(itkLBFGSOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetDefaultStepLength(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkLBFGSOptimizer self) -> double

        Return Current Value 
        """
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_GetValue(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkLBFGSOptimizer

    def cast(obj: 'itkLightObject') -> "itkLBFGSOptimizer *":
        """cast(itkLightObject obj) -> itkLBFGSOptimizer"""
        return _ITKOptimizersBasePython.itkLBFGSOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLBFGSOptimizer

        Create a new object of the class itkLBFGSOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLBFGSOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLBFGSOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLBFGSOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLBFGSOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_Clone, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetOptimizer = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetOptimizer, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.SetTrace = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_SetTrace, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetTrace = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetTrace, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.TraceOn = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_TraceOn, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.TraceOff = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_TraceOff, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.SetMaximumNumberOfFunctionEvaluations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_SetMaximumNumberOfFunctionEvaluations, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetMaximumNumberOfFunctionEvaluations = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetMaximumNumberOfFunctionEvaluations, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.SetGradientConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_SetGradientConvergenceTolerance, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetGradientConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetGradientConvergenceTolerance, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.SetLineSearchAccuracy = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_SetLineSearchAccuracy, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetLineSearchAccuracy = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetLineSearchAccuracy, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.SetDefaultStepLength = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_SetDefaultStepLength, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetDefaultStepLength = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetDefaultStepLength, None, itkLBFGSOptimizer)
itkLBFGSOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkLBFGSOptimizer_GetValue, None, itkLBFGSOptimizer)
itkLBFGSOptimizer_swigregister = _ITKOptimizersBasePython.itkLBFGSOptimizer_swigregister
itkLBFGSOptimizer_swigregister(itkLBFGSOptimizer)

def itkLBFGSOptimizer___New_orig__() -> "itkLBFGSOptimizer_Pointer":
    """itkLBFGSOptimizer___New_orig__() -> itkLBFGSOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkLBFGSOptimizer___New_orig__()

def itkLBFGSOptimizer_cast(obj: 'itkLightObject') -> "itkLBFGSOptimizer *":
    """itkLBFGSOptimizer_cast(itkLightObject obj) -> itkLBFGSOptimizer"""
    return _ITKOptimizersBasePython.itkLBFGSOptimizer_cast(obj)

class itkMultipleValuedNonLinearOptimizer(itkNonLinearOptimizer):
    """


    This class is a base for the Optimization methods that optimize a
    multiple valued function.

    C++ includes: itkMultipleValuedNonLinearOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMultipleValuedNonLinearOptimizer_Pointer":
        """__New_orig__() -> itkMultipleValuedNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMultipleValuedNonLinearOptimizer_Pointer":
        """Clone(itkMultipleValuedNonLinearOptimizer self) -> itkMultipleValuedNonLinearOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_Clone(self)


    def SetCostFunction(self, costFunction: 'itkMultipleValuedCostFunction') -> "void":
        """
        SetCostFunction(itkMultipleValuedNonLinearOptimizer self, itkMultipleValuedCostFunction costFunction)

        Set the cost
        function. 
        """
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_SetCostFunction(self, costFunction)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkMultipleValuedNonLinearOptimizer

    def cast(obj: 'itkLightObject') -> "itkMultipleValuedNonLinearOptimizer *":
        """cast(itkLightObject obj) -> itkMultipleValuedNonLinearOptimizer"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultipleValuedNonLinearOptimizer

        Create a new object of the class itkMultipleValuedNonLinearOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultipleValuedNonLinearOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultipleValuedNonLinearOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultipleValuedNonLinearOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultipleValuedNonLinearOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_Clone, None, itkMultipleValuedNonLinearOptimizer)
itkMultipleValuedNonLinearOptimizer.SetCostFunction = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_SetCostFunction, None, itkMultipleValuedNonLinearOptimizer)
itkMultipleValuedNonLinearOptimizer_swigregister = _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_swigregister
itkMultipleValuedNonLinearOptimizer_swigregister(itkMultipleValuedNonLinearOptimizer)

def itkMultipleValuedNonLinearOptimizer___New_orig__() -> "itkMultipleValuedNonLinearOptimizer_Pointer":
    """itkMultipleValuedNonLinearOptimizer___New_orig__() -> itkMultipleValuedNonLinearOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer___New_orig__()

def itkMultipleValuedNonLinearOptimizer_cast(obj: 'itkLightObject') -> "itkMultipleValuedNonLinearOptimizer *":
    """itkMultipleValuedNonLinearOptimizer_cast(itkLightObject obj) -> itkMultipleValuedNonLinearOptimizer"""
    return _ITKOptimizersBasePython.itkMultipleValuedNonLinearOptimizer_cast(obj)

class itkMultipleValuedNonLinearVnlOptimizer(itkMultipleValuedNonLinearOptimizer):
    """


    This class is a base for the Optimization methods that optimize a
    multi-valued function.

    It is an Adaptor class for optimizers provided by the vnl library

    C++ includes: itkMultipleValuedNonLinearVnlOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetUseCostFunctionGradient(self, arg0: 'bool') -> "void":
        """
        SetUseCostFunctionGradient(itkMultipleValuedNonLinearVnlOptimizer self, bool arg0)

        Define
        if the Cost function should provide a customized Gradient computation
        or the gradient can be computed internally using a default approach 
        """
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_SetUseCostFunctionGradient(self, arg0)


    def UseCostFunctionGradientOn(self) -> "void":
        """UseCostFunctionGradientOn(itkMultipleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_UseCostFunctionGradientOn(self)


    def UseCostFunctionGradientOff(self) -> "void":
        """UseCostFunctionGradientOff(itkMultipleValuedNonLinearVnlOptimizer self)"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_UseCostFunctionGradientOff(self)


    def GetUseCostFunctionGradient(self) -> "bool":
        """GetUseCostFunctionGradient(itkMultipleValuedNonLinearVnlOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetUseCostFunctionGradient(self)


    def GetCachedValue(self) -> "itkArrayD const &":
        """
        GetCachedValue(itkMultipleValuedNonLinearVnlOptimizer self) -> itkArrayD

        Return Cached
        Values. These method have the advantage of not triggering a
        recomputation of the metric value, but it has the disadvantage of
        returning a value that may not be the one corresponding to the current
        parameters. For GUI update purposes, this method is a good option, for
        mathematical validation you should rather call GetValue(). 
        """
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedValue(self)


    def GetCachedDerivative(self) -> "itkArray2DD const &":
        """GetCachedDerivative(itkMultipleValuedNonLinearVnlOptimizer self) -> itkArray2DD"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedDerivative(self)


    def GetCachedCurrentPosition(self) -> "itkOptimizerParametersD const &":
        """GetCachedCurrentPosition(itkMultipleValuedNonLinearVnlOptimizer self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedCurrentPosition(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkMultipleValuedNonLinearVnlOptimizer

    def cast(obj: 'itkLightObject') -> "itkMultipleValuedNonLinearVnlOptimizer *":
        """cast(itkLightObject obj) -> itkMultipleValuedNonLinearVnlOptimizer"""
        return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMultipleValuedNonLinearVnlOptimizer

        Create a new object of the class itkMultipleValuedNonLinearVnlOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultipleValuedNonLinearVnlOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMultipleValuedNonLinearVnlOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultipleValuedNonLinearVnlOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultipleValuedNonLinearVnlOptimizer.SetUseCostFunctionGradient = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_SetUseCostFunctionGradient, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.UseCostFunctionGradientOn = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_UseCostFunctionGradientOn, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.UseCostFunctionGradientOff = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_UseCostFunctionGradientOff, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.GetUseCostFunctionGradient = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetUseCostFunctionGradient, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.GetCachedValue = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedValue, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.GetCachedDerivative = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedDerivative, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer.GetCachedCurrentPosition = new_instancemethod(_ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_GetCachedCurrentPosition, None, itkMultipleValuedNonLinearVnlOptimizer)
itkMultipleValuedNonLinearVnlOptimizer_swigregister = _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_swigregister
itkMultipleValuedNonLinearVnlOptimizer_swigregister(itkMultipleValuedNonLinearVnlOptimizer)

def itkMultipleValuedNonLinearVnlOptimizer_cast(obj: 'itkLightObject') -> "itkMultipleValuedNonLinearVnlOptimizer *":
    """itkMultipleValuedNonLinearVnlOptimizer_cast(itkLightObject obj) -> itkMultipleValuedNonLinearVnlOptimizer"""
    return _ITKOptimizersBasePython.itkMultipleValuedNonLinearVnlOptimizer_cast(obj)

class itkOnePlusOneEvolutionaryOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    1+1 evolutionary strategy optimizer

    This optimizer searches for the optimal parameters. It changes its
    search radius and position using the grow factor ,shrink factor, and
    isotropic probability function (which is a random unit normal variate
    generator).

    This optimizer needs a cost function and a random unit normal variate
    generator. The cost function should return cost with new position in
    parameter space which will be generated by 1+1 evolutionary strategy.
    Users should plug-in the random unit normal variate generator using
    SetNormalVariateGenerator method.

    The SetEpsilon method is the minimum value for the frobenius_norm of
    the covariance matrix. If the fnorm is smaller than this value, the
    optimization process will stop even before it hits the maximum
    iteration.

    Another way to stop the optimization process is calling the
    StopOptimization method. At next iteration after calling it, the
    optimization process will stop.

    This optimizing scheme was initially developed and implemented by
    Martin Styner, Univ. of North Carolina at Chapel Hill, and his
    colleagues.

    For more details. refer to the following articles. "Parametric
    estimate of intensity inhomogeneities applied to MRI" Martin Styner,
    G. Gerig, Christian Brechbuehler, Gabor Szekely, IEEE TRANSACTIONS ON
    MEDICAL IMAGING; 19(3), pp. 153-165, 2000,
    (http://www.cs.unc.edu/~styner/docs/tmi00.pdf)

    "Evaluation of 2D/3D bias correction with 1+1ES-optimization" Martin
    Styner, Prof. Dr. G. Gerig (IKT, BIWI, ETH Zuerich), TR-197
    (http://www.cs.unc.edu/~styner/docs/StynerTR97.pdf)

    See:  NormalVariateGenerator

    C++ includes: itkOnePlusOneEvolutionaryOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkOnePlusOneEvolutionaryOptimizer_Pointer":
        """__New_orig__() -> itkOnePlusOneEvolutionaryOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkOnePlusOneEvolutionaryOptimizer_Pointer":
        """Clone(itkOnePlusOneEvolutionaryOptimizer self) -> itkOnePlusOneEvolutionaryOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_Clone(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """
        SetMaximize(itkOnePlusOneEvolutionaryOptimizer self, bool const _arg)

        Set if the Optimizer
        should Maximize the metric 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMaximize(self, _arg)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkOnePlusOneEvolutionaryOptimizer self)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkOnePlusOneEvolutionaryOptimizer self)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MaximizeOff(self)


    def GetMaximize(self) -> "bool const &":
        """GetMaximize(itkOnePlusOneEvolutionaryOptimizer self) -> bool const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMaximize(self)


    def GetMinimize(self) -> "bool":
        """GetMinimize(itkOnePlusOneEvolutionaryOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMinimize(self)


    def SetMinimize(self, v: 'bool') -> "void":
        """SetMinimize(itkOnePlusOneEvolutionaryOptimizer self, bool v)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMinimize(self, v)


    def MinimizeOn(self) -> "void":
        """MinimizeOn(itkOnePlusOneEvolutionaryOptimizer self)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MinimizeOn(self)


    def MinimizeOff(self) -> "void":
        """MinimizeOff(itkOnePlusOneEvolutionaryOptimizer self)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MinimizeOff(self)


    def SetMaximumIteration(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumIteration(itkOnePlusOneEvolutionaryOptimizer self, unsigned int const _arg)

        Set/Get maximum
        iteration limit. 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMaximumIteration(self, _arg)


    def GetMaximumIteration(self) -> "unsigned int const &":
        """GetMaximumIteration(itkOnePlusOneEvolutionaryOptimizer self) -> unsigned int const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMaximumIteration(self)


    def SetGrowthFactor(self, _arg: 'double const') -> "void":
        """
        SetGrowthFactor(itkOnePlusOneEvolutionaryOptimizer self, double const _arg)

        Set/Get the search
        radius grow factor in parameter space. 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetGrowthFactor(self, _arg)


    def GetGrowthFactor(self) -> "double const &":
        """GetGrowthFactor(itkOnePlusOneEvolutionaryOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetGrowthFactor(self)


    def SetShrinkFactor(self, _arg: 'double const') -> "void":
        """
        SetShrinkFactor(itkOnePlusOneEvolutionaryOptimizer self, double const _arg)

        Set/Get the search
        radius shrink factor. 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetShrinkFactor(self, _arg)


    def GetShrinkFactor(self) -> "double const &":
        """GetShrinkFactor(itkOnePlusOneEvolutionaryOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetShrinkFactor(self)


    def SetInitialRadius(self, _arg: 'double const') -> "void":
        """
        SetInitialRadius(itkOnePlusOneEvolutionaryOptimizer self, double const _arg)

        Set/Get initial
        search radius in parameter space 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetInitialRadius(self, _arg)


    def GetInitialRadius(self) -> "double const &":
        """GetInitialRadius(itkOnePlusOneEvolutionaryOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetInitialRadius(self)


    def SetEpsilon(self, _arg: 'double const') -> "void":
        """
        SetEpsilon(itkOnePlusOneEvolutionaryOptimizer self, double const _arg)

        Set/Get the minimal size
        of search radius (frobenius_norm of covariance matrix). 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetEpsilon(self, _arg)


    def GetEpsilon(self) -> "double const &":
        """GetEpsilon(itkOnePlusOneEvolutionaryOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetEpsilon(self)


    def GetFrobeniusNorm(self) -> "double const &":
        """
        GetFrobeniusNorm(itkOnePlusOneEvolutionaryOptimizer self) -> double const &

        Get the current
        Frobenius norm of covariance matrix 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetFrobeniusNorm(self)


    def SetNormalVariateGenerator(self, generator: 'itkRandomVariateGeneratorBase') -> "void":
        """SetNormalVariateGenerator(itkOnePlusOneEvolutionaryOptimizer self, itkRandomVariateGeneratorBase generator)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetNormalVariateGenerator(self, generator)


    def Initialize(self, initialRadius: 'double', grow: 'double'=-1, shrink: 'double'=-1) -> "void":
        """
        Initialize(itkOnePlusOneEvolutionaryOptimizer self, double initialRadius, double grow=-1, double shrink=-1)
        Initialize(itkOnePlusOneEvolutionaryOptimizer self, double initialRadius, double grow=-1)
        Initialize(itkOnePlusOneEvolutionaryOptimizer self, double initialRadius)

        Initializes the
        optimizer. Before running this optimizer, this function should have
        been called.

        initialRadius: search radius in parameter space grow: search radius
        grow factor shrink: search radius shrink factor 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_Initialize(self, initialRadius, grow, shrink)


    def GetCurrentCost(self) -> "double const &":
        """
        GetCurrentCost(itkOnePlusOneEvolutionaryOptimizer self) -> double const &

        Return Current Value

        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCurrentCost(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkOnePlusOneEvolutionaryOptimizer self) -> double

        Get the cost function
        value at the given parameters. 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetValue(self)


    def GetCurrentIteration(self) -> "unsigned int const &":
        """
        GetCurrentIteration(itkOnePlusOneEvolutionaryOptimizer self) -> unsigned int const &

        Return Current
        Iteration 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCurrentIteration(self)


    def GetInitialized(self) -> "bool const &":
        """
        GetInitialized(itkOnePlusOneEvolutionaryOptimizer self) -> bool const &

        Return if optimizer
        has been initialized 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetInitialized(self)


    def StopOptimization(self) -> "void":
        """
        StopOptimization(itkOnePlusOneEvolutionaryOptimizer self)

        when users call
        StartOptimization, this value will be set false. By calling
        StopOptimization, this flag will be set true, and optimization will
        stop at the next iteration. 
        """
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_StopOptimization(self)


    def GetCatchGetValueException(self) -> "bool const &":
        """GetCatchGetValueException(itkOnePlusOneEvolutionaryOptimizer self) -> bool const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCatchGetValueException(self)


    def SetCatchGetValueException(self, _arg: 'bool const') -> "void":
        """SetCatchGetValueException(itkOnePlusOneEvolutionaryOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetCatchGetValueException(self, _arg)


    def GetMetricWorstPossibleValue(self) -> "double const &":
        """GetMetricWorstPossibleValue(itkOnePlusOneEvolutionaryOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMetricWorstPossibleValue(self)


    def SetMetricWorstPossibleValue(self, _arg: 'double const') -> "void":
        """SetMetricWorstPossibleValue(itkOnePlusOneEvolutionaryOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMetricWorstPossibleValue(self, _arg)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkOnePlusOneEvolutionaryOptimizer

    def cast(obj: 'itkLightObject') -> "itkOnePlusOneEvolutionaryOptimizer *":
        """cast(itkLightObject obj) -> itkOnePlusOneEvolutionaryOptimizer"""
        return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkOnePlusOneEvolutionaryOptimizer

        Create a new object of the class itkOnePlusOneEvolutionaryOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOnePlusOneEvolutionaryOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkOnePlusOneEvolutionaryOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOnePlusOneEvolutionaryOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOnePlusOneEvolutionaryOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_Clone, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMaximize, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MaximizeOn, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MaximizeOff, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMaximize, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMinimize, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMinimize, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.MinimizeOn = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MinimizeOn, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.MinimizeOff = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_MinimizeOff, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetMaximumIteration = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMaximumIteration, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetMaximumIteration = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMaximumIteration, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetGrowthFactor = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetGrowthFactor, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetGrowthFactor = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetGrowthFactor, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetShrinkFactor = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetShrinkFactor, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetShrinkFactor = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetShrinkFactor, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetInitialRadius = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetInitialRadius, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetInitialRadius = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetInitialRadius, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetEpsilon = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetEpsilon, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetEpsilon = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetEpsilon, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetFrobeniusNorm = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetFrobeniusNorm, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetNormalVariateGenerator = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetNormalVariateGenerator, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.Initialize = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_Initialize, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetCurrentCost = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCurrentCost, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetValue, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCurrentIteration, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetInitialized = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetInitialized, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.StopOptimization = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_StopOptimization, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetCatchGetValueException = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetCatchGetValueException, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetCatchGetValueException = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetCatchGetValueException, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.GetMetricWorstPossibleValue = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_GetMetricWorstPossibleValue, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer.SetMetricWorstPossibleValue = new_instancemethod(_ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_SetMetricWorstPossibleValue, None, itkOnePlusOneEvolutionaryOptimizer)
itkOnePlusOneEvolutionaryOptimizer_swigregister = _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_swigregister
itkOnePlusOneEvolutionaryOptimizer_swigregister(itkOnePlusOneEvolutionaryOptimizer)

def itkOnePlusOneEvolutionaryOptimizer___New_orig__() -> "itkOnePlusOneEvolutionaryOptimizer_Pointer":
    """itkOnePlusOneEvolutionaryOptimizer___New_orig__() -> itkOnePlusOneEvolutionaryOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer___New_orig__()

def itkOnePlusOneEvolutionaryOptimizer_cast(obj: 'itkLightObject') -> "itkOnePlusOneEvolutionaryOptimizer *":
    """itkOnePlusOneEvolutionaryOptimizer_cast(itkLightObject obj) -> itkOnePlusOneEvolutionaryOptimizer"""
    return _ITKOptimizersBasePython.itkOnePlusOneEvolutionaryOptimizer_cast(obj)

class itkParticleSwarmOptimizerBase(itkSingleValuedNonLinearOptimizer):
    """


    Abstract implementation of a Particle Swarm Optimization (PSO)
    algorithm.

    The PSO algorithm was originally presented in:  J. Kennedy, R.
    Eberhart, "Particle Swarm Optimization", Proc. IEEE Int. Neural
    Networks, 1995.

    The algorithm is a stochastic global search optimization approach.
    Optimization is performed by maintaining a swarm of particles that
    traverse the parameter space, searching for the optimal function
    value. Associated with each particle are its location and speed, in
    parameter space.

    Swarm initialization is performed within the user supplied parameter
    bounds using either a uniform distribution or a normal distribution
    centered on the initial parameter values supplied by the user. The
    search terminates when the maximal number of iterations has been
    reached or when the change in the best value in the past $g$
    generations is below a threshold and the swarm has collapsed (i.e.
    best personal particle locations are close to the swarm's best
    location in parameter space).

    The actual optimization procedure, updating the swarm, is performed in
    the subclasses, required to implement the UpdateSwarm() method.

    NOTE: This implementation only performs minimization.

    C++ includes: itkParticleSwarmOptimizerBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetInitializeNormalDistribution(self, _arg: 'bool const') -> "void":
        """
        SetInitializeNormalDistribution(itkParticleSwarmOptimizerBase self, bool const _arg)

        Specify whether to initialize the particles using a normal
        distribution centered on the user supplied initial value or a uniform
        distribution. If the optimum is expected to be near the initial value
        it is likely that initializing with a normal distribution will result
        in faster convergence. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetInitializeNormalDistribution(self, _arg)


    def GetInitializeNormalDistribution(self) -> "bool":
        """GetInitializeNormalDistribution(itkParticleSwarmOptimizerBase self) -> bool"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetInitializeNormalDistribution(self)


    def InitializeNormalDistributionOn(self) -> "void":
        """InitializeNormalDistributionOn(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_InitializeNormalDistributionOn(self)


    def InitializeNormalDistributionOff(self) -> "void":
        """InitializeNormalDistributionOff(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_InitializeNormalDistributionOff(self)


    def SetInitialSwarm(self, initialSwarm: 'std::vector< itkParticleSwarmOptimizerBase::ParticleData,std::allocator< itkParticleSwarmOptimizerBase::ParticleData > > const &') -> "void":
        """
        SetInitialSwarm(itkParticleSwarmOptimizerBase self, std::vector< itkParticleSwarmOptimizerBase::ParticleData,std::allocator< itkParticleSwarmOptimizerBase::ParticleData > > const & initialSwarm)

        Specify the initial
        swarm. Useful for evaluating PSO variants. If the initial swarm is set
        it will be used. To revert to random initialization (uniform or normal
        particle distributions) set using an empty swarm. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetInitialSwarm(self, initialSwarm)


    def ClearSwarm(self) -> "void":
        """ClearSwarm(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_ClearSwarm(self)


    def SetPrintSwarm(self, _arg: 'bool const') -> "void":
        """
        SetPrintSwarm(itkParticleSwarmOptimizerBase self, bool const _arg)

        Indicate whether or
        not to output the swarm information when printing an object. By
        default this option is turned off as it generates too much
        information. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetPrintSwarm(self, _arg)


    def GetPrintSwarm(self) -> "bool":
        """GetPrintSwarm(itkParticleSwarmOptimizerBase self) -> bool"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetPrintSwarm(self)


    def PrintSwarmOn(self) -> "void":
        """PrintSwarmOn(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarmOn(self)


    def PrintSwarmOff(self) -> "void":
        """PrintSwarmOff(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarmOff(self)


    def SetNumberOfParticles(self, n: 'unsigned int') -> "void":
        """
        SetNumberOfParticles(itkParticleSwarmOptimizerBase self, unsigned int n)

        Set/Get number
        of particles in the swarm - the maximal number of function evaluations
        is m_MaximalNumberOfIterations*m_NumberOfParticles 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetNumberOfParticles(self, n)


    def GetNumberOfParticles(self) -> "unsigned int":
        """GetNumberOfParticles(itkParticleSwarmOptimizerBase self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetNumberOfParticles(self)


    def SetMaximalNumberOfIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximalNumberOfIterations(itkParticleSwarmOptimizerBase self, unsigned int const _arg)

        Set/Get maximal number of iterations - the maximal number of function
        evaluations is m_MaximalNumberOfIterations*m_NumberOfParticles 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetMaximalNumberOfIterations(self, _arg)


    def GetMaximalNumberOfIterations(self) -> "unsigned int":
        """GetMaximalNumberOfIterations(itkParticleSwarmOptimizerBase self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetMaximalNumberOfIterations(self)


    def SetNumberOfGenerationsWithMinimalImprovement(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfGenerationsWithMinimalImprovement(itkParticleSwarmOptimizerBase self, unsigned int const _arg)

        Set/Get the
        number of generations to continue with minimal improvement in the
        function value, |f_best(g_i) - f_best(g_k)|<threshold where k <=
        i+NumberOfGenerationsWithMinimalImprovement Minimal value is one. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetNumberOfGenerationsWithMinimalImprovement(self, _arg)


    def GetNumberOfGenerationsWithMinimalImprovement(self) -> "unsigned int":
        """GetNumberOfGenerationsWithMinimalImprovement(itkParticleSwarmOptimizerBase self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetNumberOfGenerationsWithMinimalImprovement(self)


    def SetParameterBounds(self, *args) -> "void":
        """
        SetParameterBounds(itkParticleSwarmOptimizerBase self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & bounds)
        SetParameterBounds(itkParticleSwarmOptimizerBase self, std::pair< double,double > & bounds, unsigned int n)

        Set/Get the
        parameter bounds. Search for optimal value is inside these bounds.
        NOTE: It is assumed that the first entry is the minimal value, second
        is the maximal value. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetParameterBounds(self, *args)


    def GetParameterBounds(self) -> "std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > >":
        """GetParameterBounds(itkParticleSwarmOptimizerBase self) -> std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > >"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetParameterBounds(self)


    def SetFunctionConvergenceTolerance(self, _arg: 'double const') -> "void":
        """
        SetFunctionConvergenceTolerance(itkParticleSwarmOptimizerBase self, double const _arg)

        The
        optimization algorithm will terminate when the function improvement in
        the last m_NumberOfGenerationsWithMinimalImprovement generations is
        less than m_FunctionConvergenceTolerance and the maximal distance
        between particles and the best particle in each dimension is less than
        m_ParametersConvergenceTolerance[i] for the specified percentage of
        the particles. That is, we haven't improved the best function value
        for a while and in the parameter space most (m%) of our particles
        attained their best value close to the swarm's best value. NOTE: The
        use of different tolerances for each dimension is desired when
        optimizing over non-commensurate parameters (e.g. rotation and
        translation). Alternatively, we could use ITK's parameter scaling
        approach. The current approach seems more intuitive. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetFunctionConvergenceTolerance(self, _arg)


    def GetFunctionConvergenceTolerance(self) -> "double":
        """GetFunctionConvergenceTolerance(itkParticleSwarmOptimizerBase self) -> double"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetFunctionConvergenceTolerance(self)


    def SetParametersConvergenceTolerance(self, *args) -> "void":
        """
        SetParametersConvergenceTolerance(itkParticleSwarmOptimizerBase self, double convergenceTolerance, unsigned int sz)
        SetParametersConvergenceTolerance(itkParticleSwarmOptimizerBase self, itkOptimizerParametersD _arg)

        Set parameters convergence tolerance using the same value for all, sz,
        parameters 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetParametersConvergenceTolerance(self, *args)


    def GetParametersConvergenceTolerance(self) -> "itkOptimizerParametersD":
        """GetParametersConvergenceTolerance(itkParticleSwarmOptimizerBase self) -> itkOptimizerParametersD"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetParametersConvergenceTolerance(self)


    def GetPercentageParticlesConverged(self) -> "double":
        """GetPercentageParticlesConverged(itkParticleSwarmOptimizerBase self) -> double"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetPercentageParticlesConverged(self)


    def SetPercentageParticlesConverged(self, _arg: 'double const') -> "void":
        """SetPercentageParticlesConverged(itkParticleSwarmOptimizerBase self, double const _arg)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetPercentageParticlesConverged(self, _arg)


    def SetSeed(self, _arg: 'unsigned int const') -> "void":
        """
        SetSeed(itkParticleSwarmOptimizerBase self, unsigned int const _arg)

        Set the random number seed
        for the swarm. Use this method to produce reaptible results,
        typically, for testing. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetSeed(self, _arg)


    def GetSeed(self) -> "unsigned int":
        """GetSeed(itkParticleSwarmOptimizerBase self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetSeed(self)


    def SetUseSeed(self, _arg: 'bool const') -> "void":
        """
        SetUseSeed(itkParticleSwarmOptimizerBase self, bool const _arg)

        Use a specific seed to
        initialize the random number generator. If On, use m_Seed to seed the
        random number generator. Default is Off. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetUseSeed(self, _arg)


    def GetUseSeed(self) -> "bool":
        """GetUseSeed(itkParticleSwarmOptimizerBase self) -> bool"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetUseSeed(self)


    def UseSeedOn(self) -> "void":
        """UseSeedOn(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_UseSeedOn(self)


    def UseSeedOff(self) -> "void":
        """UseSeedOff(itkParticleSwarmOptimizerBase self)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_UseSeedOff(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkParticleSwarmOptimizerBase self) -> double

        Get the function value for
        the current position. NOTE: This value is only valid during and after
        the execution of the StartOptimization() method. 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetValue(self)


    def PrintSwarm(self, os: 'ostream', indent: 'itkIndent') -> "void":
        """
        PrintSwarm(itkParticleSwarmOptimizerBase self, ostream os, itkIndent indent)

        Print the swarm
        information to the given output stream. Each line (particle data) is
        of the form: current_parameters current_velocity current_value
        best_parameters best_value 
        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarm(self, os, indent)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkParticleSwarmOptimizerBase

    def cast(obj: 'itkLightObject') -> "itkParticleSwarmOptimizerBase *":
        """cast(itkLightObject obj) -> itkParticleSwarmOptimizerBase"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParticleSwarmOptimizerBase

        Create a new object of the class itkParticleSwarmOptimizerBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParticleSwarmOptimizerBase.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParticleSwarmOptimizerBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParticleSwarmOptimizerBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParticleSwarmOptimizerBase.SetInitializeNormalDistribution = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetInitializeNormalDistribution, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetInitializeNormalDistribution = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetInitializeNormalDistribution, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.InitializeNormalDistributionOn = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_InitializeNormalDistributionOn, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.InitializeNormalDistributionOff = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_InitializeNormalDistributionOff, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetInitialSwarm = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetInitialSwarm, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.ClearSwarm = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_ClearSwarm, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetPrintSwarm = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetPrintSwarm, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetPrintSwarm = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetPrintSwarm, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.PrintSwarmOn = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarmOn, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.PrintSwarmOff = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarmOff, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetNumberOfParticles = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetNumberOfParticles, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetNumberOfParticles = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetNumberOfParticles, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetMaximalNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetMaximalNumberOfIterations, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetMaximalNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetMaximalNumberOfIterations, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetNumberOfGenerationsWithMinimalImprovement = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetNumberOfGenerationsWithMinimalImprovement, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetNumberOfGenerationsWithMinimalImprovement = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetNumberOfGenerationsWithMinimalImprovement, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetParameterBounds = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetParameterBounds, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetParameterBounds = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetParameterBounds, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetFunctionConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetFunctionConvergenceTolerance, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetFunctionConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetFunctionConvergenceTolerance, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetParametersConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetParametersConvergenceTolerance, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetParametersConvergenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetParametersConvergenceTolerance, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetPercentageParticlesConverged = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetPercentageParticlesConverged, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetPercentageParticlesConverged = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetPercentageParticlesConverged, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetSeed = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetSeed, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetSeed = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetSeed, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.SetUseSeed = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_SetUseSeed, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetUseSeed = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetUseSeed, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.UseSeedOn = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_UseSeedOn, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.UseSeedOff = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_UseSeedOff, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_GetValue, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase.PrintSwarm = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_PrintSwarm, None, itkParticleSwarmOptimizerBase)
itkParticleSwarmOptimizerBase_swigregister = _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_swigregister
itkParticleSwarmOptimizerBase_swigregister(itkParticleSwarmOptimizerBase)

def itkParticleSwarmOptimizerBase_cast(obj: 'itkLightObject') -> "itkParticleSwarmOptimizerBase *":
    """itkParticleSwarmOptimizerBase_cast(itkLightObject obj) -> itkParticleSwarmOptimizerBase"""
    return _ITKOptimizersBasePython.itkParticleSwarmOptimizerBase_cast(obj)

class itkPowellOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    Implements Powell optimization using Brent line search.

    The code in this class was adapted from the Wikipedia and the
    netlib.org zeroin function.

    http://www.netlib.org/go/zeroin.fhttp://en.wikipedia.org/wiki/Brent_me
    thodhttp://en.wikipedia.org/wiki/Golden_section_search

    This optimizer needs a cost function. Partial derivatives of that
    function are not required.

    For an N-dimensional parameter space, each iteration
    minimizes(maximizes) the function in N (initially orthogonal)
    directions. Typically only 2-5 iterations are required. If gradients
    are available, consider a conjugate gradient line search strategy.

    The SetStepLength determines the initial distance to step in a line
    direction when bounding the minimum (using bracketing triple spaced
    using a golden search strategy).

    The StepTolerance terminates optimization when the parameter values
    are known to be within this (scaled) distance of the local extreme.

    The ValueTolerance terminates optimization when the cost function
    values at the current parameters and at the local extreme are likely
    (within a second order approximation) to be within this is tolerance.

    C++ includes: itkPowellOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPowellOptimizer_Pointer":
        """__New_orig__() -> itkPowellOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkPowellOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPowellOptimizer_Pointer":
        """Clone(itkPowellOptimizer self) -> itkPowellOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_Clone(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """
        SetMaximize(itkPowellOptimizer self, bool const _arg)

        Set if the Optimizer
        should Maximize the metric 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetMaximize(self, _arg)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkPowellOptimizer self)"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkPowellOptimizer self)"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_MaximizeOff(self)


    def GetMaximize(self) -> "bool const &":
        """GetMaximize(itkPowellOptimizer self) -> bool const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetMaximize(self)


    def SetMaximumIteration(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumIteration(itkPowellOptimizer self, unsigned int const _arg)

        Set/Get maximum
        iteration limit. 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetMaximumIteration(self, _arg)


    def GetMaximumIteration(self) -> "unsigned int const &":
        """GetMaximumIteration(itkPowellOptimizer self) -> unsigned int const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetMaximumIteration(self)


    def SetMaximumLineIteration(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumLineIteration(itkPowellOptimizer self, unsigned int const _arg)

        Set/Get the
        maximum number of line search iterations 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetMaximumLineIteration(self, _arg)


    def GetMaximumLineIteration(self) -> "unsigned int":
        """GetMaximumLineIteration(itkPowellOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetMaximumLineIteration(self)


    def SetStepLength(self, _arg: 'double const') -> "void":
        """
        SetStepLength(itkPowellOptimizer self, double const _arg)

        Set/Get StepLength
        for the (scaled) spacing of the sampling of parameter space while
        bracketing the extremum 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetStepLength(self, _arg)


    def GetStepLength(self) -> "double const &":
        """GetStepLength(itkPowellOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetStepLength(self)


    def SetStepTolerance(self, _arg: 'double const') -> "void":
        """
        SetStepTolerance(itkPowellOptimizer self, double const _arg)

        Set/Get
        StepTolerance. Once the local extreme is known to be within this
        distance of the current parameter values, optimization terminates 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetStepTolerance(self, _arg)


    def GetStepTolerance(self) -> "double const &":
        """GetStepTolerance(itkPowellOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetStepTolerance(self)


    def SetValueTolerance(self, _arg: 'double const') -> "void":
        """
        SetValueTolerance(itkPowellOptimizer self, double const _arg)

        Set/Get
        ValueTolerance. Once this current cost function value is known to be
        within this tolerance of the cost function value at the local extreme,
        optimization terminates 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetValueTolerance(self, _arg)


    def GetValueTolerance(self) -> "double const &":
        """GetValueTolerance(itkPowellOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetValueTolerance(self)


    def GetCurrentCost(self) -> "double const &":
        """
        GetCurrentCost(itkPowellOptimizer self) -> double const &

        Return Current Value

        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentCost(self)


    def GetValue(self) -> "double":
        """
        GetValue(itkPowellOptimizer self) -> double

        Get the cost function
        value at the given parameters. 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetValue(self)


    def GetCurrentIteration(self) -> "unsigned int const &":
        """
        GetCurrentIteration(itkPowellOptimizer self) -> unsigned int const &

        Return Current
        Iteration 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentIteration(self)


    def GetCurrentLineIteration(self) -> "unsigned int const &":
        """
        GetCurrentLineIteration(itkPowellOptimizer self) -> unsigned int const &

        Get the
        current line search iteration 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentLineIteration(self)


    def StopOptimization(self) -> "void":
        """
        StopOptimization(itkPowellOptimizer self)

        When users call
        StartOptimization, this value will be set false. By calling
        StopOptimization, this flag will be set true, and optimization will
        stop at the next iteration. 
        """
        return _ITKOptimizersBasePython.itkPowellOptimizer_StopOptimization(self)


    def GetCatchGetValueException(self) -> "bool const &":
        """GetCatchGetValueException(itkPowellOptimizer self) -> bool const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetCatchGetValueException(self)


    def SetCatchGetValueException(self, _arg: 'bool const') -> "void":
        """SetCatchGetValueException(itkPowellOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetCatchGetValueException(self, _arg)


    def GetMetricWorstPossibleValue(self) -> "double const &":
        """GetMetricWorstPossibleValue(itkPowellOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_GetMetricWorstPossibleValue(self)


    def SetMetricWorstPossibleValue(self, _arg: 'double const') -> "void":
        """SetMetricWorstPossibleValue(itkPowellOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_SetMetricWorstPossibleValue(self, _arg)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkPowellOptimizer

    def cast(obj: 'itkLightObject') -> "itkPowellOptimizer *":
        """cast(itkLightObject obj) -> itkPowellOptimizer"""
        return _ITKOptimizersBasePython.itkPowellOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPowellOptimizer

        Create a new object of the class itkPowellOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPowellOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPowellOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPowellOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPowellOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_Clone, None, itkPowellOptimizer)
itkPowellOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetMaximize, None, itkPowellOptimizer)
itkPowellOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_MaximizeOn, None, itkPowellOptimizer)
itkPowellOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_MaximizeOff, None, itkPowellOptimizer)
itkPowellOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetMaximize, None, itkPowellOptimizer)
itkPowellOptimizer.SetMaximumIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetMaximumIteration, None, itkPowellOptimizer)
itkPowellOptimizer.GetMaximumIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetMaximumIteration, None, itkPowellOptimizer)
itkPowellOptimizer.SetMaximumLineIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetMaximumLineIteration, None, itkPowellOptimizer)
itkPowellOptimizer.GetMaximumLineIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetMaximumLineIteration, None, itkPowellOptimizer)
itkPowellOptimizer.SetStepLength = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetStepLength, None, itkPowellOptimizer)
itkPowellOptimizer.GetStepLength = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetStepLength, None, itkPowellOptimizer)
itkPowellOptimizer.SetStepTolerance = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetStepTolerance, None, itkPowellOptimizer)
itkPowellOptimizer.GetStepTolerance = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetStepTolerance, None, itkPowellOptimizer)
itkPowellOptimizer.SetValueTolerance = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetValueTolerance, None, itkPowellOptimizer)
itkPowellOptimizer.GetValueTolerance = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetValueTolerance, None, itkPowellOptimizer)
itkPowellOptimizer.GetCurrentCost = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentCost, None, itkPowellOptimizer)
itkPowellOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetValue, None, itkPowellOptimizer)
itkPowellOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentIteration, None, itkPowellOptimizer)
itkPowellOptimizer.GetCurrentLineIteration = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetCurrentLineIteration, None, itkPowellOptimizer)
itkPowellOptimizer.StopOptimization = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_StopOptimization, None, itkPowellOptimizer)
itkPowellOptimizer.GetCatchGetValueException = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetCatchGetValueException, None, itkPowellOptimizer)
itkPowellOptimizer.SetCatchGetValueException = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetCatchGetValueException, None, itkPowellOptimizer)
itkPowellOptimizer.GetMetricWorstPossibleValue = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_GetMetricWorstPossibleValue, None, itkPowellOptimizer)
itkPowellOptimizer.SetMetricWorstPossibleValue = new_instancemethod(_ITKOptimizersBasePython.itkPowellOptimizer_SetMetricWorstPossibleValue, None, itkPowellOptimizer)
itkPowellOptimizer_swigregister = _ITKOptimizersBasePython.itkPowellOptimizer_swigregister
itkPowellOptimizer_swigregister(itkPowellOptimizer)

def itkPowellOptimizer___New_orig__() -> "itkPowellOptimizer_Pointer":
    """itkPowellOptimizer___New_orig__() -> itkPowellOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkPowellOptimizer___New_orig__()

def itkPowellOptimizer_cast(obj: 'itkLightObject') -> "itkPowellOptimizer *":
    """itkPowellOptimizer_cast(itkLightObject obj) -> itkPowellOptimizer"""
    return _ITKOptimizersBasePython.itkPowellOptimizer_cast(obj)

class itkQuaternionRigidTransformGradientDescentOptimizer(itkGradientDescentOptimizer):
    """


    Implement a gradient descent optimizer.

    QuaternionRigidTransformGradientDescentOptimizer is an extension to
    the simple gradient descent optimizer implemented in
    GradientDescentOptimizer. At each iteration the current position is
    updated according to

    p(n+1) = p(n) + learningRate * d f(p(n)) / d p(n)

    \\[ p_{n+1} = p_n + \\mbox{learningRate} \\,
    \\frac{\\partial f(p_n) }{\\partial p_n} \\]

    The learning rate is a fixed scalar defined via SetLearningRate(). The
    optimizer steps through a user defined number of iterations; no
    convergence checking is done. The first four components of p are
    assumed to be the four components of the quaternion. After each
    update, the quaternion is normalized to have a magnitude of one. This
    ensures the the transform is purely rigid.

    See:   GradientDescentOptimizer

    C++ includes: itkQuaternionRigidTransformGradientDescentOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkQuaternionRigidTransformGradientDescentOptimizer_Pointer":
        """__New_orig__() -> itkQuaternionRigidTransformGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkQuaternionRigidTransformGradientDescentOptimizer_Pointer":
        """Clone(itkQuaternionRigidTransformGradientDescentOptimizer self) -> itkQuaternionRigidTransformGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer_Clone(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkQuaternionRigidTransformGradientDescentOptimizer

    def cast(obj: 'itkLightObject') -> "itkQuaternionRigidTransformGradientDescentOptimizer *":
        """cast(itkLightObject obj) -> itkQuaternionRigidTransformGradientDescentOptimizer"""
        return _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkQuaternionRigidTransformGradientDescentOptimizer

        Create a new object of the class itkQuaternionRigidTransformGradientDescentOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkQuaternionRigidTransformGradientDescentOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkQuaternionRigidTransformGradientDescentOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkQuaternionRigidTransformGradientDescentOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkQuaternionRigidTransformGradientDescentOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer_Clone, None, itkQuaternionRigidTransformGradientDescentOptimizer)
itkQuaternionRigidTransformGradientDescentOptimizer_swigregister = _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer_swigregister
itkQuaternionRigidTransformGradientDescentOptimizer_swigregister(itkQuaternionRigidTransformGradientDescentOptimizer)

def itkQuaternionRigidTransformGradientDescentOptimizer___New_orig__() -> "itkQuaternionRigidTransformGradientDescentOptimizer_Pointer":
    """itkQuaternionRigidTransformGradientDescentOptimizer___New_orig__() -> itkQuaternionRigidTransformGradientDescentOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer___New_orig__()

def itkQuaternionRigidTransformGradientDescentOptimizer_cast(obj: 'itkLightObject') -> "itkQuaternionRigidTransformGradientDescentOptimizer *":
    """itkQuaternionRigidTransformGradientDescentOptimizer_cast(itkLightObject obj) -> itkQuaternionRigidTransformGradientDescentOptimizer"""
    return _ITKOptimizersBasePython.itkQuaternionRigidTransformGradientDescentOptimizer_cast(obj)

class itkRegularStepGradientDescentBaseOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    Implement a gradient descent optimizer.

    C++ includes: itkRegularStepGradientDescentBaseOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegularStepGradientDescentBaseOptimizer_Pointer":
        """__New_orig__() -> itkRegularStepGradientDescentBaseOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegularStepGradientDescentBaseOptimizer_Pointer":
        """Clone(itkRegularStepGradientDescentBaseOptimizer self) -> itkRegularStepGradientDescentBaseOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_Clone(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """
        SetMaximize(itkRegularStepGradientDescentBaseOptimizer self, bool const _arg)

        Specify whether to
        minimize or maximize the cost function. 
        """
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMaximize(self, _arg)


    def GetMaximize(self) -> "bool const &":
        """GetMaximize(itkRegularStepGradientDescentBaseOptimizer self) -> bool const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMaximize(self)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkRegularStepGradientDescentBaseOptimizer self)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkRegularStepGradientDescentBaseOptimizer self)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MaximizeOff(self)


    def GetMinimize(self) -> "bool":
        """GetMinimize(itkRegularStepGradientDescentBaseOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMinimize(self)


    def SetMinimize(self, v: 'bool') -> "void":
        """SetMinimize(itkRegularStepGradientDescentBaseOptimizer self, bool v)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMinimize(self, v)


    def MinimizeOn(self) -> "void":
        """MinimizeOn(itkRegularStepGradientDescentBaseOptimizer self)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MinimizeOn(self)


    def MinimizeOff(self) -> "void":
        """MinimizeOff(itkRegularStepGradientDescentBaseOptimizer self)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MinimizeOff(self)


    def ResumeOptimization(self) -> "void":
        """
        ResumeOptimization(itkRegularStepGradientDescentBaseOptimizer self)

        Resume
        previously stopped optimization with current parameters. See:
        StopOptimization 
        """
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_ResumeOptimization(self)


    def StopOptimization(self) -> "void":
        """
        StopOptimization(itkRegularStepGradientDescentBaseOptimizer self)

        Stop optimization.
        See:   ResumeOptimization 
        """
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_StopOptimization(self)


    def SetMaximumStepLength(self, _arg: 'double const') -> "void":
        """
        SetMaximumStepLength(itkRegularStepGradientDescentBaseOptimizer self, double const _arg)

        Set/Get
        parameters to control the optimization process. 
        """
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMaximumStepLength(self, _arg)


    def SetMinimumStepLength(self, _arg: 'double const') -> "void":
        """SetMinimumStepLength(itkRegularStepGradientDescentBaseOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMinimumStepLength(self, _arg)


    def SetRelaxationFactor(self, _arg: 'double const') -> "void":
        """SetRelaxationFactor(itkRegularStepGradientDescentBaseOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetRelaxationFactor(self, _arg)


    def SetNumberOfIterations(self, _arg: 'unsigned long const') -> "void":
        """SetNumberOfIterations(itkRegularStepGradientDescentBaseOptimizer self, unsigned long const _arg)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetNumberOfIterations(self, _arg)


    def SetGradientMagnitudeTolerance(self, _arg: 'double const') -> "void":
        """SetGradientMagnitudeTolerance(itkRegularStepGradientDescentBaseOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetGradientMagnitudeTolerance(self, _arg)


    def GetCurrentStepLength(self) -> "double const &":
        """GetCurrentStepLength(itkRegularStepGradientDescentBaseOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetCurrentStepLength(self)


    def GetMaximumStepLength(self) -> "double const &":
        """GetMaximumStepLength(itkRegularStepGradientDescentBaseOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMaximumStepLength(self)


    def GetMinimumStepLength(self) -> "double const &":
        """GetMinimumStepLength(itkRegularStepGradientDescentBaseOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMinimumStepLength(self)


    def GetRelaxationFactor(self) -> "double const &":
        """GetRelaxationFactor(itkRegularStepGradientDescentBaseOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetRelaxationFactor(self)


    def GetNumberOfIterations(self) -> "unsigned long const &":
        """GetNumberOfIterations(itkRegularStepGradientDescentBaseOptimizer self) -> unsigned long const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetNumberOfIterations(self)


    def GetGradientMagnitudeTolerance(self) -> "double const &":
        """GetGradientMagnitudeTolerance(itkRegularStepGradientDescentBaseOptimizer self) -> double const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetGradientMagnitudeTolerance(self)


    def GetCurrentIteration(self) -> "unsigned int":
        """GetCurrentIteration(itkRegularStepGradientDescentBaseOptimizer self) -> unsigned int"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetCurrentIteration(self)


    def GetStopCondition(self) -> "itkRegularStepGradientDescentBaseOptimizerEnums::StopCondition const &":
        """GetStopCondition(itkRegularStepGradientDescentBaseOptimizer self) -> itkRegularStepGradientDescentBaseOptimizerEnums::StopCondition const &"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetStopCondition(self)


    def GetValue(self) -> "double const &":
        """
        GetValue(itkRegularStepGradientDescentBaseOptimizer self) -> double const &

        Get the cost function
        value at the given parameters. 
        """
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetValue(self)


    def GetGradient(self) -> "itkArrayD const &":
        """GetGradient(itkRegularStepGradientDescentBaseOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetGradient(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkRegularStepGradientDescentBaseOptimizer

    def cast(obj: 'itkLightObject') -> "itkRegularStepGradientDescentBaseOptimizer *":
        """cast(itkLightObject obj) -> itkRegularStepGradientDescentBaseOptimizer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegularStepGradientDescentBaseOptimizer

        Create a new object of the class itkRegularStepGradientDescentBaseOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegularStepGradientDescentBaseOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegularStepGradientDescentBaseOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegularStepGradientDescentBaseOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegularStepGradientDescentBaseOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_Clone, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMaximize, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMaximize, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MaximizeOn, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MaximizeOff, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMinimize, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMinimize, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.MinimizeOn = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MinimizeOn, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.MinimizeOff = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_MinimizeOff, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.ResumeOptimization = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_ResumeOptimization, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.StopOptimization = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_StopOptimization, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetMaximumStepLength = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMaximumStepLength, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetMinimumStepLength = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetMinimumStepLength, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetRelaxationFactor = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetRelaxationFactor, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetNumberOfIterations, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.SetGradientMagnitudeTolerance = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_SetGradientMagnitudeTolerance, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetCurrentStepLength = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetCurrentStepLength, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetMaximumStepLength = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMaximumStepLength, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetMinimumStepLength = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetMinimumStepLength, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetRelaxationFactor = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetRelaxationFactor, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetNumberOfIterations, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetGradientMagnitudeTolerance = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetGradientMagnitudeTolerance, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetCurrentIteration, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetStopCondition = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetStopCondition, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetValue, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer.GetGradient = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_GetGradient, None, itkRegularStepGradientDescentBaseOptimizer)
itkRegularStepGradientDescentBaseOptimizer_swigregister = _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_swigregister
itkRegularStepGradientDescentBaseOptimizer_swigregister(itkRegularStepGradientDescentBaseOptimizer)

def itkRegularStepGradientDescentBaseOptimizer___New_orig__() -> "itkRegularStepGradientDescentBaseOptimizer_Pointer":
    """itkRegularStepGradientDescentBaseOptimizer___New_orig__() -> itkRegularStepGradientDescentBaseOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer___New_orig__()

def itkRegularStepGradientDescentBaseOptimizer_cast(obj: 'itkLightObject') -> "itkRegularStepGradientDescentBaseOptimizer *":
    """itkRegularStepGradientDescentBaseOptimizer_cast(itkLightObject obj) -> itkRegularStepGradientDescentBaseOptimizer"""
    return _ITKOptimizersBasePython.itkRegularStepGradientDescentBaseOptimizer_cast(obj)

class itkRegularStepGradientDescentOptimizer(itkRegularStepGradientDescentBaseOptimizer):
    """


    Implement a gradient descent optimizer.

    C++ includes: itkRegularStepGradientDescentOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRegularStepGradientDescentOptimizer_Pointer":
        """__New_orig__() -> itkRegularStepGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRegularStepGradientDescentOptimizer_Pointer":
        """Clone(itkRegularStepGradientDescentOptimizer self) -> itkRegularStepGradientDescentOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer_Clone(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkRegularStepGradientDescentOptimizer

    def cast(obj: 'itkLightObject') -> "itkRegularStepGradientDescentOptimizer *":
        """cast(itkLightObject obj) -> itkRegularStepGradientDescentOptimizer"""
        return _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRegularStepGradientDescentOptimizer

        Create a new object of the class itkRegularStepGradientDescentOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegularStepGradientDescentOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRegularStepGradientDescentOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRegularStepGradientDescentOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRegularStepGradientDescentOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer_Clone, None, itkRegularStepGradientDescentOptimizer)
itkRegularStepGradientDescentOptimizer_swigregister = _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer_swigregister
itkRegularStepGradientDescentOptimizer_swigregister(itkRegularStepGradientDescentOptimizer)

def itkRegularStepGradientDescentOptimizer___New_orig__() -> "itkRegularStepGradientDescentOptimizer_Pointer":
    """itkRegularStepGradientDescentOptimizer___New_orig__() -> itkRegularStepGradientDescentOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer___New_orig__()

def itkRegularStepGradientDescentOptimizer_cast(obj: 'itkLightObject') -> "itkRegularStepGradientDescentOptimizer *":
    """itkRegularStepGradientDescentOptimizer_cast(itkLightObject obj) -> itkRegularStepGradientDescentOptimizer"""
    return _ITKOptimizersBasePython.itkRegularStepGradientDescentOptimizer_cast(obj)

class itkSPSAOptimizer(itkSingleValuedNonLinearOptimizer):
    """


    An optimizer based on simultaneous perturbation...

    This optimizer is an implementation of the Simultaneous Perturbation
    Stochastic Approximation method, described in:

    http://www.jhuapl.edu/SPSA/

    Spall, J.C. (1998), "An Overview of the Simultaneous Perturbation
    Method for Efficient Optimization," Johns Hopkins APL Technical
    Digest, vol. 19, pp. 482-492

    C++ includes: itkSPSAOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSPSAOptimizer_Pointer":
        """__New_orig__() -> itkSPSAOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSPSAOptimizer_Pointer":
        """Clone(itkSPSAOptimizer self) -> itkSPSAOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_Clone(self)


    def AdvanceOneStep(self) -> "void":
        """
        AdvanceOneStep(itkSPSAOptimizer self)

        Advance one step
        following the gradient direction. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_AdvanceOneStep(self)


    def ResumeOptimization(self) -> "void":
        """
        ResumeOptimization(itkSPSAOptimizer self)

        Resume
        previously stopped optimization with current parameters See:
        StopOptimization. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_ResumeOptimization(self)


    def StopOptimization(self) -> "void":
        """
        StopOptimization(itkSPSAOptimizer self)

        Stop optimization.
        See:   ResumeOptimization 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_StopOptimization(self)


    def GetValue(self, *args) -> "double":
        """
        GetValue(itkSPSAOptimizer self) -> double
        GetValue(itkSPSAOptimizer self, itkOptimizerParametersD parameters) -> double

        Get the cost function
        value at any position 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetValue(self, *args)


    def GuessParameters(self, numberOfGradientEstimates: 'unsigned long', initialStepSize: 'double') -> "void":
        """
        GuessParameters(itkSPSAOptimizer self, unsigned long numberOfGradientEstimates, double initialStepSize)

        Guess the
        parameters a and A. This function needs the number of
        GradientEstimates used for estimating a and A and and the expected
        initial step size (where step size is defined as the maximum of the
        absolute values of the parameter update). Make sure you set c, Alpha,
        Gamma, the MaximumNumberOfIterations, the Scales, and the the
        InitialPosition before calling this method.

        Described in: Spall, J.C. (1998), "Implementation of the Simultaneous
        Perturbation Algorithm for Stochastic Optimization", IEEE Trans.
        Aerosp. Electron. Syst. 34(3), 817-823. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GuessParameters(self, numberOfGradientEstimates, initialStepSize)


    def GetCurrentIteration(self) -> "unsigned long":
        """
        GetCurrentIteration(itkSPSAOptimizer self) -> unsigned long

        Get the current
        iteration number. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetCurrentIteration(self)


    def GetStopCondition(self) -> "itkSPSAOptimizerEnums::StopConditionSPSAOptimizer":
        """
        GetStopCondition(itkSPSAOptimizer self) -> itkSPSAOptimizerEnums::StopConditionSPSAOptimizer

        Get Stop
        condition. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetStopCondition(self)


    def GetLearningRate(self) -> "double":
        """
        GetLearningRate(itkSPSAOptimizer self) -> double

        Get the current
        LearningRate (a_k) 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetLearningRate(self)


    def GetGradientMagnitude(self) -> "double":
        """
        GetGradientMagnitude(itkSPSAOptimizer self) -> double

        Get the
        GradientMagnitude of the latest computed gradient 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetGradientMagnitude(self)


    def GetGradient(self) -> "itkArrayD const &":
        """
        GetGradient(itkSPSAOptimizer self) -> itkArrayD

        Get the latest computed
        gradient 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetGradient(self)


    def SetSa(self, _arg: 'double const') -> "void":
        """
        SetSa(itkSPSAOptimizer self, double const _arg)

        Set/Get a. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetSa(self, _arg)


    def GetSa(self) -> "double":
        """GetSa(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetSa(self)


    def Seta(self, a: 'double') -> "void":
        """Seta(itkSPSAOptimizer self, double a)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_Seta(self, a)


    def Geta(self) -> "double":
        """Geta(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_Geta(self)


    def SetSc(self, _arg: 'double const') -> "void":
        """
        SetSc(itkSPSAOptimizer self, double const _arg)

        Set/Get c. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetSc(self, _arg)


    def GetSc(self) -> "double":
        """GetSc(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetSc(self)


    def Setc(self, c: 'double') -> "void":
        """Setc(itkSPSAOptimizer self, double c)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_Setc(self, c)


    def Getc(self) -> "double":
        """Getc(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_Getc(self)


    def SetA(self, _arg: 'double const') -> "void":
        """
        SetA(itkSPSAOptimizer self, double const _arg)

        Set/Get A. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetA(self, _arg)


    def GetA(self) -> "double":
        """GetA(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetA(self)


    def SetAlpha(self, _arg: 'double const') -> "void":
        """
        SetAlpha(itkSPSAOptimizer self, double const _arg)

        Set/Get alpha. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetAlpha(self, _arg)


    def GetAlpha(self) -> "double":
        """GetAlpha(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetAlpha(self)


    def SetGamma(self, _arg: 'double const') -> "void":
        """
        SetGamma(itkSPSAOptimizer self, double const _arg)

        Set/Get gamma. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetGamma(self, _arg)


    def GetGamma(self) -> "double":
        """GetGamma(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetGamma(self)


    def GetMaximize(self) -> "bool":
        """
        GetMaximize(itkSPSAOptimizer self) -> bool

        Methods to configure
        the cost function. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetMaximize(self)


    def SetMaximize(self, _arg: 'bool const') -> "void":
        """SetMaximize(itkSPSAOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetMaximize(self, _arg)


    def MaximizeOn(self) -> "void":
        """MaximizeOn(itkSPSAOptimizer self)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_MaximizeOn(self)


    def MaximizeOff(self) -> "void":
        """MaximizeOff(itkSPSAOptimizer self)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_MaximizeOff(self)


    def GetMinimize(self) -> "bool":
        """GetMinimize(itkSPSAOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetMinimize(self)


    def SetMinimize(self, v: 'bool') -> "void":
        """SetMinimize(itkSPSAOptimizer self, bool v)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetMinimize(self, v)


    def MinimizeOn(self) -> "void":
        """MinimizeOn(itkSPSAOptimizer self)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_MinimizeOn(self)


    def MinimizeOff(self) -> "void":
        """MinimizeOff(itkSPSAOptimizer self)"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_MinimizeOff(self)


    def SetNumberOfPerturbations(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfPerturbations(itkSPSAOptimizer self, unsigned long const _arg)

        Set/Get
        the number of perturbation used to construct a gradient estimate g_k.
        q = NumberOfPerturbations g_k = 1/q sum_{j=1..q} g^(j)_k 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetNumberOfPerturbations(self, _arg)


    def GetNumberOfPerturbations(self) -> "unsigned long":
        """GetNumberOfPerturbations(itkSPSAOptimizer self) -> unsigned long"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetNumberOfPerturbations(self)


    def GetStateOfConvergence(self) -> "double":
        """
        GetStateOfConvergence(itkSPSAOptimizer self) -> double

        Get the state
        of convergence in the last iteration. When the StateOfConvergence is
        lower than the Tolerance, and the minimum number of iterations has
        been performed, the optimization stops.

        The state of convergence (SOC) is initialized with 0.0 and updated
        after each iteration as follows: SOC *= SOCDecayRate SOC += a_k *
        GradientMagnitude 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetStateOfConvergence(self)


    def SetStateOfConvergenceDecayRate(self, _arg: 'double const') -> "void":
        """
        SetStateOfConvergenceDecayRate(itkSPSAOptimizer self, double const _arg)

        Set/Get StateOfConvergenceDecayRate (number between 0 and 1). 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetStateOfConvergenceDecayRate(self, _arg)


    def GetStateOfConvergenceDecayRate(self) -> "double":
        """GetStateOfConvergenceDecayRate(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetStateOfConvergenceDecayRate(self)


    def SetMinimumNumberOfIterations(self, _arg: 'unsigned long const') -> "void":
        """
        SetMinimumNumberOfIterations(itkSPSAOptimizer self, unsigned long const _arg)

        Set/Get the minimum number of iterations 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetMinimumNumberOfIterations(self, _arg)


    def GetMinimumNumberOfIterations(self) -> "unsigned long":
        """GetMinimumNumberOfIterations(itkSPSAOptimizer self) -> unsigned long"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetMinimumNumberOfIterations(self)


    def SetMaximumNumberOfIterations(self, _arg: 'unsigned long const') -> "void":
        """
        SetMaximumNumberOfIterations(itkSPSAOptimizer self, unsigned long const _arg)

        Set/Get the maximum number of iterations. 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetMaximumNumberOfIterations(self, _arg)


    def GetMaximumNumberOfIterations(self) -> "unsigned long":
        """GetMaximumNumberOfIterations(itkSPSAOptimizer self) -> unsigned long"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetMaximumNumberOfIterations(self)


    def SetTolerance(self, _arg: 'double const') -> "void":
        """
        SetTolerance(itkSPSAOptimizer self, double const _arg)

        Set/Get Tolerance 
        """
        return _ITKOptimizersBasePython.itkSPSAOptimizer_SetTolerance(self, _arg)


    def GetTolerance(self) -> "double":
        """GetTolerance(itkSPSAOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_GetTolerance(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkSPSAOptimizer

    def cast(obj: 'itkLightObject') -> "itkSPSAOptimizer *":
        """cast(itkLightObject obj) -> itkSPSAOptimizer"""
        return _ITKOptimizersBasePython.itkSPSAOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSPSAOptimizer

        Create a new object of the class itkSPSAOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSPSAOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSPSAOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSPSAOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSPSAOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_Clone, None, itkSPSAOptimizer)
itkSPSAOptimizer.AdvanceOneStep = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_AdvanceOneStep, None, itkSPSAOptimizer)
itkSPSAOptimizer.ResumeOptimization = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_ResumeOptimization, None, itkSPSAOptimizer)
itkSPSAOptimizer.StopOptimization = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_StopOptimization, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetValue, None, itkSPSAOptimizer)
itkSPSAOptimizer.GuessParameters = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GuessParameters, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetCurrentIteration = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetCurrentIteration, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetStopCondition = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetStopCondition, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetLearningRate = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetLearningRate, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetGradientMagnitude = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetGradientMagnitude, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetGradient = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetGradient, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetSa = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetSa, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetSa = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetSa, None, itkSPSAOptimizer)
itkSPSAOptimizer.Seta = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_Seta, None, itkSPSAOptimizer)
itkSPSAOptimizer.Geta = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_Geta, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetSc = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetSc, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetSc = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetSc, None, itkSPSAOptimizer)
itkSPSAOptimizer.Setc = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_Setc, None, itkSPSAOptimizer)
itkSPSAOptimizer.Getc = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_Getc, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetA = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetA, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetA = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetA, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetAlpha = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetAlpha, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetAlpha = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetAlpha, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetGamma = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetGamma, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetGamma = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetGamma, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetMaximize, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetMaximize = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetMaximize, None, itkSPSAOptimizer)
itkSPSAOptimizer.MaximizeOn = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_MaximizeOn, None, itkSPSAOptimizer)
itkSPSAOptimizer.MaximizeOff = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_MaximizeOff, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetMinimize, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetMinimize = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetMinimize, None, itkSPSAOptimizer)
itkSPSAOptimizer.MinimizeOn = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_MinimizeOn, None, itkSPSAOptimizer)
itkSPSAOptimizer.MinimizeOff = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_MinimizeOff, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetNumberOfPerturbations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetNumberOfPerturbations, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetNumberOfPerturbations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetNumberOfPerturbations, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetStateOfConvergence = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetStateOfConvergence, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetStateOfConvergenceDecayRate = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetStateOfConvergenceDecayRate, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetStateOfConvergenceDecayRate = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetStateOfConvergenceDecayRate, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetMinimumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetMinimumNumberOfIterations, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetMinimumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetMinimumNumberOfIterations, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetMaximumNumberOfIterations, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetMaximumNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetMaximumNumberOfIterations, None, itkSPSAOptimizer)
itkSPSAOptimizer.SetTolerance = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_SetTolerance, None, itkSPSAOptimizer)
itkSPSAOptimizer.GetTolerance = new_instancemethod(_ITKOptimizersBasePython.itkSPSAOptimizer_GetTolerance, None, itkSPSAOptimizer)
itkSPSAOptimizer_swigregister = _ITKOptimizersBasePython.itkSPSAOptimizer_swigregister
itkSPSAOptimizer_swigregister(itkSPSAOptimizer)

def itkSPSAOptimizer___New_orig__() -> "itkSPSAOptimizer_Pointer":
    """itkSPSAOptimizer___New_orig__() -> itkSPSAOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkSPSAOptimizer___New_orig__()

def itkSPSAOptimizer_cast(obj: 'itkLightObject') -> "itkSPSAOptimizer *":
    """itkSPSAOptimizer_cast(itkLightObject obj) -> itkSPSAOptimizer"""
    return _ITKOptimizersBasePython.itkSPSAOptimizer_cast(obj)

class itkVersorRigid3DTransformOptimizer(itkRegularStepGradientDescentBaseOptimizer):
    """


    Implement a gradient descent optimizer for the VersorRigid3DTransform
    parameter space.

    VersorRigid3DTransformOptimizer is a variant of the gradient descent
    optimizer implemented in RegularStepGradientDescentOptimizer.

    Versors are not in a vector space, for that reason, the classical
    gradient descent algorithm has to be modified in order to be
    applicable to Versors (unit quaternions) that form the group SO(3).

    The Versor space has only three degrees of freedom, even though
    Versors are represented using four values.

    This optimizer assumes that the CostFunction to be optimized has an
    itk::Versor and an itk::Vector as parameters.

    See:   RegularStepGradientDescentOptimizer

    See:  Versor

    See:  VersorRigid3DTransform

    C++ includes: itkVersorRigid3DTransformOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVersorRigid3DTransformOptimizer_Pointer":
        """__New_orig__() -> itkVersorRigid3DTransformOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVersorRigid3DTransformOptimizer_Pointer":
        """Clone(itkVersorRigid3DTransformOptimizer self) -> itkVersorRigid3DTransformOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_Clone(self)


    def StepAlongGradient(self, factor: 'double', transformedGradient: 'itkArrayD') -> "void":
        """
        StepAlongGradient(itkVersorRigid3DTransformOptimizer self, double factor, itkArrayD transformedGradient)

        Advance one step
        following the gradient direction. 
        """
        return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_StepAlongGradient(self, factor, transformedGradient)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkVersorRigid3DTransformOptimizer

    def cast(obj: 'itkLightObject') -> "itkVersorRigid3DTransformOptimizer *":
        """cast(itkLightObject obj) -> itkVersorRigid3DTransformOptimizer"""
        return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVersorRigid3DTransformOptimizer

        Create a new object of the class itkVersorRigid3DTransformOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVersorRigid3DTransformOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVersorRigid3DTransformOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVersorRigid3DTransformOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVersorRigid3DTransformOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_Clone, None, itkVersorRigid3DTransformOptimizer)
itkVersorRigid3DTransformOptimizer.StepAlongGradient = new_instancemethod(_ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_StepAlongGradient, None, itkVersorRigid3DTransformOptimizer)
itkVersorRigid3DTransformOptimizer_swigregister = _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_swigregister
itkVersorRigid3DTransformOptimizer_swigregister(itkVersorRigid3DTransformOptimizer)

def itkVersorRigid3DTransformOptimizer___New_orig__() -> "itkVersorRigid3DTransformOptimizer_Pointer":
    """itkVersorRigid3DTransformOptimizer___New_orig__() -> itkVersorRigid3DTransformOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer___New_orig__()

def itkVersorRigid3DTransformOptimizer_cast(obj: 'itkLightObject') -> "itkVersorRigid3DTransformOptimizer *":
    """itkVersorRigid3DTransformOptimizer_cast(itkLightObject obj) -> itkVersorRigid3DTransformOptimizer"""
    return _ITKOptimizersBasePython.itkVersorRigid3DTransformOptimizer_cast(obj)

class itkVersorTransformOptimizer(itkRegularStepGradientDescentBaseOptimizer):
    """


    Implement a gradient descent optimizer.

    VersorTransformOptimizer is a variant of the gradient descent
    optimizer implemented in RegularStepGradientDescentOptimizer.

    Versors are not in a vector space, for that reason, the classical
    gradient descent algorithm has to be modified in order to be
    applicable to Versors (unit quaternions) that form the group SO(3).

    The Versor space has only three degrees of freedom, even though
    Versors are represented using four values.

    This optimizer assumes that the CostFunction to be optimized has an
    itk::Versor as parameter.

    See:   RegularStepGradientDescentOptimizer

    See:  Versor

    See:  VersorTransform

    C++ includes: itkVersorTransformOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVersorTransformOptimizer_Pointer":
        """__New_orig__() -> itkVersorTransformOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkVersorTransformOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVersorTransformOptimizer_Pointer":
        """Clone(itkVersorTransformOptimizer self) -> itkVersorTransformOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkVersorTransformOptimizer_Clone(self)


    def StepAlongGradient(self, factor: 'double', transformedGradient: 'itkArrayD') -> "void":
        """
        StepAlongGradient(itkVersorTransformOptimizer self, double factor, itkArrayD transformedGradient)

        Advance one step
        following the gradient direction. 
        """
        return _ITKOptimizersBasePython.itkVersorTransformOptimizer_StepAlongGradient(self, factor, transformedGradient)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkVersorTransformOptimizer

    def cast(obj: 'itkLightObject') -> "itkVersorTransformOptimizer *":
        """cast(itkLightObject obj) -> itkVersorTransformOptimizer"""
        return _ITKOptimizersBasePython.itkVersorTransformOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVersorTransformOptimizer

        Create a new object of the class itkVersorTransformOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVersorTransformOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVersorTransformOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVersorTransformOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVersorTransformOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkVersorTransformOptimizer_Clone, None, itkVersorTransformOptimizer)
itkVersorTransformOptimizer.StepAlongGradient = new_instancemethod(_ITKOptimizersBasePython.itkVersorTransformOptimizer_StepAlongGradient, None, itkVersorTransformOptimizer)
itkVersorTransformOptimizer_swigregister = _ITKOptimizersBasePython.itkVersorTransformOptimizer_swigregister
itkVersorTransformOptimizer_swigregister(itkVersorTransformOptimizer)

def itkVersorTransformOptimizer___New_orig__() -> "itkVersorTransformOptimizer_Pointer":
    """itkVersorTransformOptimizer___New_orig__() -> itkVersorTransformOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkVersorTransformOptimizer___New_orig__()

def itkVersorTransformOptimizer_cast(obj: 'itkLightObject') -> "itkVersorTransformOptimizer *":
    """itkVersorTransformOptimizer_cast(itkLightObject obj) -> itkVersorTransformOptimizer"""
    return _ITKOptimizersBasePython.itkVersorTransformOptimizer_cast(obj)

class itkCumulativeGaussianOptimizer(itkMultipleValuedNonLinearOptimizer):
    """


    This is an optimizer specific to estimating the parameters of
    Cumulative Gaussian sampled data.

    This optimizer will only work if the data array is sampled from a
    Cumulative Gaussian curve. It's more of a curve fitter than an
    optimizer, with the advantage of being fast and specific. It works by
    taking the derivative of the Cumulative Gaussian sample then
    repeatedly extending the tails of the Gaussian and recalculating the
    Gaussian parameters until the change in iterations is within tolerance
    or very small. The Gaussian is then integrated to reproduce the
    Cumulative Gaussian and the asymptotes are estimated by using least
    squares fit to estimate the constant from integration.

    C++ includes: itkCumulativeGaussianOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCumulativeGaussianOptimizer_Pointer":
        """__New_orig__() -> itkCumulativeGaussianOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCumulativeGaussianOptimizer_Pointer":
        """Clone(itkCumulativeGaussianOptimizer self) -> itkCumulativeGaussianOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_Clone(self)


    def SetDifferenceTolerance(self, _arg: 'double const') -> "void":
        """
        SetDifferenceTolerance(itkCumulativeGaussianOptimizer self, double const _arg)

        Set and get
        macros. 
        """
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetDifferenceTolerance(self, _arg)


    def GetDifferenceTolerance(self) -> "double":
        """GetDifferenceTolerance(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetDifferenceTolerance(self)


    def SetVerbose(self, _arg: 'bool const') -> "void":
        """SetVerbose(itkCumulativeGaussianOptimizer self, bool const _arg)"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetVerbose(self, _arg)


    def GetVerbose(self) -> "bool":
        """GetVerbose(itkCumulativeGaussianOptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetVerbose(self)


    def GetComputedMean(self) -> "double":
        """GetComputedMean(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetComputedMean(self)


    def GetComputedStandardDeviation(self) -> "double":
        """GetComputedStandardDeviation(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetComputedStandardDeviation(self)


    def GetUpperAsymptote(self) -> "double":
        """GetUpperAsymptote(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetUpperAsymptote(self)


    def GetLowerAsymptote(self) -> "double":
        """GetLowerAsymptote(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetLowerAsymptote(self)


    def GetFinalSampledArray(self) -> "itkArrayD *":
        """GetFinalSampledArray(itkCumulativeGaussianOptimizer self) -> itkArrayD"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetFinalSampledArray(self)


    def GetFitError(self) -> "double":
        """GetFitError(itkCumulativeGaussianOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetFitError(self)


    def SetDataArray(self, dataArray: 'itkArrayD') -> "void":
        """SetDataArray(itkCumulativeGaussianOptimizer self, itkArrayD dataArray)"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetDataArray(self, dataArray)


    def PrintArray(self, array: 'itkArrayD') -> "void":
        """
        PrintArray(itkCumulativeGaussianOptimizer self, itkArrayD array)

        Print an array. 
        """
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_PrintArray(self, array)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkCumulativeGaussianOptimizer

    def cast(obj: 'itkLightObject') -> "itkCumulativeGaussianOptimizer *":
        """cast(itkLightObject obj) -> itkCumulativeGaussianOptimizer"""
        return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCumulativeGaussianOptimizer

        Create a new object of the class itkCumulativeGaussianOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCumulativeGaussianOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCumulativeGaussianOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCumulativeGaussianOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCumulativeGaussianOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_Clone, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.SetDifferenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetDifferenceTolerance, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetDifferenceTolerance = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetDifferenceTolerance, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.SetVerbose = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetVerbose, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetVerbose = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetVerbose, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetComputedMean = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetComputedMean, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetComputedStandardDeviation = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetComputedStandardDeviation, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetUpperAsymptote = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetUpperAsymptote, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetLowerAsymptote = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetLowerAsymptote, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetFinalSampledArray = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetFinalSampledArray, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.GetFitError = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_GetFitError, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.SetDataArray = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_SetDataArray, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer.PrintArray = new_instancemethod(_ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_PrintArray, None, itkCumulativeGaussianOptimizer)
itkCumulativeGaussianOptimizer_swigregister = _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_swigregister
itkCumulativeGaussianOptimizer_swigregister(itkCumulativeGaussianOptimizer)

def itkCumulativeGaussianOptimizer___New_orig__() -> "itkCumulativeGaussianOptimizer_Pointer":
    """itkCumulativeGaussianOptimizer___New_orig__() -> itkCumulativeGaussianOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer___New_orig__()

def itkCumulativeGaussianOptimizer_cast(obj: 'itkLightObject') -> "itkCumulativeGaussianOptimizer *":
    """itkCumulativeGaussianOptimizer_cast(itkLightObject obj) -> itkCumulativeGaussianOptimizer"""
    return _ITKOptimizersBasePython.itkCumulativeGaussianOptimizer_cast(obj)

class itkFRPROptimizer(itkPowellOptimizer):
    """


    Implements Fletch-Reeves & Polak-Ribiere optimization using dBrent
    line search.

    This optimizer needs a cost function. This optimizer needs to be able
    to compute partial derivatives of the cost function with respect to
    each parameter.

    The SetStepLength determines the initial distance to step in a line
    direction when bounding the minimum (using bracketing triple spaced
    using a derivative-based search strategy).

    The StepTolerance terminates optimization when the parameter values
    are known to be within this (scaled) distance of the local extreme.

    The ValueTolerance terminates optimization when the cost function
    values at the current parameters and at the local extreme are likely
    (within a second order approximation) to be within this is tolerance.

    C++ includes: itkFRPROptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFRPROptimizer_Pointer":
        """__New_orig__() -> itkFRPROptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkFRPROptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFRPROptimizer_Pointer":
        """Clone(itkFRPROptimizer self) -> itkFRPROptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkFRPROptimizer_Clone(self)


    def SetUseUnitLengthGradient(self, _arg: 'bool const') -> "void":
        """
        SetUseUnitLengthGradient(itkFRPROptimizer self, bool const _arg)

        Convert
        gradient to a unit length vector 
        """
        return _ITKOptimizersBasePython.itkFRPROptimizer_SetUseUnitLengthGradient(self, _arg)


    def GetUseUnitLengthGradient(self) -> "bool":
        """GetUseUnitLengthGradient(itkFRPROptimizer self) -> bool"""
        return _ITKOptimizersBasePython.itkFRPROptimizer_GetUseUnitLengthGradient(self)


    def SetToFletchReeves(self) -> "void":
        """
        SetToFletchReeves(itkFRPROptimizer self)

        Set it to the
        Fletch-Reeves optimizer 
        """
        return _ITKOptimizersBasePython.itkFRPROptimizer_SetToFletchReeves(self)


    def SetToPolakRibiere(self) -> "void":
        """
        SetToPolakRibiere(itkFRPROptimizer self)

        Set it to the
        Fletch-Reeves optimizer 
        """
        return _ITKOptimizersBasePython.itkFRPROptimizer_SetToPolakRibiere(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkFRPROptimizer

    def cast(obj: 'itkLightObject') -> "itkFRPROptimizer *":
        """cast(itkLightObject obj) -> itkFRPROptimizer"""
        return _ITKOptimizersBasePython.itkFRPROptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFRPROptimizer

        Create a new object of the class itkFRPROptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFRPROptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFRPROptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFRPROptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFRPROptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkFRPROptimizer_Clone, None, itkFRPROptimizer)
itkFRPROptimizer.SetUseUnitLengthGradient = new_instancemethod(_ITKOptimizersBasePython.itkFRPROptimizer_SetUseUnitLengthGradient, None, itkFRPROptimizer)
itkFRPROptimizer.GetUseUnitLengthGradient = new_instancemethod(_ITKOptimizersBasePython.itkFRPROptimizer_GetUseUnitLengthGradient, None, itkFRPROptimizer)
itkFRPROptimizer.SetToFletchReeves = new_instancemethod(_ITKOptimizersBasePython.itkFRPROptimizer_SetToFletchReeves, None, itkFRPROptimizer)
itkFRPROptimizer.SetToPolakRibiere = new_instancemethod(_ITKOptimizersBasePython.itkFRPROptimizer_SetToPolakRibiere, None, itkFRPROptimizer)
itkFRPROptimizer_swigregister = _ITKOptimizersBasePython.itkFRPROptimizer_swigregister
itkFRPROptimizer_swigregister(itkFRPROptimizer)

def itkFRPROptimizer___New_orig__() -> "itkFRPROptimizer_Pointer":
    """itkFRPROptimizer___New_orig__() -> itkFRPROptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkFRPROptimizer___New_orig__()

def itkFRPROptimizer_cast(obj: 'itkLightObject') -> "itkFRPROptimizer *":
    """itkFRPROptimizer_cast(itkLightObject obj) -> itkFRPROptimizer"""
    return _ITKOptimizersBasePython.itkFRPROptimizer_cast(obj)

class itkInitializationBiasedParticleSwarmOptimizer(itkParticleSwarmOptimizerBase):
    """


    Implementation of a biased/regularized Particle Swarm Optimization
    (PSO) algorithm.

    This PSO algorithm was originally described in: M. P. Wachowiak, R.
    Smolikova, Y. Zheng, J. M. Zurada, A. S. Elmaghraby, "An approach to
    multimodal biomedical image registration utilizing particle swarm
    optimization", IEEE Trans. Evol. Comput., vol. 8(3): 289-301, 2004.

    The algorithm uses a stochastic optimization approach. Optimization is
    performed by maintaining a swarm (flock) of particles that traverse
    the parameter space, searching for the optimal function value.
    Associated with each particle are its location and speed, in parameter
    space. A particle's next location is determined by its current
    location, its current speed, the location of the best function value
    it previously encountered, the location of the best function value the
    particles in its neighborhood previously encountered and the initial
    position the user specified.

    The assumption is that the user's initial parameter settings are close
    to the minimum, which is often the case for registration. The initial
    parameter values are incorporated into the PSO's update rules, biasing
    the search in their direction. The swarms update equations are thus:

    $v_i(t+1) = wv_i(t) + c_1u_1(p_i-x_i(t)) + c_2u_2(p_g-x_i(t)) +
    c_3u_3(x_{init} - x_i(t))$ $x_i(t+1) = clampToBounds(x_i(t) +
    v_i(t+1))$

    where $u_i$ are $~U(0,1)$ and $w,c_1,c_2, c_3$ are user selected
    weights, and c_3 is linearly decreased per iteration so that it is in
    $c_3=initial, 0$.

    Swarm initialization is performed within the user supplied parameter
    bounds using a uniform distribution or a normal distribution centered
    on the initial parameter values supplied by the user, $x_{init}$. The
    search terminates when the maximal number of iterations has been
    reached or when the change in the best value in the past $g$
    generations is below a threshold and the swarm has collapsed (i.e.
    particles are close to each other in parameter space).

    This implementation only performs minimization.

    C++ includes: itkInitializationBiasedParticleSwarmOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkInitializationBiasedParticleSwarmOptimizer_Pointer":
        """__New_orig__() -> itkInitializationBiasedParticleSwarmOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkInitializationBiasedParticleSwarmOptimizer_Pointer":
        """Clone(itkInitializationBiasedParticleSwarmOptimizer self) -> itkInitializationBiasedParticleSwarmOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_Clone(self)


    def SetInertiaCoefficient(self, _arg: 'double const') -> "void":
        """
        SetInertiaCoefficient(itkInitializationBiasedParticleSwarmOptimizer self, double const _arg)

        The Particle
        swarm optimizer uses the following update formula: \\[c_3 =
        c_{3initial}(1.0 - IterationIndex/MaximalNumberOfIterations)\\]
        \\[v_i(t+1) = w*v_i(t) + c_1*uniform(0,1)*(p_i-x_i(t)) +
        c_2*uniform(0,1)*(p_g-x_i(t)) +
        c_3*uniform(0,1)*(x_{init}-x_i(t))\\] \\[x_i(t+1) =
        clampToBounds(x_i(t) + v_i(t+1))\\] where $w$ - inertia constant
        $c_1$ - personal coefficient $c_2$ - global coefficient $c_3$ -
        initial location coefficient $p_i$ - parameters yielding the best
        function value obtained by this particle $p_g$ - parameters yielding
        the best function value obtained by all particles $x_{init}$ - initial
        parameter values provided by user 
        """
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetInertiaCoefficient(self, _arg)


    def GetInertiaCoefficient(self) -> "double":
        """GetInertiaCoefficient(itkInitializationBiasedParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetInertiaCoefficient(self)


    def SetPersonalCoefficient(self, _arg: 'double const') -> "void":
        """SetPersonalCoefficient(itkInitializationBiasedParticleSwarmOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetPersonalCoefficient(self, _arg)


    def GetPersonalCoefficient(self) -> "double":
        """GetPersonalCoefficient(itkInitializationBiasedParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetPersonalCoefficient(self)


    def SetGlobalCoefficient(self, _arg: 'double const') -> "void":
        """SetGlobalCoefficient(itkInitializationBiasedParticleSwarmOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetGlobalCoefficient(self, _arg)


    def GetGlobalCoefficient(self) -> "double":
        """GetGlobalCoefficient(itkInitializationBiasedParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetGlobalCoefficient(self)


    def SetInitializationCoefficient(self, _arg: 'double const') -> "void":
        """SetInitializationCoefficient(itkInitializationBiasedParticleSwarmOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetInitializationCoefficient(self, _arg)


    def GetInitializationCoefficient(self) -> "double":
        """GetInitializationCoefficient(itkInitializationBiasedParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetInitializationCoefficient(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkInitializationBiasedParticleSwarmOptimizer

    def cast(obj: 'itkLightObject') -> "itkInitializationBiasedParticleSwarmOptimizer *":
        """cast(itkLightObject obj) -> itkInitializationBiasedParticleSwarmOptimizer"""
        return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkInitializationBiasedParticleSwarmOptimizer

        Create a new object of the class itkInitializationBiasedParticleSwarmOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInitializationBiasedParticleSwarmOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkInitializationBiasedParticleSwarmOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInitializationBiasedParticleSwarmOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInitializationBiasedParticleSwarmOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_Clone, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.SetInertiaCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetInertiaCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.GetInertiaCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetInertiaCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.SetPersonalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetPersonalCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.GetPersonalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetPersonalCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.SetGlobalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetGlobalCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.GetGlobalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetGlobalCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.SetInitializationCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_SetInitializationCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer.GetInitializationCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_GetInitializationCoefficient, None, itkInitializationBiasedParticleSwarmOptimizer)
itkInitializationBiasedParticleSwarmOptimizer_swigregister = _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_swigregister
itkInitializationBiasedParticleSwarmOptimizer_swigregister(itkInitializationBiasedParticleSwarmOptimizer)

def itkInitializationBiasedParticleSwarmOptimizer___New_orig__() -> "itkInitializationBiasedParticleSwarmOptimizer_Pointer":
    """itkInitializationBiasedParticleSwarmOptimizer___New_orig__() -> itkInitializationBiasedParticleSwarmOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer___New_orig__()

def itkInitializationBiasedParticleSwarmOptimizer_cast(obj: 'itkLightObject') -> "itkInitializationBiasedParticleSwarmOptimizer *":
    """itkInitializationBiasedParticleSwarmOptimizer_cast(itkLightObject obj) -> itkInitializationBiasedParticleSwarmOptimizer"""
    return _ITKOptimizersBasePython.itkInitializationBiasedParticleSwarmOptimizer_cast(obj)

class itkLevenbergMarquardtOptimizer(itkMultipleValuedNonLinearVnlOptimizer):
    """


    Wrap of the vnl_levenberg_marquardt algorithm.

    C++ includes: itkLevenbergMarquardtOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevenbergMarquardtOptimizer_Pointer":
        """__New_orig__() -> itkLevenbergMarquardtOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevenbergMarquardtOptimizer_Pointer":
        """Clone(itkLevenbergMarquardtOptimizer self) -> itkLevenbergMarquardtOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_Clone(self)


    def GetOptimizer(self) -> "vnl_levenberg_marquardt *":
        """
        GetOptimizer(itkLevenbergMarquardtOptimizer self) -> vnl_levenberg_marquardt *

        Method for getting
        access to the internal optimizer. 
        """
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_GetOptimizer(self)


    def SetNumberOfIterations(self, iterations: 'unsigned int') -> "void":
        """SetNumberOfIterations(itkLevenbergMarquardtOptimizer self, unsigned int iterations)"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetNumberOfIterations(self, iterations)


    def SetValueTolerance(self, tol: 'double') -> "void":
        """SetValueTolerance(itkLevenbergMarquardtOptimizer self, double tol)"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetValueTolerance(self, tol)


    def SetGradientTolerance(self, tol: 'double') -> "void":
        """SetGradientTolerance(itkLevenbergMarquardtOptimizer self, double tol)"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetGradientTolerance(self, tol)


    def SetEpsilonFunction(self, epsilon: 'double') -> "void":
        """SetEpsilonFunction(itkLevenbergMarquardtOptimizer self, double epsilon)"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetEpsilonFunction(self, epsilon)


    def GetValue(self) -> "itkArrayD":
        """
        GetValue(itkLevenbergMarquardtOptimizer self) -> itkArrayD

        Get the current value 
        """
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_GetValue(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkLevenbergMarquardtOptimizer

    def cast(obj: 'itkLightObject') -> "itkLevenbergMarquardtOptimizer *":
        """cast(itkLightObject obj) -> itkLevenbergMarquardtOptimizer"""
        return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevenbergMarquardtOptimizer

        Create a new object of the class itkLevenbergMarquardtOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevenbergMarquardtOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevenbergMarquardtOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevenbergMarquardtOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevenbergMarquardtOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_Clone, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.GetOptimizer = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_GetOptimizer, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.SetNumberOfIterations = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetNumberOfIterations, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.SetValueTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetValueTolerance, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.SetGradientTolerance = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetGradientTolerance, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.SetEpsilonFunction = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_SetEpsilonFunction, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer.GetValue = new_instancemethod(_ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_GetValue, None, itkLevenbergMarquardtOptimizer)
itkLevenbergMarquardtOptimizer_swigregister = _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_swigregister
itkLevenbergMarquardtOptimizer_swigregister(itkLevenbergMarquardtOptimizer)

def itkLevenbergMarquardtOptimizer___New_orig__() -> "itkLevenbergMarquardtOptimizer_Pointer":
    """itkLevenbergMarquardtOptimizer___New_orig__() -> itkLevenbergMarquardtOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer___New_orig__()

def itkLevenbergMarquardtOptimizer_cast(obj: 'itkLightObject') -> "itkLevenbergMarquardtOptimizer *":
    """itkLevenbergMarquardtOptimizer_cast(itkLightObject obj) -> itkLevenbergMarquardtOptimizer"""
    return _ITKOptimizersBasePython.itkLevenbergMarquardtOptimizer_cast(obj)

class itkParticleSwarmOptimizer(itkParticleSwarmOptimizerBase):
    """


    Implementation of a Particle Swarm Optimization (PSO) algorithm.

    The PSO algorithm was originally presented in:  J. Kennedy, R.
    Eberhart, "Particle Swarm Optimization", Proc. IEEE Int. Neural
    Networks, 1995.

    The algorithm uses a stochastic optimization approach. Optimization is
    performed by maintaining a swarm (flock) of particles that traverse
    the parameter space, searching for the optimal function value.
    Associated with each particle are its location and speed, in parameter
    space. A particle's next location is determined by its current
    location, its current speed, the location of the best function value
    it previously encountered, and the location of the best function value
    the particles in its neighborhood previously encountered. In this
    implementation we use a global neighborhood with the following update
    equations: \\[v_i(t+1) = wv_i(t) + c_1u_1(p_i-x_i(t)) + c_2u_2(p_g-
    x_i(t))\\] \\[x_i(t+1) = clampToBounds(x_i(t) + v_i(t+1))\\]

    where $u_i$ are $~U(0,1)$ and $w,c_1,c_2$ are user selected weights.

    Swarm initialization is performed within the user supplied parameter
    bounds using a uniform distribution or a normal distribution centered
    on the initial parameter values supplied by the user. The search
    terminates when the maximal number of iterations has been reached or
    when the change in the best value in the past $g$ generations is below
    a threshold and the swarm has collapsed (i.e. particles are close to
    each other in parameter space).

    NOTE: This implementation only performs minimization.

    C++ includes: itkParticleSwarmOptimizer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkParticleSwarmOptimizer_Pointer":
        """__New_orig__() -> itkParticleSwarmOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkParticleSwarmOptimizer_Pointer":
        """Clone(itkParticleSwarmOptimizer self) -> itkParticleSwarmOptimizer_Pointer"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_Clone(self)


    def SetInertiaCoefficient(self, _arg: 'double const') -> "void":
        """
        SetInertiaCoefficient(itkParticleSwarmOptimizer self, double const _arg)

        The Particle
        swarm optimizer uses the following update formula: v_i(t+1) = w*v_i(t)
        + c_1*uniform(0,1)*(p_i-x_i(t)) + c_2*uniform(0,1)*(p_g-x_i(t))
        x_i(t+1) = clampToBounds(x_i(t) + v_i(t+1)) where w - inertia constant
        c_1 - personal coefficient c_2 - global coefficient p_i - parameters
        yielding the best function value obtained by this particle p_g -
        parameters yielding the best function value obtained by all particles

        """
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetInertiaCoefficient(self, _arg)


    def GetInertiaCoefficient(self) -> "double":
        """GetInertiaCoefficient(itkParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetInertiaCoefficient(self)


    def SetPersonalCoefficient(self, _arg: 'double const') -> "void":
        """SetPersonalCoefficient(itkParticleSwarmOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetPersonalCoefficient(self, _arg)


    def GetPersonalCoefficient(self) -> "double":
        """GetPersonalCoefficient(itkParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetPersonalCoefficient(self)


    def SetGlobalCoefficient(self, _arg: 'double const') -> "void":
        """SetGlobalCoefficient(itkParticleSwarmOptimizer self, double const _arg)"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetGlobalCoefficient(self, _arg)


    def GetGlobalCoefficient(self) -> "double":
        """GetGlobalCoefficient(itkParticleSwarmOptimizer self) -> double"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetGlobalCoefficient(self)

    __swig_destroy__ = _ITKOptimizersBasePython.delete_itkParticleSwarmOptimizer

    def cast(obj: 'itkLightObject') -> "itkParticleSwarmOptimizer *":
        """cast(itkLightObject obj) -> itkParticleSwarmOptimizer"""
        return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParticleSwarmOptimizer

        Create a new object of the class itkParticleSwarmOptimizer and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParticleSwarmOptimizer.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParticleSwarmOptimizer.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParticleSwarmOptimizer.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParticleSwarmOptimizer.Clone = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_Clone, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.SetInertiaCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetInertiaCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.GetInertiaCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetInertiaCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.SetPersonalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetPersonalCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.GetPersonalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetPersonalCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.SetGlobalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_SetGlobalCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer.GetGlobalCoefficient = new_instancemethod(_ITKOptimizersBasePython.itkParticleSwarmOptimizer_GetGlobalCoefficient, None, itkParticleSwarmOptimizer)
itkParticleSwarmOptimizer_swigregister = _ITKOptimizersBasePython.itkParticleSwarmOptimizer_swigregister
itkParticleSwarmOptimizer_swigregister(itkParticleSwarmOptimizer)

def itkParticleSwarmOptimizer___New_orig__() -> "itkParticleSwarmOptimizer_Pointer":
    """itkParticleSwarmOptimizer___New_orig__() -> itkParticleSwarmOptimizer_Pointer"""
    return _ITKOptimizersBasePython.itkParticleSwarmOptimizer___New_orig__()

def itkParticleSwarmOptimizer_cast(obj: 'itkLightObject') -> "itkParticleSwarmOptimizer *":
    """itkParticleSwarmOptimizer_cast(itkLightObject obj) -> itkParticleSwarmOptimizer"""
    return _ITKOptimizersBasePython.itkParticleSwarmOptimizer_cast(obj)



