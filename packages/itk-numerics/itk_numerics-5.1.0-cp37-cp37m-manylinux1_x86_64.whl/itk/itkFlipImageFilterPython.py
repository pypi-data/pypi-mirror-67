# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFlipImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFlipImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkFlipImageFilterPython
            return _itkFlipImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFlipImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFlipImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFlipImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkImageRegionPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import ITKCommonBasePython
import itkImageToImageFilterAPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkFlipImageFilterID3_New():
  return itkFlipImageFilterID3.New()


def itkFlipImageFilterID2_New():
  return itkFlipImageFilterID2.New()


def itkFlipImageFilterIF3_New():
  return itkFlipImageFilterIF3.New()


def itkFlipImageFilterIF2_New():
  return itkFlipImageFilterIF2.New()


def itkFlipImageFilterIUS3_New():
  return itkFlipImageFilterIUS3.New()


def itkFlipImageFilterIUS2_New():
  return itkFlipImageFilterIUS2.New()


def itkFlipImageFilterIUC3_New():
  return itkFlipImageFilterIUC3.New()


def itkFlipImageFilterIUC2_New():
  return itkFlipImageFilterIUC2.New()


def itkFlipImageFilterISS3_New():
  return itkFlipImageFilterISS3.New()


def itkFlipImageFilterISS2_New():
  return itkFlipImageFilterISS2.New()

class itkFlipImageFilterID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterID2_Pointer":
        """__New_orig__() -> itkFlipImageFilterID2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterID2_Pointer":
        """Clone(itkFlipImageFilterID2 self) -> itkFlipImageFilterID2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB2') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterID2 self, itkFixedArrayB2 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB2":
        """GetFlipAxes(itkFlipImageFilterID2 self) -> itkFixedArrayB2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterID2 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterID2 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterID2 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterID2 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterID2 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterID2 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterID2

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterID2 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterID2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterID2

        Create a new object of the class itkFlipImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterID2.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_Clone, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAxes, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAxes, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOn, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_FlipAboutOriginOff, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_GetFlipAboutOrigin, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_SetFlipAboutOrigin, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateOutputInformation, None, itkFlipImageFilterID2)
itkFlipImageFilterID2.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID2_GenerateInputRequestedRegion, None, itkFlipImageFilterID2)
itkFlipImageFilterID2_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterID2_swigregister
itkFlipImageFilterID2_swigregister(itkFlipImageFilterID2)

def itkFlipImageFilterID2___New_orig__() -> "itkFlipImageFilterID2_Pointer":
    """itkFlipImageFilterID2___New_orig__() -> itkFlipImageFilterID2_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterID2___New_orig__()

def itkFlipImageFilterID2_cast(obj: 'itkLightObject') -> "itkFlipImageFilterID2 *":
    """itkFlipImageFilterID2_cast(itkLightObject obj) -> itkFlipImageFilterID2"""
    return _itkFlipImageFilterPython.itkFlipImageFilterID2_cast(obj)

class itkFlipImageFilterID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterID3_Pointer":
        """__New_orig__() -> itkFlipImageFilterID3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterID3_Pointer":
        """Clone(itkFlipImageFilterID3 self) -> itkFlipImageFilterID3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB3') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterID3 self, itkFixedArrayB3 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB3":
        """GetFlipAxes(itkFlipImageFilterID3 self) -> itkFixedArrayB3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterID3 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterID3 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterID3 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterID3 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterID3 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterID3 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterID3

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterID3 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterID3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterID3

        Create a new object of the class itkFlipImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterID3.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_Clone, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAxes, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAxes, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOn, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_FlipAboutOriginOff, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_GetFlipAboutOrigin, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_SetFlipAboutOrigin, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateOutputInformation, None, itkFlipImageFilterID3)
itkFlipImageFilterID3.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterID3_GenerateInputRequestedRegion, None, itkFlipImageFilterID3)
itkFlipImageFilterID3_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterID3_swigregister
itkFlipImageFilterID3_swigregister(itkFlipImageFilterID3)

def itkFlipImageFilterID3___New_orig__() -> "itkFlipImageFilterID3_Pointer":
    """itkFlipImageFilterID3___New_orig__() -> itkFlipImageFilterID3_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterID3___New_orig__()

def itkFlipImageFilterID3_cast(obj: 'itkLightObject') -> "itkFlipImageFilterID3 *":
    """itkFlipImageFilterID3_cast(itkLightObject obj) -> itkFlipImageFilterID3"""
    return _itkFlipImageFilterPython.itkFlipImageFilterID3_cast(obj)

class itkFlipImageFilterIF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIF2_Pointer":
        """__New_orig__() -> itkFlipImageFilterIF2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIF2_Pointer":
        """Clone(itkFlipImageFilterIF2 self) -> itkFlipImageFilterIF2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB2') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIF2 self, itkFixedArrayB2 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB2":
        """GetFlipAxes(itkFlipImageFilterIF2 self) -> itkFixedArrayB2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIF2 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIF2 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIF2 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIF2 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIF2 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIF2 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIF2

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIF2 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIF2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIF2

        Create a new object of the class itkFlipImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIF2.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_Clone, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAxes, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAxes, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOn, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_FlipAboutOriginOff, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GetFlipAboutOrigin, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_SetFlipAboutOrigin, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateOutputInformation, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF2_GenerateInputRequestedRegion, None, itkFlipImageFilterIF2)
itkFlipImageFilterIF2_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIF2_swigregister
itkFlipImageFilterIF2_swigregister(itkFlipImageFilterIF2)

def itkFlipImageFilterIF2___New_orig__() -> "itkFlipImageFilterIF2_Pointer":
    """itkFlipImageFilterIF2___New_orig__() -> itkFlipImageFilterIF2_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIF2___New_orig__()

def itkFlipImageFilterIF2_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIF2 *":
    """itkFlipImageFilterIF2_cast(itkLightObject obj) -> itkFlipImageFilterIF2"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIF2_cast(obj)

class itkFlipImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIF3_Pointer":
        """__New_orig__() -> itkFlipImageFilterIF3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIF3_Pointer":
        """Clone(itkFlipImageFilterIF3 self) -> itkFlipImageFilterIF3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB3') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIF3 self, itkFixedArrayB3 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB3":
        """GetFlipAxes(itkFlipImageFilterIF3 self) -> itkFixedArrayB3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIF3 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIF3 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIF3 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIF3 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIF3 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIF3 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIF3

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIF3 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIF3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIF3

        Create a new object of the class itkFlipImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIF3.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_Clone, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAxes, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAxes, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOn, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_FlipAboutOriginOff, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GetFlipAboutOrigin, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_SetFlipAboutOrigin, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateOutputInformation, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIF3_GenerateInputRequestedRegion, None, itkFlipImageFilterIF3)
itkFlipImageFilterIF3_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIF3_swigregister
itkFlipImageFilterIF3_swigregister(itkFlipImageFilterIF3)

def itkFlipImageFilterIF3___New_orig__() -> "itkFlipImageFilterIF3_Pointer":
    """itkFlipImageFilterIF3___New_orig__() -> itkFlipImageFilterIF3_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIF3___New_orig__()

def itkFlipImageFilterIF3_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIF3 *":
    """itkFlipImageFilterIF3_cast(itkLightObject obj) -> itkFlipImageFilterIF3"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIF3_cast(obj)

class itkFlipImageFilterISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterISS2_Pointer":
        """__New_orig__() -> itkFlipImageFilterISS2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterISS2_Pointer":
        """Clone(itkFlipImageFilterISS2 self) -> itkFlipImageFilterISS2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB2') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterISS2 self, itkFixedArrayB2 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB2":
        """GetFlipAxes(itkFlipImageFilterISS2 self) -> itkFixedArrayB2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterISS2 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterISS2 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterISS2 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterISS2 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterISS2 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterISS2 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterISS2

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterISS2 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterISS2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterISS2

        Create a new object of the class itkFlipImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterISS2.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_Clone, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAxes, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAxes, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOn, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_FlipAboutOriginOff, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GetFlipAboutOrigin, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_SetFlipAboutOrigin, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateOutputInformation, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS2_GenerateInputRequestedRegion, None, itkFlipImageFilterISS2)
itkFlipImageFilterISS2_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterISS2_swigregister
itkFlipImageFilterISS2_swigregister(itkFlipImageFilterISS2)

def itkFlipImageFilterISS2___New_orig__() -> "itkFlipImageFilterISS2_Pointer":
    """itkFlipImageFilterISS2___New_orig__() -> itkFlipImageFilterISS2_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterISS2___New_orig__()

def itkFlipImageFilterISS2_cast(obj: 'itkLightObject') -> "itkFlipImageFilterISS2 *":
    """itkFlipImageFilterISS2_cast(itkLightObject obj) -> itkFlipImageFilterISS2"""
    return _itkFlipImageFilterPython.itkFlipImageFilterISS2_cast(obj)

class itkFlipImageFilterISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterISS3_Pointer":
        """__New_orig__() -> itkFlipImageFilterISS3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterISS3_Pointer":
        """Clone(itkFlipImageFilterISS3 self) -> itkFlipImageFilterISS3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB3') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterISS3 self, itkFixedArrayB3 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB3":
        """GetFlipAxes(itkFlipImageFilterISS3 self) -> itkFixedArrayB3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterISS3 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterISS3 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterISS3 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterISS3 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterISS3 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterISS3 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterISS3

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterISS3 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterISS3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterISS3

        Create a new object of the class itkFlipImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterISS3.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_Clone, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAxes, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAxes, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOn, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_FlipAboutOriginOff, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GetFlipAboutOrigin, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_SetFlipAboutOrigin, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateOutputInformation, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterISS3_GenerateInputRequestedRegion, None, itkFlipImageFilterISS3)
itkFlipImageFilterISS3_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterISS3_swigregister
itkFlipImageFilterISS3_swigregister(itkFlipImageFilterISS3)

def itkFlipImageFilterISS3___New_orig__() -> "itkFlipImageFilterISS3_Pointer":
    """itkFlipImageFilterISS3___New_orig__() -> itkFlipImageFilterISS3_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterISS3___New_orig__()

def itkFlipImageFilterISS3_cast(obj: 'itkLightObject') -> "itkFlipImageFilterISS3 *":
    """itkFlipImageFilterISS3_cast(itkLightObject obj) -> itkFlipImageFilterISS3"""
    return _itkFlipImageFilterPython.itkFlipImageFilterISS3_cast(obj)

class itkFlipImageFilterIUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIUC2_Pointer":
        """__New_orig__() -> itkFlipImageFilterIUC2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIUC2_Pointer":
        """Clone(itkFlipImageFilterIUC2 self) -> itkFlipImageFilterIUC2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB2') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIUC2 self, itkFixedArrayB2 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB2":
        """GetFlipAxes(itkFlipImageFilterIUC2 self) -> itkFixedArrayB2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIUC2 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIUC2 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIUC2 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIUC2 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIUC2 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIUC2 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUC2

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUC2 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIUC2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUC2

        Create a new object of the class itkFlipImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIUC2.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_Clone, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAxes, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAxes, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOn, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_FlipAboutOriginOff, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GetFlipAboutOrigin, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_SetFlipAboutOrigin, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateOutputInformation, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC2_GenerateInputRequestedRegion, None, itkFlipImageFilterIUC2)
itkFlipImageFilterIUC2_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIUC2_swigregister
itkFlipImageFilterIUC2_swigregister(itkFlipImageFilterIUC2)

def itkFlipImageFilterIUC2___New_orig__() -> "itkFlipImageFilterIUC2_Pointer":
    """itkFlipImageFilterIUC2___New_orig__() -> itkFlipImageFilterIUC2_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUC2___New_orig__()

def itkFlipImageFilterIUC2_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUC2 *":
    """itkFlipImageFilterIUC2_cast(itkLightObject obj) -> itkFlipImageFilterIUC2"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUC2_cast(obj)

class itkFlipImageFilterIUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIUC3_Pointer":
        """__New_orig__() -> itkFlipImageFilterIUC3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIUC3_Pointer":
        """Clone(itkFlipImageFilterIUC3 self) -> itkFlipImageFilterIUC3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB3') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIUC3 self, itkFixedArrayB3 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB3":
        """GetFlipAxes(itkFlipImageFilterIUC3 self) -> itkFixedArrayB3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIUC3 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIUC3 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIUC3 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIUC3 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIUC3 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIUC3 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUC3

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUC3 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIUC3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUC3

        Create a new object of the class itkFlipImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIUC3.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_Clone, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAxes, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAxes, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOn, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_FlipAboutOriginOff, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GetFlipAboutOrigin, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_SetFlipAboutOrigin, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateOutputInformation, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUC3_GenerateInputRequestedRegion, None, itkFlipImageFilterIUC3)
itkFlipImageFilterIUC3_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIUC3_swigregister
itkFlipImageFilterIUC3_swigregister(itkFlipImageFilterIUC3)

def itkFlipImageFilterIUC3___New_orig__() -> "itkFlipImageFilterIUC3_Pointer":
    """itkFlipImageFilterIUC3___New_orig__() -> itkFlipImageFilterIUC3_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUC3___New_orig__()

def itkFlipImageFilterIUC3_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUC3 *":
    """itkFlipImageFilterIUC3_cast(itkLightObject obj) -> itkFlipImageFilterIUC3"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUC3_cast(obj)

class itkFlipImageFilterIUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIUS2_Pointer":
        """__New_orig__() -> itkFlipImageFilterIUS2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIUS2_Pointer":
        """Clone(itkFlipImageFilterIUS2 self) -> itkFlipImageFilterIUS2_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB2') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIUS2 self, itkFixedArrayB2 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB2":
        """GetFlipAxes(itkFlipImageFilterIUS2 self) -> itkFixedArrayB2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIUS2 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIUS2 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIUS2 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIUS2 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIUS2 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIUS2 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUS2

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUS2 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIUS2"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUS2

        Create a new object of the class itkFlipImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIUS2.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_Clone, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAxes, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAxes, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOn, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_FlipAboutOriginOff, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GetFlipAboutOrigin, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_SetFlipAboutOrigin, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateOutputInformation, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS2_GenerateInputRequestedRegion, None, itkFlipImageFilterIUS2)
itkFlipImageFilterIUS2_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIUS2_swigregister
itkFlipImageFilterIUS2_swigregister(itkFlipImageFilterIUS2)

def itkFlipImageFilterIUS2___New_orig__() -> "itkFlipImageFilterIUS2_Pointer":
    """itkFlipImageFilterIUS2___New_orig__() -> itkFlipImageFilterIUS2_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUS2___New_orig__()

def itkFlipImageFilterIUS2_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUS2 *":
    """itkFlipImageFilterIUS2_cast(itkLightObject obj) -> itkFlipImageFilterIUS2"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUS2_cast(obj)

class itkFlipImageFilterIUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Flips an image across user specified axes.

    FlipImageFilter flips an image across user specified axes. The flip
    axes are set via method SetFlipAxes( array ) where the input is a
    FixedArray<bool,ImageDimension>. The image is flipped across axes for
    which array[i] is true.

    In terms of grid coordinates the image is flipped within the
    LargestPossibleRegion of the input image. As such, the
    LargestPossibleRegion of the output image is the same as the input.

    In terms of geometric coordinates, the output origin is such that the
    image is flipped with respect to the coordinate axes.

    C++ includes: itkFlipImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFlipImageFilterIUS3_Pointer":
        """__New_orig__() -> itkFlipImageFilterIUS3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFlipImageFilterIUS3_Pointer":
        """Clone(itkFlipImageFilterIUS3 self) -> itkFlipImageFilterIUS3_Pointer"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_Clone(self)


    def SetFlipAxes(self, _arg: 'itkFixedArrayB3') -> "void":
        """
        SetFlipAxes(itkFlipImageFilterIUS3 self, itkFixedArrayB3 _arg)

        Set/Get the axis to be
        flipped. The image is flipped along axes for which array[i] is true.
        Default is false. 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAxes(self, _arg)


    def GetFlipAxes(self) -> "itkFixedArrayB3":
        """GetFlipAxes(itkFlipImageFilterIUS3 self) -> itkFixedArrayB3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAxes(self)


    def FlipAboutOriginOn(self) -> "void":
        """
        FlipAboutOriginOn(itkFlipImageFilterIUS3 self)

        Controls how the
        output origin is computed. If FlipAboutOrigin is "On", the flip will
        occur about the origin of the axis, otherwise, the flip will occur
        about the center of the axis. Default is "On". 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOn(self)


    def FlipAboutOriginOff(self) -> "void":
        """FlipAboutOriginOff(itkFlipImageFilterIUS3 self)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOff(self)


    def GetFlipAboutOrigin(self) -> "bool":
        """GetFlipAboutOrigin(itkFlipImageFilterIUS3 self) -> bool"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAboutOrigin(self)


    def SetFlipAboutOrigin(self, _arg: 'bool const') -> "void":
        """SetFlipAboutOrigin(itkFlipImageFilterIUS3 self, bool const _arg)"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAboutOrigin(self, _arg)


    def GenerateOutputInformation(self) -> "void":
        """
        GenerateOutputInformation(itkFlipImageFilterIUS3 self)

        FlipImageFilter produces an image with different origin and direction
        than the input image. As such, FlipImageFilter needs to provide an
        implementation for GenerateOutputInformation() in order to inform the
        pipeline execution model. The output image meta information is
        obtained by permuting the input image meta information. The original
        documentation of this method is below. See:
        ProcessObject::GenerateOutputInformaton() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateOutputInformation(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkFlipImageFilterIUS3 self)

        FlipImageFilter needs different input requested region than the output
        requested region. As such, FlipImageFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model. The required input requested region is
        obtained by permuting the index and size of the output requested
        region. See:  ProcessObject::GenerateInputRequestedRegion() 
        """
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkFlipImageFilterPython.delete_itkFlipImageFilterIUS3

    def cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUS3 *":
        """cast(itkLightObject obj) -> itkFlipImageFilterIUS3"""
        return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFlipImageFilterIUS3

        Create a new object of the class itkFlipImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFlipImageFilterIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFlipImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFlipImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFlipImageFilterIUS3.Clone = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_Clone, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.SetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAxes, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.GetFlipAxes = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAxes, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.FlipAboutOriginOn = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOn, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.FlipAboutOriginOff = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_FlipAboutOriginOff, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.GetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GetFlipAboutOrigin, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.SetFlipAboutOrigin = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_SetFlipAboutOrigin, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.GenerateOutputInformation = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateOutputInformation, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3.GenerateInputRequestedRegion = new_instancemethod(_itkFlipImageFilterPython.itkFlipImageFilterIUS3_GenerateInputRequestedRegion, None, itkFlipImageFilterIUS3)
itkFlipImageFilterIUS3_swigregister = _itkFlipImageFilterPython.itkFlipImageFilterIUS3_swigregister
itkFlipImageFilterIUS3_swigregister(itkFlipImageFilterIUS3)

def itkFlipImageFilterIUS3___New_orig__() -> "itkFlipImageFilterIUS3_Pointer":
    """itkFlipImageFilterIUS3___New_orig__() -> itkFlipImageFilterIUS3_Pointer"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUS3___New_orig__()

def itkFlipImageFilterIUS3_cast(obj: 'itkLightObject') -> "itkFlipImageFilterIUS3 *":
    """itkFlipImageFilterIUS3_cast(itkLightObject obj) -> itkFlipImageFilterIUS3"""
    return _itkFlipImageFilterPython.itkFlipImageFilterIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def flip_image_filter(*args, **kwargs):
    """Procedural interface for FlipImageFilter"""
    import itk
    instance = itk.FlipImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def flip_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FlipImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FlipImageFilter.values()[0]
    else:
        filter_object = itk.FlipImageFilter

    flip_image_filter.__doc__ = filter_object.__doc__
    flip_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    flip_image_filter.__doc__ += "Available Keyword Arguments:\n"
    flip_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



