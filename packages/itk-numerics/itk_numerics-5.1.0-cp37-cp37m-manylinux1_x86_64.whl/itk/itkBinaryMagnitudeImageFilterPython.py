# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBinaryMagnitudeImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBinaryMagnitudeImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBinaryMagnitudeImageFilterPython
            return _itkBinaryMagnitudeImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBinaryMagnitudeImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBinaryMagnitudeImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBinaryMagnitudeImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkBinaryGeneratorImageFilterPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkFixedArrayPython
import vnl_vector_refPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import ITKCommonBasePython
import itkImagePython
import itkPointPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython

def itkBinaryMagnitudeImageFilterID3ID3ID3_New():
  return itkBinaryMagnitudeImageFilterID3ID3ID3.New()


def itkBinaryMagnitudeImageFilterID2ID2ID2_New():
  return itkBinaryMagnitudeImageFilterID2ID2ID2.New()


def itkBinaryMagnitudeImageFilterIF3IF3IF3_New():
  return itkBinaryMagnitudeImageFilterIF3IF3IF3.New()


def itkBinaryMagnitudeImageFilterIF2IF2IF2_New():
  return itkBinaryMagnitudeImageFilterIF2IF2IF2.New()


def itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_New():
  return itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New()


def itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_New():
  return itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New()


def itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_New():
  return itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New()


def itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_New():
  return itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New()


def itkBinaryMagnitudeImageFilterISS3ISS3ISS3_New():
  return itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New()


def itkBinaryMagnitudeImageFilterISS2ISS2ISS2_New():
  return itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New()

class itkBinaryMagnitudeImageFilterID2ID2ID2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterID2ID2ID2 self) -> itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterID2ID2ID2

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterID2ID2ID2 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterID2ID2ID2"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterID2ID2ID2

        Create a new object of the class itkBinaryMagnitudeImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterID2ID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterID2ID2ID2.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_Clone, None, itkBinaryMagnitudeImageFilterID2ID2ID2)
itkBinaryMagnitudeImageFilterID2ID2ID2_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_swigregister
itkBinaryMagnitudeImageFilterID2ID2ID2_swigregister(itkBinaryMagnitudeImageFilterID2ID2ID2)

def itkBinaryMagnitudeImageFilterID2ID2ID2___New_orig__() -> "itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer":
    """itkBinaryMagnitudeImageFilterID2ID2ID2___New_orig__() -> itkBinaryMagnitudeImageFilterID2ID2ID2_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2___New_orig__()

def itkBinaryMagnitudeImageFilterID2ID2ID2_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterID2ID2ID2 *":
    """itkBinaryMagnitudeImageFilterID2ID2ID2_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterID2ID2ID2"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID2ID2ID2_cast(obj)

class itkBinaryMagnitudeImageFilterID3ID3ID3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterID3ID3ID3 self) -> itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterID3ID3ID3

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterID3ID3ID3 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterID3ID3ID3"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterID3ID3ID3

        Create a new object of the class itkBinaryMagnitudeImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterID3ID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterID3ID3ID3.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_Clone, None, itkBinaryMagnitudeImageFilterID3ID3ID3)
itkBinaryMagnitudeImageFilterID3ID3ID3_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_swigregister
itkBinaryMagnitudeImageFilterID3ID3ID3_swigregister(itkBinaryMagnitudeImageFilterID3ID3ID3)

def itkBinaryMagnitudeImageFilterID3ID3ID3___New_orig__() -> "itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer":
    """itkBinaryMagnitudeImageFilterID3ID3ID3___New_orig__() -> itkBinaryMagnitudeImageFilterID3ID3ID3_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3___New_orig__()

def itkBinaryMagnitudeImageFilterID3ID3ID3_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterID3ID3ID3 *":
    """itkBinaryMagnitudeImageFilterID3ID3ID3_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterID3ID3ID3"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterID3ID3ID3_cast(obj)

class itkBinaryMagnitudeImageFilterIF2IF2IF2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIF2IF2IF2 self) -> itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIF2IF2IF2

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIF2IF2IF2 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIF2IF2IF2"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIF2IF2IF2

        Create a new object of the class itkBinaryMagnitudeImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIF2IF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIF2IF2IF2.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_Clone, None, itkBinaryMagnitudeImageFilterIF2IF2IF2)
itkBinaryMagnitudeImageFilterIF2IF2IF2_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_swigregister
itkBinaryMagnitudeImageFilterIF2IF2IF2_swigregister(itkBinaryMagnitudeImageFilterIF2IF2IF2)

def itkBinaryMagnitudeImageFilterIF2IF2IF2___New_orig__() -> "itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer":
    """itkBinaryMagnitudeImageFilterIF2IF2IF2___New_orig__() -> itkBinaryMagnitudeImageFilterIF2IF2IF2_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2___New_orig__()

def itkBinaryMagnitudeImageFilterIF2IF2IF2_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIF2IF2IF2 *":
    """itkBinaryMagnitudeImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIF2IF2IF2"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF2IF2IF2_cast(obj)

class itkBinaryMagnitudeImageFilterIF3IF3IF3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIF3IF3IF3 self) -> itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIF3IF3IF3

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIF3IF3IF3 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIF3IF3IF3"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIF3IF3IF3

        Create a new object of the class itkBinaryMagnitudeImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIF3IF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIF3IF3IF3.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_Clone, None, itkBinaryMagnitudeImageFilterIF3IF3IF3)
itkBinaryMagnitudeImageFilterIF3IF3IF3_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_swigregister
itkBinaryMagnitudeImageFilterIF3IF3IF3_swigregister(itkBinaryMagnitudeImageFilterIF3IF3IF3)

def itkBinaryMagnitudeImageFilterIF3IF3IF3___New_orig__() -> "itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer":
    """itkBinaryMagnitudeImageFilterIF3IF3IF3___New_orig__() -> itkBinaryMagnitudeImageFilterIF3IF3IF3_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3___New_orig__()

def itkBinaryMagnitudeImageFilterIF3IF3IF3_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIF3IF3IF3 *":
    """itkBinaryMagnitudeImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIF3IF3IF3"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIF3IF3IF3_cast(obj)

class itkBinaryMagnitudeImageFilterISS2ISS2ISS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterISS2ISS2ISS2 self) -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterISS2ISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterISS2ISS2ISS2 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2

        Create a new object of the class itkBinaryMagnitudeImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterISS2ISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterISS2ISS2ISS2.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Clone, None, itkBinaryMagnitudeImageFilterISS2ISS2ISS2)
itkBinaryMagnitudeImageFilterISS2ISS2ISS2_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_swigregister
itkBinaryMagnitudeImageFilterISS2ISS2ISS2_swigregister(itkBinaryMagnitudeImageFilterISS2ISS2ISS2)

def itkBinaryMagnitudeImageFilterISS2ISS2ISS2___New_orig__() -> "itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer":
    """itkBinaryMagnitudeImageFilterISS2ISS2ISS2___New_orig__() -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2___New_orig__()

def itkBinaryMagnitudeImageFilterISS2ISS2ISS2_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterISS2ISS2ISS2 *":
    """itkBinaryMagnitudeImageFilterISS2ISS2ISS2_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterISS2ISS2ISS2"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS2ISS2ISS2_cast(obj)

class itkBinaryMagnitudeImageFilterISS3ISS3ISS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterISS3ISS3ISS3 self) -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterISS3ISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterISS3ISS3ISS3 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3

        Create a new object of the class itkBinaryMagnitudeImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterISS3ISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterISS3ISS3ISS3.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Clone, None, itkBinaryMagnitudeImageFilterISS3ISS3ISS3)
itkBinaryMagnitudeImageFilterISS3ISS3ISS3_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_swigregister
itkBinaryMagnitudeImageFilterISS3ISS3ISS3_swigregister(itkBinaryMagnitudeImageFilterISS3ISS3ISS3)

def itkBinaryMagnitudeImageFilterISS3ISS3ISS3___New_orig__() -> "itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer":
    """itkBinaryMagnitudeImageFilterISS3ISS3ISS3___New_orig__() -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3___New_orig__()

def itkBinaryMagnitudeImageFilterISS3ISS3ISS3_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterISS3ISS3ISS3 *":
    """itkBinaryMagnitudeImageFilterISS3ISS3ISS3_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterISS3ISS3ISS3"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterISS3ISS3ISS3_cast(obj)

class itkBinaryMagnitudeImageFilterIUC2IUC2IUC2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 self) -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUC2IUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2

        Create a new object of the class itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIUC2IUC2IUC2.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Clone, None, itkBinaryMagnitudeImageFilterIUC2IUC2IUC2)
itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_swigregister
itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_swigregister(itkBinaryMagnitudeImageFilterIUC2IUC2IUC2)

def itkBinaryMagnitudeImageFilterIUC2IUC2IUC2___New_orig__() -> "itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer":
    """itkBinaryMagnitudeImageFilterIUC2IUC2IUC2___New_orig__() -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2___New_orig__()

def itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUC2IUC2IUC2 *":
    """itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUC2IUC2IUC2"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC2IUC2IUC2_cast(obj)

class itkBinaryMagnitudeImageFilterIUC3IUC3IUC3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 self) -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUC3IUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3

        Create a new object of the class itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIUC3IUC3IUC3.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Clone, None, itkBinaryMagnitudeImageFilterIUC3IUC3IUC3)
itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_swigregister
itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_swigregister(itkBinaryMagnitudeImageFilterIUC3IUC3IUC3)

def itkBinaryMagnitudeImageFilterIUC3IUC3IUC3___New_orig__() -> "itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer":
    """itkBinaryMagnitudeImageFilterIUC3IUC3IUC3___New_orig__() -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3___New_orig__()

def itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUC3IUC3IUC3 *":
    """itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUC3IUC3IUC3"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUC3IUC3IUC3_cast(obj)

class itkBinaryMagnitudeImageFilterIUS2IUS2IUS2(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 self) -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUS2IUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2

        Create a new object of the class itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIUS2IUS2IUS2.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Clone, None, itkBinaryMagnitudeImageFilterIUS2IUS2IUS2)
itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_swigregister
itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_swigregister(itkBinaryMagnitudeImageFilterIUS2IUS2IUS2)

def itkBinaryMagnitudeImageFilterIUS2IUS2IUS2___New_orig__() -> "itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer":
    """itkBinaryMagnitudeImageFilterIUS2IUS2IUS2___New_orig__() -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2___New_orig__()

def itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUS2IUS2IUS2 *":
    """itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUS2IUS2IUS2"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS2IUS2IUS2_cast(obj)

class itkBinaryMagnitudeImageFilterIUS3IUS3IUS3(itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    """


    Computes the square root of the sum of squares of corresponding input
    pixels.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter walks over all of the pixels in the two input images, and
    for each pixel does the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the sum of squares of the two pixel values

    compute the square root of the sum

    cast the double value resulting from std::sqrt() to the pixel type of
    the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    C++ includes: itkBinaryMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer":
        """__New_orig__() -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer":
        """Clone(itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 self) -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Clone(self)

    Input1ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCheck
    __swig_destroy__ = _itkBinaryMagnitudeImageFilterPython.delete_itkBinaryMagnitudeImageFilterIUS3IUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 *":
        """cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3"""
        return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3

        Create a new object of the class itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryMagnitudeImageFilterIUS3IUS3IUS3.Clone = new_instancemethod(_itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Clone, None, itkBinaryMagnitudeImageFilterIUS3IUS3IUS3)
itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_swigregister = _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_swigregister
itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_swigregister(itkBinaryMagnitudeImageFilterIUS3IUS3IUS3)

def itkBinaryMagnitudeImageFilterIUS3IUS3IUS3___New_orig__() -> "itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer":
    """itkBinaryMagnitudeImageFilterIUS3IUS3IUS3___New_orig__() -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_Pointer"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3___New_orig__()

def itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_cast(obj: 'itkLightObject') -> "itkBinaryMagnitudeImageFilterIUS3IUS3IUS3 *":
    """itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkBinaryMagnitudeImageFilterIUS3IUS3IUS3"""
    return _itkBinaryMagnitudeImageFilterPython.itkBinaryMagnitudeImageFilterIUS3IUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_magnitude_image_filter(*args, **kwargs):
    """Procedural interface for BinaryMagnitudeImageFilter"""
    import itk
    instance = itk.BinaryMagnitudeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_magnitude_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMagnitudeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMagnitudeImageFilter.values()[0]
    else:
        filter_object = itk.BinaryMagnitudeImageFilter

    binary_magnitude_image_filter.__doc__ = filter_object.__doc__
    binary_magnitude_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_magnitude_image_filter.__doc__ += "Available Keyword Arguments:\n"
    binary_magnitude_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



