# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDisplacementFieldJacobianDeterminantFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDisplacementFieldJacobianDeterminantFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDisplacementFieldJacobianDeterminantFilterPython
            return _itkDisplacementFieldJacobianDeterminantFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDisplacementFieldJacobianDeterminantFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDisplacementFieldJacobianDeterminantFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDisplacementFieldJacobianDeterminantFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import ITKCommonBasePython
import itkFixedArrayPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkDisplacementFieldJacobianDeterminantFilterIVF33D_New():
  return itkDisplacementFieldJacobianDeterminantFilterIVF33D.New()


def itkDisplacementFieldJacobianDeterminantFilterIVF33F_New():
  return itkDisplacementFieldJacobianDeterminantFilterIVF33F.New()


def itkDisplacementFieldJacobianDeterminantFilterIVF22D_New():
  return itkDisplacementFieldJacobianDeterminantFilterIVF22D.New()


def itkDisplacementFieldJacobianDeterminantFilterIVF22F_New():
  return itkDisplacementFieldJacobianDeterminantFilterIVF22F.New()

class itkDisplacementFieldJacobianDeterminantFilterIVF22D(itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2):
    """


    Computes a scalar image from a vector image (e.g., deformation field)
    input, where each output scalar at each pixel is the Jacobian
    determinant of the vector field at that location. This calculation is
    correct in the case where the vector image is a "displacement" from
    the current location. The computation for the jacobian determinant is:
    det[ dT/dx ] = det[ I + du/dx ].

    Overview This filter is based on itkVectorGradientMagnitudeImageFilter
    and supports the m_DerivativeWeights weights for partial derivatives.
    Note that the determinant of a zero vector field is also zero, whereas
    the Jacobian determinant of the corresponding identity warp
    transformation is 1.0. In order to compute the effective deformation
    Jacobian determinant 1.0 must be added to the diagonal elements of
    Jacobian prior to taking the derivative. i.e. det([ (1.0+dx/dx) dx/dy
    dx/dz ; dy/dx (1.0+dy/dy) dy/dz; dz/dx dz/dy (1.0+dz/dz) ])

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::RGBPixel, itk::FixedArray). The scalar type of the vector
    components must be castable to floating point. Instantiating with an
    will convert it to an image of Vector<float,3> for processing.  The
    second template parameter, TRealType, can be optionally specified to
    define the scalar numerical type used in calculations. This is the
    component type of the output image, which will be of
    itk::Vector<TRealType, N>, where N is the number of channels in the
    multiple component input image. The default type of TRealType is
    float. For extra precision, you may safely change this parameter to
    double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).  Weights can be applied to the derivatives
    directly using the SetDerivativeWeights method. Note that if
    UseImageSpacing is set to TRUE (ON), then these weights will be
    overridden by weights derived from the image spacing when the filter
    is updated. The argument to this method is a C array of TRealValue
    type.

    Constraints We use vnl_det for determinant computation, which only
    supports square matrices. So the vector dimension of the input image
    values must be equal to the image dimensions, which is trivially true
    for a deformation field that maps an n-dimensional space onto itself.
    Currently, dimensions up to and including 4 are supported. This
    limitation comes from the presence of vnl_det() functions for matrices
    of dimension up to 4x4.

    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    This class was adapted by

    Hans J. Johnson, The University of Iowa from code provided by

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    Torsten Rohlfing, Neuroscience Program, SRI International.

    C++ includes: itkDisplacementFieldJacobianDeterminantFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer":
        """__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer":
        """Clone(itkDisplacementFieldJacobianDeterminantFilterIVF22D self) -> itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDisplacementFieldJacobianDeterminantFilterIVF22D self)

        DisplacementFieldJacobianDeterminantFilter needs a larger input
        requested region than the output requested region (larger by the
        kernel size to calculate derivatives). As such,
        DisplacementFieldJacobianDeterminantFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDisplacementFieldJacobianDeterminantFilterIVF22D self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the Jacobian
        determinant in the space in which the data was acquired. Default is
        ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDisplacementFieldJacobianDeterminantFilterIVF22D self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the Jacobian determinant in the image space. Default
        is ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF22D self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF22D self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, arg0: 'itkFixedArrayD2') -> "void":
        """
        SetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF22D self, itkFixedArrayD2 arg0)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetDerivativeWeights(self, arg0)


    def GetDerivativeWeights(self) -> "itkFixedArrayD2 const &":
        """GetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF22D self) -> itkFixedArrayD2"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetDerivativeWeights(self)

    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF22D

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF22D *":
        """cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22D"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF22D

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldJacobianDeterminantFilterIVF22D.Clone = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_Clone, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.GenerateInputRequestedRegion = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GenerateInputRequestedRegion, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.SetUseImageSpacingOn = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOn, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.SetUseImageSpacingOff = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacingOff, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.SetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.GetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.SetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_SetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D.GetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_GetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF22D)
itkDisplacementFieldJacobianDeterminantFilterIVF22D_swigregister = _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_swigregister
itkDisplacementFieldJacobianDeterminantFilterIVF22D_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF22D)

def itkDisplacementFieldJacobianDeterminantFilterIVF22D___New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer":
    """itkDisplacementFieldJacobianDeterminantFilterIVF22D___New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22D_Pointer"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D___New_orig__()

def itkDisplacementFieldJacobianDeterminantFilterIVF22D_cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF22D *":
    """itkDisplacementFieldJacobianDeterminantFilterIVF22D_cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22D"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22D_cast(obj)

class itkDisplacementFieldJacobianDeterminantFilterIVF22F(itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2):
    """


    Computes a scalar image from a vector image (e.g., deformation field)
    input, where each output scalar at each pixel is the Jacobian
    determinant of the vector field at that location. This calculation is
    correct in the case where the vector image is a "displacement" from
    the current location. The computation for the jacobian determinant is:
    det[ dT/dx ] = det[ I + du/dx ].

    Overview This filter is based on itkVectorGradientMagnitudeImageFilter
    and supports the m_DerivativeWeights weights for partial derivatives.
    Note that the determinant of a zero vector field is also zero, whereas
    the Jacobian determinant of the corresponding identity warp
    transformation is 1.0. In order to compute the effective deformation
    Jacobian determinant 1.0 must be added to the diagonal elements of
    Jacobian prior to taking the derivative. i.e. det([ (1.0+dx/dx) dx/dy
    dx/dz ; dy/dx (1.0+dy/dy) dy/dz; dz/dx dz/dy (1.0+dz/dz) ])

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::RGBPixel, itk::FixedArray). The scalar type of the vector
    components must be castable to floating point. Instantiating with an
    will convert it to an image of Vector<float,3> for processing.  The
    second template parameter, TRealType, can be optionally specified to
    define the scalar numerical type used in calculations. This is the
    component type of the output image, which will be of
    itk::Vector<TRealType, N>, where N is the number of channels in the
    multiple component input image. The default type of TRealType is
    float. For extra precision, you may safely change this parameter to
    double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).  Weights can be applied to the derivatives
    directly using the SetDerivativeWeights method. Note that if
    UseImageSpacing is set to TRUE (ON), then these weights will be
    overridden by weights derived from the image spacing when the filter
    is updated. The argument to this method is a C array of TRealValue
    type.

    Constraints We use vnl_det for determinant computation, which only
    supports square matrices. So the vector dimension of the input image
    values must be equal to the image dimensions, which is trivially true
    for a deformation field that maps an n-dimensional space onto itself.
    Currently, dimensions up to and including 4 are supported. This
    limitation comes from the presence of vnl_det() functions for matrices
    of dimension up to 4x4.

    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    This class was adapted by

    Hans J. Johnson, The University of Iowa from code provided by

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    Torsten Rohlfing, Neuroscience Program, SRI International.

    C++ includes: itkDisplacementFieldJacobianDeterminantFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer":
        """__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer":
        """Clone(itkDisplacementFieldJacobianDeterminantFilterIVF22F self) -> itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDisplacementFieldJacobianDeterminantFilterIVF22F self)

        DisplacementFieldJacobianDeterminantFilter needs a larger input
        requested region than the output requested region (larger by the
        kernel size to calculate derivatives). As such,
        DisplacementFieldJacobianDeterminantFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDisplacementFieldJacobianDeterminantFilterIVF22F self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the Jacobian
        determinant in the space in which the data was acquired. Default is
        ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDisplacementFieldJacobianDeterminantFilterIVF22F self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the Jacobian determinant in the image space. Default
        is ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF22F self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF22F self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, arg0: 'itkFixedArrayF2') -> "void":
        """
        SetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF22F self, itkFixedArrayF2 arg0)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetDerivativeWeights(self, arg0)


    def GetDerivativeWeights(self) -> "itkFixedArrayF2 const &":
        """GetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF22F self) -> itkFixedArrayF2"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetDerivativeWeights(self)

    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF22F

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF22F *":
        """cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22F"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF22F

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF22F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF22F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldJacobianDeterminantFilterIVF22F.Clone = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_Clone, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.GenerateInputRequestedRegion = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GenerateInputRequestedRegion, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.SetUseImageSpacingOn = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOn, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.SetUseImageSpacingOff = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacingOff, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.SetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.GetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.SetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_SetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F.GetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_GetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF22F)
itkDisplacementFieldJacobianDeterminantFilterIVF22F_swigregister = _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_swigregister
itkDisplacementFieldJacobianDeterminantFilterIVF22F_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF22F)

def itkDisplacementFieldJacobianDeterminantFilterIVF22F___New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer":
    """itkDisplacementFieldJacobianDeterminantFilterIVF22F___New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF22F_Pointer"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F___New_orig__()

def itkDisplacementFieldJacobianDeterminantFilterIVF22F_cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF22F *":
    """itkDisplacementFieldJacobianDeterminantFilterIVF22F_cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF22F"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF22F_cast(obj)

class itkDisplacementFieldJacobianDeterminantFilterIVF33D(itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3):
    """


    Computes a scalar image from a vector image (e.g., deformation field)
    input, where each output scalar at each pixel is the Jacobian
    determinant of the vector field at that location. This calculation is
    correct in the case where the vector image is a "displacement" from
    the current location. The computation for the jacobian determinant is:
    det[ dT/dx ] = det[ I + du/dx ].

    Overview This filter is based on itkVectorGradientMagnitudeImageFilter
    and supports the m_DerivativeWeights weights for partial derivatives.
    Note that the determinant of a zero vector field is also zero, whereas
    the Jacobian determinant of the corresponding identity warp
    transformation is 1.0. In order to compute the effective deformation
    Jacobian determinant 1.0 must be added to the diagonal elements of
    Jacobian prior to taking the derivative. i.e. det([ (1.0+dx/dx) dx/dy
    dx/dz ; dy/dx (1.0+dy/dy) dy/dz; dz/dx dz/dy (1.0+dz/dz) ])

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::RGBPixel, itk::FixedArray). The scalar type of the vector
    components must be castable to floating point. Instantiating with an
    will convert it to an image of Vector<float,3> for processing.  The
    second template parameter, TRealType, can be optionally specified to
    define the scalar numerical type used in calculations. This is the
    component type of the output image, which will be of
    itk::Vector<TRealType, N>, where N is the number of channels in the
    multiple component input image. The default type of TRealType is
    float. For extra precision, you may safely change this parameter to
    double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).  Weights can be applied to the derivatives
    directly using the SetDerivativeWeights method. Note that if
    UseImageSpacing is set to TRUE (ON), then these weights will be
    overridden by weights derived from the image spacing when the filter
    is updated. The argument to this method is a C array of TRealValue
    type.

    Constraints We use vnl_det for determinant computation, which only
    supports square matrices. So the vector dimension of the input image
    values must be equal to the image dimensions, which is trivially true
    for a deformation field that maps an n-dimensional space onto itself.
    Currently, dimensions up to and including 4 are supported. This
    limitation comes from the presence of vnl_det() functions for matrices
    of dimension up to 4x4.

    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    This class was adapted by

    Hans J. Johnson, The University of Iowa from code provided by

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    Torsten Rohlfing, Neuroscience Program, SRI International.

    C++ includes: itkDisplacementFieldJacobianDeterminantFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer":
        """__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer":
        """Clone(itkDisplacementFieldJacobianDeterminantFilterIVF33D self) -> itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDisplacementFieldJacobianDeterminantFilterIVF33D self)

        DisplacementFieldJacobianDeterminantFilter needs a larger input
        requested region than the output requested region (larger by the
        kernel size to calculate derivatives). As such,
        DisplacementFieldJacobianDeterminantFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDisplacementFieldJacobianDeterminantFilterIVF33D self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the Jacobian
        determinant in the space in which the data was acquired. Default is
        ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDisplacementFieldJacobianDeterminantFilterIVF33D self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the Jacobian determinant in the image space. Default
        is ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF33D self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF33D self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, arg0: 'itkFixedArrayD3') -> "void":
        """
        SetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF33D self, itkFixedArrayD3 arg0)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetDerivativeWeights(self, arg0)


    def GetDerivativeWeights(self) -> "itkFixedArrayD3 const &":
        """GetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF33D self) -> itkFixedArrayD3"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetDerivativeWeights(self)

    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF33D

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF33D *":
        """cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33D"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF33D

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldJacobianDeterminantFilterIVF33D.Clone = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_Clone, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.GenerateInputRequestedRegion = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GenerateInputRequestedRegion, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.SetUseImageSpacingOn = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOn, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.SetUseImageSpacingOff = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacingOff, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.SetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.GetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.SetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_SetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D.GetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_GetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF33D)
itkDisplacementFieldJacobianDeterminantFilterIVF33D_swigregister = _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_swigregister
itkDisplacementFieldJacobianDeterminantFilterIVF33D_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF33D)

def itkDisplacementFieldJacobianDeterminantFilterIVF33D___New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer":
    """itkDisplacementFieldJacobianDeterminantFilterIVF33D___New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33D_Pointer"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D___New_orig__()

def itkDisplacementFieldJacobianDeterminantFilterIVF33D_cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF33D *":
    """itkDisplacementFieldJacobianDeterminantFilterIVF33D_cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33D"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33D_cast(obj)

class itkDisplacementFieldJacobianDeterminantFilterIVF33F(itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3):
    """


    Computes a scalar image from a vector image (e.g., deformation field)
    input, where each output scalar at each pixel is the Jacobian
    determinant of the vector field at that location. This calculation is
    correct in the case where the vector image is a "displacement" from
    the current location. The computation for the jacobian determinant is:
    det[ dT/dx ] = det[ I + du/dx ].

    Overview This filter is based on itkVectorGradientMagnitudeImageFilter
    and supports the m_DerivativeWeights weights for partial derivatives.
    Note that the determinant of a zero vector field is also zero, whereas
    the Jacobian determinant of the corresponding identity warp
    transformation is 1.0. In order to compute the effective deformation
    Jacobian determinant 1.0 must be added to the diagonal elements of
    Jacobian prior to taking the derivative. i.e. det([ (1.0+dx/dx) dx/dy
    dx/dz ; dy/dx (1.0+dy/dy) dy/dz; dz/dx dz/dy (1.0+dz/dz) ])

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::RGBPixel, itk::FixedArray). The scalar type of the vector
    components must be castable to floating point. Instantiating with an
    will convert it to an image of Vector<float,3> for processing.  The
    second template parameter, TRealType, can be optionally specified to
    define the scalar numerical type used in calculations. This is the
    component type of the output image, which will be of
    itk::Vector<TRealType, N>, where N is the number of channels in the
    multiple component input image. The default type of TRealType is
    float. For extra precision, you may safely change this parameter to
    double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).  Weights can be applied to the derivatives
    directly using the SetDerivativeWeights method. Note that if
    UseImageSpacing is set to TRUE (ON), then these weights will be
    overridden by weights derived from the image spacing when the filter
    is updated. The argument to this method is a C array of TRealValue
    type.

    Constraints We use vnl_det for determinant computation, which only
    supports square matrices. So the vector dimension of the input image
    values must be equal to the image dimensions, which is trivially true
    for a deformation field that maps an n-dimensional space onto itself.
    Currently, dimensions up to and including 4 are supported. This
    limitation comes from the presence of vnl_det() functions for matrices
    of dimension up to 4x4.

    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    This class was adapted by

    Hans J. Johnson, The University of Iowa from code provided by

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    Torsten Rohlfing, Neuroscience Program, SRI International.

    C++ includes: itkDisplacementFieldJacobianDeterminantFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer":
        """__New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer":
        """Clone(itkDisplacementFieldJacobianDeterminantFilterIVF33F self) -> itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkDisplacementFieldJacobianDeterminantFilterIVF33F self)

        DisplacementFieldJacobianDeterminantFilter needs a larger input
        requested region than the output requested region (larger by the
        kernel size to calculate derivatives). As such,
        DisplacementFieldJacobianDeterminantFilter needs to provide an
        implementation for GenerateInputRequestedRegion() in order to inform
        the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkDisplacementFieldJacobianDeterminantFilterIVF33F self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the Jacobian
        determinant in the space in which the data was acquired. Default is
        ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkDisplacementFieldJacobianDeterminantFilterIVF33F self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the Jacobian determinant in the image space. Default
        is ImageSpacingOn. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF33F self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDisplacementFieldJacobianDeterminantFilterIVF33F self) -> bool"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, arg0: 'itkFixedArrayF3') -> "void":
        """
        SetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF33F self, itkFixedArrayF3 arg0)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetDerivativeWeights(self, arg0)


    def GetDerivativeWeights(self) -> "itkFixedArrayF3 const &":
        """GetDerivativeWeights(itkDisplacementFieldJacobianDeterminantFilterIVF33F self) -> itkFixedArrayF3"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetDerivativeWeights(self)

    __swig_destroy__ = _itkDisplacementFieldJacobianDeterminantFilterPython.delete_itkDisplacementFieldJacobianDeterminantFilterIVF33F

    def cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF33F *":
        """cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33F"""
        return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDisplacementFieldJacobianDeterminantFilterIVF33F

        Create a new object of the class itkDisplacementFieldJacobianDeterminantFilterIVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDisplacementFieldJacobianDeterminantFilterIVF33F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDisplacementFieldJacobianDeterminantFilterIVF33F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDisplacementFieldJacobianDeterminantFilterIVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDisplacementFieldJacobianDeterminantFilterIVF33F.Clone = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_Clone, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.GenerateInputRequestedRegion = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GenerateInputRequestedRegion, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.SetUseImageSpacingOn = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOn, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.SetUseImageSpacingOff = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacingOff, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.SetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.GetUseImageSpacing = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetUseImageSpacing, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.SetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_SetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F.GetDerivativeWeights = new_instancemethod(_itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_GetDerivativeWeights, None, itkDisplacementFieldJacobianDeterminantFilterIVF33F)
itkDisplacementFieldJacobianDeterminantFilterIVF33F_swigregister = _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_swigregister
itkDisplacementFieldJacobianDeterminantFilterIVF33F_swigregister(itkDisplacementFieldJacobianDeterminantFilterIVF33F)

def itkDisplacementFieldJacobianDeterminantFilterIVF33F___New_orig__() -> "itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer":
    """itkDisplacementFieldJacobianDeterminantFilterIVF33F___New_orig__() -> itkDisplacementFieldJacobianDeterminantFilterIVF33F_Pointer"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F___New_orig__()

def itkDisplacementFieldJacobianDeterminantFilterIVF33F_cast(obj: 'itkLightObject') -> "itkDisplacementFieldJacobianDeterminantFilterIVF33F *":
    """itkDisplacementFieldJacobianDeterminantFilterIVF33F_cast(itkLightObject obj) -> itkDisplacementFieldJacobianDeterminantFilterIVF33F"""
    return _itkDisplacementFieldJacobianDeterminantFilterPython.itkDisplacementFieldJacobianDeterminantFilterIVF33F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def displacement_field_jacobian_determinant_filter(*args, **kwargs):
    """Procedural interface for DisplacementFieldJacobianDeterminantFilter"""
    import itk
    instance = itk.DisplacementFieldJacobianDeterminantFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def displacement_field_jacobian_determinant_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DisplacementFieldJacobianDeterminantFilter, itkTemplate.itkTemplate):
        filter_object = itk.DisplacementFieldJacobianDeterminantFilter.values()[0]
    else:
        filter_object = itk.DisplacementFieldJacobianDeterminantFilter

    displacement_field_jacobian_determinant_filter.__doc__ = filter_object.__doc__
    displacement_field_jacobian_determinant_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    displacement_field_jacobian_determinant_filter.__doc__ += "Available Keyword Arguments:\n"
    displacement_field_jacobian_determinant_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



