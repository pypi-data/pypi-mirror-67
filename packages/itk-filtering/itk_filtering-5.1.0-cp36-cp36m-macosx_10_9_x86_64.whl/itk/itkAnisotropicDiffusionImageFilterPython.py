# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAnisotropicDiffusionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAnisotropicDiffusionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAnisotropicDiffusionImageFilterPython
            return _itkAnisotropicDiffusionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAnisotropicDiffusionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAnisotropicDiffusionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAnisotropicDiffusionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkDenseFiniteDifferenceImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageSourceCommonPython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython
import itkFiniteDifferenceFunctionPython

def itkAnisotropicDiffusionImageFilterICVF43ICVF43_New():
  return itkAnisotropicDiffusionImageFilterICVF43ICVF43.New()


def itkAnisotropicDiffusionImageFilterICVF42ICVF42_New():
  return itkAnisotropicDiffusionImageFilterICVF42ICVF42.New()


def itkAnisotropicDiffusionImageFilterICVF33ICVF33_New():
  return itkAnisotropicDiffusionImageFilterICVF33ICVF33.New()


def itkAnisotropicDiffusionImageFilterICVF32ICVF32_New():
  return itkAnisotropicDiffusionImageFilterICVF32ICVF32.New()


def itkAnisotropicDiffusionImageFilterICVF23ICVF23_New():
  return itkAnisotropicDiffusionImageFilterICVF23ICVF23.New()


def itkAnisotropicDiffusionImageFilterICVF22ICVF22_New():
  return itkAnisotropicDiffusionImageFilterICVF22ICVF22.New()


def itkAnisotropicDiffusionImageFilterIVF43IVF43_New():
  return itkAnisotropicDiffusionImageFilterIVF43IVF43.New()


def itkAnisotropicDiffusionImageFilterIVF42IVF42_New():
  return itkAnisotropicDiffusionImageFilterIVF42IVF42.New()


def itkAnisotropicDiffusionImageFilterIVF33IVF33_New():
  return itkAnisotropicDiffusionImageFilterIVF33IVF33.New()


def itkAnisotropicDiffusionImageFilterIVF32IVF32_New():
  return itkAnisotropicDiffusionImageFilterIVF32IVF32.New()


def itkAnisotropicDiffusionImageFilterIVF23IVF23_New():
  return itkAnisotropicDiffusionImageFilterIVF23IVF23.New()


def itkAnisotropicDiffusionImageFilterIVF22IVF22_New():
  return itkAnisotropicDiffusionImageFilterIVF22IVF22.New()


def itkAnisotropicDiffusionImageFilterID3ID3_New():
  return itkAnisotropicDiffusionImageFilterID3ID3.New()


def itkAnisotropicDiffusionImageFilterID2ID2_New():
  return itkAnisotropicDiffusionImageFilterID2ID2.New()


def itkAnisotropicDiffusionImageFilterIF3IF3_New():
  return itkAnisotropicDiffusionImageFilterIF3IF3.New()


def itkAnisotropicDiffusionImageFilterIF2IF2_New():
  return itkAnisotropicDiffusionImageFilterIF2IF2.New()

class itkAnisotropicDiffusionImageFilterICVF22ICVF22(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF22ICVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF22ICVF22

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF22ICVF22 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF22ICVF22"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF22ICVF22

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF22ICVF22.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister
itkAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister(itkAnisotropicDiffusionImageFilterICVF22ICVF22)

def itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF22ICVF22 *":
    """itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF22ICVF22"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast(obj)

class itkAnisotropicDiffusionImageFilterICVF23ICVF23(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF23ICVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF23ICVF23

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF23ICVF23 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF23ICVF23"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF23ICVF23

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF23ICVF23.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister
itkAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister(itkAnisotropicDiffusionImageFilterICVF23ICVF23)

def itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF23ICVF23 *":
    """itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF23ICVF23"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast(obj)

class itkAnisotropicDiffusionImageFilterICVF32ICVF32(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF32ICVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF32ICVF32

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF32ICVF32 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF32ICVF32"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF32ICVF32

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF32ICVF32.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister
itkAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister(itkAnisotropicDiffusionImageFilterICVF32ICVF32)

def itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF32ICVF32 *":
    """itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF32ICVF32"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast(obj)

class itkAnisotropicDiffusionImageFilterICVF33ICVF33(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF33ICVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF33ICVF33

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF33ICVF33 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF33ICVF33"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF33ICVF33

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF33ICVF33.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister
itkAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister(itkAnisotropicDiffusionImageFilterICVF33ICVF33)

def itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF33ICVF33 *":
    """itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF33ICVF33"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast(obj)

class itkAnisotropicDiffusionImageFilterICVF42ICVF42(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF42ICVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF42ICVF42

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF42ICVF42 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF42ICVF42"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF42ICVF42

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF42ICVF42.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister
itkAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister(itkAnisotropicDiffusionImageFilterICVF42ICVF42)

def itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF42ICVF42 *":
    """itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF42ICVF42"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast(obj)

class itkAnisotropicDiffusionImageFilterICVF43ICVF43(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterICVF43ICVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF43ICVF43

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF43ICVF43 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF43ICVF43"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF43ICVF43

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterICVF43ICVF43.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetTimeStep, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister
itkAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister(itkAnisotropicDiffusionImageFilterICVF43ICVF43)

def itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterICVF43ICVF43 *":
    """itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterICVF43ICVF43"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast(obj)

class itkAnisotropicDiffusionImageFilterID2ID2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterID2ID2 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterID2ID2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterID2ID2 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterID2ID2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterID2ID2 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterID2ID2 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterID2ID2 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterID2ID2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterID2ID2 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterID2ID2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterID2ID2"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterID2ID2

        Create a new object of the class itkAnisotropicDiffusionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterID2ID2.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetTimeStep, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetTimeStep, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_swigregister
itkAnisotropicDiffusionImageFilterID2ID2_swigregister(itkAnisotropicDiffusionImageFilterID2ID2)

def itkAnisotropicDiffusionImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterID2ID2 *":
    """itkAnisotropicDiffusionImageFilterID2ID2_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterID2ID2"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast(obj)

class itkAnisotropicDiffusionImageFilterID3ID3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterID3ID3 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterID3ID3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterID3ID3 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterID3ID3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterID3ID3 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterID3ID3 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterID3ID3 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterID3ID3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterID3ID3 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterID3ID3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterID3ID3"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterID3ID3

        Create a new object of the class itkAnisotropicDiffusionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterID3ID3.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetTimeStep, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetTimeStep, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_swigregister
itkAnisotropicDiffusionImageFilterID3ID3_swigregister(itkAnisotropicDiffusionImageFilterID3ID3)

def itkAnisotropicDiffusionImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterID3ID3 *":
    """itkAnisotropicDiffusionImageFilterID3ID3_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterID3ID3"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast(obj)

class itkAnisotropicDiffusionImageFilterIF2IF2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIF2IF2 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIF2IF2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIF2IF2 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIF2IF2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIF2IF2 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIF2IF2 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIF2IF2 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIF2IF2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIF2IF2 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIF2IF2 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIF2IF2"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIF2IF2

        Create a new object of the class itkAnisotropicDiffusionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIF2IF2.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_swigregister
itkAnisotropicDiffusionImageFilterIF2IF2_swigregister(itkAnisotropicDiffusionImageFilterIF2IF2)

def itkAnisotropicDiffusionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIF2IF2 *":
    """itkAnisotropicDiffusionImageFilterIF2IF2_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIF2IF2"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast(obj)

class itkAnisotropicDiffusionImageFilterIF3IF3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIF3IF3 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIF3IF3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIF3IF3 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIF3IF3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIF3IF3 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIF3IF3 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIF3IF3 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIF3IF3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIF3IF3 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIF3IF3 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIF3IF3"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIF3IF3

        Create a new object of the class itkAnisotropicDiffusionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIF3IF3.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_swigregister
itkAnisotropicDiffusionImageFilterIF3IF3_swigregister(itkAnisotropicDiffusionImageFilterIF3IF3)

def itkAnisotropicDiffusionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIF3IF3 *":
    """itkAnisotropicDiffusionImageFilterIF3IF3_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIF3IF3"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF22IVF22(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF22IVF22 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF22IVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF22IVF22 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF22IVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF22IVF22 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF22IVF22 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF22IVF22 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF22IVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF22IVF22 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF22IVF22 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF22IVF22

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF22IVF22 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF22IVF22"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF22IVF22

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF22IVF22.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_swigregister
itkAnisotropicDiffusionImageFilterIVF22IVF22_swigregister(itkAnisotropicDiffusionImageFilterIVF22IVF22)

def itkAnisotropicDiffusionImageFilterIVF22IVF22_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF22IVF22 *":
    """itkAnisotropicDiffusionImageFilterIVF22IVF22_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF22IVF22"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF23IVF23(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF23IVF23 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF23IVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF23IVF23 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF23IVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF23IVF23 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF23IVF23 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF23IVF23 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF23IVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF23IVF23 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF23IVF23 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF23IVF23

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF23IVF23 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF23IVF23"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF23IVF23

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF23IVF23.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_swigregister
itkAnisotropicDiffusionImageFilterIVF23IVF23_swigregister(itkAnisotropicDiffusionImageFilterIVF23IVF23)

def itkAnisotropicDiffusionImageFilterIVF23IVF23_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF23IVF23 *":
    """itkAnisotropicDiffusionImageFilterIVF23IVF23_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF23IVF23"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF32IVF32(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF32IVF32 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF32IVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF32IVF32 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF32IVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF32IVF32 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF32IVF32 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF32IVF32 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF32IVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF32IVF32 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF32IVF32 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF32IVF32

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF32IVF32 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF32IVF32"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF32IVF32

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF32IVF32.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_swigregister
itkAnisotropicDiffusionImageFilterIVF32IVF32_swigregister(itkAnisotropicDiffusionImageFilterIVF32IVF32)

def itkAnisotropicDiffusionImageFilterIVF32IVF32_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF32IVF32 *":
    """itkAnisotropicDiffusionImageFilterIVF32IVF32_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF32IVF32"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF33IVF33(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF33IVF33 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF33IVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF33IVF33 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF33IVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF33IVF33 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF33IVF33 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF33IVF33 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF33IVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF33IVF33 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF33IVF33 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF33IVF33

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF33IVF33 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF33IVF33"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF33IVF33

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF33IVF33.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_swigregister
itkAnisotropicDiffusionImageFilterIVF33IVF33_swigregister(itkAnisotropicDiffusionImageFilterIVF33IVF33)

def itkAnisotropicDiffusionImageFilterIVF33IVF33_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF33IVF33 *":
    """itkAnisotropicDiffusionImageFilterIVF33IVF33_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF33IVF33"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF42IVF42(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF42IVF42 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF42IVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF42IVF42 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF42IVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF42IVF42 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF42IVF42 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF42IVF42 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF42IVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF42IVF42 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF42IVF42 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF42IVF42

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF42IVF42 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF42IVF42"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF42IVF42

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF42IVF42.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_swigregister
itkAnisotropicDiffusionImageFilterIVF42IVF42_swigregister(itkAnisotropicDiffusionImageFilterIVF42IVF42)

def itkAnisotropicDiffusionImageFilterIVF42IVF42_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF42IVF42 *":
    """itkAnisotropicDiffusionImageFilterIVF42IVF42_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF42IVF42"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast(obj)

class itkAnisotropicDiffusionImageFilterIVF43IVF43(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43):
    """


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter

    C++ includes: itkAnisotropicDiffusionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetTimeStep(self, _arg: 'double const') -> "void":
        """
        SetTimeStep(itkAnisotropicDiffusionImageFilterIVF43IVF43 self, double const _arg)

        Set/Get the time step
        for each iteration 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetTimeStep(self, _arg)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(itkAnisotropicDiffusionImageFilterIVF43IVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetTimeStep(self)


    def SetConductanceParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF43IVF43 self, double const _arg)

        Set/Get the
        conductance parameter governing sensitivity of the conductance
        equation. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceParameter(self, _arg)


    def GetConductanceParameter(self) -> "double":
        """GetConductanceParameter(itkAnisotropicDiffusionImageFilterIVF43IVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceParameter(self)


    def SetConductanceScalingUpdateInterval(self, _arg: 'unsigned int const') -> "void":
        """
        SetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF43IVF43 self, unsigned int const _arg)

        Set/Get the interval at which a new scaling for the conductance term
        is calculated. 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingUpdateInterval(self, _arg)


    def GetConductanceScalingUpdateInterval(self) -> "unsigned int":
        """GetConductanceScalingUpdateInterval(itkAnisotropicDiffusionImageFilterIVF43IVF43 self) -> unsigned int"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingUpdateInterval(self)


    def SetConductanceScalingParameter(self, _arg: 'double const') -> "void":
        """
        SetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF43IVF43 self, double const _arg)

        The
        following parameters are not used at this time. Setting them will have
        no effect on the output 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingParameter(self, _arg)


    def GetConductanceScalingParameter(self) -> "double":
        """GetConductanceScalingParameter(itkAnisotropicDiffusionImageFilterIVF43IVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingParameter(self)


    def SetFixedAverageGradientMagnitude(self, a: 'double') -> "void":
        """
        SetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF43IVF43 self, double a)

        Supplies a fixed value for the average gradient magnitude of the image
        to the AnisotropicDiffusionFunction at each iteration. The average
        gradient magnitude is normally calculated over the entire image before
        each iteration and is used as a scaling factor in the calculations of
        change at a pixel. This method is useful in streaming applications to
        avoid block artifacts by overriding the normal gradient magnitude
        calculation (i.e. all image chunks are scaled uniformly). 
        """
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetFixedAverageGradientMagnitude(self, a)


    def GetFixedAverageGradientMagnitude(self) -> "double":
        """GetFixedAverageGradientMagnitude(itkAnisotropicDiffusionImageFilterIVF43IVF43 self) -> double"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetFixedAverageGradientMagnitude(self)

    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF43IVF43

    def cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF43IVF43 *":
        """cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF43IVF43"""
        return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF43IVF43

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicDiffusionImageFilterIVF43IVF43.SetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.GetTimeStep = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetTimeStep, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.SetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.GetConductanceParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceParameter, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.SetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.GetConductanceScalingUpdateInterval = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingUpdateInterval, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.SetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.GetConductanceScalingParameter = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingParameter, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.SetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43.GetFixedAverageGradientMagnitude = new_instancemethod(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetFixedAverageGradientMagnitude, None, itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43_swigregister = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_swigregister
itkAnisotropicDiffusionImageFilterIVF43IVF43_swigregister(itkAnisotropicDiffusionImageFilterIVF43IVF43)

def itkAnisotropicDiffusionImageFilterIVF43IVF43_cast(obj: 'itkLightObject') -> "itkAnisotropicDiffusionImageFilterIVF43IVF43 *":
    """itkAnisotropicDiffusionImageFilterIVF43IVF43_cast(itkLightObject obj) -> itkAnisotropicDiffusionImageFilterIVF43IVF43"""
    return _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anisotropic_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for AnisotropicDiffusionImageFilter"""
    import itk
    instance = itk.AnisotropicDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anisotropic_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AnisotropicDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.AnisotropicDiffusionImageFilter

    anisotropic_diffusion_image_filter.__doc__ = filter_object.__doc__
    anisotropic_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anisotropic_diffusion_image_filter.__doc__ += "Available Keyword Arguments:\n"
    anisotropic_diffusion_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



