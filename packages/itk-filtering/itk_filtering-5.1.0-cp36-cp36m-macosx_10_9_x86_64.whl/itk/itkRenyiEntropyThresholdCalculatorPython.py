# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRenyiEntropyThresholdCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRenyiEntropyThresholdCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkRenyiEntropyThresholdCalculatorPython
            return _itkRenyiEntropyThresholdCalculatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRenyiEntropyThresholdCalculatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRenyiEntropyThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRenyiEntropyThresholdCalculatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramPython
import itkSamplePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkFixedArrayPython
import ITKCommonBasePython
import itkVectorPython
import vnl_vector_refPython
import itkHistogramThresholdCalculatorPython
import itkSimpleDataObjectDecoratorPython
import itkRGBAPixelPython
import itkCovariantVectorPython
import itkRGBPixelPython

def itkRenyiEntropyThresholdCalculatorHFD_New():
  return itkRenyiEntropyThresholdCalculatorHFD.New()


def itkRenyiEntropyThresholdCalculatorHDD_New():
  return itkRenyiEntropyThresholdCalculatorHDD.New()


def itkRenyiEntropyThresholdCalculatorHFF_New():
  return itkRenyiEntropyThresholdCalculatorHFF.New()


def itkRenyiEntropyThresholdCalculatorHDF_New():
  return itkRenyiEntropyThresholdCalculatorHDF.New()


def itkRenyiEntropyThresholdCalculatorHFUS_New():
  return itkRenyiEntropyThresholdCalculatorHFUS.New()


def itkRenyiEntropyThresholdCalculatorHDUS_New():
  return itkRenyiEntropyThresholdCalculatorHDUS.New()


def itkRenyiEntropyThresholdCalculatorHFUC_New():
  return itkRenyiEntropyThresholdCalculatorHFUC.New()


def itkRenyiEntropyThresholdCalculatorHDUC_New():
  return itkRenyiEntropyThresholdCalculatorHDUC.New()


def itkRenyiEntropyThresholdCalculatorHFSS_New():
  return itkRenyiEntropyThresholdCalculatorHFSS.New()


def itkRenyiEntropyThresholdCalculatorHDSS_New():
  return itkRenyiEntropyThresholdCalculatorHDSS.New()

class itkRenyiEntropyThresholdCalculatorHDD(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDD_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHDD_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHDD self) -> itkRenyiEntropyThresholdCalculatorHDD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDD

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDD *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDD"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDD

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHDD.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_Clone, None, itkRenyiEntropyThresholdCalculatorHDD)
itkRenyiEntropyThresholdCalculatorHDD_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_swigregister
itkRenyiEntropyThresholdCalculatorHDD_swigregister(itkRenyiEntropyThresholdCalculatorHDD)

def itkRenyiEntropyThresholdCalculatorHDD___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDD_Pointer":
    """itkRenyiEntropyThresholdCalculatorHDD___New_orig__() -> itkRenyiEntropyThresholdCalculatorHDD_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD___New_orig__()

def itkRenyiEntropyThresholdCalculatorHDD_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDD *":
    """itkRenyiEntropyThresholdCalculatorHDD_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDD"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDD_cast(obj)

class itkRenyiEntropyThresholdCalculatorHDF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDF_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHDF_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHDF self) -> itkRenyiEntropyThresholdCalculatorHDF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDF

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDF *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDF"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDF

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHDF.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_Clone, None, itkRenyiEntropyThresholdCalculatorHDF)
itkRenyiEntropyThresholdCalculatorHDF_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_swigregister
itkRenyiEntropyThresholdCalculatorHDF_swigregister(itkRenyiEntropyThresholdCalculatorHDF)

def itkRenyiEntropyThresholdCalculatorHDF___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDF_Pointer":
    """itkRenyiEntropyThresholdCalculatorHDF___New_orig__() -> itkRenyiEntropyThresholdCalculatorHDF_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF___New_orig__()

def itkRenyiEntropyThresholdCalculatorHDF_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDF *":
    """itkRenyiEntropyThresholdCalculatorHDF_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDF"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDF_cast(obj)

class itkRenyiEntropyThresholdCalculatorHDSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDSS_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHDSS_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHDSS self) -> itkRenyiEntropyThresholdCalculatorHDSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDSS

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDSS *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDSS"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDSS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHDSS.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_Clone, None, itkRenyiEntropyThresholdCalculatorHDSS)
itkRenyiEntropyThresholdCalculatorHDSS_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_swigregister
itkRenyiEntropyThresholdCalculatorHDSS_swigregister(itkRenyiEntropyThresholdCalculatorHDSS)

def itkRenyiEntropyThresholdCalculatorHDSS___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDSS_Pointer":
    """itkRenyiEntropyThresholdCalculatorHDSS___New_orig__() -> itkRenyiEntropyThresholdCalculatorHDSS_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS___New_orig__()

def itkRenyiEntropyThresholdCalculatorHDSS_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDSS *":
    """itkRenyiEntropyThresholdCalculatorHDSS_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDSS"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDSS_cast(obj)

class itkRenyiEntropyThresholdCalculatorHDUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDUC_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHDUC_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHDUC self) -> itkRenyiEntropyThresholdCalculatorHDUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDUC

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDUC *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDUC"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDUC

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHDUC.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_Clone, None, itkRenyiEntropyThresholdCalculatorHDUC)
itkRenyiEntropyThresholdCalculatorHDUC_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_swigregister
itkRenyiEntropyThresholdCalculatorHDUC_swigregister(itkRenyiEntropyThresholdCalculatorHDUC)

def itkRenyiEntropyThresholdCalculatorHDUC___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDUC_Pointer":
    """itkRenyiEntropyThresholdCalculatorHDUC___New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUC_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC___New_orig__()

def itkRenyiEntropyThresholdCalculatorHDUC_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDUC *":
    """itkRenyiEntropyThresholdCalculatorHDUC_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDUC"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUC_cast(obj)

class itkRenyiEntropyThresholdCalculatorHDUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDUS_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHDUS_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHDUS self) -> itkRenyiEntropyThresholdCalculatorHDUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHDUS

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDUS *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDUS"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHDUS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHDUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHDUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHDUS.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_Clone, None, itkRenyiEntropyThresholdCalculatorHDUS)
itkRenyiEntropyThresholdCalculatorHDUS_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_swigregister
itkRenyiEntropyThresholdCalculatorHDUS_swigregister(itkRenyiEntropyThresholdCalculatorHDUS)

def itkRenyiEntropyThresholdCalculatorHDUS___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHDUS_Pointer":
    """itkRenyiEntropyThresholdCalculatorHDUS___New_orig__() -> itkRenyiEntropyThresholdCalculatorHDUS_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS___New_orig__()

def itkRenyiEntropyThresholdCalculatorHDUS_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHDUS *":
    """itkRenyiEntropyThresholdCalculatorHDUS_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHDUS"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHDUS_cast(obj)

class itkRenyiEntropyThresholdCalculatorHFD(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFD_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHFD_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHFD self) -> itkRenyiEntropyThresholdCalculatorHFD_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFD

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFD *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFD"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFD

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHFD.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_Clone, None, itkRenyiEntropyThresholdCalculatorHFD)
itkRenyiEntropyThresholdCalculatorHFD_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_swigregister
itkRenyiEntropyThresholdCalculatorHFD_swigregister(itkRenyiEntropyThresholdCalculatorHFD)

def itkRenyiEntropyThresholdCalculatorHFD___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFD_Pointer":
    """itkRenyiEntropyThresholdCalculatorHFD___New_orig__() -> itkRenyiEntropyThresholdCalculatorHFD_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD___New_orig__()

def itkRenyiEntropyThresholdCalculatorHFD_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFD *":
    """itkRenyiEntropyThresholdCalculatorHFD_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFD"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFD_cast(obj)

class itkRenyiEntropyThresholdCalculatorHFF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFF_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHFF_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHFF self) -> itkRenyiEntropyThresholdCalculatorHFF_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFF

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFF *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFF"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFF

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHFF.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_Clone, None, itkRenyiEntropyThresholdCalculatorHFF)
itkRenyiEntropyThresholdCalculatorHFF_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_swigregister
itkRenyiEntropyThresholdCalculatorHFF_swigregister(itkRenyiEntropyThresholdCalculatorHFF)

def itkRenyiEntropyThresholdCalculatorHFF___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFF_Pointer":
    """itkRenyiEntropyThresholdCalculatorHFF___New_orig__() -> itkRenyiEntropyThresholdCalculatorHFF_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF___New_orig__()

def itkRenyiEntropyThresholdCalculatorHFF_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFF *":
    """itkRenyiEntropyThresholdCalculatorHFF_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFF"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFF_cast(obj)

class itkRenyiEntropyThresholdCalculatorHFSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFSS_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHFSS_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHFSS self) -> itkRenyiEntropyThresholdCalculatorHFSS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFSS

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFSS *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFSS"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFSS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHFSS.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_Clone, None, itkRenyiEntropyThresholdCalculatorHFSS)
itkRenyiEntropyThresholdCalculatorHFSS_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_swigregister
itkRenyiEntropyThresholdCalculatorHFSS_swigregister(itkRenyiEntropyThresholdCalculatorHFSS)

def itkRenyiEntropyThresholdCalculatorHFSS___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFSS_Pointer":
    """itkRenyiEntropyThresholdCalculatorHFSS___New_orig__() -> itkRenyiEntropyThresholdCalculatorHFSS_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS___New_orig__()

def itkRenyiEntropyThresholdCalculatorHFSS_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFSS *":
    """itkRenyiEntropyThresholdCalculatorHFSS_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFSS"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFSS_cast(obj)

class itkRenyiEntropyThresholdCalculatorHFUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFUC_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHFUC_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHFUC self) -> itkRenyiEntropyThresholdCalculatorHFUC_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFUC

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFUC *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFUC"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFUC

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHFUC.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_Clone, None, itkRenyiEntropyThresholdCalculatorHFUC)
itkRenyiEntropyThresholdCalculatorHFUC_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_swigregister
itkRenyiEntropyThresholdCalculatorHFUC_swigregister(itkRenyiEntropyThresholdCalculatorHFUC)

def itkRenyiEntropyThresholdCalculatorHFUC___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFUC_Pointer":
    """itkRenyiEntropyThresholdCalculatorHFUC___New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUC_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC___New_orig__()

def itkRenyiEntropyThresholdCalculatorHFUC_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFUC *":
    """itkRenyiEntropyThresholdCalculatorHFUC_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFUC"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUC_cast(obj)

class itkRenyiEntropyThresholdCalculatorHFUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    """


    Computes the RenyiEntropy's threshold for an image.

    Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) "A New Method for
    Gray-Level Picture Thresholding Using the Entropy of the Histogram"
    Graphical Models and Image Processing, 29(3): 273-285 M. Emre Celebi
    06.15.2007

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkRenyiEntropyThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFUS_Pointer":
        """__New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkRenyiEntropyThresholdCalculatorHFUS_Pointer":
        """Clone(itkRenyiEntropyThresholdCalculatorHFUS self) -> itkRenyiEntropyThresholdCalculatorHFUS_Pointer"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_Clone(self)

    __swig_destroy__ = _itkRenyiEntropyThresholdCalculatorPython.delete_itkRenyiEntropyThresholdCalculatorHFUS

    def cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFUS *":
        """cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFUS"""
        return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRenyiEntropyThresholdCalculatorHFUS

        Create a new object of the class itkRenyiEntropyThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRenyiEntropyThresholdCalculatorHFUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRenyiEntropyThresholdCalculatorHFUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRenyiEntropyThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRenyiEntropyThresholdCalculatorHFUS.Clone = new_instancemethod(_itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_Clone, None, itkRenyiEntropyThresholdCalculatorHFUS)
itkRenyiEntropyThresholdCalculatorHFUS_swigregister = _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_swigregister
itkRenyiEntropyThresholdCalculatorHFUS_swigregister(itkRenyiEntropyThresholdCalculatorHFUS)

def itkRenyiEntropyThresholdCalculatorHFUS___New_orig__() -> "itkRenyiEntropyThresholdCalculatorHFUS_Pointer":
    """itkRenyiEntropyThresholdCalculatorHFUS___New_orig__() -> itkRenyiEntropyThresholdCalculatorHFUS_Pointer"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS___New_orig__()

def itkRenyiEntropyThresholdCalculatorHFUS_cast(obj: 'itkLightObject') -> "itkRenyiEntropyThresholdCalculatorHFUS *":
    """itkRenyiEntropyThresholdCalculatorHFUS_cast(itkLightObject obj) -> itkRenyiEntropyThresholdCalculatorHFUS"""
    return _itkRenyiEntropyThresholdCalculatorPython.itkRenyiEntropyThresholdCalculatorHFUS_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def renyi_entropy_threshold_calculator(*args, **kwargs):
    """Procedural interface for RenyiEntropyThresholdCalculator"""
    import itk
    instance = itk.RenyiEntropyThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def renyi_entropy_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RenyiEntropyThresholdCalculator, itkTemplate.itkTemplate):
        filter_object = itk.RenyiEntropyThresholdCalculator.values()[0]
    else:
        filter_object = itk.RenyiEntropyThresholdCalculator

    renyi_entropy_threshold_calculator.__doc__ = filter_object.__doc__
    renyi_entropy_threshold_calculator.__doc__ += "\n Args are Input(s) to the filter.\n"
    renyi_entropy_threshold_calculator.__doc__ += "Available Keyword Arguments:\n"
    renyi_entropy_threshold_calculator.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



