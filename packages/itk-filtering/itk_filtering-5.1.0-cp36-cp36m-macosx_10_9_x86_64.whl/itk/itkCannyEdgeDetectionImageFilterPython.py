# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCannyEdgeDetectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCannyEdgeDetectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCannyEdgeDetectionImageFilterPython
            return _itkCannyEdgeDetectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCannyEdgeDetectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCannyEdgeDetectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCannyEdgeDetectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkImageRegionPython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython

def itkCannyEdgeDetectionImageFilterID3ID3_New():
  return itkCannyEdgeDetectionImageFilterID3ID3.New()


def itkCannyEdgeDetectionImageFilterID2ID2_New():
  return itkCannyEdgeDetectionImageFilterID2ID2.New()


def itkCannyEdgeDetectionImageFilterIF3IF3_New():
  return itkCannyEdgeDetectionImageFilterIF3IF3.New()


def itkCannyEdgeDetectionImageFilterIF2IF2_New():
  return itkCannyEdgeDetectionImageFilterIF2IF2.New()

class itkCannyEdgeDetectionImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter

    C++ includes: itkCannyEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannyEdgeDetectionImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkCannyEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannyEdgeDetectionImageFilterID2ID2_Pointer":
        """Clone(itkCannyEdgeDetectionImageFilterID2ID2 self) -> itkCannyEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkCannyEdgeDetectionImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkCannyEdgeDetectionImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetMaximumError(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkCannyEdgeDetectionImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetVariance(itkCannyEdgeDetectionImageFilterID2ID2 self, double const v)

        Set/Get the variance of
        the Gaussian smoothing filter. 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkCannyEdgeDetectionImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkCannyEdgeDetectionImageFilterID2ID2 self, double const v)

        Set/Get the
        MaximumError parameter used by the Gaussian smoothing filter in this
        algorithm 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetMaximumError(self, *args)


    def SetUpperThreshold(self, _arg: 'double const') -> "void":
        """
        SetUpperThreshold(itkCannyEdgeDetectionImageFilterID2ID2 self, double const _arg)

        Set the Threshold
        value for detected edges.

        TODO: Document in the ITKv4 migration guide that the SetThreshold
        member function was removed from the CannyEdgeDetectionImageFilter,
        and that both UpperThreshold and LowerThreshold need to be set. To get
        the same results as with the SetThreshold method change
        "myfilter->SetThrehsold" to "myfilter->SetUpperThreshold", and add
        "myfilter->SetLowerThreshold(GetUpperThreshold()/2.0)" 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetUpperThreshold(self, _arg)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkCannyEdgeDetectionImageFilterID2ID2 self) -> double"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetUpperThreshold(self)


    def SetLowerThreshold(self, _arg: 'double const') -> "void":
        """SetLowerThreshold(itkCannyEdgeDetectionImageFilterID2ID2 self, double const _arg)"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetLowerThreshold(self, _arg)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkCannyEdgeDetectionImageFilterID2ID2 self) -> double"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetLowerThreshold(self)


    def GetNonMaximumSuppressionImage(self) -> "itkImageD2 *":
        """GetNonMaximumSuppressionImage(itkCannyEdgeDetectionImageFilterID2ID2 self) -> itkImageD2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetNonMaximumSuppressionImage(self)

    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_InputHasNumericTraitsCheck
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_OutputHasNumericTraitsCheck
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_InputIsFloatingPointCheck
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_OutputIsFloatingPointCheck
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterID2ID2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkCannyEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannyEdgeDetectionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannyEdgeDetectionImageFilterID2ID2.Clone = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_Clone, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.GetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetVariance, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.GetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetMaximumError, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.SetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetVariance, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.SetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetMaximumError, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.SetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetUpperThreshold, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.GetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetUpperThreshold, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.SetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetLowerThreshold, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.GetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetLowerThreshold, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2.GetNonMaximumSuppressionImage = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetNonMaximumSuppressionImage, None, itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2_swigregister = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_swigregister
itkCannyEdgeDetectionImageFilterID2ID2_swigregister(itkCannyEdgeDetectionImageFilterID2ID2)

def itkCannyEdgeDetectionImageFilterID2ID2___New_orig__() -> "itkCannyEdgeDetectionImageFilterID2ID2_Pointer":
    """itkCannyEdgeDetectionImageFilterID2ID2___New_orig__() -> itkCannyEdgeDetectionImageFilterID2ID2_Pointer"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2___New_orig__()

def itkCannyEdgeDetectionImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterID2ID2 *":
    """itkCannyEdgeDetectionImageFilterID2ID2_cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterID2ID2"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_cast(obj)

class itkCannyEdgeDetectionImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter

    C++ includes: itkCannyEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannyEdgeDetectionImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkCannyEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannyEdgeDetectionImageFilterID3ID3_Pointer":
        """Clone(itkCannyEdgeDetectionImageFilterID3ID3 self) -> itkCannyEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkCannyEdgeDetectionImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkCannyEdgeDetectionImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetMaximumError(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkCannyEdgeDetectionImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetVariance(itkCannyEdgeDetectionImageFilterID3ID3 self, double const v)

        Set/Get the variance of
        the Gaussian smoothing filter. 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkCannyEdgeDetectionImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkCannyEdgeDetectionImageFilterID3ID3 self, double const v)

        Set/Get the
        MaximumError parameter used by the Gaussian smoothing filter in this
        algorithm 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetMaximumError(self, *args)


    def SetUpperThreshold(self, _arg: 'double const') -> "void":
        """
        SetUpperThreshold(itkCannyEdgeDetectionImageFilterID3ID3 self, double const _arg)

        Set the Threshold
        value for detected edges.

        TODO: Document in the ITKv4 migration guide that the SetThreshold
        member function was removed from the CannyEdgeDetectionImageFilter,
        and that both UpperThreshold and LowerThreshold need to be set. To get
        the same results as with the SetThreshold method change
        "myfilter->SetThrehsold" to "myfilter->SetUpperThreshold", and add
        "myfilter->SetLowerThreshold(GetUpperThreshold()/2.0)" 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetUpperThreshold(self, _arg)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkCannyEdgeDetectionImageFilterID3ID3 self) -> double"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetUpperThreshold(self)


    def SetLowerThreshold(self, _arg: 'double const') -> "void":
        """SetLowerThreshold(itkCannyEdgeDetectionImageFilterID3ID3 self, double const _arg)"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetLowerThreshold(self, _arg)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkCannyEdgeDetectionImageFilterID3ID3 self) -> double"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetLowerThreshold(self)


    def GetNonMaximumSuppressionImage(self) -> "itkImageD3 *":
        """GetNonMaximumSuppressionImage(itkCannyEdgeDetectionImageFilterID3ID3 self) -> itkImageD3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetNonMaximumSuppressionImage(self)

    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_InputHasNumericTraitsCheck
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_OutputHasNumericTraitsCheck
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_InputIsFloatingPointCheck
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_OutputIsFloatingPointCheck
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterID3ID3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkCannyEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannyEdgeDetectionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannyEdgeDetectionImageFilterID3ID3.Clone = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_Clone, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.GetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetVariance, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.GetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetMaximumError, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.SetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetVariance, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.SetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetMaximumError, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.SetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetUpperThreshold, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.GetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetUpperThreshold, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.SetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetLowerThreshold, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.GetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetLowerThreshold, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3.GetNonMaximumSuppressionImage = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetNonMaximumSuppressionImage, None, itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3_swigregister = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_swigregister
itkCannyEdgeDetectionImageFilterID3ID3_swigregister(itkCannyEdgeDetectionImageFilterID3ID3)

def itkCannyEdgeDetectionImageFilterID3ID3___New_orig__() -> "itkCannyEdgeDetectionImageFilterID3ID3_Pointer":
    """itkCannyEdgeDetectionImageFilterID3ID3___New_orig__() -> itkCannyEdgeDetectionImageFilterID3ID3_Pointer"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3___New_orig__()

def itkCannyEdgeDetectionImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterID3ID3 *":
    """itkCannyEdgeDetectionImageFilterID3ID3_cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterID3ID3"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_cast(obj)

class itkCannyEdgeDetectionImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter

    C++ includes: itkCannyEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannyEdgeDetectionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkCannyEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannyEdgeDetectionImageFilterIF2IF2_Pointer":
        """Clone(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> itkCannyEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetMaximumError(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkCannyEdgeDetectionImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetVariance(itkCannyEdgeDetectionImageFilterIF2IF2 self, double const v)

        Set/Get the variance of
        the Gaussian smoothing filter. 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkCannyEdgeDetectionImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkCannyEdgeDetectionImageFilterIF2IF2 self, double const v)

        Set/Get the
        MaximumError parameter used by the Gaussian smoothing filter in this
        algorithm 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetMaximumError(self, *args)


    def SetUpperThreshold(self, _arg: 'float const') -> "void":
        """
        SetUpperThreshold(itkCannyEdgeDetectionImageFilterIF2IF2 self, float const _arg)

        Set the Threshold
        value for detected edges.

        TODO: Document in the ITKv4 migration guide that the SetThreshold
        member function was removed from the CannyEdgeDetectionImageFilter,
        and that both UpperThreshold and LowerThreshold need to be set. To get
        the same results as with the SetThreshold method change
        "myfilter->SetThrehsold" to "myfilter->SetUpperThreshold", and add
        "myfilter->SetLowerThreshold(GetUpperThreshold()/2.0)" 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetUpperThreshold(self, _arg)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> float"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetUpperThreshold(self)


    def SetLowerThreshold(self, _arg: 'float const') -> "void":
        """SetLowerThreshold(itkCannyEdgeDetectionImageFilterIF2IF2 self, float const _arg)"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetLowerThreshold(self, _arg)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> float"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetLowerThreshold(self)


    def GetNonMaximumSuppressionImage(self) -> "itkImageF2 *":
        """GetNonMaximumSuppressionImage(itkCannyEdgeDetectionImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetNonMaximumSuppressionImage(self)

    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_InputHasNumericTraitsCheck
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_OutputHasNumericTraitsCheck
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_InputIsFloatingPointCheck
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_OutputIsFloatingPointCheck
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterIF2IF2"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkCannyEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannyEdgeDetectionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannyEdgeDetectionImageFilterIF2IF2.Clone = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_Clone, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.GetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetVariance, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.GetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetMaximumError, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.SetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetVariance, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.SetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetMaximumError, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.SetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetUpperThreshold, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.GetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetUpperThreshold, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.SetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetLowerThreshold, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.GetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetLowerThreshold, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2.GetNonMaximumSuppressionImage = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetNonMaximumSuppressionImage, None, itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2_swigregister = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_swigregister
itkCannyEdgeDetectionImageFilterIF2IF2_swigregister(itkCannyEdgeDetectionImageFilterIF2IF2)

def itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__() -> "itkCannyEdgeDetectionImageFilterIF2IF2_Pointer":
    """itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__() -> itkCannyEdgeDetectionImageFilterIF2IF2_Pointer"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__()

def itkCannyEdgeDetectionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterIF2IF2 *":
    """itkCannyEdgeDetectionImageFilterIF2IF2_cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterIF2IF2"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_cast(obj)

class itkCannyEdgeDetectionImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter

    C++ includes: itkCannyEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannyEdgeDetectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkCannyEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannyEdgeDetectionImageFilterIF3IF3_Pointer":
        """Clone(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> itkCannyEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetMaximumError(self)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkCannyEdgeDetectionImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetVariance(itkCannyEdgeDetectionImageFilterIF3IF3 self, double const v)

        Set/Get the variance of
        the Gaussian smoothing filter. 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkCannyEdgeDetectionImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkCannyEdgeDetectionImageFilterIF3IF3 self, double const v)

        Set/Get the
        MaximumError parameter used by the Gaussian smoothing filter in this
        algorithm 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetMaximumError(self, *args)


    def SetUpperThreshold(self, _arg: 'float const') -> "void":
        """
        SetUpperThreshold(itkCannyEdgeDetectionImageFilterIF3IF3 self, float const _arg)

        Set the Threshold
        value for detected edges.

        TODO: Document in the ITKv4 migration guide that the SetThreshold
        member function was removed from the CannyEdgeDetectionImageFilter,
        and that both UpperThreshold and LowerThreshold need to be set. To get
        the same results as with the SetThreshold method change
        "myfilter->SetThrehsold" to "myfilter->SetUpperThreshold", and add
        "myfilter->SetLowerThreshold(GetUpperThreshold()/2.0)" 
        """
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetUpperThreshold(self, _arg)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> float"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetUpperThreshold(self)


    def SetLowerThreshold(self, _arg: 'float const') -> "void":
        """SetLowerThreshold(itkCannyEdgeDetectionImageFilterIF3IF3 self, float const _arg)"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetLowerThreshold(self, _arg)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> float"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetLowerThreshold(self)


    def GetNonMaximumSuppressionImage(self) -> "itkImageF3 *":
        """GetNonMaximumSuppressionImage(itkCannyEdgeDetectionImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetNonMaximumSuppressionImage(self)

    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_InputHasNumericTraitsCheck
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_OutputHasNumericTraitsCheck
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_InputIsFloatingPointCheck
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_OutputIsFloatingPointCheck
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterIF3IF3"""
        return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkCannyEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannyEdgeDetectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannyEdgeDetectionImageFilterIF3IF3.Clone = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_Clone, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.GetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetVariance, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.GetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetMaximumError, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.SetVariance = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetVariance, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.SetMaximumError = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetMaximumError, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.SetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetUpperThreshold, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.GetUpperThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetUpperThreshold, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.SetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetLowerThreshold, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.GetLowerThreshold = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetLowerThreshold, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3.GetNonMaximumSuppressionImage = new_instancemethod(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetNonMaximumSuppressionImage, None, itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3_swigregister = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_swigregister
itkCannyEdgeDetectionImageFilterIF3IF3_swigregister(itkCannyEdgeDetectionImageFilterIF3IF3)

def itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__() -> "itkCannyEdgeDetectionImageFilterIF3IF3_Pointer":
    """itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__() -> itkCannyEdgeDetectionImageFilterIF3IF3_Pointer"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__()

def itkCannyEdgeDetectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkCannyEdgeDetectionImageFilterIF3IF3 *":
    """itkCannyEdgeDetectionImageFilterIF3IF3_cast(itkLightObject obj) -> itkCannyEdgeDetectionImageFilterIF3IF3"""
    return _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def canny_edge_detection_image_filter(*args, **kwargs):
    """Procedural interface for CannyEdgeDetectionImageFilter"""
    import itk
    instance = itk.CannyEdgeDetectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def canny_edge_detection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CannyEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CannyEdgeDetectionImageFilter.values()[0]
    else:
        filter_object = itk.CannyEdgeDetectionImageFilter

    canny_edge_detection_image_filter.__doc__ = filter_object.__doc__
    canny_edge_detection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    canny_edge_detection_image_filter.__doc__ += "Available Keyword Arguments:\n"
    canny_edge_detection_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



