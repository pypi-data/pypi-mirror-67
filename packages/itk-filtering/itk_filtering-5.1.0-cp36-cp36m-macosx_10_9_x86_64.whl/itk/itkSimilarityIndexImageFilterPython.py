# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSimilarityIndexImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSimilarityIndexImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSimilarityIndexImageFilterPython
            return _itkSimilarityIndexImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSimilarityIndexImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSimilarityIndexImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSimilarityIndexImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import ITKCommonBasePython
import pyBasePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkSimilarityIndexImageFilterID3ID3_New():
  return itkSimilarityIndexImageFilterID3ID3.New()


def itkSimilarityIndexImageFilterID2ID2_New():
  return itkSimilarityIndexImageFilterID2ID2.New()


def itkSimilarityIndexImageFilterIF3IF3_New():
  return itkSimilarityIndexImageFilterIF3IF3.New()


def itkSimilarityIndexImageFilterIF2IF2_New():
  return itkSimilarityIndexImageFilterIF2IF2.New()


def itkSimilarityIndexImageFilterIUS3IUS3_New():
  return itkSimilarityIndexImageFilterIUS3IUS3.New()


def itkSimilarityIndexImageFilterIUS2IUS2_New():
  return itkSimilarityIndexImageFilterIUS2IUS2.New()


def itkSimilarityIndexImageFilterIUC3IUC3_New():
  return itkSimilarityIndexImageFilterIUC3IUC3.New()


def itkSimilarityIndexImageFilterIUC2IUC2_New():
  return itkSimilarityIndexImageFilterIUC2IUC2.New()


def itkSimilarityIndexImageFilterISS3ISS3_New():
  return itkSimilarityIndexImageFilterISS3ISS3.New()


def itkSimilarityIndexImageFilterISS2ISS2_New():
  return itkSimilarityIndexImageFilterISS2ISS2.New()

class itkSimilarityIndexImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterID2ID2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterID2ID2_Pointer":
        """Clone(itkSimilarityIndexImageFilterID2ID2 self) -> itkSimilarityIndexImageFilterID2ID2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageD2') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterID2ID2 self, itkImageD2 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterID2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD2 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterID2ID2 self) -> itkImageD2

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterID2ID2 self) -> itkImageD2

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterID2ID2 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterID2ID2"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterID2ID2

        Create a new object of the class itkSimilarityIndexImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterID2ID2.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_Clone, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_SetInput1, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_SetInput2, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetInput1, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetInput2, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_GetSimilarityIndex, None, itkSimilarityIndexImageFilterID2ID2)
itkSimilarityIndexImageFilterID2ID2_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_swigregister
itkSimilarityIndexImageFilterID2ID2_swigregister(itkSimilarityIndexImageFilterID2ID2)

def itkSimilarityIndexImageFilterID2ID2___New_orig__() -> "itkSimilarityIndexImageFilterID2ID2_Pointer":
    """itkSimilarityIndexImageFilterID2ID2___New_orig__() -> itkSimilarityIndexImageFilterID2ID2_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2___New_orig__()

def itkSimilarityIndexImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterID2ID2 *":
    """itkSimilarityIndexImageFilterID2ID2_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterID2ID2"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID2ID2_cast(obj)

class itkSimilarityIndexImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterID3ID3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterID3ID3_Pointer":
        """Clone(itkSimilarityIndexImageFilterID3ID3 self) -> itkSimilarityIndexImageFilterID3ID3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageD3') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterID3ID3 self, itkImageD3 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterID3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD3 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterID3ID3 self) -> itkImageD3

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterID3ID3 self) -> itkImageD3

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterID3ID3 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterID3ID3"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterID3ID3

        Create a new object of the class itkSimilarityIndexImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterID3ID3.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_Clone, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_SetInput1, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_SetInput2, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetInput1, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetInput2, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_GetSimilarityIndex, None, itkSimilarityIndexImageFilterID3ID3)
itkSimilarityIndexImageFilterID3ID3_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_swigregister
itkSimilarityIndexImageFilterID3ID3_swigregister(itkSimilarityIndexImageFilterID3ID3)

def itkSimilarityIndexImageFilterID3ID3___New_orig__() -> "itkSimilarityIndexImageFilterID3ID3_Pointer":
    """itkSimilarityIndexImageFilterID3ID3___New_orig__() -> itkSimilarityIndexImageFilterID3ID3_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3___New_orig__()

def itkSimilarityIndexImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterID3ID3 *":
    """itkSimilarityIndexImageFilterID3ID3_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterID3ID3"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterID3ID3_cast(obj)

class itkSimilarityIndexImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIF2IF2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIF2IF2_Pointer":
        """Clone(itkSimilarityIndexImageFilterIF2IF2 self) -> itkSimilarityIndexImageFilterIF2IF2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageF2') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIF2IF2 self, itkImageF2 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIF2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF2 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIF2IF2 self) -> itkImageF2

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIF2IF2 self) -> itkImageF2

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIF2IF2 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIF2IF2"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIF2IF2

        Create a new object of the class itkSimilarityIndexImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIF2IF2.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_Clone, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_SetInput1, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_SetInput2, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetInput1, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetInput2, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIF2IF2)
itkSimilarityIndexImageFilterIF2IF2_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_swigregister
itkSimilarityIndexImageFilterIF2IF2_swigregister(itkSimilarityIndexImageFilterIF2IF2)

def itkSimilarityIndexImageFilterIF2IF2___New_orig__() -> "itkSimilarityIndexImageFilterIF2IF2_Pointer":
    """itkSimilarityIndexImageFilterIF2IF2___New_orig__() -> itkSimilarityIndexImageFilterIF2IF2_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2___New_orig__()

def itkSimilarityIndexImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIF2IF2 *":
    """itkSimilarityIndexImageFilterIF2IF2_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIF2IF2"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF2IF2_cast(obj)

class itkSimilarityIndexImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIF3IF3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIF3IF3_Pointer":
        """Clone(itkSimilarityIndexImageFilterIF3IF3 self) -> itkSimilarityIndexImageFilterIF3IF3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageF3') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIF3IF3 self, itkImageF3 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIF3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF3 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIF3IF3 self) -> itkImageF3

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIF3IF3 self) -> itkImageF3

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIF3IF3 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIF3IF3"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIF3IF3

        Create a new object of the class itkSimilarityIndexImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIF3IF3.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_Clone, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_SetInput1, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_SetInput2, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetInput1, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetInput2, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIF3IF3)
itkSimilarityIndexImageFilterIF3IF3_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_swigregister
itkSimilarityIndexImageFilterIF3IF3_swigregister(itkSimilarityIndexImageFilterIF3IF3)

def itkSimilarityIndexImageFilterIF3IF3___New_orig__() -> "itkSimilarityIndexImageFilterIF3IF3_Pointer":
    """itkSimilarityIndexImageFilterIF3IF3___New_orig__() -> itkSimilarityIndexImageFilterIF3IF3_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3___New_orig__()

def itkSimilarityIndexImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIF3IF3 *":
    """itkSimilarityIndexImageFilterIF3IF3_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIF3IF3"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIF3IF3_cast(obj)

class itkSimilarityIndexImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterISS2ISS2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterISS2ISS2_Pointer":
        """Clone(itkSimilarityIndexImageFilterISS2ISS2 self) -> itkSimilarityIndexImageFilterISS2ISS2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_Clone(self)


    def SetInput1(self, image: 'itkImageSS2') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS2') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS2 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterISS2ISS2 self) -> itkImageSS2

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetInput1(self)


    def GetInput2(self) -> "itkImageSS2 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterISS2ISS2 self) -> itkImageSS2

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterISS2ISS2 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterISS2ISS2"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterISS2ISS2

        Create a new object of the class itkSimilarityIndexImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterISS2ISS2.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_Clone, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_SetInput1, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_SetInput2, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetInput1, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetInput2, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_GetSimilarityIndex, None, itkSimilarityIndexImageFilterISS2ISS2)
itkSimilarityIndexImageFilterISS2ISS2_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_swigregister
itkSimilarityIndexImageFilterISS2ISS2_swigregister(itkSimilarityIndexImageFilterISS2ISS2)

def itkSimilarityIndexImageFilterISS2ISS2___New_orig__() -> "itkSimilarityIndexImageFilterISS2ISS2_Pointer":
    """itkSimilarityIndexImageFilterISS2ISS2___New_orig__() -> itkSimilarityIndexImageFilterISS2ISS2_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2___New_orig__()

def itkSimilarityIndexImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterISS2ISS2 *":
    """itkSimilarityIndexImageFilterISS2ISS2_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterISS2ISS2"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS2ISS2_cast(obj)

class itkSimilarityIndexImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterISS3ISS3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterISS3ISS3_Pointer":
        """Clone(itkSimilarityIndexImageFilterISS3ISS3 self) -> itkSimilarityIndexImageFilterISS3ISS3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_Clone(self)


    def SetInput1(self, image: 'itkImageSS3') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS3') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS3 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterISS3ISS3 self) -> itkImageSS3

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetInput1(self)


    def GetInput2(self) -> "itkImageSS3 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterISS3ISS3 self) -> itkImageSS3

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterISS3ISS3 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterISS3ISS3"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterISS3ISS3

        Create a new object of the class itkSimilarityIndexImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterISS3ISS3.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_Clone, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_SetInput1, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_SetInput2, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetInput1, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetInput2, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_GetSimilarityIndex, None, itkSimilarityIndexImageFilterISS3ISS3)
itkSimilarityIndexImageFilterISS3ISS3_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_swigregister
itkSimilarityIndexImageFilterISS3ISS3_swigregister(itkSimilarityIndexImageFilterISS3ISS3)

def itkSimilarityIndexImageFilterISS3ISS3___New_orig__() -> "itkSimilarityIndexImageFilterISS3ISS3_Pointer":
    """itkSimilarityIndexImageFilterISS3ISS3___New_orig__() -> itkSimilarityIndexImageFilterISS3ISS3_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3___New_orig__()

def itkSimilarityIndexImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterISS3ISS3 *":
    """itkSimilarityIndexImageFilterISS3ISS3_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterISS3ISS3"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterISS3ISS3_cast(obj)

class itkSimilarityIndexImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIUC2IUC2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIUC2IUC2_Pointer":
        """Clone(itkSimilarityIndexImageFilterIUC2IUC2 self) -> itkSimilarityIndexImageFilterIUC2IUC2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_Clone(self)


    def SetInput1(self, image: 'itkImageUC2') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIUC2IUC2 self, itkImageUC2 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageUC2') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIUC2IUC2 self, itkImageUC2 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC2 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIUC2IUC2 self) -> itkImageUC2

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetInput1(self)


    def GetInput2(self) -> "itkImageUC2 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIUC2IUC2 self) -> itkImageUC2

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIUC2IUC2 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUC2IUC2"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIUC2IUC2

        Create a new object of the class itkSimilarityIndexImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIUC2IUC2.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_Clone, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_SetInput1, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_SetInput2, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetInput1, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetInput2, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIUC2IUC2)
itkSimilarityIndexImageFilterIUC2IUC2_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_swigregister
itkSimilarityIndexImageFilterIUC2IUC2_swigregister(itkSimilarityIndexImageFilterIUC2IUC2)

def itkSimilarityIndexImageFilterIUC2IUC2___New_orig__() -> "itkSimilarityIndexImageFilterIUC2IUC2_Pointer":
    """itkSimilarityIndexImageFilterIUC2IUC2___New_orig__() -> itkSimilarityIndexImageFilterIUC2IUC2_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2___New_orig__()

def itkSimilarityIndexImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUC2IUC2 *":
    """itkSimilarityIndexImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUC2IUC2"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC2IUC2_cast(obj)

class itkSimilarityIndexImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIUC3IUC3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIUC3IUC3_Pointer":
        """Clone(itkSimilarityIndexImageFilterIUC3IUC3 self) -> itkSimilarityIndexImageFilterIUC3IUC3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_Clone(self)


    def SetInput1(self, image: 'itkImageUC3') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIUC3IUC3 self, itkImageUC3 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageUC3') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIUC3IUC3 self, itkImageUC3 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC3 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIUC3IUC3 self) -> itkImageUC3

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetInput1(self)


    def GetInput2(self) -> "itkImageUC3 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIUC3IUC3 self) -> itkImageUC3

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIUC3IUC3 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUC3IUC3"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIUC3IUC3

        Create a new object of the class itkSimilarityIndexImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIUC3IUC3.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_Clone, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_SetInput1, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_SetInput2, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetInput1, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetInput2, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIUC3IUC3)
itkSimilarityIndexImageFilterIUC3IUC3_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_swigregister
itkSimilarityIndexImageFilterIUC3IUC3_swigregister(itkSimilarityIndexImageFilterIUC3IUC3)

def itkSimilarityIndexImageFilterIUC3IUC3___New_orig__() -> "itkSimilarityIndexImageFilterIUC3IUC3_Pointer":
    """itkSimilarityIndexImageFilterIUC3IUC3___New_orig__() -> itkSimilarityIndexImageFilterIUC3IUC3_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3___New_orig__()

def itkSimilarityIndexImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUC3IUC3 *":
    """itkSimilarityIndexImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUC3IUC3"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUC3IUC3_cast(obj)

class itkSimilarityIndexImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIUS2IUS2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIUS2IUS2_Pointer":
        """Clone(itkSimilarityIndexImageFilterIUS2IUS2 self) -> itkSimilarityIndexImageFilterIUS2IUS2_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_Clone(self)


    def SetInput1(self, image: 'itkImageUS2') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIUS2IUS2 self, itkImageUS2 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageUS2') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIUS2IUS2 self, itkImageUS2 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS2 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIUS2IUS2 self) -> itkImageUS2

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetInput1(self)


    def GetInput2(self) -> "itkImageUS2 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIUS2IUS2 self) -> itkImageUS2

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIUS2IUS2 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUS2IUS2"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIUS2IUS2

        Create a new object of the class itkSimilarityIndexImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIUS2IUS2.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_Clone, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_SetInput1, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_SetInput2, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetInput1, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetInput2, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIUS2IUS2)
itkSimilarityIndexImageFilterIUS2IUS2_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_swigregister
itkSimilarityIndexImageFilterIUS2IUS2_swigregister(itkSimilarityIndexImageFilterIUS2IUS2)

def itkSimilarityIndexImageFilterIUS2IUS2___New_orig__() -> "itkSimilarityIndexImageFilterIUS2IUS2_Pointer":
    """itkSimilarityIndexImageFilterIUS2IUS2___New_orig__() -> itkSimilarityIndexImageFilterIUS2IUS2_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2___New_orig__()

def itkSimilarityIndexImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUS2IUS2 *":
    """itkSimilarityIndexImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUS2IUS2"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS2IUS2_cast(obj)

class itkSimilarityIndexImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Measures the similarity between the set of non-zero pixels of two
    images.

    SimilarityIndexImageFilter measures the similarity between the set
    non-zero pixels of two images using the following formula: \\[ S =
    \\frac{2 | A \\cap B |}{|A| + |B|} \\] where $A$ and $B$ are
    respectively the set of non-zero pixels in the first and second input
    images. Operator $|\\cdot|$ represents the size of a set and
    $\\cap$ represents the intersection of two sets.

    The measure is derived from a reliability measure known as the kappa
    statistic. $S$ is sensitive to both differences in size and in
    location and have been in the literature for comparing two
    segmentation masks. For more information see: "Morphometric Analysis
    of White Matter Lesions in MR Images: Method and  Validation", A. P.
    Zijdenbos, B. M. Dawant, R. A. Margolin and A. C. Palmer, IEEE Trans.
    on Medical Imaging, 13(4) pp 716-724,1994

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    C++ includes: itkSimilarityIndexImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSimilarityIndexImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkSimilarityIndexImageFilterIUS3IUS3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSimilarityIndexImageFilterIUS3IUS3_Pointer":
        """Clone(itkSimilarityIndexImageFilterIUS3IUS3 self) -> itkSimilarityIndexImageFilterIUS3IUS3_Pointer"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_Clone(self)


    def SetInput1(self, image: 'itkImageUS3') -> "void":
        """
        SetInput1(itkSimilarityIndexImageFilterIUS3IUS3 self, itkImageUS3 image)

        Set the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageUS3') -> "void":
        """
        SetInput2(itkSimilarityIndexImageFilterIUS3IUS3 self, itkImageUS3 image)

        Set the second input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS3 const *":
        """
        GetInput1(itkSimilarityIndexImageFilterIUS3IUS3 self) -> itkImageUS3

        Get the first input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetInput1(self)


    def GetInput2(self) -> "itkImageUS3 const *":
        """
        GetInput2(itkSimilarityIndexImageFilterIUS3IUS3 self) -> itkImageUS3

        Get the secong input. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetInput2(self)


    def GetSimilarityIndex(self) -> "double":
        """
        GetSimilarityIndex(itkSimilarityIndexImageFilterIUS3IUS3 self) -> double

        Return the
        computed similarity index. 
        """
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetSimilarityIndex(self)

    Input1HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_Input1HasNumericTraitsCheck
    Input2HasNumericTraitsCheck = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_Input2HasNumericTraitsCheck
    __swig_destroy__ = _itkSimilarityIndexImageFilterPython.delete_itkSimilarityIndexImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUS3IUS3"""
        return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSimilarityIndexImageFilterIUS3IUS3

        Create a new object of the class itkSimilarityIndexImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSimilarityIndexImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSimilarityIndexImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimilarityIndexImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimilarityIndexImageFilterIUS3IUS3.Clone = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_Clone, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3.SetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_SetInput1, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3.SetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_SetInput2, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3.GetInput1 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetInput1, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3.GetInput2 = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetInput2, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3.GetSimilarityIndex = new_instancemethod(_itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_GetSimilarityIndex, None, itkSimilarityIndexImageFilterIUS3IUS3)
itkSimilarityIndexImageFilterIUS3IUS3_swigregister = _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_swigregister
itkSimilarityIndexImageFilterIUS3IUS3_swigregister(itkSimilarityIndexImageFilterIUS3IUS3)

def itkSimilarityIndexImageFilterIUS3IUS3___New_orig__() -> "itkSimilarityIndexImageFilterIUS3IUS3_Pointer":
    """itkSimilarityIndexImageFilterIUS3IUS3___New_orig__() -> itkSimilarityIndexImageFilterIUS3IUS3_Pointer"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3___New_orig__()

def itkSimilarityIndexImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkSimilarityIndexImageFilterIUS3IUS3 *":
    """itkSimilarityIndexImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkSimilarityIndexImageFilterIUS3IUS3"""
    return _itkSimilarityIndexImageFilterPython.itkSimilarityIndexImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def similarity_index_image_filter(*args, **kwargs):
    """Procedural interface for SimilarityIndexImageFilter"""
    import itk
    instance = itk.SimilarityIndexImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def similarity_index_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SimilarityIndexImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SimilarityIndexImageFilter.values()[0]
    else:
        filter_object = itk.SimilarityIndexImageFilter

    similarity_index_image_filter.__doc__ = filter_object.__doc__
    similarity_index_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    similarity_index_image_filter.__doc__ += "Available Keyword Arguments:\n"
    similarity_index_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



