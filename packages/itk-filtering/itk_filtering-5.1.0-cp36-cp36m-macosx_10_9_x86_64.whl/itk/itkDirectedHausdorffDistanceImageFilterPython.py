# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDirectedHausdorffDistanceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDirectedHausdorffDistanceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDirectedHausdorffDistanceImageFilterPython
            return _itkDirectedHausdorffDistanceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDirectedHausdorffDistanceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDirectedHausdorffDistanceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDirectedHausdorffDistanceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkImageSourceCommonPython
import itkVectorImagePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrixPython
import vnl_vectorPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython

def itkDirectedHausdorffDistanceImageFilterIUS3ID3_New():
  return itkDirectedHausdorffDistanceImageFilterIUS3ID3.New()


def itkDirectedHausdorffDistanceImageFilterIUS2ID2_New():
  return itkDirectedHausdorffDistanceImageFilterIUS2ID2.New()


def itkDirectedHausdorffDistanceImageFilterIUS3IF3_New():
  return itkDirectedHausdorffDistanceImageFilterIUS3IF3.New()


def itkDirectedHausdorffDistanceImageFilterIUS2IF2_New():
  return itkDirectedHausdorffDistanceImageFilterIUS2IF2.New()


def itkDirectedHausdorffDistanceImageFilterIUC3ID3_New():
  return itkDirectedHausdorffDistanceImageFilterIUC3ID3.New()


def itkDirectedHausdorffDistanceImageFilterIUC2ID2_New():
  return itkDirectedHausdorffDistanceImageFilterIUC2ID2.New()


def itkDirectedHausdorffDistanceImageFilterIUC3IF3_New():
  return itkDirectedHausdorffDistanceImageFilterIUC3IF3.New()


def itkDirectedHausdorffDistanceImageFilterIUC2IF2_New():
  return itkDirectedHausdorffDistanceImageFilterIUC2IF2.New()


def itkDirectedHausdorffDistanceImageFilterID3ID3_New():
  return itkDirectedHausdorffDistanceImageFilterID3ID3.New()


def itkDirectedHausdorffDistanceImageFilterID2ID2_New():
  return itkDirectedHausdorffDistanceImageFilterID2ID2.New()


def itkDirectedHausdorffDistanceImageFilterIF3IF3_New():
  return itkDirectedHausdorffDistanceImageFilterIF3IF3.New()


def itkDirectedHausdorffDistanceImageFilterIF2IF2_New():
  return itkDirectedHausdorffDistanceImageFilterIF2IF2.New()


def itkDirectedHausdorffDistanceImageFilterISS3ISS3_New():
  return itkDirectedHausdorffDistanceImageFilterISS3ISS3.New()


def itkDirectedHausdorffDistanceImageFilterISS2ISS2_New():
  return itkDirectedHausdorffDistanceImageFilterISS2ISS2.New()

class itkDirectedHausdorffDistanceImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageD2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterID2ID2 self, itkImageD2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterID2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> itkImageD2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterID2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterID2ID2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterID2ID2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterID2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterID2ID2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_Clone, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_swigregister
itkDirectedHausdorffDistanceImageFilterID2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterID2ID2)

def itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterID2ID2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterID2ID2 *":
    """itkDirectedHausdorffDistanceImageFilterID2ID2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterID2ID2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageD3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterID3ID3 self, itkImageD3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterID3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> itkImageD3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterID3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterID3ID3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterID3ID3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterID3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterID3ID3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_Clone, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_swigregister
itkDirectedHausdorffDistanceImageFilterID3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterID3ID3)

def itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterID3ID3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterID3ID3 *":
    """itkDirectedHausdorffDistanceImageFilterID3ID3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterID3ID3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageF2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIF2IF2 self, itkImageF2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIF2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> itkImageF2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIF2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIF2IF2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIF2IF2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIF2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIF2IF2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_Clone, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_swigregister
itkDirectedHausdorffDistanceImageFilterIF2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIF2IF2)

def itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIF2IF2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIF2IF2 *":
    """itkDirectedHausdorffDistanceImageFilterIF2IF2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIF2IF2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageF3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIF3IF3 self, itkImageF3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIF3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> itkImageF3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIF3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIF3IF3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIF3IF3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIF3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIF3IF3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_Clone, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_swigregister
itkDirectedHausdorffDistanceImageFilterIF3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIF3IF3)

def itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIF3IF3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIF3IF3 *":
    """itkDirectedHausdorffDistanceImageFilterIF3IF3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIF3IF3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_Clone(self)


    def SetInput1(self, image: 'itkImageSS2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> itkImageSS2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput1(self)


    def GetInput2(self) -> "itkImageSS2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> itkImageSS2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterISS2ISS2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterISS2ISS2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterISS2ISS2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterISS2ISS2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_Clone, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_swigregister
itkDirectedHausdorffDistanceImageFilterISS2ISS2_swigregister(itkDirectedHausdorffDistanceImageFilterISS2ISS2)

def itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterISS2ISS2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterISS2ISS2 *":
    """itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterISS2ISS2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_Clone(self)


    def SetInput1(self, image: 'itkImageSS3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> itkImageSS3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput1(self)


    def GetInput2(self) -> "itkImageSS3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> itkImageSS3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterISS3ISS3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterISS3ISS3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterISS3ISS3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterISS3ISS3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_Clone, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_swigregister
itkDirectedHausdorffDistanceImageFilterISS3ISS3_swigregister(itkDirectedHausdorffDistanceImageFilterISS3ISS3)

def itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterISS3ISS3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterISS3ISS3 *":
    """itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterISS3ISS3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageUC2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self, itkImageUC2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> itkImageUC2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC2ID2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC2ID2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUC2ID2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_Clone, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_swigregister
itkDirectedHausdorffDistanceImageFilterIUC2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterIUC2ID2)

def itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC2ID2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC2ID2 *":
    """itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC2ID2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageUC2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self, itkImageUC2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> itkImageUC2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC2IF2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC2IF2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUC2IF2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_Clone, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_swigregister
itkDirectedHausdorffDistanceImageFilterIUC2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIUC2IF2)

def itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC2IF2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC2IF2 *":
    """itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC2IF2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageUC3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self, itkImageUC3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> itkImageUC3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC3ID3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC3ID3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUC3ID3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_Clone, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_swigregister
itkDirectedHausdorffDistanceImageFilterIUC3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterIUC3ID3)

def itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC3ID3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC3ID3 *":
    """itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC3ID3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageUC3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self, itkImageUC3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> itkImageUC3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUC3IF3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC3IF3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUC3IF3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_Clone, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_swigregister
itkDirectedHausdorffDistanceImageFilterIUC3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIUC3IF3)

def itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUC3IF3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUC3IF3 *":
    """itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUC3IF3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageUS2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self, itkImageUS2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> itkImageUS2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS2ID2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS2ID2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUS2ID2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_Clone, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_swigregister
itkDirectedHausdorffDistanceImageFilterIUS2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterIUS2ID2)

def itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS2ID2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS2ID2 *":
    """itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS2ID2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageUS2') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self, itkImageUS2 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS2 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> itkImageUS2

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS2IF2 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS2IF2"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUS2IF2.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_Clone, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_swigregister
itkDirectedHausdorffDistanceImageFilterIUS2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIUS2IF2)

def itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS2IF2_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS2IF2 *":
    """itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS2IF2"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageUS3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self, itkImageUS3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> itkImageUS3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS3ID3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS3ID3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUS3ID3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_Clone, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_swigregister
itkDirectedHausdorffDistanceImageFilterIUS3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterIUS3ID3)

def itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS3ID3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS3ID3 *":
    """itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS3ID3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast(obj)

class itkDirectedHausdorffDistanceImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter

    C++ includes: itkDirectedHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer":
        """Clone(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageUS3') -> "void":
        """
        SetInput1(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self, itkImageUS3 image)

        Set the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS3 const *":
        """
        GetInput1(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> itkImageUS3

        Get the first input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> bool"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing(self)


    def GetDirectedHausdorffDistance(self) -> "double":
        """
        GetDirectedHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> double

        Return
        the computed directed Hausdorff distance. 
        """
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetDirectedHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkDirectedHausdorffDistanceImageFilterIUS3IF3 self) -> double"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance(self)

    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS3IF3"""
        return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectedHausdorffDistanceImageFilterIUS3IF3.Clone = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_Clone, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.SetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.SetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.GetInput1 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput1, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.GetInput2 = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput2, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.SetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.GetUseImageSpacing = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.GetDirectedHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetDirectedHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance, None, itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3_swigregister = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_swigregister
itkDirectedHausdorffDistanceImageFilterIUS3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIUS3IF3)

def itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__() -> "itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer":
    """itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__() -> itkDirectedHausdorffDistanceImageFilterIUS3IF3_Pointer"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__()

def itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkDirectedHausdorffDistanceImageFilterIUS3IF3 *":
    """itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast(itkLightObject obj) -> itkDirectedHausdorffDistanceImageFilterIUS3IF3"""
    return _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def directed_hausdorff_distance_image_filter(*args, **kwargs):
    """Procedural interface for DirectedHausdorffDistanceImageFilter"""
    import itk
    instance = itk.DirectedHausdorffDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def directed_hausdorff_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DirectedHausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DirectedHausdorffDistanceImageFilter.values()[0]
    else:
        filter_object = itk.DirectedHausdorffDistanceImageFilter

    directed_hausdorff_distance_image_filter.__doc__ = filter_object.__doc__
    directed_hausdorff_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    directed_hausdorff_distance_image_filter.__doc__ += "Available Keyword Arguments:\n"
    directed_hausdorff_distance_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



