# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkShotNoiseImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkShotNoiseImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkShotNoiseImageFilterPython
            return _itkShotNoiseImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkShotNoiseImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkShotNoiseImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkShotNoiseImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkNoiseBaseImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImagePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def itkShotNoiseImageFilterID3ID3_New():
  return itkShotNoiseImageFilterID3ID3.New()


def itkShotNoiseImageFilterID2ID2_New():
  return itkShotNoiseImageFilterID2ID2.New()


def itkShotNoiseImageFilterIF3IF3_New():
  return itkShotNoiseImageFilterIF3IF3.New()


def itkShotNoiseImageFilterIF2IF2_New():
  return itkShotNoiseImageFilterIF2IF2.New()


def itkShotNoiseImageFilterIUS3IUS3_New():
  return itkShotNoiseImageFilterIUS3IUS3.New()


def itkShotNoiseImageFilterIUS2IUS2_New():
  return itkShotNoiseImageFilterIUS2IUS2.New()


def itkShotNoiseImageFilterIUC3IUC3_New():
  return itkShotNoiseImageFilterIUC3IUC3.New()


def itkShotNoiseImageFilterIUC2IUC2_New():
  return itkShotNoiseImageFilterIUC2IUC2.New()


def itkShotNoiseImageFilterISS3ISS3_New():
  return itkShotNoiseImageFilterISS3ISS3.New()


def itkShotNoiseImageFilterISS2ISS2_New():
  return itkShotNoiseImageFilterISS2ISS2.New()

class itkShotNoiseImageFilterID2ID2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterID2ID2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterID2ID2_Pointer":
        """Clone(itkShotNoiseImageFilterID2ID2 self) -> itkShotNoiseImageFilterID2ID2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterID2ID2 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterID2ID2 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterID2ID2"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID2ID2

        Create a new object of the class itkShotNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterID2ID2.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_Clone, None, itkShotNoiseImageFilterID2ID2)
itkShotNoiseImageFilterID2ID2.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_GetScale, None, itkShotNoiseImageFilterID2ID2)
itkShotNoiseImageFilterID2ID2.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_SetScale, None, itkShotNoiseImageFilterID2ID2)
itkShotNoiseImageFilterID2ID2_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_swigregister
itkShotNoiseImageFilterID2ID2_swigregister(itkShotNoiseImageFilterID2ID2)

def itkShotNoiseImageFilterID2ID2___New_orig__() -> "itkShotNoiseImageFilterID2ID2_Pointer":
    """itkShotNoiseImageFilterID2ID2___New_orig__() -> itkShotNoiseImageFilterID2ID2_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2___New_orig__()

def itkShotNoiseImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterID2ID2 *":
    """itkShotNoiseImageFilterID2ID2_cast(itkLightObject obj) -> itkShotNoiseImageFilterID2ID2"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID2ID2_cast(obj)

class itkShotNoiseImageFilterID3ID3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterID3ID3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterID3ID3_Pointer":
        """Clone(itkShotNoiseImageFilterID3ID3 self) -> itkShotNoiseImageFilterID3ID3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterID3ID3 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterID3ID3 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterID3ID3"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterID3ID3

        Create a new object of the class itkShotNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterID3ID3.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_Clone, None, itkShotNoiseImageFilterID3ID3)
itkShotNoiseImageFilterID3ID3.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_GetScale, None, itkShotNoiseImageFilterID3ID3)
itkShotNoiseImageFilterID3ID3.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_SetScale, None, itkShotNoiseImageFilterID3ID3)
itkShotNoiseImageFilterID3ID3_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_swigregister
itkShotNoiseImageFilterID3ID3_swigregister(itkShotNoiseImageFilterID3ID3)

def itkShotNoiseImageFilterID3ID3___New_orig__() -> "itkShotNoiseImageFilterID3ID3_Pointer":
    """itkShotNoiseImageFilterID3ID3___New_orig__() -> itkShotNoiseImageFilterID3ID3_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3___New_orig__()

def itkShotNoiseImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterID3ID3 *":
    """itkShotNoiseImageFilterID3ID3_cast(itkLightObject obj) -> itkShotNoiseImageFilterID3ID3"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterID3ID3_cast(obj)

class itkShotNoiseImageFilterIF2IF2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIF2IF2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIF2IF2_Pointer":
        """Clone(itkShotNoiseImageFilterIF2IF2 self) -> itkShotNoiseImageFilterIF2IF2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIF2IF2 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIF2IF2 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIF2IF2"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF2IF2

        Create a new object of the class itkShotNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIF2IF2.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_Clone, None, itkShotNoiseImageFilterIF2IF2)
itkShotNoiseImageFilterIF2IF2.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_GetScale, None, itkShotNoiseImageFilterIF2IF2)
itkShotNoiseImageFilterIF2IF2.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_SetScale, None, itkShotNoiseImageFilterIF2IF2)
itkShotNoiseImageFilterIF2IF2_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_swigregister
itkShotNoiseImageFilterIF2IF2_swigregister(itkShotNoiseImageFilterIF2IF2)

def itkShotNoiseImageFilterIF2IF2___New_orig__() -> "itkShotNoiseImageFilterIF2IF2_Pointer":
    """itkShotNoiseImageFilterIF2IF2___New_orig__() -> itkShotNoiseImageFilterIF2IF2_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2___New_orig__()

def itkShotNoiseImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIF2IF2 *":
    """itkShotNoiseImageFilterIF2IF2_cast(itkLightObject obj) -> itkShotNoiseImageFilterIF2IF2"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF2IF2_cast(obj)

class itkShotNoiseImageFilterIF3IF3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIF3IF3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIF3IF3_Pointer":
        """Clone(itkShotNoiseImageFilterIF3IF3 self) -> itkShotNoiseImageFilterIF3IF3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIF3IF3 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIF3IF3 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIF3IF3"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIF3IF3

        Create a new object of the class itkShotNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIF3IF3.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_Clone, None, itkShotNoiseImageFilterIF3IF3)
itkShotNoiseImageFilterIF3IF3.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_GetScale, None, itkShotNoiseImageFilterIF3IF3)
itkShotNoiseImageFilterIF3IF3.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_SetScale, None, itkShotNoiseImageFilterIF3IF3)
itkShotNoiseImageFilterIF3IF3_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_swigregister
itkShotNoiseImageFilterIF3IF3_swigregister(itkShotNoiseImageFilterIF3IF3)

def itkShotNoiseImageFilterIF3IF3___New_orig__() -> "itkShotNoiseImageFilterIF3IF3_Pointer":
    """itkShotNoiseImageFilterIF3IF3___New_orig__() -> itkShotNoiseImageFilterIF3IF3_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3___New_orig__()

def itkShotNoiseImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIF3IF3 *":
    """itkShotNoiseImageFilterIF3IF3_cast(itkLightObject obj) -> itkShotNoiseImageFilterIF3IF3"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIF3IF3_cast(obj)

class itkShotNoiseImageFilterISS2ISS2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterISS2ISS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterISS2ISS2_Pointer":
        """Clone(itkShotNoiseImageFilterISS2ISS2 self) -> itkShotNoiseImageFilterISS2ISS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterISS2ISS2 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterISS2ISS2 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterISS2ISS2"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS2ISS2

        Create a new object of the class itkShotNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterISS2ISS2.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_Clone, None, itkShotNoiseImageFilterISS2ISS2)
itkShotNoiseImageFilterISS2ISS2.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_GetScale, None, itkShotNoiseImageFilterISS2ISS2)
itkShotNoiseImageFilterISS2ISS2.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_SetScale, None, itkShotNoiseImageFilterISS2ISS2)
itkShotNoiseImageFilterISS2ISS2_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_swigregister
itkShotNoiseImageFilterISS2ISS2_swigregister(itkShotNoiseImageFilterISS2ISS2)

def itkShotNoiseImageFilterISS2ISS2___New_orig__() -> "itkShotNoiseImageFilterISS2ISS2_Pointer":
    """itkShotNoiseImageFilterISS2ISS2___New_orig__() -> itkShotNoiseImageFilterISS2ISS2_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2___New_orig__()

def itkShotNoiseImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterISS2ISS2 *":
    """itkShotNoiseImageFilterISS2ISS2_cast(itkLightObject obj) -> itkShotNoiseImageFilterISS2ISS2"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS2ISS2_cast(obj)

class itkShotNoiseImageFilterISS3ISS3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterISS3ISS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterISS3ISS3_Pointer":
        """Clone(itkShotNoiseImageFilterISS3ISS3 self) -> itkShotNoiseImageFilterISS3ISS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterISS3ISS3 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterISS3ISS3 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterISS3ISS3"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterISS3ISS3

        Create a new object of the class itkShotNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterISS3ISS3.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_Clone, None, itkShotNoiseImageFilterISS3ISS3)
itkShotNoiseImageFilterISS3ISS3.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_GetScale, None, itkShotNoiseImageFilterISS3ISS3)
itkShotNoiseImageFilterISS3ISS3.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_SetScale, None, itkShotNoiseImageFilterISS3ISS3)
itkShotNoiseImageFilterISS3ISS3_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_swigregister
itkShotNoiseImageFilterISS3ISS3_swigregister(itkShotNoiseImageFilterISS3ISS3)

def itkShotNoiseImageFilterISS3ISS3___New_orig__() -> "itkShotNoiseImageFilterISS3ISS3_Pointer":
    """itkShotNoiseImageFilterISS3ISS3___New_orig__() -> itkShotNoiseImageFilterISS3ISS3_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3___New_orig__()

def itkShotNoiseImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterISS3ISS3 *":
    """itkShotNoiseImageFilterISS3ISS3_cast(itkLightObject obj) -> itkShotNoiseImageFilterISS3ISS3"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterISS3ISS3_cast(obj)

class itkShotNoiseImageFilterIUC2IUC2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIUC2IUC2_Pointer":
        """Clone(itkShotNoiseImageFilterIUC2IUC2 self) -> itkShotNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIUC2IUC2 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIUC2IUC2"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC2IUC2

        Create a new object of the class itkShotNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIUC2IUC2.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_Clone, None, itkShotNoiseImageFilterIUC2IUC2)
itkShotNoiseImageFilterIUC2IUC2.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_GetScale, None, itkShotNoiseImageFilterIUC2IUC2)
itkShotNoiseImageFilterIUC2IUC2.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_SetScale, None, itkShotNoiseImageFilterIUC2IUC2)
itkShotNoiseImageFilterIUC2IUC2_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_swigregister
itkShotNoiseImageFilterIUC2IUC2_swigregister(itkShotNoiseImageFilterIUC2IUC2)

def itkShotNoiseImageFilterIUC2IUC2___New_orig__() -> "itkShotNoiseImageFilterIUC2IUC2_Pointer":
    """itkShotNoiseImageFilterIUC2IUC2___New_orig__() -> itkShotNoiseImageFilterIUC2IUC2_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2___New_orig__()

def itkShotNoiseImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUC2IUC2 *":
    """itkShotNoiseImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkShotNoiseImageFilterIUC2IUC2"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC2IUC2_cast(obj)

class itkShotNoiseImageFilterIUC3IUC3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIUC3IUC3_Pointer":
        """Clone(itkShotNoiseImageFilterIUC3IUC3 self) -> itkShotNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIUC3IUC3 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIUC3IUC3"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUC3IUC3

        Create a new object of the class itkShotNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIUC3IUC3.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_Clone, None, itkShotNoiseImageFilterIUC3IUC3)
itkShotNoiseImageFilterIUC3IUC3.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_GetScale, None, itkShotNoiseImageFilterIUC3IUC3)
itkShotNoiseImageFilterIUC3IUC3.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_SetScale, None, itkShotNoiseImageFilterIUC3IUC3)
itkShotNoiseImageFilterIUC3IUC3_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_swigregister
itkShotNoiseImageFilterIUC3IUC3_swigregister(itkShotNoiseImageFilterIUC3IUC3)

def itkShotNoiseImageFilterIUC3IUC3___New_orig__() -> "itkShotNoiseImageFilterIUC3IUC3_Pointer":
    """itkShotNoiseImageFilterIUC3IUC3___New_orig__() -> itkShotNoiseImageFilterIUC3IUC3_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3___New_orig__()

def itkShotNoiseImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUC3IUC3 *":
    """itkShotNoiseImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkShotNoiseImageFilterIUC3IUC3"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUC3IUC3_cast(obj)

class itkShotNoiseImageFilterIUS2IUS2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIUS2IUS2_Pointer":
        """Clone(itkShotNoiseImageFilterIUS2IUS2 self) -> itkShotNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIUS2IUS2 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIUS2IUS2"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS2IUS2

        Create a new object of the class itkShotNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIUS2IUS2.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_Clone, None, itkShotNoiseImageFilterIUS2IUS2)
itkShotNoiseImageFilterIUS2IUS2.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_GetScale, None, itkShotNoiseImageFilterIUS2IUS2)
itkShotNoiseImageFilterIUS2IUS2.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_SetScale, None, itkShotNoiseImageFilterIUS2IUS2)
itkShotNoiseImageFilterIUS2IUS2_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_swigregister
itkShotNoiseImageFilterIUS2IUS2_swigregister(itkShotNoiseImageFilterIUS2IUS2)

def itkShotNoiseImageFilterIUS2IUS2___New_orig__() -> "itkShotNoiseImageFilterIUS2IUS2_Pointer":
    """itkShotNoiseImageFilterIUS2IUS2___New_orig__() -> itkShotNoiseImageFilterIUS2IUS2_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2___New_orig__()

def itkShotNoiseImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUS2IUS2 *":
    """itkShotNoiseImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkShotNoiseImageFilterIUS2IUS2"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS2IUS2_cast(obj)

class itkShotNoiseImageFilterIUS3IUS3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    """


    Alter an image with shot noise.

    The shot noise follows a Poisson distribution:

    $ I = N(I_0) $

    where $ N(I_0) $ is a Poisson-distributed random variable of mean $
    I_0 $. The noise is thus dependent on the pixel intensities in the
    image.  The intensities in the image can be scaled by a user provided
    value to map pixel values to the actual number of particles. The
    scaling can be seen as the inverse of the gain used during the
    acquisition. The noisy signal is then scaled back to its input
    intensity range:

    $ I = \\frac{N(I_0 \\times s)}{s} $

    where $ s $ is the scale factor.  The Poisson-distributed variable $
    \\lambda $ is computed by using the algorithm:

    $ \\begin{array}{l} k \\leftarrow 0 \\\\ p \\leftarrow 1
    \\\\ \\textbf{repeat} \\\\ \\left\\{ \\begin{array}{l}
    k \\leftarrow k+1 \\\\ p \\leftarrow p \\ast U()
    \\end{array} \\right. \\\\ \\textbf{until } p >
    e^{\\lambda} \\\\ \\textbf{return} (k) \\end{array} $

    where $ U() $ provides a uniformly distributed random variable in the
    interval $ [0,1] $.  This algorithm is very inefficient for large
    values of $ \\lambda $, though. Fortunately, the Poisson
    distribution can be accurately approximated by a Gaussian distribution
    of mean and variance $ \\lambda $ when $ \\lambda $ is large
    enough. In this implementation, this value is considered to be 50.
    This leads to the faster algorithm:

    $ \\lambda + \\sqrt{\\lambda} \\times N()$

    where $ N() $ is a normally distributed random variable of mean 0 and
    variance 1.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkShotNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShotNoiseImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkShotNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShotNoiseImageFilterIUS3IUS3_Pointer":
        """Clone(itkShotNoiseImageFilterIUS3IUS3 self) -> itkShotNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_Clone(self)


    def GetScale(self) -> "double":
        """
        GetScale(itkShotNoiseImageFilterIUS3IUS3 self) -> double

        Set/Get the value to map
        the pixel value to the actual particle counting. The scaling can be
        seen as the inverse of the gain used during the acquisition. The noisy
        signal is then scaled back to its input intensity range. Defaults to
        1.0. 
        """
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_GetScale(self)


    def SetScale(self, _arg: 'double const') -> "void":
        """SetScale(itkShotNoiseImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_SetScale(self, _arg)

    InputConvertibleToOutputCheck = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkShotNoiseImageFilterPython.delete_itkShotNoiseImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkShotNoiseImageFilterIUS3IUS3"""
        return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShotNoiseImageFilterIUS3IUS3

        Create a new object of the class itkShotNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShotNoiseImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShotNoiseImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShotNoiseImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShotNoiseImageFilterIUS3IUS3.Clone = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_Clone, None, itkShotNoiseImageFilterIUS3IUS3)
itkShotNoiseImageFilterIUS3IUS3.GetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_GetScale, None, itkShotNoiseImageFilterIUS3IUS3)
itkShotNoiseImageFilterIUS3IUS3.SetScale = new_instancemethod(_itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_SetScale, None, itkShotNoiseImageFilterIUS3IUS3)
itkShotNoiseImageFilterIUS3IUS3_swigregister = _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_swigregister
itkShotNoiseImageFilterIUS3IUS3_swigregister(itkShotNoiseImageFilterIUS3IUS3)

def itkShotNoiseImageFilterIUS3IUS3___New_orig__() -> "itkShotNoiseImageFilterIUS3IUS3_Pointer":
    """itkShotNoiseImageFilterIUS3IUS3___New_orig__() -> itkShotNoiseImageFilterIUS3IUS3_Pointer"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3___New_orig__()

def itkShotNoiseImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkShotNoiseImageFilterIUS3IUS3 *":
    """itkShotNoiseImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkShotNoiseImageFilterIUS3IUS3"""
    return _itkShotNoiseImageFilterPython.itkShotNoiseImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def shot_noise_image_filter(*args, **kwargs):
    """Procedural interface for ShotNoiseImageFilter"""
    import itk
    instance = itk.ShotNoiseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def shot_noise_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ShotNoiseImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ShotNoiseImageFilter.values()[0]
    else:
        filter_object = itk.ShotNoiseImageFilter

    shot_noise_image_filter.__doc__ = filter_object.__doc__
    shot_noise_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    shot_noise_image_filter.__doc__ += "Available Keyword Arguments:\n"
    shot_noise_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



