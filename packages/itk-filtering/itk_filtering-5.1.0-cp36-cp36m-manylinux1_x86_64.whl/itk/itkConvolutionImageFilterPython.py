# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkConvolutionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkConvolutionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkConvolutionImageFilterPython
            return _itkConvolutionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkConvolutionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkConvolutionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkConvolutionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkConvolutionImageFilterBasePython
import itkImagePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkImageBoundaryConditionPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkConvolutionImageFilterID3ID3_New():
  return itkConvolutionImageFilterID3ID3.New()


def itkConvolutionImageFilterID2ID2_New():
  return itkConvolutionImageFilterID2ID2.New()


def itkConvolutionImageFilterIF3IF3_New():
  return itkConvolutionImageFilterIF3IF3.New()


def itkConvolutionImageFilterIF2IF2_New():
  return itkConvolutionImageFilterIF2IF2.New()


def itkConvolutionImageFilterIUS3IUS3_New():
  return itkConvolutionImageFilterIUS3IUS3.New()


def itkConvolutionImageFilterIUS2IUS2_New():
  return itkConvolutionImageFilterIUS2IUS2.New()


def itkConvolutionImageFilterIUC3IUC3_New():
  return itkConvolutionImageFilterIUC3IUC3.New()


def itkConvolutionImageFilterIUC2IUC2_New():
  return itkConvolutionImageFilterIUC2IUC2.New()


def itkConvolutionImageFilterISS3ISS3_New():
  return itkConvolutionImageFilterISS3ISS3.New()


def itkConvolutionImageFilterISS2ISS2_New():
  return itkConvolutionImageFilterISS2ISS2.New()

class itkConvolutionImageFilterID2ID2(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID2ID2):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterID2ID2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterID2ID2_Pointer":
        """Clone(itkConvolutionImageFilterID2ID2 self) -> itkConvolutionImageFilterID2ID2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterID2ID2"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID2ID2

        Create a new object of the class itkConvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterID2ID2.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_Clone, None, itkConvolutionImageFilterID2ID2)
itkConvolutionImageFilterID2ID2_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_swigregister
itkConvolutionImageFilterID2ID2_swigregister(itkConvolutionImageFilterID2ID2)

def itkConvolutionImageFilterID2ID2___New_orig__() -> "itkConvolutionImageFilterID2ID2_Pointer":
    """itkConvolutionImageFilterID2ID2___New_orig__() -> itkConvolutionImageFilterID2ID2_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2___New_orig__()

def itkConvolutionImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterID2ID2 *":
    """itkConvolutionImageFilterID2ID2_cast(itkLightObject obj) -> itkConvolutionImageFilterID2ID2"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_cast(obj)

class itkConvolutionImageFilterID3ID3(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID3ID3):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterID3ID3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterID3ID3_Pointer":
        """Clone(itkConvolutionImageFilterID3ID3 self) -> itkConvolutionImageFilterID3ID3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterID3ID3"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID3ID3

        Create a new object of the class itkConvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterID3ID3.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_Clone, None, itkConvolutionImageFilterID3ID3)
itkConvolutionImageFilterID3ID3_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_swigregister
itkConvolutionImageFilterID3ID3_swigregister(itkConvolutionImageFilterID3ID3)

def itkConvolutionImageFilterID3ID3___New_orig__() -> "itkConvolutionImageFilterID3ID3_Pointer":
    """itkConvolutionImageFilterID3ID3___New_orig__() -> itkConvolutionImageFilterID3ID3_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3___New_orig__()

def itkConvolutionImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterID3ID3 *":
    """itkConvolutionImageFilterID3ID3_cast(itkLightObject obj) -> itkConvolutionImageFilterID3ID3"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_cast(obj)

class itkConvolutionImageFilterIF2IF2(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF2IF2):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIF2IF2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIF2IF2_Pointer":
        """Clone(itkConvolutionImageFilterIF2IF2 self) -> itkConvolutionImageFilterIF2IF2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIF2IF2"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF2IF2

        Create a new object of the class itkConvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIF2IF2.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_Clone, None, itkConvolutionImageFilterIF2IF2)
itkConvolutionImageFilterIF2IF2_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_swigregister
itkConvolutionImageFilterIF2IF2_swigregister(itkConvolutionImageFilterIF2IF2)

def itkConvolutionImageFilterIF2IF2___New_orig__() -> "itkConvolutionImageFilterIF2IF2_Pointer":
    """itkConvolutionImageFilterIF2IF2___New_orig__() -> itkConvolutionImageFilterIF2IF2_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2___New_orig__()

def itkConvolutionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIF2IF2 *":
    """itkConvolutionImageFilterIF2IF2_cast(itkLightObject obj) -> itkConvolutionImageFilterIF2IF2"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_cast(obj)

class itkConvolutionImageFilterIF3IF3(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF3IF3):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIF3IF3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIF3IF3_Pointer":
        """Clone(itkConvolutionImageFilterIF3IF3 self) -> itkConvolutionImageFilterIF3IF3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIF3IF3"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF3IF3

        Create a new object of the class itkConvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIF3IF3.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_Clone, None, itkConvolutionImageFilterIF3IF3)
itkConvolutionImageFilterIF3IF3_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_swigregister
itkConvolutionImageFilterIF3IF3_swigregister(itkConvolutionImageFilterIF3IF3)

def itkConvolutionImageFilterIF3IF3___New_orig__() -> "itkConvolutionImageFilterIF3IF3_Pointer":
    """itkConvolutionImageFilterIF3IF3___New_orig__() -> itkConvolutionImageFilterIF3IF3_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3___New_orig__()

def itkConvolutionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIF3IF3 *":
    """itkConvolutionImageFilterIF3IF3_cast(itkLightObject obj) -> itkConvolutionImageFilterIF3IF3"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_cast(obj)

class itkConvolutionImageFilterISS2ISS2(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS2ISS2):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterISS2ISS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterISS2ISS2_Pointer":
        """Clone(itkConvolutionImageFilterISS2ISS2 self) -> itkConvolutionImageFilterISS2ISS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterISS2ISS2"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS2ISS2

        Create a new object of the class itkConvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterISS2ISS2.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_Clone, None, itkConvolutionImageFilterISS2ISS2)
itkConvolutionImageFilterISS2ISS2_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_swigregister
itkConvolutionImageFilterISS2ISS2_swigregister(itkConvolutionImageFilterISS2ISS2)

def itkConvolutionImageFilterISS2ISS2___New_orig__() -> "itkConvolutionImageFilterISS2ISS2_Pointer":
    """itkConvolutionImageFilterISS2ISS2___New_orig__() -> itkConvolutionImageFilterISS2ISS2_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2___New_orig__()

def itkConvolutionImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterISS2ISS2 *":
    """itkConvolutionImageFilterISS2ISS2_cast(itkLightObject obj) -> itkConvolutionImageFilterISS2ISS2"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_cast(obj)

class itkConvolutionImageFilterISS3ISS3(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS3ISS3):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterISS3ISS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterISS3ISS3_Pointer":
        """Clone(itkConvolutionImageFilterISS3ISS3 self) -> itkConvolutionImageFilterISS3ISS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterISS3ISS3"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS3ISS3

        Create a new object of the class itkConvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterISS3ISS3.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_Clone, None, itkConvolutionImageFilterISS3ISS3)
itkConvolutionImageFilterISS3ISS3_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_swigregister
itkConvolutionImageFilterISS3ISS3_swigregister(itkConvolutionImageFilterISS3ISS3)

def itkConvolutionImageFilterISS3ISS3___New_orig__() -> "itkConvolutionImageFilterISS3ISS3_Pointer":
    """itkConvolutionImageFilterISS3ISS3___New_orig__() -> itkConvolutionImageFilterISS3ISS3_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3___New_orig__()

def itkConvolutionImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterISS3ISS3 *":
    """itkConvolutionImageFilterISS3ISS3_cast(itkLightObject obj) -> itkConvolutionImageFilterISS3ISS3"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_cast(obj)

class itkConvolutionImageFilterIUC2IUC2(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC2IUC2):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIUC2IUC2_Pointer":
        """Clone(itkConvolutionImageFilterIUC2IUC2 self) -> itkConvolutionImageFilterIUC2IUC2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIUC2IUC2"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC2IUC2

        Create a new object of the class itkConvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIUC2IUC2.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_Clone, None, itkConvolutionImageFilterIUC2IUC2)
itkConvolutionImageFilterIUC2IUC2_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_swigregister
itkConvolutionImageFilterIUC2IUC2_swigregister(itkConvolutionImageFilterIUC2IUC2)

def itkConvolutionImageFilterIUC2IUC2___New_orig__() -> "itkConvolutionImageFilterIUC2IUC2_Pointer":
    """itkConvolutionImageFilterIUC2IUC2___New_orig__() -> itkConvolutionImageFilterIUC2IUC2_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2___New_orig__()

def itkConvolutionImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUC2IUC2 *":
    """itkConvolutionImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkConvolutionImageFilterIUC2IUC2"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_cast(obj)

class itkConvolutionImageFilterIUC3IUC3(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC3IUC3):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIUC3IUC3_Pointer":
        """Clone(itkConvolutionImageFilterIUC3IUC3 self) -> itkConvolutionImageFilterIUC3IUC3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIUC3IUC3"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC3IUC3

        Create a new object of the class itkConvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIUC3IUC3.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_Clone, None, itkConvolutionImageFilterIUC3IUC3)
itkConvolutionImageFilterIUC3IUC3_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_swigregister
itkConvolutionImageFilterIUC3IUC3_swigregister(itkConvolutionImageFilterIUC3IUC3)

def itkConvolutionImageFilterIUC3IUC3___New_orig__() -> "itkConvolutionImageFilterIUC3IUC3_Pointer":
    """itkConvolutionImageFilterIUC3IUC3___New_orig__() -> itkConvolutionImageFilterIUC3IUC3_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3___New_orig__()

def itkConvolutionImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUC3IUC3 *":
    """itkConvolutionImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkConvolutionImageFilterIUC3IUC3"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_cast(obj)

class itkConvolutionImageFilterIUS2IUS2(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS2IUS2):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIUS2IUS2_Pointer":
        """Clone(itkConvolutionImageFilterIUS2IUS2 self) -> itkConvolutionImageFilterIUS2IUS2_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIUS2IUS2"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS2IUS2

        Create a new object of the class itkConvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIUS2IUS2.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_Clone, None, itkConvolutionImageFilterIUS2IUS2)
itkConvolutionImageFilterIUS2IUS2_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_swigregister
itkConvolutionImageFilterIUS2IUS2_swigregister(itkConvolutionImageFilterIUS2IUS2)

def itkConvolutionImageFilterIUS2IUS2___New_orig__() -> "itkConvolutionImageFilterIUS2IUS2_Pointer":
    """itkConvolutionImageFilterIUS2IUS2___New_orig__() -> itkConvolutionImageFilterIUS2IUS2_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2___New_orig__()

def itkConvolutionImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUS2IUS2 *":
    """itkConvolutionImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkConvolutionImageFilterIUS2IUS2"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_cast(obj)

class itkConvolutionImageFilterIUS3IUS3(itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS3IUS3):
    """


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee

    C++ includes: itkConvolutionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkConvolutionImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkConvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkConvolutionImageFilterIUS3IUS3_Pointer":
        """Clone(itkConvolutionImageFilterIUS3IUS3 self) -> itkConvolutionImageFilterIUS3IUS3_Pointer"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_Clone(self)

    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkConvolutionImageFilterIUS3IUS3"""
        return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS3IUS3

        Create a new object of the class itkConvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkConvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkConvolutionImageFilterIUS3IUS3.Clone = new_instancemethod(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_Clone, None, itkConvolutionImageFilterIUS3IUS3)
itkConvolutionImageFilterIUS3IUS3_swigregister = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_swigregister
itkConvolutionImageFilterIUS3IUS3_swigregister(itkConvolutionImageFilterIUS3IUS3)

def itkConvolutionImageFilterIUS3IUS3___New_orig__() -> "itkConvolutionImageFilterIUS3IUS3_Pointer":
    """itkConvolutionImageFilterIUS3IUS3___New_orig__() -> itkConvolutionImageFilterIUS3IUS3_Pointer"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3___New_orig__()

def itkConvolutionImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkConvolutionImageFilterIUS3IUS3 *":
    """itkConvolutionImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkConvolutionImageFilterIUS3IUS3"""
    return _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def convolution_image_filter(*args, **kwargs):
    """Procedural interface for ConvolutionImageFilter"""
    import itk
    instance = itk.ConvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def convolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ConvolutionImageFilter.values()[0]
    else:
        filter_object = itk.ConvolutionImageFilter

    convolution_image_filter.__doc__ = filter_object.__doc__
    convolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    convolution_image_filter.__doc__ += "Available Keyword Arguments:\n"
    convolution_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



