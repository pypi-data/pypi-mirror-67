# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNarrowBandLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNarrowBandLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkNarrowBandLevelSetImageFilterPython
            return _itkNarrowBandLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNarrowBandLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNarrowBandLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNarrowBandLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkSizePython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython
import itkFiniteDifferenceFunctionPython
import itkNarrowBandImageFilterBasePython
import ITKNarrowBandBasePython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def itkNarrowBandLevelSetImageFilterID3ID3D_New():
  return itkNarrowBandLevelSetImageFilterID3ID3D.New()


def itkNarrowBandLevelSetImageFilterIF3IF3F_New():
  return itkNarrowBandLevelSetImageFilterIF3IF3F.New()


def itkNarrowBandLevelSetImageFilterID2ID2D_New():
  return itkNarrowBandLevelSetImageFilterID2ID2D.New()


def itkNarrowBandLevelSetImageFilterIF2IF2F_New():
  return itkNarrowBandLevelSetImageFilterIF2IF2F.New()

class itkNarrowBandLevelSetImageFilterID2ID2D(itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2):
    """


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information.

    C++ includes: itkNarrowBandLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFeatureImage(self, f: 'itkImageD2') -> "void":
        """
        SetFeatureImage(itkNarrowBandLevelSetImageFilterID2ID2D self, itkImageD2 f)

        Set/Get the feature
        image to be used for speed function of the level set equation.
        Equivalent to calling Set/GetInput(1, ..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureImage(self, f)


    def GetFeatureImage(self) -> "itkImageD2 *":
        """GetFeatureImage(itkNarrowBandLevelSetImageFilterID2ID2D self) -> itkImageD2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetFeatureImage(self)


    def SetInitialImage(self, f: 'itkImageD2') -> "void":
        """
        SetInitialImage(itkNarrowBandLevelSetImageFilterID2ID2D self, itkImageD2 f)

        Set/Get the initial
        level set model. Equivalent to calling SetInput(..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetInitialImage(self, f)


    def GetSpeedImage(self) -> "itkImageD2 const *":
        """GetSpeedImage(itkNarrowBandLevelSetImageFilterID2ID2D self) -> itkImageD2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSpeedImage(self)


    def GetAdvectionImage(self) -> "itkImageFAD22 const *":
        """GetAdvectionImage(itkNarrowBandLevelSetImageFilterID2ID2D self) -> itkImageFAD22"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionImage(self)


    def SetUseNegativeFeaturesOn(self) -> "void":
        """
        SetUseNegativeFeaturesOn(itkNarrowBandLevelSetImageFilterID2ID2D self)

        THIS
        METHOD IS DEPRECATED AND SHOULD NOT BE USED. This method reverses the
        speed function direction, effectively changing inside feature values
        to outside feature values and vice versa. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOn(self)


    def SetUseNegativeFeaturesOff(self) -> "void":
        """SetUseNegativeFeaturesOff(itkNarrowBandLevelSetImageFilterID2ID2D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOff(self)


    def SetUseNegativeFeatures(self, u: 'bool') -> "void":
        """
        SetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterID2ID2D self, bool u)

        Set/Get the
        value of the UseNegativeFeatures flag. This method is deprecated. Use
        Set/Get ReverseExpansionDirection instead. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeatures(self, u)


    def GetUseNegativeFeatures(self) -> "bool":
        """GetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterID2ID2D self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetUseNegativeFeatures(self)


    def SetReverseExpansionDirection(self, _arg: 'bool const') -> "void":
        """
        SetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterID2ID2D self, bool const _arg)

        Turn
        On/Off the flag which determines whether Positive or Negative speed
        terms will cause surface expansion. If set to TRUE then negative speed
        terms will cause the surface to expand and positive speed terms will
        cause the surface to contract. If set to FALSE (default) then positive
        speed terms will cause the surface to expand and negative speed terms
        will cause the surface to contract. This method can be safely used to
        reverse the expansion/contraction as appropriate to a particular
        application or data set. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetReverseExpansionDirection(self, _arg)


    def GetReverseExpansionDirection(self) -> "bool":
        """GetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterID2ID2D self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetReverseExpansionDirection(self)


    def ReverseExpansionDirectionOn(self) -> "void":
        """ReverseExpansionDirectionOn(itkNarrowBandLevelSetImageFilterID2ID2D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOn(self)


    def ReverseExpansionDirectionOff(self) -> "void":
        """ReverseExpansionDirectionOff(itkNarrowBandLevelSetImageFilterID2ID2D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOff(self)


    def SetFeatureScaling(self, v: 'double') -> "void":
        """
        SetFeatureScaling(itkNarrowBandLevelSetImageFilterID2ID2D self, double v)

        Combined scaling
        of the propagation and advection speed terms. You should use either
        this -or- Get/SetPropagationScaling and Get/SetAdvectionScaling (if
        appropriate). See subclasses for details on when and whether to set
        these parameters. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureScaling(self, v)


    def SetPropagationScaling(self, v: 'double') -> "void":
        """
        SetPropagationScaling(itkNarrowBandLevelSetImageFilterID2ID2D self, double v)

        Set/Get the
        scaling of the propagation speed. Setting the FeatureScaling parameter
        overrides any previous values set for PropagationScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetPropagationScaling(self, v)


    def GetPropagationScaling(self) -> "double":
        """GetPropagationScaling(itkNarrowBandLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetPropagationScaling(self)


    def SetAdvectionScaling(self, v: 'double') -> "void":
        """
        SetAdvectionScaling(itkNarrowBandLevelSetImageFilterID2ID2D self, double v)

        Set/Get the
        scaling of the advection field. Setting the FeatureScaling parameter
        will override any existing value for AdvectionScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetAdvectionScaling(self, v)


    def GetAdvectionScaling(self) -> "double":
        """GetAdvectionScaling(itkNarrowBandLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionScaling(self)


    def SetCurvatureScaling(self, v: 'double') -> "void":
        """
        SetCurvatureScaling(itkNarrowBandLevelSetImageFilterID2ID2D self, double v)

        Set/Get the
        scaling of the curvature. Use this parameter to increase the influence
        of curvature on the movement of the surface. Higher values relative to
        Advection and Propagation values will give smoother surfaces. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetCurvatureScaling(self, v)


    def GetCurvatureScaling(self) -> "double":
        """GetCurvatureScaling(itkNarrowBandLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetCurvatureScaling(self)


    def SetSegmentationFunction(self, s: 'itkSegmentationLevelSetFunctionID2ID2') -> "void":
        """
        SetSegmentationFunction(itkNarrowBandLevelSetImageFilterID2ID2D self, itkSegmentationLevelSetFunctionID2ID2 s)

        Set the
        segmentation function. In general, this should only be called by a
        subclass of this object. It is made public to allow itk::Command
        objects access. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetSegmentationFunction(self, s)


    def GetSegmentationFunction(self) -> "itkSegmentationLevelSetFunctionID2ID2 *":
        """GetSegmentationFunction(itkNarrowBandLevelSetImageFilterID2ID2D self) -> itkSegmentationLevelSetFunctionID2ID2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSegmentationFunction(self)


    def SetMaximumIterations(self, i: 'unsigned int') -> "void":
        """
        SetMaximumIterations(itkNarrowBandLevelSetImageFilterID2ID2D self, unsigned int i)

        Set/Get the
        maximum number of iterations allowed for the solver. This prevents
        infinite loops if a solution "bounces". 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetMaximumIterations(self, i)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkNarrowBandLevelSetImageFilterID2ID2D self) -> unsigned int"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetMaximumIterations(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterID2ID2D"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandLevelSetImageFilterID2ID2D

        Create a new object of the class itkNarrowBandLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandLevelSetImageFilterID2ID2D.SetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureImage, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetFeatureImage, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetInitialImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetInitialImage, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetSpeedImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSpeedImage, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetAdvectionImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionImage, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetUseNegativeFeaturesOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOn, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetUseNegativeFeaturesOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOff, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.ReverseExpansionDirectionOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOn, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.ReverseExpansionDirectionOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOff, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetFeatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetPropagationScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetPropagationScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.SetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetMaximumIterations, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D.GetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetMaximumIterations, None, itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D_swigregister = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_swigregister
itkNarrowBandLevelSetImageFilterID2ID2D_swigregister(itkNarrowBandLevelSetImageFilterID2ID2D)

def itkNarrowBandLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterID2ID2D *":
    """itkNarrowBandLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterID2ID2D"""
    return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_cast(obj)

class itkNarrowBandLevelSetImageFilterID3ID3D(itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3):
    """


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information.

    C++ includes: itkNarrowBandLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFeatureImage(self, f: 'itkImageD3') -> "void":
        """
        SetFeatureImage(itkNarrowBandLevelSetImageFilterID3ID3D self, itkImageD3 f)

        Set/Get the feature
        image to be used for speed function of the level set equation.
        Equivalent to calling Set/GetInput(1, ..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureImage(self, f)


    def GetFeatureImage(self) -> "itkImageD3 *":
        """GetFeatureImage(itkNarrowBandLevelSetImageFilterID3ID3D self) -> itkImageD3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetFeatureImage(self)


    def SetInitialImage(self, f: 'itkImageD3') -> "void":
        """
        SetInitialImage(itkNarrowBandLevelSetImageFilterID3ID3D self, itkImageD3 f)

        Set/Get the initial
        level set model. Equivalent to calling SetInput(..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetInitialImage(self, f)


    def GetSpeedImage(self) -> "itkImageD3 const *":
        """GetSpeedImage(itkNarrowBandLevelSetImageFilterID3ID3D self) -> itkImageD3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSpeedImage(self)


    def GetAdvectionImage(self) -> "itkImageFAD33 const *":
        """GetAdvectionImage(itkNarrowBandLevelSetImageFilterID3ID3D self) -> itkImageFAD33"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionImage(self)


    def SetUseNegativeFeaturesOn(self) -> "void":
        """
        SetUseNegativeFeaturesOn(itkNarrowBandLevelSetImageFilterID3ID3D self)

        THIS
        METHOD IS DEPRECATED AND SHOULD NOT BE USED. This method reverses the
        speed function direction, effectively changing inside feature values
        to outside feature values and vice versa. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOn(self)


    def SetUseNegativeFeaturesOff(self) -> "void":
        """SetUseNegativeFeaturesOff(itkNarrowBandLevelSetImageFilterID3ID3D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOff(self)


    def SetUseNegativeFeatures(self, u: 'bool') -> "void":
        """
        SetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterID3ID3D self, bool u)

        Set/Get the
        value of the UseNegativeFeatures flag. This method is deprecated. Use
        Set/Get ReverseExpansionDirection instead. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeatures(self, u)


    def GetUseNegativeFeatures(self) -> "bool":
        """GetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterID3ID3D self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetUseNegativeFeatures(self)


    def SetReverseExpansionDirection(self, _arg: 'bool const') -> "void":
        """
        SetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterID3ID3D self, bool const _arg)

        Turn
        On/Off the flag which determines whether Positive or Negative speed
        terms will cause surface expansion. If set to TRUE then negative speed
        terms will cause the surface to expand and positive speed terms will
        cause the surface to contract. If set to FALSE (default) then positive
        speed terms will cause the surface to expand and negative speed terms
        will cause the surface to contract. This method can be safely used to
        reverse the expansion/contraction as appropriate to a particular
        application or data set. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetReverseExpansionDirection(self, _arg)


    def GetReverseExpansionDirection(self) -> "bool":
        """GetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterID3ID3D self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetReverseExpansionDirection(self)


    def ReverseExpansionDirectionOn(self) -> "void":
        """ReverseExpansionDirectionOn(itkNarrowBandLevelSetImageFilterID3ID3D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOn(self)


    def ReverseExpansionDirectionOff(self) -> "void":
        """ReverseExpansionDirectionOff(itkNarrowBandLevelSetImageFilterID3ID3D self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOff(self)


    def SetFeatureScaling(self, v: 'double') -> "void":
        """
        SetFeatureScaling(itkNarrowBandLevelSetImageFilterID3ID3D self, double v)

        Combined scaling
        of the propagation and advection speed terms. You should use either
        this -or- Get/SetPropagationScaling and Get/SetAdvectionScaling (if
        appropriate). See subclasses for details on when and whether to set
        these parameters. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureScaling(self, v)


    def SetPropagationScaling(self, v: 'double') -> "void":
        """
        SetPropagationScaling(itkNarrowBandLevelSetImageFilterID3ID3D self, double v)

        Set/Get the
        scaling of the propagation speed. Setting the FeatureScaling parameter
        overrides any previous values set for PropagationScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetPropagationScaling(self, v)


    def GetPropagationScaling(self) -> "double":
        """GetPropagationScaling(itkNarrowBandLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetPropagationScaling(self)


    def SetAdvectionScaling(self, v: 'double') -> "void":
        """
        SetAdvectionScaling(itkNarrowBandLevelSetImageFilterID3ID3D self, double v)

        Set/Get the
        scaling of the advection field. Setting the FeatureScaling parameter
        will override any existing value for AdvectionScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetAdvectionScaling(self, v)


    def GetAdvectionScaling(self) -> "double":
        """GetAdvectionScaling(itkNarrowBandLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionScaling(self)


    def SetCurvatureScaling(self, v: 'double') -> "void":
        """
        SetCurvatureScaling(itkNarrowBandLevelSetImageFilterID3ID3D self, double v)

        Set/Get the
        scaling of the curvature. Use this parameter to increase the influence
        of curvature on the movement of the surface. Higher values relative to
        Advection and Propagation values will give smoother surfaces. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetCurvatureScaling(self, v)


    def GetCurvatureScaling(self) -> "double":
        """GetCurvatureScaling(itkNarrowBandLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetCurvatureScaling(self)


    def SetSegmentationFunction(self, s: 'itkSegmentationLevelSetFunctionID3ID3') -> "void":
        """
        SetSegmentationFunction(itkNarrowBandLevelSetImageFilterID3ID3D self, itkSegmentationLevelSetFunctionID3ID3 s)

        Set the
        segmentation function. In general, this should only be called by a
        subclass of this object. It is made public to allow itk::Command
        objects access. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetSegmentationFunction(self, s)


    def GetSegmentationFunction(self) -> "itkSegmentationLevelSetFunctionID3ID3 *":
        """GetSegmentationFunction(itkNarrowBandLevelSetImageFilterID3ID3D self) -> itkSegmentationLevelSetFunctionID3ID3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSegmentationFunction(self)


    def SetMaximumIterations(self, i: 'unsigned int') -> "void":
        """
        SetMaximumIterations(itkNarrowBandLevelSetImageFilterID3ID3D self, unsigned int i)

        Set/Get the
        maximum number of iterations allowed for the solver. This prevents
        infinite loops if a solution "bounces". 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetMaximumIterations(self, i)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkNarrowBandLevelSetImageFilterID3ID3D self) -> unsigned int"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetMaximumIterations(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterID3ID3D"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandLevelSetImageFilterID3ID3D

        Create a new object of the class itkNarrowBandLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandLevelSetImageFilterID3ID3D.SetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureImage, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetFeatureImage, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetInitialImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetInitialImage, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetSpeedImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSpeedImage, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetAdvectionImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionImage, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetUseNegativeFeaturesOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOn, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetUseNegativeFeaturesOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOff, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.ReverseExpansionDirectionOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOn, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.ReverseExpansionDirectionOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOff, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetFeatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetPropagationScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetPropagationScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.SetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetMaximumIterations, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D.GetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetMaximumIterations, None, itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D_swigregister = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_swigregister
itkNarrowBandLevelSetImageFilterID3ID3D_swigregister(itkNarrowBandLevelSetImageFilterID3ID3D)

def itkNarrowBandLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterID3ID3D *":
    """itkNarrowBandLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterID3ID3D"""
    return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_cast(obj)

class itkNarrowBandLevelSetImageFilterIF2IF2F(itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2):
    """


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information.

    C++ includes: itkNarrowBandLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFeatureImage(self, f: 'itkImageF2') -> "void":
        """
        SetFeatureImage(itkNarrowBandLevelSetImageFilterIF2IF2F self, itkImageF2 f)

        Set/Get the feature
        image to be used for speed function of the level set equation.
        Equivalent to calling Set/GetInput(1, ..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureImage(self, f)


    def GetFeatureImage(self) -> "itkImageF2 *":
        """GetFeatureImage(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> itkImageF2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetFeatureImage(self)


    def SetInitialImage(self, f: 'itkImageF2') -> "void":
        """
        SetInitialImage(itkNarrowBandLevelSetImageFilterIF2IF2F self, itkImageF2 f)

        Set/Get the initial
        level set model. Equivalent to calling SetInput(..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetInitialImage(self, f)


    def GetSpeedImage(self) -> "itkImageF2 const *":
        """GetSpeedImage(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> itkImageF2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSpeedImage(self)


    def GetAdvectionImage(self) -> "itkImageFAF22 const *":
        """GetAdvectionImage(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> itkImageFAF22"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionImage(self)


    def SetUseNegativeFeaturesOn(self) -> "void":
        """
        SetUseNegativeFeaturesOn(itkNarrowBandLevelSetImageFilterIF2IF2F self)

        THIS
        METHOD IS DEPRECATED AND SHOULD NOT BE USED. This method reverses the
        speed function direction, effectively changing inside feature values
        to outside feature values and vice versa. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOn(self)


    def SetUseNegativeFeaturesOff(self) -> "void":
        """SetUseNegativeFeaturesOff(itkNarrowBandLevelSetImageFilterIF2IF2F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOff(self)


    def SetUseNegativeFeatures(self, u: 'bool') -> "void":
        """
        SetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterIF2IF2F self, bool u)

        Set/Get the
        value of the UseNegativeFeatures flag. This method is deprecated. Use
        Set/Get ReverseExpansionDirection instead. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeatures(self, u)


    def GetUseNegativeFeatures(self) -> "bool":
        """GetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetUseNegativeFeatures(self)


    def SetReverseExpansionDirection(self, _arg: 'bool const') -> "void":
        """
        SetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterIF2IF2F self, bool const _arg)

        Turn
        On/Off the flag which determines whether Positive or Negative speed
        terms will cause surface expansion. If set to TRUE then negative speed
        terms will cause the surface to expand and positive speed terms will
        cause the surface to contract. If set to FALSE (default) then positive
        speed terms will cause the surface to expand and negative speed terms
        will cause the surface to contract. This method can be safely used to
        reverse the expansion/contraction as appropriate to a particular
        application or data set. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetReverseExpansionDirection(self, _arg)


    def GetReverseExpansionDirection(self) -> "bool":
        """GetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetReverseExpansionDirection(self)


    def ReverseExpansionDirectionOn(self) -> "void":
        """ReverseExpansionDirectionOn(itkNarrowBandLevelSetImageFilterIF2IF2F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOn(self)


    def ReverseExpansionDirectionOff(self) -> "void":
        """ReverseExpansionDirectionOff(itkNarrowBandLevelSetImageFilterIF2IF2F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOff(self)


    def SetFeatureScaling(self, v: 'float') -> "void":
        """
        SetFeatureScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self, float v)

        Combined scaling
        of the propagation and advection speed terms. You should use either
        this -or- Get/SetPropagationScaling and Get/SetAdvectionScaling (if
        appropriate). See subclasses for details on when and whether to set
        these parameters. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureScaling(self, v)


    def SetPropagationScaling(self, v: 'float') -> "void":
        """
        SetPropagationScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self, float v)

        Set/Get the
        scaling of the propagation speed. Setting the FeatureScaling parameter
        overrides any previous values set for PropagationScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetPropagationScaling(self, v)


    def GetPropagationScaling(self) -> "float":
        """GetPropagationScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetPropagationScaling(self)


    def SetAdvectionScaling(self, v: 'float') -> "void":
        """
        SetAdvectionScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self, float v)

        Set/Get the
        scaling of the advection field. Setting the FeatureScaling parameter
        will override any existing value for AdvectionScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetAdvectionScaling(self, v)


    def GetAdvectionScaling(self) -> "float":
        """GetAdvectionScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionScaling(self)


    def SetCurvatureScaling(self, v: 'float') -> "void":
        """
        SetCurvatureScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self, float v)

        Set/Get the
        scaling of the curvature. Use this parameter to increase the influence
        of curvature on the movement of the surface. Higher values relative to
        Advection and Propagation values will give smoother surfaces. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetCurvatureScaling(self, v)


    def GetCurvatureScaling(self) -> "float":
        """GetCurvatureScaling(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetCurvatureScaling(self)


    def SetSegmentationFunction(self, s: 'itkSegmentationLevelSetFunctionIF2IF2') -> "void":
        """
        SetSegmentationFunction(itkNarrowBandLevelSetImageFilterIF2IF2F self, itkSegmentationLevelSetFunctionIF2IF2 s)

        Set the
        segmentation function. In general, this should only be called by a
        subclass of this object. It is made public to allow itk::Command
        objects access. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetSegmentationFunction(self, s)


    def GetSegmentationFunction(self) -> "itkSegmentationLevelSetFunctionIF2IF2 *":
        """GetSegmentationFunction(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> itkSegmentationLevelSetFunctionIF2IF2"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSegmentationFunction(self)


    def SetMaximumIterations(self, i: 'unsigned int') -> "void":
        """
        SetMaximumIterations(itkNarrowBandLevelSetImageFilterIF2IF2F self, unsigned int i)

        Set/Get the
        maximum number of iterations allowed for the solver. This prevents
        infinite loops if a solution "bounces". 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetMaximumIterations(self, i)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkNarrowBandLevelSetImageFilterIF2IF2F self) -> unsigned int"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetMaximumIterations(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterIF2IF2F"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandLevelSetImageFilterIF2IF2F

        Create a new object of the class itkNarrowBandLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandLevelSetImageFilterIF2IF2F.SetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureImage, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetFeatureImage, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetInitialImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetInitialImage, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetSpeedImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSpeedImage, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetAdvectionImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionImage, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetUseNegativeFeaturesOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOn, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetUseNegativeFeaturesOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOff, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.ReverseExpansionDirectionOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOn, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.ReverseExpansionDirectionOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOff, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetFeatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetPropagationScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetPropagationScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.SetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetMaximumIterations, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F.GetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetMaximumIterations, None, itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F_swigregister = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_swigregister
itkNarrowBandLevelSetImageFilterIF2IF2F_swigregister(itkNarrowBandLevelSetImageFilterIF2IF2F)

def itkNarrowBandLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterIF2IF2F *":
    """itkNarrowBandLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterIF2IF2F"""
    return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_cast(obj)

class itkNarrowBandLevelSetImageFilterIF3IF3F(itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3):
    """


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information.

    C++ includes: itkNarrowBandLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetFeatureImage(self, f: 'itkImageF3') -> "void":
        """
        SetFeatureImage(itkNarrowBandLevelSetImageFilterIF3IF3F self, itkImageF3 f)

        Set/Get the feature
        image to be used for speed function of the level set equation.
        Equivalent to calling Set/GetInput(1, ..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureImage(self, f)


    def GetFeatureImage(self) -> "itkImageF3 *":
        """GetFeatureImage(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> itkImageF3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetFeatureImage(self)


    def SetInitialImage(self, f: 'itkImageF3') -> "void":
        """
        SetInitialImage(itkNarrowBandLevelSetImageFilterIF3IF3F self, itkImageF3 f)

        Set/Get the initial
        level set model. Equivalent to calling SetInput(..) 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetInitialImage(self, f)


    def GetSpeedImage(self) -> "itkImageF3 const *":
        """GetSpeedImage(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> itkImageF3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSpeedImage(self)


    def GetAdvectionImage(self) -> "itkImageFAF33 const *":
        """GetAdvectionImage(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> itkImageFAF33"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionImage(self)


    def SetUseNegativeFeaturesOn(self) -> "void":
        """
        SetUseNegativeFeaturesOn(itkNarrowBandLevelSetImageFilterIF3IF3F self)

        THIS
        METHOD IS DEPRECATED AND SHOULD NOT BE USED. This method reverses the
        speed function direction, effectively changing inside feature values
        to outside feature values and vice versa. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOn(self)


    def SetUseNegativeFeaturesOff(self) -> "void":
        """SetUseNegativeFeaturesOff(itkNarrowBandLevelSetImageFilterIF3IF3F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOff(self)


    def SetUseNegativeFeatures(self, u: 'bool') -> "void":
        """
        SetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterIF3IF3F self, bool u)

        Set/Get the
        value of the UseNegativeFeatures flag. This method is deprecated. Use
        Set/Get ReverseExpansionDirection instead. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeatures(self, u)


    def GetUseNegativeFeatures(self) -> "bool":
        """GetUseNegativeFeatures(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetUseNegativeFeatures(self)


    def SetReverseExpansionDirection(self, _arg: 'bool const') -> "void":
        """
        SetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterIF3IF3F self, bool const _arg)

        Turn
        On/Off the flag which determines whether Positive or Negative speed
        terms will cause surface expansion. If set to TRUE then negative speed
        terms will cause the surface to expand and positive speed terms will
        cause the surface to contract. If set to FALSE (default) then positive
        speed terms will cause the surface to expand and negative speed terms
        will cause the surface to contract. This method can be safely used to
        reverse the expansion/contraction as appropriate to a particular
        application or data set. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetReverseExpansionDirection(self, _arg)


    def GetReverseExpansionDirection(self) -> "bool":
        """GetReverseExpansionDirection(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> bool"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetReverseExpansionDirection(self)


    def ReverseExpansionDirectionOn(self) -> "void":
        """ReverseExpansionDirectionOn(itkNarrowBandLevelSetImageFilterIF3IF3F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOn(self)


    def ReverseExpansionDirectionOff(self) -> "void":
        """ReverseExpansionDirectionOff(itkNarrowBandLevelSetImageFilterIF3IF3F self)"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOff(self)


    def SetFeatureScaling(self, v: 'float') -> "void":
        """
        SetFeatureScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self, float v)

        Combined scaling
        of the propagation and advection speed terms. You should use either
        this -or- Get/SetPropagationScaling and Get/SetAdvectionScaling (if
        appropriate). See subclasses for details on when and whether to set
        these parameters. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureScaling(self, v)


    def SetPropagationScaling(self, v: 'float') -> "void":
        """
        SetPropagationScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self, float v)

        Set/Get the
        scaling of the propagation speed. Setting the FeatureScaling parameter
        overrides any previous values set for PropagationScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetPropagationScaling(self, v)


    def GetPropagationScaling(self) -> "float":
        """GetPropagationScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetPropagationScaling(self)


    def SetAdvectionScaling(self, v: 'float') -> "void":
        """
        SetAdvectionScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self, float v)

        Set/Get the
        scaling of the advection field. Setting the FeatureScaling parameter
        will override any existing value for AdvectionScaling. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetAdvectionScaling(self, v)


    def GetAdvectionScaling(self) -> "float":
        """GetAdvectionScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionScaling(self)


    def SetCurvatureScaling(self, v: 'float') -> "void":
        """
        SetCurvatureScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self, float v)

        Set/Get the
        scaling of the curvature. Use this parameter to increase the influence
        of curvature on the movement of the surface. Higher values relative to
        Advection and Propagation values will give smoother surfaces. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetCurvatureScaling(self, v)


    def GetCurvatureScaling(self) -> "float":
        """GetCurvatureScaling(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetCurvatureScaling(self)


    def SetSegmentationFunction(self, s: 'itkSegmentationLevelSetFunctionIF3IF3') -> "void":
        """
        SetSegmentationFunction(itkNarrowBandLevelSetImageFilterIF3IF3F self, itkSegmentationLevelSetFunctionIF3IF3 s)

        Set the
        segmentation function. In general, this should only be called by a
        subclass of this object. It is made public to allow itk::Command
        objects access. 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetSegmentationFunction(self, s)


    def GetSegmentationFunction(self) -> "itkSegmentationLevelSetFunctionIF3IF3 *":
        """GetSegmentationFunction(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> itkSegmentationLevelSetFunctionIF3IF3"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSegmentationFunction(self)


    def SetMaximumIterations(self, i: 'unsigned int') -> "void":
        """
        SetMaximumIterations(itkNarrowBandLevelSetImageFilterIF3IF3F self, unsigned int i)

        Set/Get the
        maximum number of iterations allowed for the solver. This prevents
        infinite loops if a solution "bounces". 
        """
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetMaximumIterations(self, i)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkNarrowBandLevelSetImageFilterIF3IF3F self) -> unsigned int"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetMaximumIterations(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterIF3IF3F"""
        return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandLevelSetImageFilterIF3IF3F

        Create a new object of the class itkNarrowBandLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandLevelSetImageFilterIF3IF3F.SetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureImage, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetFeatureImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetFeatureImage, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetInitialImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetInitialImage, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetSpeedImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSpeedImage, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetAdvectionImage = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionImage, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetUseNegativeFeaturesOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOn, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetUseNegativeFeaturesOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOff, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetUseNegativeFeatures = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetUseNegativeFeatures, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetReverseExpansionDirection = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetReverseExpansionDirection, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.ReverseExpansionDirectionOn = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOn, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.ReverseExpansionDirectionOff = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOff, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetFeatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetPropagationScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetPropagationScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetPropagationScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetAdvectionScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetCurvatureScaling = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetCurvatureScaling, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetSegmentationFunction = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSegmentationFunction, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.SetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetMaximumIterations, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F.GetMaximumIterations = new_instancemethod(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetMaximumIterations, None, itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F_swigregister = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_swigregister
itkNarrowBandLevelSetImageFilterIF3IF3F_swigregister(itkNarrowBandLevelSetImageFilterIF3IF3F)

def itkNarrowBandLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkNarrowBandLevelSetImageFilterIF3IF3F *":
    """itkNarrowBandLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkNarrowBandLevelSetImageFilterIF3IF3F"""
    return _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def narrow_band_level_set_image_filter(*args, **kwargs):
    """Procedural interface for NarrowBandLevelSetImageFilter"""
    import itk
    instance = itk.NarrowBandLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def narrow_band_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NarrowBandLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NarrowBandLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.NarrowBandLevelSetImageFilter

    narrow_band_level_set_image_filter.__doc__ = filter_object.__doc__
    narrow_band_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    narrow_band_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    narrow_band_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



