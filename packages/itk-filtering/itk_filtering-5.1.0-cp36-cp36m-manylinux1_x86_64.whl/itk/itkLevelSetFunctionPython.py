# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLevelSetFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLevelSetFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkLevelSetFunctionPython
            return _itkLevelSetFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLevelSetFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLevelSetFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLevelSetFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import ITKCommonBasePython
import itkSizePython
import itkFiniteDifferenceFunctionPython
import itkCovariantVectorPython

def itkLevelSetFunctionID3_New():
  return itkLevelSetFunctionID3.New()


def itkLevelSetFunctionID2_New():
  return itkLevelSetFunctionID2.New()


def itkLevelSetFunctionIF3_New():
  return itkLevelSetFunctionIF3.New()


def itkLevelSetFunctionIF2_New():
  return itkLevelSetFunctionIF2.New()

class itkLevelSetFunctionID2(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2):
    """


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionID2_Pointer":
        """__New_orig__() -> itkLevelSetFunctionID2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionID2_Pointer":
        """Clone(itkLevelSetFunctionID2 self) -> itkLevelSetFunctionID2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "itkFixedArrayD2":
        """
        AdvectionField(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2=None) -> itkFixedArrayD2
        AdvectionField(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> itkFixedArrayD2

        Advection field.
        Default implementation returns a vector of zeros. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        PropagationSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2=None) -> double
        PropagationSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double

        Propagation speed.
        This term controls surface expansion/contraction. Default
        implementation returns zero. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        CurvatureSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2=None) -> double
        CurvatureSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double

        Curvature speed. Can
        be used to spatially modify the effects of curvature . The default
        implementation returns one. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2=None) -> double
        LaplacianSmoothingSpeed(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double

        Laplacian
        smoothing speed. Can be used to spatially modify the effects of
        laplacian smoothing of the level set function 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'double const') -> "void":
        """
        SetAdvectionWeight(itkLevelSetFunctionID2 self, double const a)

        Alpha. Scales
        all advection term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "double":
        """GetAdvectionWeight(itkLevelSetFunctionID2 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'double const') -> "void":
        """
        SetPropagationWeight(itkLevelSetFunctionID2 self, double const p)

        Beta. Scales
        all propagation term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "double":
        """GetPropagationWeight(itkLevelSetFunctionID2 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'double const') -> "void":
        """
        SetCurvatureWeight(itkLevelSetFunctionID2 self, double const c)

        Gamma. Scales
        all curvature weight values 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "double":
        """GetCurvatureWeight(itkLevelSetFunctionID2 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'double const') -> "void":
        """
        SetLaplacianSmoothingWeight(itkLevelSetFunctionID2 self, double const c)

        Weight
        of the laplacian smoothing term 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "double":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionID2 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'double const') -> "void":
        """
        SetEpsilonMagnitude(itkLevelSetFunctionID2 self, double const e)

        Epsilon. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "double":
        """GetEpsilonMagnitude(itkLevelSetFunctionID2 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "double":
        """
        ComputeUpdate(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & neighborhood, void * globalData, itkVectorF2 arg2) -> double
        ComputeUpdate(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & neighborhood, void * globalData) -> double

        Compute the equation
        value. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize2') -> "void":
        """
        Initialize(itkLevelSetFunctionID2 self, itkSize2 r)

        This method creates the
        appropriate member variable operators for the level-set calculations.
        The argument to this function is a the radius necessary for performing
        the level-set calculations. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd=None) -> double
        ComputeCurvatureTerm(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        ComputeMeanCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd=None) -> double
        ComputeMeanCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd=None) -> double
        ComputeMinimalCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionID2::GlobalDataStruct *'=None) -> "double":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd=None) -> double
        Compute3DMinimalCurvature(itkLevelSetFunctionID2 self, itk::ConstNeighborhoodIterator< itk::Image< double,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,2 >,itk::Image< double,2 > > > const & arg0, itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionID2 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionID2 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionID2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionID2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID2

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionID2 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionID2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID2

        Create a new object of the class itkLevelSetFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionID2.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Clone, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff, None, itkLevelSetFunctionID2)
itkLevelSetFunctionID2_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_swigregister
itkLevelSetFunctionID2_swigregister(itkLevelSetFunctionID2)

def itkLevelSetFunctionID2___New_orig__() -> "itkLevelSetFunctionID2_Pointer":
    """itkLevelSetFunctionID2___New_orig__() -> itkLevelSetFunctionID2_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__()

def itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionID2_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionID2_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionID2_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionID2 *":
    """itkLevelSetFunctionID2_cast(itkLightObject obj) -> itkLevelSetFunctionID2"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast(obj)

class itkLevelSetFunctionID3(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3):
    """


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionID3_Pointer":
        """__New_orig__() -> itkLevelSetFunctionID3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionID3_Pointer":
        """Clone(itkLevelSetFunctionID3 self) -> itkLevelSetFunctionID3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "itkFixedArrayD3":
        """
        AdvectionField(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2=None) -> itkFixedArrayD3
        AdvectionField(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> itkFixedArrayD3

        Advection field.
        Default implementation returns a vector of zeros. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        PropagationSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2=None) -> double
        PropagationSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double

        Propagation speed.
        This term controls surface expansion/contraction. Default
        implementation returns zero. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        CurvatureSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2=None) -> double
        CurvatureSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double

        Curvature speed. Can
        be used to spatially modify the effects of curvature . The default
        implementation returns one. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2=None) -> double
        LaplacianSmoothingSpeed(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double

        Laplacian
        smoothing speed. Can be used to spatially modify the effects of
        laplacian smoothing of the level set function 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'double const') -> "void":
        """
        SetAdvectionWeight(itkLevelSetFunctionID3 self, double const a)

        Alpha. Scales
        all advection term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "double":
        """GetAdvectionWeight(itkLevelSetFunctionID3 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'double const') -> "void":
        """
        SetPropagationWeight(itkLevelSetFunctionID3 self, double const p)

        Beta. Scales
        all propagation term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "double":
        """GetPropagationWeight(itkLevelSetFunctionID3 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'double const') -> "void":
        """
        SetCurvatureWeight(itkLevelSetFunctionID3 self, double const c)

        Gamma. Scales
        all curvature weight values 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "double":
        """GetCurvatureWeight(itkLevelSetFunctionID3 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'double const') -> "void":
        """
        SetLaplacianSmoothingWeight(itkLevelSetFunctionID3 self, double const c)

        Weight
        of the laplacian smoothing term 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "double":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionID3 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'double const') -> "void":
        """
        SetEpsilonMagnitude(itkLevelSetFunctionID3 self, double const e)

        Epsilon. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "double":
        """GetEpsilonMagnitude(itkLevelSetFunctionID3 self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "double":
        """
        ComputeUpdate(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & neighborhood, void * globalData, itkVectorF3 arg2) -> double
        ComputeUpdate(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & neighborhood, void * globalData) -> double

        Compute the equation
        value. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize3') -> "void":
        """
        Initialize(itkLevelSetFunctionID3 self, itkSize3 r)

        This method creates the
        appropriate member variable operators for the level-set calculations.
        The argument to this function is a the radius necessary for performing
        the level-set calculations. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd=None) -> double
        ComputeCurvatureTerm(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        ComputeMeanCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd=None) -> double
        ComputeMeanCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd=None) -> double
        ComputeMinimalCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionID3::GlobalDataStruct *'=None) -> "double":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd=None) -> double
        Compute3DMinimalCurvature(itkLevelSetFunctionID3 self, itk::ConstNeighborhoodIterator< itk::Image< double,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double,3 >,itk::Image< double,3 > > > const & arg0, itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionID3 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionID3 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionID3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionID3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID3

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionID3 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionID3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID3

        Create a new object of the class itkLevelSetFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionID3.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Clone, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff, None, itkLevelSetFunctionID3)
itkLevelSetFunctionID3_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_swigregister
itkLevelSetFunctionID3_swigregister(itkLevelSetFunctionID3)

def itkLevelSetFunctionID3___New_orig__() -> "itkLevelSetFunctionID3_Pointer":
    """itkLevelSetFunctionID3___New_orig__() -> itkLevelSetFunctionID3_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__()

def itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionID3_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionID3_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionID3_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionID3 *":
    """itkLevelSetFunctionID3_cast(itkLightObject obj) -> itkLevelSetFunctionID3"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast(obj)

class itkLevelSetFunctionIF2(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2):
    """


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionIF2_Pointer":
        """__New_orig__() -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionIF2_Pointer":
        """Clone(itkLevelSetFunctionIF2 self) -> itkLevelSetFunctionIF2_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "itkFixedArrayF2":
        """
        AdvectionField(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> itkFixedArrayF2
        AdvectionField(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> itkFixedArrayF2

        Advection field.
        Default implementation returns a vector of zeros. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        PropagationSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        PropagationSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float

        Propagation speed.
        This term controls surface expansion/contraction. Default
        implementation returns zero. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        CurvatureSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        CurvatureSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float

        Curvature speed. Can
        be used to spatially modify the effects of curvature . The default
        implementation returns one. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', arg2: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2=None) -> float
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float

        Laplacian
        smoothing speed. Can be used to spatially modify the effects of
        laplacian smoothing of the level set function 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'float const') -> "void":
        """
        SetAdvectionWeight(itkLevelSetFunctionIF2 self, float const a)

        Alpha. Scales
        all advection term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "float":
        """GetAdvectionWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'float const') -> "void":
        """
        SetPropagationWeight(itkLevelSetFunctionIF2 self, float const p)

        Beta. Scales
        all propagation term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "float":
        """GetPropagationWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'float const') -> "void":
        """
        SetCurvatureWeight(itkLevelSetFunctionIF2 self, float const c)

        Gamma. Scales
        all curvature weight values 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "float":
        """GetCurvatureWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'float const') -> "void":
        """
        SetLaplacianSmoothingWeight(itkLevelSetFunctionIF2 self, float const c)

        Weight
        of the laplacian smoothing term 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "float":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'float const') -> "void":
        """
        SetEpsilonMagnitude(itkLevelSetFunctionIF2 self, float const e)

        Epsilon. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "float":
        """GetEpsilonMagnitude(itkLevelSetFunctionIF2 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData, itkVectorF2 arg2) -> float
        ComputeUpdate(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & neighborhood, void * globalData) -> float

        Compute the equation
        value. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize2') -> "void":
        """
        Initialize(itkLevelSetFunctionIF2 self, itkSize2 r)

        This method creates the
        appropriate member variable operators for the level-set calculations.
        The argument to this function is a the radius necessary for performing
        the level-set calculations. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeCurvatureTerm(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMeanCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeMeanCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        ComputeMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const &', arg1: 'itkVectorF2', gd: 'itkLevelSetFunctionIF2::GlobalDataStruct *'=None) -> "float":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd=None) -> float
        Compute3DMinimalCurvature(itkLevelSetFunctionIF2 self, itk::ConstNeighborhoodIterator< itk::Image< float,2 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,2 >,itk::Image< float,2 > > > const & arg0, itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionIF2 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionIF2 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionIF2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionIF2 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF2

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF2 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF2

        Create a new object of the class itkLevelSetFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF2.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Clone, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff, None, itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_swigregister
itkLevelSetFunctionIF2_swigregister(itkLevelSetFunctionIF2)

def itkLevelSetFunctionIF2___New_orig__() -> "itkLevelSetFunctionIF2_Pointer":
    """itkLevelSetFunctionIF2___New_orig__() -> itkLevelSetFunctionIF2_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

def itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF2_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF2 *":
    """itkLevelSetFunctionIF2_cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(obj)

class itkLevelSetFunctionIF3(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3):
    """


    The LevelSetFunction class is a generic function object which can be
    used to create a level set method filter when combined with an
    appropriate finite difference image filter. (See
    FiniteDifferenceImageFilter.)

    LevelSetFunction implements a generic level set function. This
    function is an expanded form of the basic equation developed in [1].

    $\\phi_{t} + \\alpha \\stackrel{\\rightharpoonup}{A}(\\mathb
    f{x})\\cdot\\nabla\\phi + \\beta
    P(\\mathbf{x})\\mid\\nabla\\phi\\mid = \\gamma
    Z(\\mathbf{x})\\kappa\\mid\\nabla\\phi\\mid$

    where $ \\stackrel{\\rightharpoonup}{A} $ is an advection term, $
    P $ is a propagation (growth) term, and $ Z $ is a spatial modifier
    term for the mean curvature $ \\kappa $. $ \\alpha $, $ \\beta
    $, and $ \\gamma $ are all scalar constants.

    Terms in the equation above are supplied through virtual methods,
    which must be subclassed to complete an implementation. Terms can be
    eliminated from the equation by setting the corresponding constants to
    zero. A wide variety of level set methods can be implemented by
    subclassing this basic equation.

    In ITK, the usual sign convention is that the INSIDE of a surface
    contains NEGATIVE values and the OUTSIDE of the surface contains
    POSITIVE values.

    WARNING:  You MUST call Initialize() in the constructor of subclasses
    of this object to set it up properly to do level-set Calculations. The
    argument that you pass Initialize is the radius of the neighborhood
    needed to perform the calculations. If your subclass does not do any
    additional neighborhood processing, then the default radius should be
    1 in each direction. REFERENCES

    [1] Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionIF3_Pointer":
        """__New_orig__() -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionIF3_Pointer":
        """Clone(itkLevelSetFunctionIF3 self) -> itkLevelSetFunctionIF3_Pointer"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone(self)


    def AdvectionField(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "itkFixedArrayF3":
        """
        AdvectionField(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> itkFixedArrayF3
        AdvectionField(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> itkFixedArrayF3

        Advection field.
        Default implementation returns a vector of zeros. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField(self, arg0, arg1, arg2)


    def PropagationSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        PropagationSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        PropagationSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float

        Propagation speed.
        This term controls surface expansion/contraction. Default
        implementation returns zero. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed(self, arg0, arg1, arg2)


    def CurvatureSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        CurvatureSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        CurvatureSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float

        Curvature speed. Can
        be used to spatially modify the effects of curvature . The default
        implementation returns one. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed(self, arg0, arg1, arg2)


    def LaplacianSmoothingSpeed(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', arg2: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2=None) -> float
        LaplacianSmoothingSpeed(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float

        Laplacian
        smoothing speed. Can be used to spatially modify the effects of
        laplacian smoothing of the level set function 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed(self, arg0, arg1, arg2)


    def SetAdvectionWeight(self, a: 'float const') -> "void":
        """
        SetAdvectionWeight(itkLevelSetFunctionIF3 self, float const a)

        Alpha. Scales
        all advection term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight(self, a)


    def GetAdvectionWeight(self) -> "float":
        """GetAdvectionWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight(self)


    def SetPropagationWeight(self, p: 'float const') -> "void":
        """
        SetPropagationWeight(itkLevelSetFunctionIF3 self, float const p)

        Beta. Scales
        all propagation term values. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight(self, p)


    def GetPropagationWeight(self) -> "float":
        """GetPropagationWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight(self)


    def SetCurvatureWeight(self, c: 'float const') -> "void":
        """
        SetCurvatureWeight(itkLevelSetFunctionIF3 self, float const c)

        Gamma. Scales
        all curvature weight values 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight(self, c)


    def GetCurvatureWeight(self) -> "float":
        """GetCurvatureWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight(self)


    def SetLaplacianSmoothingWeight(self, c: 'float const') -> "void":
        """
        SetLaplacianSmoothingWeight(itkLevelSetFunctionIF3 self, float const c)

        Weight
        of the laplacian smoothing term 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight(self, c)


    def GetLaplacianSmoothingWeight(self) -> "float":
        """GetLaplacianSmoothingWeight(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight(self)


    def SetEpsilonMagnitude(self, e: 'float const') -> "void":
        """
        SetEpsilonMagnitude(itkLevelSetFunctionIF3 self, float const e)

        Epsilon. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude(self, e)


    def GetEpsilonMagnitude(self) -> "float":
        """GetEpsilonMagnitude(itkLevelSetFunctionIF3 self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude(self)


    def ComputeUpdate(self, *args) -> "float":
        """
        ComputeUpdate(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData, itkVectorF3 arg2) -> float
        ComputeUpdate(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & neighborhood, void * globalData) -> float

        Compute the equation
        value. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate(self, *args)


    def Initialize(self, r: 'itkSize3') -> "void":
        """
        Initialize(itkLevelSetFunctionIF3 self, itkSize3 r)

        This method creates the
        appropriate member variable operators for the level-set calculations.
        The argument to this function is a the radius necessary for performing
        the level-set calculations. 
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize(self, r)


    def ComputeCurvatureTerm(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeCurvatureTerm(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeCurvatureTerm(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm(self, arg0, arg1, gd)


    def ComputeMeanCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMeanCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeMeanCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature(self, arg0, arg1, gd)


    def ComputeMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        ComputeMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        ComputeMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature(self, arg0, arg1, gd)


    def Compute3DMinimalCurvature(self, arg0: 'itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const &', arg1: 'itkVectorF3', gd: 'itkLevelSetFunctionIF3::GlobalDataStruct *'=None) -> "float":
        """
        Compute3DMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd=None) -> float
        Compute3DMinimalCurvature(itkLevelSetFunctionIF3 self, itk::ConstNeighborhoodIterator< itk::Image< float,3 >,itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float,3 >,itk::Image< float,3 > > > const & arg0, itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature(self, arg0, arg1, gd)


    def SetUseMinimalCurvature(self, b: 'bool') -> "void":
        """SetUseMinimalCurvature(itkLevelSetFunctionIF3 self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature(self, b)


    def GetUseMinimalCurvature(self) -> "bool":
        """GetUseMinimalCurvature(itkLevelSetFunctionIF3 self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature(self)


    def UseMinimalCurvatureOn(self) -> "void":
        """UseMinimalCurvatureOn(itkLevelSetFunctionIF3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn(self)


    def UseMinimalCurvatureOff(self) -> "void":
        """UseMinimalCurvatureOff(itkLevelSetFunctionIF3 self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff(self)


    def SetMaximumCurvatureTimeStep(n: 'double') -> "void":
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)

    def GetMaximumCurvatureTimeStep() -> "double":
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)

    def SetMaximumPropagationTimeStep(n: 'double') -> "void":
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)

    def GetMaximumPropagationTimeStep() -> "double":
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF3

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF3 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF3

        Create a new object of the class itkLevelSetFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF3.Clone = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Clone, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff, None, itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_swigregister
itkLevelSetFunctionIF3_swigregister(itkLevelSetFunctionIF3)

def itkLevelSetFunctionIF3___New_orig__() -> "itkLevelSetFunctionIF3_Pointer":
    """itkLevelSetFunctionIF3___New_orig__() -> itkLevelSetFunctionIF3_Pointer"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

def itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(n)

def itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep() -> "double":
    """itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n: 'double') -> "void":
    """itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(double n)"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(n)

def itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep() -> "double":
    """itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep() -> double"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF3_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionIF3 *":
    """itkLevelSetFunctionIF3_cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
    return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(obj)



