# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSparseFieldLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSparseFieldLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSparseFieldLevelSetImageFilterPython
            return _itkSparseFieldLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSparseFieldLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSparseFieldLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSparseFieldLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkFiniteDifferenceImageFilterPython
import itkFiniteDifferenceFunctionPython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def itkSparseFieldLayerSFLSNI3_New():
  return itkSparseFieldLayerSFLSNI3.New()


def itkSparseFieldLayerSFLSNI2_New():
  return itkSparseFieldLayerSFLSNI2.New()


def itkSparseFieldLevelSetImageFilterID3ID3_New():
  return itkSparseFieldLevelSetImageFilterID3ID3.New()


def itkSparseFieldLevelSetImageFilterID2ID2_New():
  return itkSparseFieldLevelSetImageFilterID2ID2.New()


def itkSparseFieldLevelSetImageFilterIF3IF3_New():
  return itkSparseFieldLevelSetImageFilterIF3IF3.New()


def itkSparseFieldLevelSetImageFilterIF2IF2_New():
  return itkSparseFieldLevelSetImageFilterIF2IF2.New()

class itkSparseFieldLayerSFLSNI2(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerSFLSNI2_Pointer":
        """__New_orig__() -> itkSparseFieldLayerSFLSNI2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerSFLSNI2_Pointer":
        """Clone(itkSparseFieldLayerSFLSNI2 self) -> itkSparseFieldLayerSFLSNI2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Clone(self)


    def Front(self, *args) -> "itkSparseFieldLevelSetNodeI2 const *":
        """
        Front(itkSparseFieldLayerSFLSNI2 self) -> itkSparseFieldLevelSetNodeI2
        Front(itkSparseFieldLayerSFLSNI2 self) -> itkSparseFieldLevelSetNodeI2

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerSFLSNI2 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_PopFront(self)


    def PushFront(self, n: 'itkSparseFieldLevelSetNodeI2') -> "void":
        """
        PushFront(itkSparseFieldLayerSFLSNI2 self, itkSparseFieldLevelSetNodeI2 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_PushFront(self, n)


    def Unlink(self, n: 'itkSparseFieldLevelSetNodeI2') -> "void":
        """
        Unlink(itkSparseFieldLayerSFLSNI2 self, itkSparseFieldLevelSetNodeI2 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerSFLSNI2 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerSFLSNI2 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerSFLSNI2::RegionType,std::allocator< itkSparseFieldLayerSFLSNI2::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerSFLSNI2 self, int num) -> std::vector< itkSparseFieldLayerSFLSNI2::RegionType,std::allocator< itkSparseFieldLayerSFLSNI2::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerSFLSNI2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerSFLSNI2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerSFLSNI2"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerSFLSNI2

        Create a new object of the class itkSparseFieldLayerSFLSNI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerSFLSNI2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerSFLSNI2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerSFLSNI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerSFLSNI2.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Clone, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.Front = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Front, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.PopFront = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_PopFront, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.PushFront = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_PushFront, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.Unlink = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Unlink, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.Empty = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Empty, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.Size = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_Size, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2.SplitRegions = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_SplitRegions, None, itkSparseFieldLayerSFLSNI2)
itkSparseFieldLayerSFLSNI2_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_swigregister
itkSparseFieldLayerSFLSNI2_swigregister(itkSparseFieldLayerSFLSNI2)

def itkSparseFieldLayerSFLSNI2___New_orig__() -> "itkSparseFieldLayerSFLSNI2_Pointer":
    """itkSparseFieldLayerSFLSNI2___New_orig__() -> itkSparseFieldLayerSFLSNI2_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2___New_orig__()

def itkSparseFieldLayerSFLSNI2_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerSFLSNI2 *":
    """itkSparseFieldLayerSFLSNI2_cast(itkLightObject obj) -> itkSparseFieldLayerSFLSNI2"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI2_cast(obj)

class itkSparseFieldLayerSFLSNI3(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerSFLSNI3_Pointer":
        """__New_orig__() -> itkSparseFieldLayerSFLSNI3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerSFLSNI3_Pointer":
        """Clone(itkSparseFieldLayerSFLSNI3 self) -> itkSparseFieldLayerSFLSNI3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Clone(self)


    def Front(self, *args) -> "itkSparseFieldLevelSetNodeI3 const *":
        """
        Front(itkSparseFieldLayerSFLSNI3 self) -> itkSparseFieldLevelSetNodeI3
        Front(itkSparseFieldLayerSFLSNI3 self) -> itkSparseFieldLevelSetNodeI3

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerSFLSNI3 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_PopFront(self)


    def PushFront(self, n: 'itkSparseFieldLevelSetNodeI3') -> "void":
        """
        PushFront(itkSparseFieldLayerSFLSNI3 self, itkSparseFieldLevelSetNodeI3 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_PushFront(self, n)


    def Unlink(self, n: 'itkSparseFieldLevelSetNodeI3') -> "void":
        """
        Unlink(itkSparseFieldLayerSFLSNI3 self, itkSparseFieldLevelSetNodeI3 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerSFLSNI3 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerSFLSNI3 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerSFLSNI3::RegionType,std::allocator< itkSparseFieldLayerSFLSNI3::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerSFLSNI3 self, int num) -> std::vector< itkSparseFieldLayerSFLSNI3::RegionType,std::allocator< itkSparseFieldLayerSFLSNI3::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerSFLSNI3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerSFLSNI3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerSFLSNI3"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerSFLSNI3

        Create a new object of the class itkSparseFieldLayerSFLSNI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerSFLSNI3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerSFLSNI3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerSFLSNI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerSFLSNI3.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Clone, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.Front = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Front, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.PopFront = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_PopFront, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.PushFront = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_PushFront, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.Unlink = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Unlink, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.Empty = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Empty, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.Size = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_Size, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3.SplitRegions = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_SplitRegions, None, itkSparseFieldLayerSFLSNI3)
itkSparseFieldLayerSFLSNI3_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_swigregister
itkSparseFieldLayerSFLSNI3_swigregister(itkSparseFieldLayerSFLSNI3)

def itkSparseFieldLayerSFLSNI3___New_orig__() -> "itkSparseFieldLayerSFLSNI3_Pointer":
    """itkSparseFieldLayerSFLSNI3___New_orig__() -> itkSparseFieldLayerSFLSNI3_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3___New_orig__()

def itkSparseFieldLayerSFLSNI3_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerSFLSNI3 *":
    """itkSparseFieldLayerSFLSNI3_cast(itkLightObject obj) -> itkSparseFieldLayerSFLSNI3"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerSFLSNI3_cast(obj)

class itkSparseFieldLevelSetImageFilterID2ID2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID2ID2):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values INSIDE the surface will be NEGATIVE and values
    OUTSIDE the surface will be POSITIVE. The distance transform only
    holds for those indices in layers around the active layer. Elsewhere,
    the values are a fixed positive or negative that is one greater than
    the layer of greatest magnitude. In other words, if there are three
    layers, then inside values reach a minimum of -4.0 and outside values
    a maximum of 4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations require a
    minimum of 2 layers. Higher order derivatives and other geometrical
    measures may require more layers. If too few layers are specified,
    then the calculations will pull values from the background, which may
    consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLevelSetImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkSparseFieldLevelSetImageFilterID2ID2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLevelSetImageFilterID2ID2_Pointer":
        """Clone(itkSparseFieldLevelSetImageFilterID2ID2 self) -> itkSparseFieldLevelSetImageFilterID2ID2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_Clone(self)


    def SetNumberOfLayers(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfLayers(itkSparseFieldLevelSetImageFilterID2ID2 self, unsigned int const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers +1 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "unsigned int":
        """GetNumberOfLayers(itkSparseFieldLevelSetImageFilterID2ID2 self) -> unsigned int"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterID2ID2 self, double const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterID2ID2 self) -> double"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetIsoSurfaceValue(self)


    def SetInterpolateSurfaceLocation(self, _arg: 'bool const') -> "void":
        """
        SetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterID2ID2 self, bool const _arg)

        Get
        the RMS change calculated in the PREVIOUS iteration. This value is the
        square root of the average square of the change value of all pixels
        updated during the previous iteration. Get/Set the value of the
        InterpolateSurfaceLocation flag. This flag tells the solver whether or
        not to interpolate for the surface location when calculating change at
        a voxel location. Turned on by default. Some applications may not use
        this value and can safely turn the flag off. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetInterpolateSurfaceLocation(self, _arg)


    def GetInterpolateSurfaceLocation(self) -> "bool":
        """GetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterID2ID2 self) -> bool"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetInterpolateSurfaceLocation(self)


    def InterpolateSurfaceLocationOn(self) -> "void":
        """
        InterpolateSurfaceLocationOn(itkSparseFieldLevelSetImageFilterID2ID2 self)

        See
        Get/SetInterpolateSurfaceLocation 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_InterpolateSurfaceLocationOn(self)


    def InterpolateSurfaceLocationOff(self) -> "void":
        """InterpolateSurfaceLocationOff(itkSparseFieldLevelSetImageFilterID2ID2 self)"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_InterpolateSurfaceLocationOff(self)

    OutputEqualityComparableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterID2ID2"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLevelSetImageFilterID2ID2

        Create a new object of the class itkSparseFieldLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLevelSetImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLevelSetImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLevelSetImageFilterID2ID2.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_Clone, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.SetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.GetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.SetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.GetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.SetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_SetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.GetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_GetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.InterpolateSurfaceLocationOn = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_InterpolateSurfaceLocationOn, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2.InterpolateSurfaceLocationOff = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_InterpolateSurfaceLocationOff, None, itkSparseFieldLevelSetImageFilterID2ID2)
itkSparseFieldLevelSetImageFilterID2ID2_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_swigregister
itkSparseFieldLevelSetImageFilterID2ID2_swigregister(itkSparseFieldLevelSetImageFilterID2ID2)

def itkSparseFieldLevelSetImageFilterID2ID2___New_orig__() -> "itkSparseFieldLevelSetImageFilterID2ID2_Pointer":
    """itkSparseFieldLevelSetImageFilterID2ID2___New_orig__() -> itkSparseFieldLevelSetImageFilterID2ID2_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2___New_orig__()

def itkSparseFieldLevelSetImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterID2ID2 *":
    """itkSparseFieldLevelSetImageFilterID2ID2_cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterID2ID2"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2_cast(obj)

class itkSparseFieldLevelSetImageFilterID3ID3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID3ID3):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values INSIDE the surface will be NEGATIVE and values
    OUTSIDE the surface will be POSITIVE. The distance transform only
    holds for those indices in layers around the active layer. Elsewhere,
    the values are a fixed positive or negative that is one greater than
    the layer of greatest magnitude. In other words, if there are three
    layers, then inside values reach a minimum of -4.0 and outside values
    a maximum of 4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations require a
    minimum of 2 layers. Higher order derivatives and other geometrical
    measures may require more layers. If too few layers are specified,
    then the calculations will pull values from the background, which may
    consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLevelSetImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSparseFieldLevelSetImageFilterID3ID3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLevelSetImageFilterID3ID3_Pointer":
        """Clone(itkSparseFieldLevelSetImageFilterID3ID3 self) -> itkSparseFieldLevelSetImageFilterID3ID3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_Clone(self)


    def SetNumberOfLayers(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfLayers(itkSparseFieldLevelSetImageFilterID3ID3 self, unsigned int const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers +1 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "unsigned int":
        """GetNumberOfLayers(itkSparseFieldLevelSetImageFilterID3ID3 self) -> unsigned int"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterID3ID3 self, double const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterID3ID3 self) -> double"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetIsoSurfaceValue(self)


    def SetInterpolateSurfaceLocation(self, _arg: 'bool const') -> "void":
        """
        SetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterID3ID3 self, bool const _arg)

        Get
        the RMS change calculated in the PREVIOUS iteration. This value is the
        square root of the average square of the change value of all pixels
        updated during the previous iteration. Get/Set the value of the
        InterpolateSurfaceLocation flag. This flag tells the solver whether or
        not to interpolate for the surface location when calculating change at
        a voxel location. Turned on by default. Some applications may not use
        this value and can safely turn the flag off. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetInterpolateSurfaceLocation(self, _arg)


    def GetInterpolateSurfaceLocation(self) -> "bool":
        """GetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterID3ID3 self) -> bool"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetInterpolateSurfaceLocation(self)


    def InterpolateSurfaceLocationOn(self) -> "void":
        """
        InterpolateSurfaceLocationOn(itkSparseFieldLevelSetImageFilterID3ID3 self)

        See
        Get/SetInterpolateSurfaceLocation 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_InterpolateSurfaceLocationOn(self)


    def InterpolateSurfaceLocationOff(self) -> "void":
        """InterpolateSurfaceLocationOff(itkSparseFieldLevelSetImageFilterID3ID3 self)"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_InterpolateSurfaceLocationOff(self)

    OutputEqualityComparableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterID3ID3"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLevelSetImageFilterID3ID3

        Create a new object of the class itkSparseFieldLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLevelSetImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLevelSetImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLevelSetImageFilterID3ID3.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_Clone, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.SetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.GetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.SetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.GetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.SetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_SetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.GetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_GetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.InterpolateSurfaceLocationOn = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_InterpolateSurfaceLocationOn, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3.InterpolateSurfaceLocationOff = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_InterpolateSurfaceLocationOff, None, itkSparseFieldLevelSetImageFilterID3ID3)
itkSparseFieldLevelSetImageFilterID3ID3_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_swigregister
itkSparseFieldLevelSetImageFilterID3ID3_swigregister(itkSparseFieldLevelSetImageFilterID3ID3)

def itkSparseFieldLevelSetImageFilterID3ID3___New_orig__() -> "itkSparseFieldLevelSetImageFilterID3ID3_Pointer":
    """itkSparseFieldLevelSetImageFilterID3ID3___New_orig__() -> itkSparseFieldLevelSetImageFilterID3ID3_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3___New_orig__()

def itkSparseFieldLevelSetImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterID3ID3 *":
    """itkSparseFieldLevelSetImageFilterID3ID3_cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterID3ID3"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3_cast(obj)

class itkSparseFieldLevelSetImageFilterIF2IF2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values INSIDE the surface will be NEGATIVE and values
    OUTSIDE the surface will be POSITIVE. The distance transform only
    holds for those indices in layers around the active layer. Elsewhere,
    the values are a fixed positive or negative that is one greater than
    the layer of greatest magnitude. In other words, if there are three
    layers, then inside values reach a minimum of -4.0 and outside values
    a maximum of 4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations require a
    minimum of 2 layers. Higher order derivatives and other geometrical
    measures may require more layers. If too few layers are specified,
    then the calculations will pull values from the background, which may
    consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLevelSetImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLevelSetImageFilterIF2IF2_Pointer":
        """Clone(itkSparseFieldLevelSetImageFilterIF2IF2 self) -> itkSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_Clone(self)


    def SetNumberOfLayers(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfLayers(itkSparseFieldLevelSetImageFilterIF2IF2 self, unsigned int const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers +1 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "unsigned int":
        """GetNumberOfLayers(itkSparseFieldLevelSetImageFilterIF2IF2 self) -> unsigned int"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterIF2IF2 self, float const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterIF2IF2 self) -> float"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetIsoSurfaceValue(self)


    def SetInterpolateSurfaceLocation(self, _arg: 'bool const') -> "void":
        """
        SetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterIF2IF2 self, bool const _arg)

        Get
        the RMS change calculated in the PREVIOUS iteration. This value is the
        square root of the average square of the change value of all pixels
        updated during the previous iteration. Get/Set the value of the
        InterpolateSurfaceLocation flag. This flag tells the solver whether or
        not to interpolate for the surface location when calculating change at
        a voxel location. Turned on by default. Some applications may not use
        this value and can safely turn the flag off. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetInterpolateSurfaceLocation(self, _arg)


    def GetInterpolateSurfaceLocation(self) -> "bool":
        """GetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterIF2IF2 self) -> bool"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetInterpolateSurfaceLocation(self)


    def InterpolateSurfaceLocationOn(self) -> "void":
        """
        InterpolateSurfaceLocationOn(itkSparseFieldLevelSetImageFilterIF2IF2 self)

        See
        Get/SetInterpolateSurfaceLocation 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_InterpolateSurfaceLocationOn(self)


    def InterpolateSurfaceLocationOff(self) -> "void":
        """InterpolateSurfaceLocationOff(itkSparseFieldLevelSetImageFilterIF2IF2 self)"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_InterpolateSurfaceLocationOff(self)

    OutputEqualityComparableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterIF2IF2"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLevelSetImageFilterIF2IF2

        Create a new object of the class itkSparseFieldLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLevelSetImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLevelSetImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLevelSetImageFilterIF2IF2.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_Clone, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.SetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.GetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.SetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.GetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.SetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_SetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.GetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_GetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.InterpolateSurfaceLocationOn = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_InterpolateSurfaceLocationOn, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2.InterpolateSurfaceLocationOff = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_InterpolateSurfaceLocationOff, None, itkSparseFieldLevelSetImageFilterIF2IF2)
itkSparseFieldLevelSetImageFilterIF2IF2_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_swigregister
itkSparseFieldLevelSetImageFilterIF2IF2_swigregister(itkSparseFieldLevelSetImageFilterIF2IF2)

def itkSparseFieldLevelSetImageFilterIF2IF2___New_orig__() -> "itkSparseFieldLevelSetImageFilterIF2IF2_Pointer":
    """itkSparseFieldLevelSetImageFilterIF2IF2___New_orig__() -> itkSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2___New_orig__()

def itkSparseFieldLevelSetImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterIF2IF2 *":
    """itkSparseFieldLevelSetImageFilterIF2IF2_cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterIF2IF2"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2_cast(obj)

class itkSparseFieldLevelSetImageFilterIF3IF3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values INSIDE the surface will be NEGATIVE and values
    OUTSIDE the surface will be POSITIVE. The distance transform only
    holds for those indices in layers around the active layer. Elsewhere,
    the values are a fixed positive or negative that is one greater than
    the layer of greatest magnitude. In other words, if there are three
    layers, then inside values reach a minimum of -4.0 and outside values
    a maximum of 4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations require a
    minimum of 2 layers. Higher order derivatives and other geometrical
    measures may require more layers. If too few layers are specified,
    then the calculations will pull values from the background, which may
    consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLevelSetImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLevelSetImageFilterIF3IF3_Pointer":
        """Clone(itkSparseFieldLevelSetImageFilterIF3IF3 self) -> itkSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_Clone(self)


    def SetNumberOfLayers(self, _arg: 'unsigned int const') -> "void":
        """
        SetNumberOfLayers(itkSparseFieldLevelSetImageFilterIF3IF3 self, unsigned int const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers +1 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "unsigned int":
        """GetNumberOfLayers(itkSparseFieldLevelSetImageFilterIF3IF3 self) -> unsigned int"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterIF3IF3 self, float const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkSparseFieldLevelSetImageFilterIF3IF3 self) -> float"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetIsoSurfaceValue(self)


    def SetInterpolateSurfaceLocation(self, _arg: 'bool const') -> "void":
        """
        SetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterIF3IF3 self, bool const _arg)

        Get
        the RMS change calculated in the PREVIOUS iteration. This value is the
        square root of the average square of the change value of all pixels
        updated during the previous iteration. Get/Set the value of the
        InterpolateSurfaceLocation flag. This flag tells the solver whether or
        not to interpolate for the surface location when calculating change at
        a voxel location. Turned on by default. Some applications may not use
        this value and can safely turn the flag off. 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetInterpolateSurfaceLocation(self, _arg)


    def GetInterpolateSurfaceLocation(self) -> "bool":
        """GetInterpolateSurfaceLocation(itkSparseFieldLevelSetImageFilterIF3IF3 self) -> bool"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetInterpolateSurfaceLocation(self)


    def InterpolateSurfaceLocationOn(self) -> "void":
        """
        InterpolateSurfaceLocationOn(itkSparseFieldLevelSetImageFilterIF3IF3 self)

        See
        Get/SetInterpolateSurfaceLocation 
        """
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_InterpolateSurfaceLocationOn(self)


    def InterpolateSurfaceLocationOff(self) -> "void":
        """InterpolateSurfaceLocationOff(itkSparseFieldLevelSetImageFilterIF3IF3 self)"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_InterpolateSurfaceLocationOff(self)

    OutputEqualityComparableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterIF3IF3"""
        return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLevelSetImageFilterIF3IF3

        Create a new object of the class itkSparseFieldLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLevelSetImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLevelSetImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLevelSetImageFilterIF3IF3.Clone = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_Clone, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.SetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.GetNumberOfLayers = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetNumberOfLayers, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.SetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.GetIsoSurfaceValue = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetIsoSurfaceValue, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.SetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_SetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.GetInterpolateSurfaceLocation = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_GetInterpolateSurfaceLocation, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.InterpolateSurfaceLocationOn = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_InterpolateSurfaceLocationOn, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3.InterpolateSurfaceLocationOff = new_instancemethod(_itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_InterpolateSurfaceLocationOff, None, itkSparseFieldLevelSetImageFilterIF3IF3)
itkSparseFieldLevelSetImageFilterIF3IF3_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_swigregister
itkSparseFieldLevelSetImageFilterIF3IF3_swigregister(itkSparseFieldLevelSetImageFilterIF3IF3)

def itkSparseFieldLevelSetImageFilterIF3IF3___New_orig__() -> "itkSparseFieldLevelSetImageFilterIF3IF3_Pointer":
    """itkSparseFieldLevelSetImageFilterIF3IF3___New_orig__() -> itkSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3___New_orig__()

def itkSparseFieldLevelSetImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSparseFieldLevelSetImageFilterIF3IF3 *":
    """itkSparseFieldLevelSetImageFilterIF3IF3_cast(itkLightObject obj) -> itkSparseFieldLevelSetImageFilterIF3IF3"""
    return _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3_cast(obj)

class itkSparseFieldLevelSetNodeI2(object):
    """Proxy of C++ itkSparseFieldLevelSetNodeI2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkSparseFieldLevelSetNodeI2 self) -> itkSparseFieldLevelSetNodeI2
        __init__(itkSparseFieldLevelSetNodeI2 self, itkSparseFieldLevelSetNodeI2 arg0) -> itkSparseFieldLevelSetNodeI2
        """
        _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetNodeI2_swiginit(self, _itkSparseFieldLevelSetImageFilterPython.new_itkSparseFieldLevelSetNodeI2(*args))
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetNodeI2
itkSparseFieldLevelSetNodeI2_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetNodeI2_swigregister
itkSparseFieldLevelSetNodeI2_swigregister(itkSparseFieldLevelSetNodeI2)

class itkSparseFieldLevelSetNodeI3(object):
    """Proxy of C++ itkSparseFieldLevelSetNodeI3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkSparseFieldLevelSetNodeI3 self) -> itkSparseFieldLevelSetNodeI3
        __init__(itkSparseFieldLevelSetNodeI3 self, itkSparseFieldLevelSetNodeI3 arg0) -> itkSparseFieldLevelSetNodeI3
        """
        _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetNodeI3_swiginit(self, _itkSparseFieldLevelSetImageFilterPython.new_itkSparseFieldLevelSetNodeI3(*args))
    __swig_destroy__ = _itkSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLevelSetNodeI3
itkSparseFieldLevelSetNodeI3_swigregister = _itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetNodeI3_swigregister
itkSparseFieldLevelSetNodeI3_swigregister(itkSparseFieldLevelSetNodeI3)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def sparse_field_level_set_image_filter(*args, **kwargs):
    """Procedural interface for SparseFieldLevelSetImageFilter"""
    import itk
    instance = itk.SparseFieldLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sparse_field_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SparseFieldLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SparseFieldLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.SparseFieldLevelSetImageFilter

    sparse_field_level_set_image_filter.__doc__ = filter_object.__doc__
    sparse_field_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    sparse_field_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    sparse_field_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



