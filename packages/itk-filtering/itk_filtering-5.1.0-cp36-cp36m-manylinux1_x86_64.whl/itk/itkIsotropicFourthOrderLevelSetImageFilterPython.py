# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkIsotropicFourthOrderLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkIsotropicFourthOrderLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkIsotropicFourthOrderLevelSetImageFilterPython
            return _itkIsotropicFourthOrderLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkIsotropicFourthOrderLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkIsotropicFourthOrderLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkIsotropicFourthOrderLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSparseFieldFourthOrderLevelSetImageFilterPython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkSparseFieldLevelSetImageFilterPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkFiniteDifferenceImageFilterPython
import itkFiniteDifferenceFunctionPython
import itkCovariantVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkLevelSetFunctionPython

def itkIsotropicFourthOrderLevelSetImageFilterID3ID3_New():
  return itkIsotropicFourthOrderLevelSetImageFilterID3ID3.New()


def itkIsotropicFourthOrderLevelSetImageFilterID2ID2_New():
  return itkIsotropicFourthOrderLevelSetImageFilterID2ID2.New()


def itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_New():
  return itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.New()


def itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_New():
  return itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.New()

class itkIsotropicFourthOrderLevelSetImageFilterID2ID2(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2):
    """


    This class implements the 4th-order level set isotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    isotropic surface smoothing algorithm. A feature preserving
    anisotropic variant of this algorithm is implemented in
    AnisotropicFourthOrderLevelSetImageFilter. PARAMETERS As mentioned
    before, the IsoSurfaceValue parameter chooses which isosurface of the
    input to process. The MaxFilterIterations parameter determine the
    number of iterations for which this filter will run. The more
    iterations, the more smoothing.

    C++ includes: itkIsotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
        """Clone(itkIsotropicFourthOrderLevelSetImageFilterID2ID2 self) -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterID2ID2 self) -> unsigned int"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkIsotropicFourthOrderLevelSetImageFilterPython.delete_itkIsotropicFourthOrderLevelSetImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2

        Create a new object of the class itkIsotropicFourthOrderLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsotropicFourthOrderLevelSetImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsotropicFourthOrderLevelSetImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsotropicFourthOrderLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsotropicFourthOrderLevelSetImageFilterID2ID2.Clone = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Clone, None, itkIsotropicFourthOrderLevelSetImageFilterID2ID2)
itkIsotropicFourthOrderLevelSetImageFilterID2ID2.GetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_GetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterID2ID2)
itkIsotropicFourthOrderLevelSetImageFilterID2ID2.SetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_SetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterID2ID2)
itkIsotropicFourthOrderLevelSetImageFilterID2ID2_swigregister = _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_swigregister
itkIsotropicFourthOrderLevelSetImageFilterID2ID2_swigregister(itkIsotropicFourthOrderLevelSetImageFilterID2ID2)

def itkIsotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
    """itkIsotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__()

def itkIsotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterID2ID2 *":
    """itkIsotropicFourthOrderLevelSetImageFilterID2ID2_cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterID2ID2"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj)

class itkIsotropicFourthOrderLevelSetImageFilterID3ID3(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3):
    """


    This class implements the 4th-order level set isotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    isotropic surface smoothing algorithm. A feature preserving
    anisotropic variant of this algorithm is implemented in
    AnisotropicFourthOrderLevelSetImageFilter. PARAMETERS As mentioned
    before, the IsoSurfaceValue parameter chooses which isosurface of the
    input to process. The MaxFilterIterations parameter determine the
    number of iterations for which this filter will run. The more
    iterations, the more smoothing.

    C++ includes: itkIsotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
        """Clone(itkIsotropicFourthOrderLevelSetImageFilterID3ID3 self) -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterID3ID3 self) -> unsigned int"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkIsotropicFourthOrderLevelSetImageFilterPython.delete_itkIsotropicFourthOrderLevelSetImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3

        Create a new object of the class itkIsotropicFourthOrderLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsotropicFourthOrderLevelSetImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsotropicFourthOrderLevelSetImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsotropicFourthOrderLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsotropicFourthOrderLevelSetImageFilterID3ID3.Clone = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Clone, None, itkIsotropicFourthOrderLevelSetImageFilterID3ID3)
itkIsotropicFourthOrderLevelSetImageFilterID3ID3.GetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_GetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterID3ID3)
itkIsotropicFourthOrderLevelSetImageFilterID3ID3.SetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_SetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterID3ID3)
itkIsotropicFourthOrderLevelSetImageFilterID3ID3_swigregister = _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_swigregister
itkIsotropicFourthOrderLevelSetImageFilterID3ID3_swigregister(itkIsotropicFourthOrderLevelSetImageFilterID3ID3)

def itkIsotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
    """itkIsotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__()

def itkIsotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterID3ID3 *":
    """itkIsotropicFourthOrderLevelSetImageFilterID3ID3_cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterID3ID3"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj)

class itkIsotropicFourthOrderLevelSetImageFilterIF2IF2(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2):
    """


    This class implements the 4th-order level set isotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    isotropic surface smoothing algorithm. A feature preserving
    anisotropic variant of this algorithm is implemented in
    AnisotropicFourthOrderLevelSetImageFilter. PARAMETERS As mentioned
    before, the IsoSurfaceValue parameter chooses which isosurface of the
    input to process. The MaxFilterIterations parameter determine the
    number of iterations for which this filter will run. The more
    iterations, the more smoothing.

    C++ includes: itkIsotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
        """Clone(itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 self) -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 self) -> unsigned int"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkIsotropicFourthOrderLevelSetImageFilterPython.delete_itkIsotropicFourthOrderLevelSetImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2

        Create a new object of the class itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.Clone = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Clone, None, itkIsotropicFourthOrderLevelSetImageFilterIF2IF2)
itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.GetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_GetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterIF2IF2)
itkIsotropicFourthOrderLevelSetImageFilterIF2IF2.SetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_SetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterIF2IF2)
itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister = _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister
itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister(itkIsotropicFourthOrderLevelSetImageFilterIF2IF2)

def itkIsotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
    """itkIsotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__()

def itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterIF2IF2 *":
    """itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterIF2IF2"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

class itkIsotropicFourthOrderLevelSetImageFilterIF3IF3(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3):
    """


    This class implements the 4th-order level set isotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    isotropic surface smoothing algorithm. A feature preserving
    anisotropic variant of this algorithm is implemented in
    AnisotropicFourthOrderLevelSetImageFilter. PARAMETERS As mentioned
    before, the IsoSurfaceValue parameter chooses which isosurface of the
    input to process. The MaxFilterIterations parameter determine the
    number of iterations for which this filter will run. The more
    iterations, the more smoothing.

    C++ includes: itkIsotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
        """Clone(itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 self) -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 self) -> unsigned int"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkIsotropicFourthOrderLevelSetImageFilterPython.delete_itkIsotropicFourthOrderLevelSetImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3"""
        return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3

        Create a new object of the class itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.Clone = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Clone, None, itkIsotropicFourthOrderLevelSetImageFilterIF3IF3)
itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.GetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_GetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterIF3IF3)
itkIsotropicFourthOrderLevelSetImageFilterIF3IF3.SetMaxFilterIteration = new_instancemethod(_itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_SetMaxFilterIteration, None, itkIsotropicFourthOrderLevelSetImageFilterIF3IF3)
itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister = _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister
itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister(itkIsotropicFourthOrderLevelSetImageFilterIF3IF3)

def itkIsotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__() -> "itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
    """itkIsotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__() -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__()

def itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkIsotropicFourthOrderLevelSetImageFilterIF3IF3 *":
    """itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_cast(itkLightObject obj) -> itkIsotropicFourthOrderLevelSetImageFilterIF3IF3"""
    return _itkIsotropicFourthOrderLevelSetImageFilterPython.itkIsotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def isotropic_fourth_order_level_set_image_filter(*args, **kwargs):
    """Procedural interface for IsotropicFourthOrderLevelSetImageFilter"""
    import itk
    instance = itk.IsotropicFourthOrderLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def isotropic_fourth_order_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IsotropicFourthOrderLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.IsotropicFourthOrderLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.IsotropicFourthOrderLevelSetImageFilter

    isotropic_fourth_order_level_set_image_filter.__doc__ = filter_object.__doc__
    isotropic_fourth_order_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    isotropic_fourth_order_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    isotropic_fourth_order_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



