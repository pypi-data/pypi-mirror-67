# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkHausdorffDistanceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHausdorffDistanceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkHausdorffDistanceImageFilterPython
            return _itkHausdorffDistanceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHausdorffDistanceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHausdorffDistanceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHausdorffDistanceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkSizePython
import itkOffsetPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkIndexPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkHausdorffDistanceImageFilterIUS3ID3_New():
  return itkHausdorffDistanceImageFilterIUS3ID3.New()


def itkHausdorffDistanceImageFilterIUS2ID2_New():
  return itkHausdorffDistanceImageFilterIUS2ID2.New()


def itkHausdorffDistanceImageFilterIUS3IF3_New():
  return itkHausdorffDistanceImageFilterIUS3IF3.New()


def itkHausdorffDistanceImageFilterIUS2IF2_New():
  return itkHausdorffDistanceImageFilterIUS2IF2.New()


def itkHausdorffDistanceImageFilterIUC3ID3_New():
  return itkHausdorffDistanceImageFilterIUC3ID3.New()


def itkHausdorffDistanceImageFilterIUC2ID2_New():
  return itkHausdorffDistanceImageFilterIUC2ID2.New()


def itkHausdorffDistanceImageFilterIUC3IF3_New():
  return itkHausdorffDistanceImageFilterIUC3IF3.New()


def itkHausdorffDistanceImageFilterIUC2IF2_New():
  return itkHausdorffDistanceImageFilterIUC2IF2.New()


def itkHausdorffDistanceImageFilterID3ID3_New():
  return itkHausdorffDistanceImageFilterID3ID3.New()


def itkHausdorffDistanceImageFilterID2ID2_New():
  return itkHausdorffDistanceImageFilterID2ID2.New()


def itkHausdorffDistanceImageFilterIF3IF3_New():
  return itkHausdorffDistanceImageFilterIF3IF3.New()


def itkHausdorffDistanceImageFilterIF2IF2_New():
  return itkHausdorffDistanceImageFilterIF2IF2.New()


def itkHausdorffDistanceImageFilterISS3ISS3_New():
  return itkHausdorffDistanceImageFilterISS3ISS3.New()


def itkHausdorffDistanceImageFilterISS2ISS2_New():
  return itkHausdorffDistanceImageFilterISS2ISS2.New()

class itkHausdorffDistanceImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterID2ID2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterID2ID2 self) -> itkHausdorffDistanceImageFilterID2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageD2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterID2ID2 self, itkImageD2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterID2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterID2ID2 self) -> itkImageD2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterID2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterID2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterID2ID2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterID2ID2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterID2ID2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterID2ID2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterID2ID2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Clone, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput1, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput2, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput1, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput2, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_swigregister
itkHausdorffDistanceImageFilterID2ID2_swigregister(itkHausdorffDistanceImageFilterID2ID2)

def itkHausdorffDistanceImageFilterID2ID2___New_orig__() -> "itkHausdorffDistanceImageFilterID2ID2_Pointer":
    """itkHausdorffDistanceImageFilterID2ID2___New_orig__() -> itkHausdorffDistanceImageFilterID2ID2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2___New_orig__()

def itkHausdorffDistanceImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterID2ID2 *":
    """itkHausdorffDistanceImageFilterID2ID2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterID2ID2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_cast(obj)

class itkHausdorffDistanceImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterID3ID3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterID3ID3 self) -> itkHausdorffDistanceImageFilterID3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageD3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterID3ID3 self, itkImageD3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterID3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageD3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterID3ID3 self) -> itkImageD3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterID3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterID3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterID3ID3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterID3ID3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterID3ID3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterID3ID3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterID3ID3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Clone, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput1, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput2, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput1, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput2, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_swigregister
itkHausdorffDistanceImageFilterID3ID3_swigregister(itkHausdorffDistanceImageFilterID3ID3)

def itkHausdorffDistanceImageFilterID3ID3___New_orig__() -> "itkHausdorffDistanceImageFilterID3ID3_Pointer":
    """itkHausdorffDistanceImageFilterID3ID3___New_orig__() -> itkHausdorffDistanceImageFilterID3ID3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3___New_orig__()

def itkHausdorffDistanceImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterID3ID3 *":
    """itkHausdorffDistanceImageFilterID3ID3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterID3ID3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_cast(obj)

class itkHausdorffDistanceImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIF2IF2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIF2IF2 self) -> itkHausdorffDistanceImageFilterIF2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageF2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIF2IF2 self, itkImageF2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIF2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIF2IF2 self) -> itkImageF2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIF2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIF2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIF2IF2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIF2IF2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIF2IF2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIF2IF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIF2IF2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Clone, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput1, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput2, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput1, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput2, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_swigregister
itkHausdorffDistanceImageFilterIF2IF2_swigregister(itkHausdorffDistanceImageFilterIF2IF2)

def itkHausdorffDistanceImageFilterIF2IF2___New_orig__() -> "itkHausdorffDistanceImageFilterIF2IF2_Pointer":
    """itkHausdorffDistanceImageFilterIF2IF2___New_orig__() -> itkHausdorffDistanceImageFilterIF2IF2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2___New_orig__()

def itkHausdorffDistanceImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIF2IF2 *":
    """itkHausdorffDistanceImageFilterIF2IF2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIF2IF2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_cast(obj)

class itkHausdorffDistanceImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIF3IF3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIF3IF3 self) -> itkHausdorffDistanceImageFilterIF3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageF3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIF3IF3 self, itkImageF3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIF3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageF3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIF3IF3 self) -> itkImageF3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIF3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIF3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIF3IF3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIF3IF3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIF3IF3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIF3IF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIF3IF3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Clone, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput1, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput2, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput1, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput2, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_swigregister
itkHausdorffDistanceImageFilterIF3IF3_swigregister(itkHausdorffDistanceImageFilterIF3IF3)

def itkHausdorffDistanceImageFilterIF3IF3___New_orig__() -> "itkHausdorffDistanceImageFilterIF3IF3_Pointer":
    """itkHausdorffDistanceImageFilterIF3IF3___New_orig__() -> itkHausdorffDistanceImageFilterIF3IF3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3___New_orig__()

def itkHausdorffDistanceImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIF3IF3 *":
    """itkHausdorffDistanceImageFilterIF3IF3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIF3IF3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_cast(obj)

class itkHausdorffDistanceImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterISS2ISS2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterISS2ISS2 self) -> itkHausdorffDistanceImageFilterISS2ISS2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Clone(self)


    def SetInput1(self, image: 'itkImageSS2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterISS2ISS2 self, itkImageSS2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterISS2ISS2 self) -> itkImageSS2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput1(self)


    def GetInput2(self) -> "itkImageSS2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterISS2ISS2 self) -> itkImageSS2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterISS2ISS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterISS2ISS2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterISS2ISS2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterISS2ISS2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterISS2ISS2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS2ISS2

        Create a new object of the class itkHausdorffDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterISS2ISS2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Clone, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput1, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput2, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput1, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput2, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_swigregister
itkHausdorffDistanceImageFilterISS2ISS2_swigregister(itkHausdorffDistanceImageFilterISS2ISS2)

def itkHausdorffDistanceImageFilterISS2ISS2___New_orig__() -> "itkHausdorffDistanceImageFilterISS2ISS2_Pointer":
    """itkHausdorffDistanceImageFilterISS2ISS2___New_orig__() -> itkHausdorffDistanceImageFilterISS2ISS2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2___New_orig__()

def itkHausdorffDistanceImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterISS2ISS2 *":
    """itkHausdorffDistanceImageFilterISS2ISS2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterISS2ISS2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_cast(obj)

class itkHausdorffDistanceImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterISS3ISS3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterISS3ISS3 self) -> itkHausdorffDistanceImageFilterISS3ISS3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Clone(self)


    def SetInput1(self, image: 'itkImageSS3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageSS3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterISS3ISS3 self, itkImageSS3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageSS3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterISS3ISS3 self) -> itkImageSS3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput1(self)


    def GetInput2(self) -> "itkImageSS3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterISS3ISS3 self) -> itkImageSS3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterISS3ISS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterISS3ISS3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterISS3ISS3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterISS3ISS3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterISS3ISS3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS3ISS3

        Create a new object of the class itkHausdorffDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterISS3ISS3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Clone, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput1, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput2, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput1, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput2, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_swigregister
itkHausdorffDistanceImageFilterISS3ISS3_swigregister(itkHausdorffDistanceImageFilterISS3ISS3)

def itkHausdorffDistanceImageFilterISS3ISS3___New_orig__() -> "itkHausdorffDistanceImageFilterISS3ISS3_Pointer":
    """itkHausdorffDistanceImageFilterISS3ISS3___New_orig__() -> itkHausdorffDistanceImageFilterISS3ISS3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3___New_orig__()

def itkHausdorffDistanceImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterISS3ISS3 *":
    """itkHausdorffDistanceImageFilterISS3ISS3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterISS3ISS3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_cast(obj)

class itkHausdorffDistanceImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUC2ID2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUC2ID2 self) -> itkHausdorffDistanceImageFilterIUC2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageUC2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUC2ID2 self, itkImageUC2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUC2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUC2ID2 self) -> itkImageUC2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUC2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUC2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUC2ID2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUC2ID2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUC2ID2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC2ID2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUC2ID2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Clone, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput1, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput2, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput1, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput2, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_swigregister
itkHausdorffDistanceImageFilterIUC2ID2_swigregister(itkHausdorffDistanceImageFilterIUC2ID2)

def itkHausdorffDistanceImageFilterIUC2ID2___New_orig__() -> "itkHausdorffDistanceImageFilterIUC2ID2_Pointer":
    """itkHausdorffDistanceImageFilterIUC2ID2___New_orig__() -> itkHausdorffDistanceImageFilterIUC2ID2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2___New_orig__()

def itkHausdorffDistanceImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC2ID2 *":
    """itkHausdorffDistanceImageFilterIUC2ID2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC2ID2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_cast(obj)

class itkHausdorffDistanceImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUC2IF2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUC2IF2 self) -> itkHausdorffDistanceImageFilterIUC2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageUC2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUC2IF2 self, itkImageUC2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUC2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUC2IF2 self) -> itkImageUC2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUC2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUC2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUC2IF2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUC2IF2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUC2IF2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC2IF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUC2IF2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Clone, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput1, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput2, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput1, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput2, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_swigregister
itkHausdorffDistanceImageFilterIUC2IF2_swigregister(itkHausdorffDistanceImageFilterIUC2IF2)

def itkHausdorffDistanceImageFilterIUC2IF2___New_orig__() -> "itkHausdorffDistanceImageFilterIUC2IF2_Pointer":
    """itkHausdorffDistanceImageFilterIUC2IF2___New_orig__() -> itkHausdorffDistanceImageFilterIUC2IF2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2___New_orig__()

def itkHausdorffDistanceImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC2IF2 *":
    """itkHausdorffDistanceImageFilterIUC2IF2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC2IF2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_cast(obj)

class itkHausdorffDistanceImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUC3ID3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUC3ID3 self) -> itkHausdorffDistanceImageFilterIUC3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageUC3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUC3ID3 self, itkImageUC3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUC3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUC3ID3 self) -> itkImageUC3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUC3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUC3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUC3ID3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUC3ID3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUC3ID3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC3ID3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUC3ID3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Clone, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput1, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput2, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput1, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput2, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_swigregister
itkHausdorffDistanceImageFilterIUC3ID3_swigregister(itkHausdorffDistanceImageFilterIUC3ID3)

def itkHausdorffDistanceImageFilterIUC3ID3___New_orig__() -> "itkHausdorffDistanceImageFilterIUC3ID3_Pointer":
    """itkHausdorffDistanceImageFilterIUC3ID3___New_orig__() -> itkHausdorffDistanceImageFilterIUC3ID3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3___New_orig__()

def itkHausdorffDistanceImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC3ID3 *":
    """itkHausdorffDistanceImageFilterIUC3ID3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC3ID3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_cast(obj)

class itkHausdorffDistanceImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUC3IF3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUC3IF3 self) -> itkHausdorffDistanceImageFilterIUC3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageUC3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUC3IF3 self, itkImageUC3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUC3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUC3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUC3IF3 self) -> itkImageUC3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUC3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUC3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUC3IF3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUC3IF3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUC3IF3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC3IF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUC3IF3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Clone, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput1, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput2, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput1, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput2, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_swigregister
itkHausdorffDistanceImageFilterIUC3IF3_swigregister(itkHausdorffDistanceImageFilterIUC3IF3)

def itkHausdorffDistanceImageFilterIUC3IF3___New_orig__() -> "itkHausdorffDistanceImageFilterIUC3IF3_Pointer":
    """itkHausdorffDistanceImageFilterIUC3IF3___New_orig__() -> itkHausdorffDistanceImageFilterIUC3IF3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3___New_orig__()

def itkHausdorffDistanceImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUC3IF3 *":
    """itkHausdorffDistanceImageFilterIUC3IF3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUC3IF3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_cast(obj)

class itkHausdorffDistanceImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUS2ID2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUS2ID2 self) -> itkHausdorffDistanceImageFilterIUS2ID2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Clone(self)


    def SetInput1(self, image: 'itkImageUS2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUS2ID2 self, itkImageUS2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUS2ID2 self, itkImageD2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUS2ID2 self) -> itkImageUS2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput1(self)


    def GetInput2(self) -> "itkImageD2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUS2ID2 self) -> itkImageD2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUS2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUS2ID2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUS2ID2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUS2ID2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS2ID2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUS2ID2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Clone, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput1, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput2, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput1, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput2, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_swigregister
itkHausdorffDistanceImageFilterIUS2ID2_swigregister(itkHausdorffDistanceImageFilterIUS2ID2)

def itkHausdorffDistanceImageFilterIUS2ID2___New_orig__() -> "itkHausdorffDistanceImageFilterIUS2ID2_Pointer":
    """itkHausdorffDistanceImageFilterIUS2ID2___New_orig__() -> itkHausdorffDistanceImageFilterIUS2ID2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2___New_orig__()

def itkHausdorffDistanceImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS2ID2 *":
    """itkHausdorffDistanceImageFilterIUS2ID2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS2ID2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_cast(obj)

class itkHausdorffDistanceImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUS2IF2_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUS2IF2 self) -> itkHausdorffDistanceImageFilterIUS2IF2_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Clone(self)


    def SetInput1(self, image: 'itkImageUS2') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUS2IF2 self, itkImageUS2 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF2') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUS2IF2 self, itkImageF2 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS2 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUS2IF2 self) -> itkImageUS2

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput1(self)


    def GetInput2(self) -> "itkImageF2 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUS2IF2 self) -> itkImageF2

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUS2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUS2IF2 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUS2IF2 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUS2IF2 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS2IF2"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUS2IF2.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Clone, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput1, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput2, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput1, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput2, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_swigregister
itkHausdorffDistanceImageFilterIUS2IF2_swigregister(itkHausdorffDistanceImageFilterIUS2IF2)

def itkHausdorffDistanceImageFilterIUS2IF2___New_orig__() -> "itkHausdorffDistanceImageFilterIUS2IF2_Pointer":
    """itkHausdorffDistanceImageFilterIUS2IF2___New_orig__() -> itkHausdorffDistanceImageFilterIUS2IF2_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2___New_orig__()

def itkHausdorffDistanceImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS2IF2 *":
    """itkHausdorffDistanceImageFilterIUS2IF2_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS2IF2"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_cast(obj)

class itkHausdorffDistanceImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUS3ID3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUS3ID3 self) -> itkHausdorffDistanceImageFilterIUS3ID3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Clone(self)


    def SetInput1(self, image: 'itkImageUS3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUS3ID3 self, itkImageUS3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageD3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUS3ID3 self, itkImageD3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUS3ID3 self) -> itkImageUS3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput1(self)


    def GetInput2(self) -> "itkImageD3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUS3ID3 self) -> itkImageD3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUS3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUS3ID3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUS3ID3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUS3ID3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS3ID3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUS3ID3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Clone, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput1, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput2, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput1, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput2, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_swigregister
itkHausdorffDistanceImageFilterIUS3ID3_swigregister(itkHausdorffDistanceImageFilterIUS3ID3)

def itkHausdorffDistanceImageFilterIUS3ID3___New_orig__() -> "itkHausdorffDistanceImageFilterIUS3ID3_Pointer":
    """itkHausdorffDistanceImageFilterIUS3ID3___New_orig__() -> itkHausdorffDistanceImageFilterIUS3ID3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3___New_orig__()

def itkHausdorffDistanceImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS3ID3 *":
    """itkHausdorffDistanceImageFilterIUS3ID3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS3ID3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_cast(obj)

class itkHausdorffDistanceImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter

    C++ includes: itkHausdorffDistanceImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkHausdorffDistanceImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkHausdorffDistanceImageFilterIUS3IF3_Pointer":
        """Clone(itkHausdorffDistanceImageFilterIUS3IF3 self) -> itkHausdorffDistanceImageFilterIUS3IF3_Pointer"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Clone(self)


    def SetInput1(self, image: 'itkImageUS3') -> "void":
        """
        SetInput1(itkHausdorffDistanceImageFilterIUS3IF3 self, itkImageUS3 image)

        Set the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput1(self, image)


    def SetInput2(self, image: 'itkImageF3') -> "void":
        """
        SetInput2(itkHausdorffDistanceImageFilterIUS3IF3 self, itkImageF3 image)

        Set the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput2(self, image)


    def GetInput1(self) -> "itkImageUS3 const *":
        """
        GetInput1(itkHausdorffDistanceImageFilterIUS3IF3 self) -> itkImageUS3

        Get the first input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput1(self)


    def GetInput2(self) -> "itkImageF3 const *":
        """
        GetInput2(itkHausdorffDistanceImageFilterIUS3IF3 self) -> itkImageF3

        Get the second input. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput2(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkHausdorffDistanceImageFilterIUS3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkHausdorffDistanceImageFilterIUS3IF3 self) -> bool"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing(self)


    def GetHausdorffDistance(self) -> "double":
        """
        GetHausdorffDistance(itkHausdorffDistanceImageFilterIUS3IF3 self) -> double

        Return the
        computed Hausdorff distance. 
        """
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetHausdorffDistance(self)


    def GetAverageHausdorffDistance(self) -> "double":
        """GetAverageHausdorffDistance(itkHausdorffDistanceImageFilterIUS3IF3 self) -> double"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance(self)

    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Input1HasNumericTraitsCheck
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS3IF3"""
        return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHausdorffDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHausdorffDistanceImageFilterIUS3IF3.Clone = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Clone, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.SetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput1, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.SetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput2, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.GetInput1 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput1, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.GetInput2 = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput2, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.SetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.GetUseImageSpacing = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.GetHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3.GetAverageHausdorffDistance = new_instancemethod(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance, None, itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3_swigregister = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_swigregister
itkHausdorffDistanceImageFilterIUS3IF3_swigregister(itkHausdorffDistanceImageFilterIUS3IF3)

def itkHausdorffDistanceImageFilterIUS3IF3___New_orig__() -> "itkHausdorffDistanceImageFilterIUS3IF3_Pointer":
    """itkHausdorffDistanceImageFilterIUS3IF3___New_orig__() -> itkHausdorffDistanceImageFilterIUS3IF3_Pointer"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3___New_orig__()

def itkHausdorffDistanceImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkHausdorffDistanceImageFilterIUS3IF3 *":
    """itkHausdorffDistanceImageFilterIUS3IF3_cast(itkLightObject obj) -> itkHausdorffDistanceImageFilterIUS3IF3"""
    return _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hausdorff_distance_image_filter(*args, **kwargs):
    """Procedural interface for HausdorffDistanceImageFilter"""
    import itk
    instance = itk.HausdorffDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hausdorff_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HausdorffDistanceImageFilter.values()[0]
    else:
        filter_object = itk.HausdorffDistanceImageFilter

    hausdorff_distance_image_filter.__doc__ = filter_object.__doc__
    hausdorff_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hausdorff_distance_image_filter.__doc__ += "Available Keyword Arguments:\n"
    hausdorff_distance_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



