# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkThresholdSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkThresholdSegmentationLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkThresholdSegmentationLevelSetImageFilterPython
            return _itkThresholdSegmentationLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkThresholdSegmentationLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkThresholdSegmentationLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkThresholdSegmentationLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSegmentationLevelSetImageFilterPython
import itkSparseFieldLevelSetImageFilterPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkFiniteDifferenceImageFilterPython
import itkFiniteDifferenceFunctionPython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython

def itkThresholdSegmentationLevelSetImageFilterID3ID3D_New():
  return itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()


def itkThresholdSegmentationLevelSetImageFilterIF3IF3F_New():
  return itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()


def itkThresholdSegmentationLevelSetImageFilterID2ID2D_New():
  return itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()


def itkThresholdSegmentationLevelSetImageFilterIF2IF2F_New():
  return itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()

class itkThresholdSegmentationLevelSetImageFilterID2ID2D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
        """__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
        """Clone(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_Clone(self)


    def SetUpperThreshold(self, v: 'double') -> "void":
        """
        SetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'double') -> "void":
        """SetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'double') -> "void":
        """
        SetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "double":
        """GetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'double') -> "void":
        """
        SetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "double":
        """GetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'double') -> "void":
        """
        SetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "double":
        """GetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance(self)

    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterID2ID2D"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkThresholdSegmentationLevelSetImageFilterID2ID2D.Clone = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_Clone, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister
itkThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister(itkThresholdSegmentationLevelSetImageFilterID2ID2D)

def itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
    """itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

def itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterID2ID2D *":
    """itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterID2ID2D"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

class itkThresholdSegmentationLevelSetImageFilterID3ID3D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
        """__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
        """Clone(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_Clone(self)


    def SetUpperThreshold(self, v: 'double') -> "void":
        """
        SetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'double') -> "void":
        """SetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'double') -> "void":
        """
        SetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "double":
        """GetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'double') -> "void":
        """
        SetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "double":
        """GetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'double') -> "void":
        """
        SetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "double":
        """GetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance(self)

    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterID3ID3D"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkThresholdSegmentationLevelSetImageFilterID3ID3D.Clone = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_Clone, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister
itkThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister(itkThresholdSegmentationLevelSetImageFilterID3ID3D)

def itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
    """itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

def itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterID3ID3D *":
    """itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterID3ID3D"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

class itkThresholdSegmentationLevelSetImageFilterIF2IF2F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """Clone(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone(self)


    def SetUpperThreshold(self, v: 'float') -> "void":
        """
        SetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'float') -> "void":
        """SetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'float') -> "void":
        """
        SetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "float":
        """GetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'float') -> "void":
        """
        SetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "float":
        """GetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'float') -> "void":
        """
        SetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "float":
        """GetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance(self)

    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkThresholdSegmentationLevelSetImageFilterIF2IF2F.Clone = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister
itkThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF2IF2F)

def itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
    """itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

def itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterIF2IF2F *":
    """itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

class itkThresholdSegmentationLevelSetImageFilterIF3IF3F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """__New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """Clone(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone(self)


    def SetUpperThreshold(self, v: 'float') -> "void":
        """
        SetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'float') -> "void":
        """SetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'float') -> "void":
        """
        SetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "float":
        """GetEdgeWeight(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> int"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'float') -> "void":
        """
        SetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "float":
        """GetSmoothingTimeStep(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'float') -> "void":
        """
        SetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "float":
        """GetSmoothingConductance(itkThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance(self)

    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F"""
        return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkThresholdSegmentationLevelSetImageFilterIF3IF3F.Clone = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetUpperThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetLowerThreshold = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetEdgeWeight = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingIterations = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingTimeStep = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingConductance = new_instancemethod(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance, None, itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister
itkThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF3IF3F)

def itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> "itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
    """itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

def itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkThresholdSegmentationLevelSetImageFilterIF3IF3F *":
    """itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F"""
    return _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def threshold_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ThresholdSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.ThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ThresholdSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ThresholdSegmentationLevelSetImageFilter

    threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    threshold_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    threshold_segmentation_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    threshold_segmentation_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



