# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFlatStructuringElementPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFlatStructuringElementPython', [dirname(__file__)])
        except ImportError:
            import _itkFlatStructuringElementPython
            return _itkFlatStructuringElementPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFlatStructuringElementPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFlatStructuringElementPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFlatStructuringElementPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkNeighborhoodPython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkOffsetPython
import itkRGBPixelPython
import itkCovariantVectorPython
import itkIndexPython
import itkBoxImageFilterPython
import itkImageToImageFilterAPython
import itkImagePython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkMovingHistogramImageFilterBaseID3ID3SE3_New():
  return itkMovingHistogramImageFilterBaseID3ID3SE3.New()


def itkMovingHistogramImageFilterBaseIF3IF3SE3_New():
  return itkMovingHistogramImageFilterBaseIF3IF3SE3.New()


def itkMovingHistogramImageFilterBaseIUS3IUS3SE3_New():
  return itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New()


def itkMovingHistogramImageFilterBaseIUC3IUC3SE3_New():
  return itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New()


def itkMovingHistogramImageFilterBaseISS3ISS3SE3_New():
  return itkMovingHistogramImageFilterBaseISS3ISS3SE3.New()


def itkMovingHistogramImageFilterBaseID2ID2SE2_New():
  return itkMovingHistogramImageFilterBaseID2ID2SE2.New()


def itkMovingHistogramImageFilterBaseIF2IF2SE2_New():
  return itkMovingHistogramImageFilterBaseIF2IF2SE2.New()


def itkMovingHistogramImageFilterBaseIUS2IUS2SE2_New():
  return itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New()


def itkMovingHistogramImageFilterBaseIUC2IUC2SE2_New():
  return itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New()


def itkMovingHistogramImageFilterBaseISS2ISS2SE2_New():
  return itkMovingHistogramImageFilterBaseISS2ISS2SE2.New()


def itkKernelImageFilterID3ID3SE3_New():
  return itkKernelImageFilterID3ID3SE3.New()


def itkKernelImageFilterIF3IF3SE3_New():
  return itkKernelImageFilterIF3IF3SE3.New()


def itkKernelImageFilterIUS3IUS3SE3_New():
  return itkKernelImageFilterIUS3IUS3SE3.New()


def itkKernelImageFilterIUC3IUC3SE3_New():
  return itkKernelImageFilterIUC3IUC3SE3.New()


def itkKernelImageFilterISS3ISS3SE3_New():
  return itkKernelImageFilterISS3ISS3SE3.New()


def itkKernelImageFilterID2ID2SE2_New():
  return itkKernelImageFilterID2ID2SE2.New()


def itkKernelImageFilterIF2IF2SE2_New():
  return itkKernelImageFilterIF2IF2SE2.New()


def itkKernelImageFilterIUS2IUS2SE2_New():
  return itkKernelImageFilterIUS2IUS2SE2.New()


def itkKernelImageFilterIUC2IUC2SE2_New():
  return itkKernelImageFilterIUC2IUC2SE2.New()


def itkKernelImageFilterISS2ISS2SE2_New():
  return itkKernelImageFilterISS2ISS2SE2.New()

class itkFlatStructuringElement2(itkNeighborhoodPython.itkNeighborhoodB2):
    """


    A class to support a variety of flat structuring elements, including
    versions created by decomposition of lines.

    FlatStructuringElement provides several static methods, which can be
    used to create a structuring element with a particular shape, size,
    etc. Currently, those methods enable the creation of the following
    structuring elements: ball, box, cross, annulus, or polygon. Polygons
    are available as fast approximations of balls using line
    decompositions. Boxes also use line decompositions.

    "Flat" refers to binary as opposed to grayscale structuring
    elements. Flat structuring elements can be used for both binary and
    grayscale images.

    A Neighborhood has an N-dimensional radius. The radius is defined
    separately for each dimension as the number of pixels that the
    neighborhood object with a radius of 2x3 has sides of length 5x7.
    However, in the case of balls and annuli, this definition is slightly
    different from the parametric definition of those objects. To have a
    diameter of 5x7, the radius would need to increase by 0.5 in each
    dimension. Thus, the "radius" of the neighborhood and the "radius"
    of the object should be distinguished.

    To accomplish this, the "ball" and "annulus" structuring elements
    have an optional flag called "radiusIsParametric" (off by default).
    Setting this flag to true will use the parametric definition of the
    object and will generate structuring elements with more accurate
    areas, which can be especially important when morphological operations
    are intended to remove or retain objects of particular sizes. When the
    mode is turned off (default), the radius is the same, but the object
    diameter is set to (radius*2)+1, which is the size of the neighborhood
    region. Thus, the original ball and annulus structuring elements have
    a systematic bias in the radius of +0.5 voxels in each dimension
    relative to the parametric definition of the radius. Thus, we
    recommend turning this mode on for more accurate structuring elements,
    but this mode is turned off by default for backward compatibility.

    With this mode turned on, the number of "on" pixels is 515 (error
    1.6%), but with it turned off, the area is 739 (error 41%). For a 3D
    annulus of radius 5 and thickness 2, the area should be 410. With this
    mode turned on, the area is 392 (error 4.5%), but when turned off it
    is 560 (error 36%). This same trend holds for balls and annuli of any
    radius or dimension. For more detailed experiments with this mode,
    please refer to the results of the

    Structure Element}   Elements With Accurate Area}

    C++ includes: itkFlatStructuringElement.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkFlatStructuringElement2

    def Box(radius: 'itkSize2') -> "itkFlatStructuringElement2":
        """Box(itkSize2 radius) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Box(radius)

    Box = staticmethod(Box)

    def Ball(radius: 'itkSize2', radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement2":
        """
        Ball(itkSize2 radius, bool radiusIsParametric=False) -> itkFlatStructuringElement2
        Ball(itkSize2 radius) -> itkFlatStructuringElement2
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Ball(radius, radiusIsParametric)

    Ball = staticmethod(Ball)

    def Cross(radius: 'itkSize2') -> "itkFlatStructuringElement2":
        """Cross(itkSize2 radius) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Cross(radius)

    Cross = staticmethod(Cross)

    def Annulus(radius: 'itkSize2', thickness: 'unsigned int'=1, includeCenter: 'bool'=False, radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement2":
        """
        Annulus(itkSize2 radius, unsigned int thickness=1, bool includeCenter=False, bool radiusIsParametric=False) -> itkFlatStructuringElement2
        Annulus(itkSize2 radius, unsigned int thickness=1, bool includeCenter=False) -> itkFlatStructuringElement2
        Annulus(itkSize2 radius, unsigned int thickness=1) -> itkFlatStructuringElement2
        Annulus(itkSize2 radius) -> itkFlatStructuringElement2
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Annulus(radius, thickness, includeCenter, radiusIsParametric)

    Annulus = staticmethod(Annulus)

    def Polygon(radius: 'itkSize2', lines: 'unsigned int') -> "itkFlatStructuringElement2":
        """Polygon(itkSize2 radius, unsigned int lines) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Polygon(radius, lines)

    Polygon = staticmethod(Polygon)

    def GetDecomposable(self) -> "bool":
        """
        GetDecomposable(itkFlatStructuringElement2 self) -> bool

        Returns whether the
        structuring element is decomposable or not. If the structuring is
        decomposable, the set of lines associated with the structuring may be
        used by an algorithm instead of the standard buffer. 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_GetDecomposable(self)


    def SetDecomposable(self, v: 'bool') -> "void":
        """SetDecomposable(itkFlatStructuringElement2 self, bool v)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_SetDecomposable(self, v)


    def GetLines(self) -> "std::vector< itkVectorF2,std::allocator< itkVectorF2 > > const &":
        """
        GetLines(itkFlatStructuringElement2 self) -> std::vector< itkVectorF2,std::allocator< itkVectorF2 > > const &

        Return the lines
        associated with the structuring element 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_GetLines(self)


    def AddLine(self, l: 'itkVectorF2') -> "void":
        """AddLine(itkFlatStructuringElement2 self, itkVectorF2 l)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_AddLine(self, l)


    def CheckParallel(self, NewVec: 'itkVectorF2') -> "bool":
        """CheckParallel(itkFlatStructuringElement2 self, itkVectorF2 NewVec) -> bool"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_CheckParallel(self, NewVec)


    def ComputeBufferFromLines(self) -> "void":
        """
        ComputeBufferFromLines(itkFlatStructuringElement2 self)

        Fill the
        buffer of the structuring element based on the lines associated to the
        structuring element 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_ComputeBufferFromLines(self)


    def GetRadiusIsParametric(self) -> "bool":
        """
        GetRadiusIsParametric(itkFlatStructuringElement2 self) -> bool

        The
        RadiusIsParametric mode ensures that the area of the foreground
        corresponds to the radius that was specified. This defaults to "off"
        for backward compatibility. 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_GetRadiusIsParametric(self)


    def SetRadiusIsParametric(self, flag: 'bool') -> "void":
        """SetRadiusIsParametric(itkFlatStructuringElement2 self, bool flag)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_SetRadiusIsParametric(self, flag)


    def RadiusIsParametricOn(self) -> "void":
        """RadiusIsParametricOn(itkFlatStructuringElement2 self)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOn(self)


    def RadiusIsParametricOff(self) -> "void":
        """RadiusIsParametricOff(itkFlatStructuringElement2 self)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOff(self)


    def FromImage(image: 'itkImageB2') -> "itkFlatStructuringElement2":
        """FromImage(itkImageB2 image) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement2_FromImage(image)

    FromImage = staticmethod(FromImage)

    def __init__(self, *args):
        """
        __init__(itkFlatStructuringElement2 self) -> itkFlatStructuringElement2
        __init__(itkFlatStructuringElement2 self, itkFlatStructuringElement2 arg0) -> itkFlatStructuringElement2



        A class to support a variety of flat structuring elements, including
        versions created by decomposition of lines.

        FlatStructuringElement provides several static methods, which can be
        used to create a structuring element with a particular shape, size,
        etc. Currently, those methods enable the creation of the following
        structuring elements: ball, box, cross, annulus, or polygon. Polygons
        are available as fast approximations of balls using line
        decompositions. Boxes also use line decompositions.

        "Flat" refers to binary as opposed to grayscale structuring
        elements. Flat structuring elements can be used for both binary and
        grayscale images.

        A Neighborhood has an N-dimensional radius. The radius is defined
        separately for each dimension as the number of pixels that the
        neighborhood object with a radius of 2x3 has sides of length 5x7.
        However, in the case of balls and annuli, this definition is slightly
        different from the parametric definition of those objects. To have a
        diameter of 5x7, the radius would need to increase by 0.5 in each
        dimension. Thus, the "radius" of the neighborhood and the "radius"
        of the object should be distinguished.

        To accomplish this, the "ball" and "annulus" structuring elements
        have an optional flag called "radiusIsParametric" (off by default).
        Setting this flag to true will use the parametric definition of the
        object and will generate structuring elements with more accurate
        areas, which can be especially important when morphological operations
        are intended to remove or retain objects of particular sizes. When the
        mode is turned off (default), the radius is the same, but the object
        diameter is set to (radius*2)+1, which is the size of the neighborhood
        region. Thus, the original ball and annulus structuring elements have
        a systematic bias in the radius of +0.5 voxels in each dimension
        relative to the parametric definition of the radius. Thus, we
        recommend turning this mode on for more accurate structuring elements,
        but this mode is turned off by default for backward compatibility.

        With this mode turned on, the number of "on" pixels is 515 (error
        1.6%), but with it turned off, the area is 739 (error 41%). For a 3D
        annulus of radius 5 and thickness 2, the area should be 410. With this
        mode turned on, the area is 392 (error 4.5%), but when turned off it
        is 560 (error 36%). This same trend holds for balls and annuli of any
        radius or dimension. For more detailed experiments with this mode,
        please refer to the results of the

        Structure Element}   Elements With Accurate Area}

        C++ includes: itkFlatStructuringElement.h 
        """
        _itkFlatStructuringElementPython.itkFlatStructuringElement2_swiginit(self, _itkFlatStructuringElementPython.new_itkFlatStructuringElement2(*args))
itkFlatStructuringElement2.GetDecomposable = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetDecomposable, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.SetDecomposable = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_SetDecomposable, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.GetLines = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetLines, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.AddLine = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_AddLine, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.CheckParallel = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_CheckParallel, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.ComputeBufferFromLines = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_ComputeBufferFromLines, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.GetRadiusIsParametric = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_GetRadiusIsParametric, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.SetRadiusIsParametric = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_SetRadiusIsParametric, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.RadiusIsParametricOn = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOn, None, itkFlatStructuringElement2)
itkFlatStructuringElement2.RadiusIsParametricOff = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement2_RadiusIsParametricOff, None, itkFlatStructuringElement2)
itkFlatStructuringElement2_swigregister = _itkFlatStructuringElementPython.itkFlatStructuringElement2_swigregister
itkFlatStructuringElement2_swigregister(itkFlatStructuringElement2)

def itkFlatStructuringElement2_Box(radius: 'itkSize2') -> "itkFlatStructuringElement2":
    """itkFlatStructuringElement2_Box(itkSize2 radius) -> itkFlatStructuringElement2"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Box(radius)

def itkFlatStructuringElement2_Ball(radius: 'itkSize2', radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement2":
    """
    Ball(itkSize2 radius, bool radiusIsParametric=False) -> itkFlatStructuringElement2
    itkFlatStructuringElement2_Ball(itkSize2 radius) -> itkFlatStructuringElement2
    """
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Ball(radius, radiusIsParametric)

def itkFlatStructuringElement2_Cross(radius: 'itkSize2') -> "itkFlatStructuringElement2":
    """itkFlatStructuringElement2_Cross(itkSize2 radius) -> itkFlatStructuringElement2"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Cross(radius)

def itkFlatStructuringElement2_Annulus(radius: 'itkSize2', thickness: 'unsigned int'=1, includeCenter: 'bool'=False, radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement2":
    """
    Annulus(itkSize2 radius, unsigned int thickness=1, bool includeCenter=False, bool radiusIsParametric=False) -> itkFlatStructuringElement2
    Annulus(itkSize2 radius, unsigned int thickness=1, bool includeCenter=False) -> itkFlatStructuringElement2
    Annulus(itkSize2 radius, unsigned int thickness=1) -> itkFlatStructuringElement2
    itkFlatStructuringElement2_Annulus(itkSize2 radius) -> itkFlatStructuringElement2
    """
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Annulus(radius, thickness, includeCenter, radiusIsParametric)

def itkFlatStructuringElement2_Polygon(radius: 'itkSize2', lines: 'unsigned int') -> "itkFlatStructuringElement2":
    """itkFlatStructuringElement2_Polygon(itkSize2 radius, unsigned int lines) -> itkFlatStructuringElement2"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_Polygon(radius, lines)

def itkFlatStructuringElement2_FromImage(image: 'itkImageB2') -> "itkFlatStructuringElement2":
    """itkFlatStructuringElement2_FromImage(itkImageB2 image) -> itkFlatStructuringElement2"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement2_FromImage(image)

class itkFlatStructuringElement3(itkNeighborhoodPython.itkNeighborhoodB3):
    """


    A class to support a variety of flat structuring elements, including
    versions created by decomposition of lines.

    FlatStructuringElement provides several static methods, which can be
    used to create a structuring element with a particular shape, size,
    etc. Currently, those methods enable the creation of the following
    structuring elements: ball, box, cross, annulus, or polygon. Polygons
    are available as fast approximations of balls using line
    decompositions. Boxes also use line decompositions.

    "Flat" refers to binary as opposed to grayscale structuring
    elements. Flat structuring elements can be used for both binary and
    grayscale images.

    A Neighborhood has an N-dimensional radius. The radius is defined
    separately for each dimension as the number of pixels that the
    neighborhood object with a radius of 2x3 has sides of length 5x7.
    However, in the case of balls and annuli, this definition is slightly
    different from the parametric definition of those objects. To have a
    diameter of 5x7, the radius would need to increase by 0.5 in each
    dimension. Thus, the "radius" of the neighborhood and the "radius"
    of the object should be distinguished.

    To accomplish this, the "ball" and "annulus" structuring elements
    have an optional flag called "radiusIsParametric" (off by default).
    Setting this flag to true will use the parametric definition of the
    object and will generate structuring elements with more accurate
    areas, which can be especially important when morphological operations
    are intended to remove or retain objects of particular sizes. When the
    mode is turned off (default), the radius is the same, but the object
    diameter is set to (radius*2)+1, which is the size of the neighborhood
    region. Thus, the original ball and annulus structuring elements have
    a systematic bias in the radius of +0.5 voxels in each dimension
    relative to the parametric definition of the radius. Thus, we
    recommend turning this mode on for more accurate structuring elements,
    but this mode is turned off by default for backward compatibility.

    With this mode turned on, the number of "on" pixels is 515 (error
    1.6%), but with it turned off, the area is 739 (error 41%). For a 3D
    annulus of radius 5 and thickness 2, the area should be 410. With this
    mode turned on, the area is 392 (error 4.5%), but when turned off it
    is 560 (error 36%). This same trend holds for balls and annuli of any
    radius or dimension. For more detailed experiments with this mode,
    please refer to the results of the

    Structure Element}   Elements With Accurate Area}

    C++ includes: itkFlatStructuringElement.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkFlatStructuringElement3

    def Box(radius: 'itkSize3') -> "itkFlatStructuringElement3":
        """Box(itkSize3 radius) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Box(radius)

    Box = staticmethod(Box)

    def Ball(radius: 'itkSize3', radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement3":
        """
        Ball(itkSize3 radius, bool radiusIsParametric=False) -> itkFlatStructuringElement3
        Ball(itkSize3 radius) -> itkFlatStructuringElement3
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Ball(radius, radiusIsParametric)

    Ball = staticmethod(Ball)

    def Cross(radius: 'itkSize3') -> "itkFlatStructuringElement3":
        """Cross(itkSize3 radius) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Cross(radius)

    Cross = staticmethod(Cross)

    def Annulus(radius: 'itkSize3', thickness: 'unsigned int'=1, includeCenter: 'bool'=False, radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement3":
        """
        Annulus(itkSize3 radius, unsigned int thickness=1, bool includeCenter=False, bool radiusIsParametric=False) -> itkFlatStructuringElement3
        Annulus(itkSize3 radius, unsigned int thickness=1, bool includeCenter=False) -> itkFlatStructuringElement3
        Annulus(itkSize3 radius, unsigned int thickness=1) -> itkFlatStructuringElement3
        Annulus(itkSize3 radius) -> itkFlatStructuringElement3
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Annulus(radius, thickness, includeCenter, radiusIsParametric)

    Annulus = staticmethod(Annulus)

    def Polygon(radius: 'itkSize3', lines: 'unsigned int') -> "itkFlatStructuringElement3":
        """Polygon(itkSize3 radius, unsigned int lines) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Polygon(radius, lines)

    Polygon = staticmethod(Polygon)

    def GetDecomposable(self) -> "bool":
        """
        GetDecomposable(itkFlatStructuringElement3 self) -> bool

        Returns whether the
        structuring element is decomposable or not. If the structuring is
        decomposable, the set of lines associated with the structuring may be
        used by an algorithm instead of the standard buffer. 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_GetDecomposable(self)


    def SetDecomposable(self, v: 'bool') -> "void":
        """SetDecomposable(itkFlatStructuringElement3 self, bool v)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_SetDecomposable(self, v)


    def GetLines(self) -> "std::vector< itkVectorF3,std::allocator< itkVectorF3 > > const &":
        """
        GetLines(itkFlatStructuringElement3 self) -> std::vector< itkVectorF3,std::allocator< itkVectorF3 > > const &

        Return the lines
        associated with the structuring element 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_GetLines(self)


    def AddLine(self, l: 'itkVectorF3') -> "void":
        """AddLine(itkFlatStructuringElement3 self, itkVectorF3 l)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_AddLine(self, l)


    def CheckParallel(self, NewVec: 'itkVectorF3') -> "bool":
        """CheckParallel(itkFlatStructuringElement3 self, itkVectorF3 NewVec) -> bool"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_CheckParallel(self, NewVec)


    def ComputeBufferFromLines(self) -> "void":
        """
        ComputeBufferFromLines(itkFlatStructuringElement3 self)

        Fill the
        buffer of the structuring element based on the lines associated to the
        structuring element 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_ComputeBufferFromLines(self)


    def GetRadiusIsParametric(self) -> "bool":
        """
        GetRadiusIsParametric(itkFlatStructuringElement3 self) -> bool

        The
        RadiusIsParametric mode ensures that the area of the foreground
        corresponds to the radius that was specified. This defaults to "off"
        for backward compatibility. 
        """
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_GetRadiusIsParametric(self)


    def SetRadiusIsParametric(self, flag: 'bool') -> "void":
        """SetRadiusIsParametric(itkFlatStructuringElement3 self, bool flag)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_SetRadiusIsParametric(self, flag)


    def RadiusIsParametricOn(self) -> "void":
        """RadiusIsParametricOn(itkFlatStructuringElement3 self)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOn(self)


    def RadiusIsParametricOff(self) -> "void":
        """RadiusIsParametricOff(itkFlatStructuringElement3 self)"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOff(self)


    def FromImage(image: 'itkImageB3') -> "itkFlatStructuringElement3":
        """FromImage(itkImageB3 image) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkFlatStructuringElement3_FromImage(image)

    FromImage = staticmethod(FromImage)

    def __init__(self, *args):
        """
        __init__(itkFlatStructuringElement3 self) -> itkFlatStructuringElement3
        __init__(itkFlatStructuringElement3 self, itkFlatStructuringElement3 arg0) -> itkFlatStructuringElement3



        A class to support a variety of flat structuring elements, including
        versions created by decomposition of lines.

        FlatStructuringElement provides several static methods, which can be
        used to create a structuring element with a particular shape, size,
        etc. Currently, those methods enable the creation of the following
        structuring elements: ball, box, cross, annulus, or polygon. Polygons
        are available as fast approximations of balls using line
        decompositions. Boxes also use line decompositions.

        "Flat" refers to binary as opposed to grayscale structuring
        elements. Flat structuring elements can be used for both binary and
        grayscale images.

        A Neighborhood has an N-dimensional radius. The radius is defined
        separately for each dimension as the number of pixels that the
        neighborhood object with a radius of 2x3 has sides of length 5x7.
        However, in the case of balls and annuli, this definition is slightly
        different from the parametric definition of those objects. To have a
        diameter of 5x7, the radius would need to increase by 0.5 in each
        dimension. Thus, the "radius" of the neighborhood and the "radius"
        of the object should be distinguished.

        To accomplish this, the "ball" and "annulus" structuring elements
        have an optional flag called "radiusIsParametric" (off by default).
        Setting this flag to true will use the parametric definition of the
        object and will generate structuring elements with more accurate
        areas, which can be especially important when morphological operations
        are intended to remove or retain objects of particular sizes. When the
        mode is turned off (default), the radius is the same, but the object
        diameter is set to (radius*2)+1, which is the size of the neighborhood
        region. Thus, the original ball and annulus structuring elements have
        a systematic bias in the radius of +0.5 voxels in each dimension
        relative to the parametric definition of the radius. Thus, we
        recommend turning this mode on for more accurate structuring elements,
        but this mode is turned off by default for backward compatibility.

        With this mode turned on, the number of "on" pixels is 515 (error
        1.6%), but with it turned off, the area is 739 (error 41%). For a 3D
        annulus of radius 5 and thickness 2, the area should be 410. With this
        mode turned on, the area is 392 (error 4.5%), but when turned off it
        is 560 (error 36%). This same trend holds for balls and annuli of any
        radius or dimension. For more detailed experiments with this mode,
        please refer to the results of the

        Structure Element}   Elements With Accurate Area}

        C++ includes: itkFlatStructuringElement.h 
        """
        _itkFlatStructuringElementPython.itkFlatStructuringElement3_swiginit(self, _itkFlatStructuringElementPython.new_itkFlatStructuringElement3(*args))
itkFlatStructuringElement3.GetDecomposable = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetDecomposable, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.SetDecomposable = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_SetDecomposable, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.GetLines = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetLines, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.AddLine = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_AddLine, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.CheckParallel = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_CheckParallel, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.ComputeBufferFromLines = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_ComputeBufferFromLines, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.GetRadiusIsParametric = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_GetRadiusIsParametric, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.SetRadiusIsParametric = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_SetRadiusIsParametric, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.RadiusIsParametricOn = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOn, None, itkFlatStructuringElement3)
itkFlatStructuringElement3.RadiusIsParametricOff = new_instancemethod(_itkFlatStructuringElementPython.itkFlatStructuringElement3_RadiusIsParametricOff, None, itkFlatStructuringElement3)
itkFlatStructuringElement3_swigregister = _itkFlatStructuringElementPython.itkFlatStructuringElement3_swigregister
itkFlatStructuringElement3_swigregister(itkFlatStructuringElement3)

def itkFlatStructuringElement3_Box(radius: 'itkSize3') -> "itkFlatStructuringElement3":
    """itkFlatStructuringElement3_Box(itkSize3 radius) -> itkFlatStructuringElement3"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Box(radius)

def itkFlatStructuringElement3_Ball(radius: 'itkSize3', radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement3":
    """
    Ball(itkSize3 radius, bool radiusIsParametric=False) -> itkFlatStructuringElement3
    itkFlatStructuringElement3_Ball(itkSize3 radius) -> itkFlatStructuringElement3
    """
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Ball(radius, radiusIsParametric)

def itkFlatStructuringElement3_Cross(radius: 'itkSize3') -> "itkFlatStructuringElement3":
    """itkFlatStructuringElement3_Cross(itkSize3 radius) -> itkFlatStructuringElement3"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Cross(radius)

def itkFlatStructuringElement3_Annulus(radius: 'itkSize3', thickness: 'unsigned int'=1, includeCenter: 'bool'=False, radiusIsParametric: 'bool'=False) -> "itkFlatStructuringElement3":
    """
    Annulus(itkSize3 radius, unsigned int thickness=1, bool includeCenter=False, bool radiusIsParametric=False) -> itkFlatStructuringElement3
    Annulus(itkSize3 radius, unsigned int thickness=1, bool includeCenter=False) -> itkFlatStructuringElement3
    Annulus(itkSize3 radius, unsigned int thickness=1) -> itkFlatStructuringElement3
    itkFlatStructuringElement3_Annulus(itkSize3 radius) -> itkFlatStructuringElement3
    """
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Annulus(radius, thickness, includeCenter, radiusIsParametric)

def itkFlatStructuringElement3_Polygon(radius: 'itkSize3', lines: 'unsigned int') -> "itkFlatStructuringElement3":
    """itkFlatStructuringElement3_Polygon(itkSize3 radius, unsigned int lines) -> itkFlatStructuringElement3"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_Polygon(radius, lines)

def itkFlatStructuringElement3_FromImage(image: 'itkImageB3') -> "itkFlatStructuringElement3":
    """itkFlatStructuringElement3_FromImage(itkImageB3 image) -> itkFlatStructuringElement3"""
    return _itkFlatStructuringElementPython.itkFlatStructuringElement3_FromImage(image)

class itkKernelImageFilterID2ID2SE2(itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterID2ID2SE2_Pointer":
        """__New_orig__() -> itkKernelImageFilterID2ID2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterID2ID2SE2_Pointer":
        """Clone(itkKernelImageFilterID2ID2SE2 self) -> itkKernelImageFilterID2ID2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement2') -> "void":
        """
        SetKernel(itkKernelImageFilterID2ID2SE2 self, itkFlatStructuringElement2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement2 const &":
        """GetKernel(itkKernelImageFilterID2ID2SE2 self) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterID2ID2SE2 self, itkSize2 radius)
        SetRadius(itkKernelImageFilterID2ID2SE2 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterID2ID2SE2

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterID2ID2SE2 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterID2ID2SE2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID2ID2SE2

        Create a new object of the class itkKernelImageFilterID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID2ID2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID2ID2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterID2ID2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_Clone, None, itkKernelImageFilterID2ID2SE2)
itkKernelImageFilterID2ID2SE2.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetKernel, None, itkKernelImageFilterID2ID2SE2)
itkKernelImageFilterID2ID2SE2.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_GetKernel, None, itkKernelImageFilterID2ID2SE2)
itkKernelImageFilterID2ID2SE2.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_SetRadius, None, itkKernelImageFilterID2ID2SE2)
itkKernelImageFilterID2ID2SE2_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_swigregister
itkKernelImageFilterID2ID2SE2_swigregister(itkKernelImageFilterID2ID2SE2)

def itkKernelImageFilterID2ID2SE2___New_orig__() -> "itkKernelImageFilterID2ID2SE2_Pointer":
    """itkKernelImageFilterID2ID2SE2___New_orig__() -> itkKernelImageFilterID2ID2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2___New_orig__()

def itkKernelImageFilterID2ID2SE2_cast(obj: 'itkLightObject') -> "itkKernelImageFilterID2ID2SE2 *":
    """itkKernelImageFilterID2ID2SE2_cast(itkLightObject obj) -> itkKernelImageFilterID2ID2SE2"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterID2ID2SE2_cast(obj)

class itkKernelImageFilterID3ID3SE3(itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterID3ID3SE3_Pointer":
        """__New_orig__() -> itkKernelImageFilterID3ID3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterID3ID3SE3_Pointer":
        """Clone(itkKernelImageFilterID3ID3SE3 self) -> itkKernelImageFilterID3ID3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement3') -> "void":
        """
        SetKernel(itkKernelImageFilterID3ID3SE3 self, itkFlatStructuringElement3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement3 const &":
        """GetKernel(itkKernelImageFilterID3ID3SE3 self) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterID3ID3SE3 self, itkSize3 radius)
        SetRadius(itkKernelImageFilterID3ID3SE3 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterID3ID3SE3

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterID3ID3SE3 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterID3ID3SE3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterID3ID3SE3

        Create a new object of the class itkKernelImageFilterID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterID3ID3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterID3ID3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterID3ID3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_Clone, None, itkKernelImageFilterID3ID3SE3)
itkKernelImageFilterID3ID3SE3.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetKernel, None, itkKernelImageFilterID3ID3SE3)
itkKernelImageFilterID3ID3SE3.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_GetKernel, None, itkKernelImageFilterID3ID3SE3)
itkKernelImageFilterID3ID3SE3.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_SetRadius, None, itkKernelImageFilterID3ID3SE3)
itkKernelImageFilterID3ID3SE3_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_swigregister
itkKernelImageFilterID3ID3SE3_swigregister(itkKernelImageFilterID3ID3SE3)

def itkKernelImageFilterID3ID3SE3___New_orig__() -> "itkKernelImageFilterID3ID3SE3_Pointer":
    """itkKernelImageFilterID3ID3SE3___New_orig__() -> itkKernelImageFilterID3ID3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3___New_orig__()

def itkKernelImageFilterID3ID3SE3_cast(obj: 'itkLightObject') -> "itkKernelImageFilterID3ID3SE3 *":
    """itkKernelImageFilterID3ID3SE3_cast(itkLightObject obj) -> itkKernelImageFilterID3ID3SE3"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterID3ID3SE3_cast(obj)

class itkKernelImageFilterIF2IF2SE2(itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIF2IF2SE2_Pointer":
        """__New_orig__() -> itkKernelImageFilterIF2IF2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIF2IF2SE2_Pointer":
        """Clone(itkKernelImageFilterIF2IF2SE2 self) -> itkKernelImageFilterIF2IF2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement2') -> "void":
        """
        SetKernel(itkKernelImageFilterIF2IF2SE2 self, itkFlatStructuringElement2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement2 const &":
        """GetKernel(itkKernelImageFilterIF2IF2SE2 self) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIF2IF2SE2 self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIF2IF2SE2 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIF2IF2SE2

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF2IF2SE2 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIF2IF2SE2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF2IF2SE2

        Create a new object of the class itkKernelImageFilterIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF2IF2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF2IF2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIF2IF2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_Clone, None, itkKernelImageFilterIF2IF2SE2)
itkKernelImageFilterIF2IF2SE2.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetKernel, None, itkKernelImageFilterIF2IF2SE2)
itkKernelImageFilterIF2IF2SE2.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_GetKernel, None, itkKernelImageFilterIF2IF2SE2)
itkKernelImageFilterIF2IF2SE2.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_SetRadius, None, itkKernelImageFilterIF2IF2SE2)
itkKernelImageFilterIF2IF2SE2_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_swigregister
itkKernelImageFilterIF2IF2SE2_swigregister(itkKernelImageFilterIF2IF2SE2)

def itkKernelImageFilterIF2IF2SE2___New_orig__() -> "itkKernelImageFilterIF2IF2SE2_Pointer":
    """itkKernelImageFilterIF2IF2SE2___New_orig__() -> itkKernelImageFilterIF2IF2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2___New_orig__()

def itkKernelImageFilterIF2IF2SE2_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF2IF2SE2 *":
    """itkKernelImageFilterIF2IF2SE2_cast(itkLightObject obj) -> itkKernelImageFilterIF2IF2SE2"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIF2IF2SE2_cast(obj)

class itkKernelImageFilterIF3IF3SE3(itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIF3IF3SE3_Pointer":
        """__New_orig__() -> itkKernelImageFilterIF3IF3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIF3IF3SE3_Pointer":
        """Clone(itkKernelImageFilterIF3IF3SE3 self) -> itkKernelImageFilterIF3IF3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement3') -> "void":
        """
        SetKernel(itkKernelImageFilterIF3IF3SE3 self, itkFlatStructuringElement3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement3 const &":
        """GetKernel(itkKernelImageFilterIF3IF3SE3 self) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIF3IF3SE3 self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIF3IF3SE3 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIF3IF3SE3

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF3IF3SE3 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIF3IF3SE3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIF3IF3SE3

        Create a new object of the class itkKernelImageFilterIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIF3IF3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIF3IF3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIF3IF3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_Clone, None, itkKernelImageFilterIF3IF3SE3)
itkKernelImageFilterIF3IF3SE3.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetKernel, None, itkKernelImageFilterIF3IF3SE3)
itkKernelImageFilterIF3IF3SE3.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_GetKernel, None, itkKernelImageFilterIF3IF3SE3)
itkKernelImageFilterIF3IF3SE3.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_SetRadius, None, itkKernelImageFilterIF3IF3SE3)
itkKernelImageFilterIF3IF3SE3_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_swigregister
itkKernelImageFilterIF3IF3SE3_swigregister(itkKernelImageFilterIF3IF3SE3)

def itkKernelImageFilterIF3IF3SE3___New_orig__() -> "itkKernelImageFilterIF3IF3SE3_Pointer":
    """itkKernelImageFilterIF3IF3SE3___New_orig__() -> itkKernelImageFilterIF3IF3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3___New_orig__()

def itkKernelImageFilterIF3IF3SE3_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIF3IF3SE3 *":
    """itkKernelImageFilterIF3IF3SE3_cast(itkLightObject obj) -> itkKernelImageFilterIF3IF3SE3"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIF3IF3SE3_cast(obj)

class itkKernelImageFilterISS2ISS2SE2(itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterISS2ISS2SE2_Pointer":
        """__New_orig__() -> itkKernelImageFilterISS2ISS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterISS2ISS2SE2_Pointer":
        """Clone(itkKernelImageFilterISS2ISS2SE2 self) -> itkKernelImageFilterISS2ISS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement2') -> "void":
        """
        SetKernel(itkKernelImageFilterISS2ISS2SE2 self, itkFlatStructuringElement2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement2 const &":
        """GetKernel(itkKernelImageFilterISS2ISS2SE2 self) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterISS2ISS2SE2 self, itkSize2 radius)
        SetRadius(itkKernelImageFilterISS2ISS2SE2 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterISS2ISS2SE2

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS2ISS2SE2 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterISS2ISS2SE2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS2ISS2SE2

        Create a new object of the class itkKernelImageFilterISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS2ISS2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS2ISS2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterISS2ISS2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_Clone, None, itkKernelImageFilterISS2ISS2SE2)
itkKernelImageFilterISS2ISS2SE2.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetKernel, None, itkKernelImageFilterISS2ISS2SE2)
itkKernelImageFilterISS2ISS2SE2.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_GetKernel, None, itkKernelImageFilterISS2ISS2SE2)
itkKernelImageFilterISS2ISS2SE2.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_SetRadius, None, itkKernelImageFilterISS2ISS2SE2)
itkKernelImageFilterISS2ISS2SE2_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_swigregister
itkKernelImageFilterISS2ISS2SE2_swigregister(itkKernelImageFilterISS2ISS2SE2)

def itkKernelImageFilterISS2ISS2SE2___New_orig__() -> "itkKernelImageFilterISS2ISS2SE2_Pointer":
    """itkKernelImageFilterISS2ISS2SE2___New_orig__() -> itkKernelImageFilterISS2ISS2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2___New_orig__()

def itkKernelImageFilterISS2ISS2SE2_cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS2ISS2SE2 *":
    """itkKernelImageFilterISS2ISS2SE2_cast(itkLightObject obj) -> itkKernelImageFilterISS2ISS2SE2"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterISS2ISS2SE2_cast(obj)

class itkKernelImageFilterISS3ISS3SE3(itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterISS3ISS3SE3_Pointer":
        """__New_orig__() -> itkKernelImageFilterISS3ISS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterISS3ISS3SE3_Pointer":
        """Clone(itkKernelImageFilterISS3ISS3SE3 self) -> itkKernelImageFilterISS3ISS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement3') -> "void":
        """
        SetKernel(itkKernelImageFilterISS3ISS3SE3 self, itkFlatStructuringElement3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement3 const &":
        """GetKernel(itkKernelImageFilterISS3ISS3SE3 self) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterISS3ISS3SE3 self, itkSize3 radius)
        SetRadius(itkKernelImageFilterISS3ISS3SE3 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterISS3ISS3SE3

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS3ISS3SE3 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterISS3ISS3SE3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterISS3ISS3SE3

        Create a new object of the class itkKernelImageFilterISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterISS3ISS3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterISS3ISS3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterISS3ISS3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_Clone, None, itkKernelImageFilterISS3ISS3SE3)
itkKernelImageFilterISS3ISS3SE3.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetKernel, None, itkKernelImageFilterISS3ISS3SE3)
itkKernelImageFilterISS3ISS3SE3.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_GetKernel, None, itkKernelImageFilterISS3ISS3SE3)
itkKernelImageFilterISS3ISS3SE3.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_SetRadius, None, itkKernelImageFilterISS3ISS3SE3)
itkKernelImageFilterISS3ISS3SE3_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_swigregister
itkKernelImageFilterISS3ISS3SE3_swigregister(itkKernelImageFilterISS3ISS3SE3)

def itkKernelImageFilterISS3ISS3SE3___New_orig__() -> "itkKernelImageFilterISS3ISS3SE3_Pointer":
    """itkKernelImageFilterISS3ISS3SE3___New_orig__() -> itkKernelImageFilterISS3ISS3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3___New_orig__()

def itkKernelImageFilterISS3ISS3SE3_cast(obj: 'itkLightObject') -> "itkKernelImageFilterISS3ISS3SE3 *":
    """itkKernelImageFilterISS3ISS3SE3_cast(itkLightObject obj) -> itkKernelImageFilterISS3ISS3SE3"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterISS3ISS3SE3_cast(obj)

class itkKernelImageFilterIUC2IUC2SE2(itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUC2IUC2SE2_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUC2IUC2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUC2IUC2SE2_Pointer":
        """Clone(itkKernelImageFilterIUC2IUC2SE2 self) -> itkKernelImageFilterIUC2IUC2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement2') -> "void":
        """
        SetKernel(itkKernelImageFilterIUC2IUC2SE2 self, itkFlatStructuringElement2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement2 const &":
        """GetKernel(itkKernelImageFilterIUC2IUC2SE2 self) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUC2IUC2SE2 self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIUC2IUC2SE2 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUC2IUC2SE2

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC2IUC2SE2 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUC2IUC2SE2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC2IUC2SE2

        Create a new object of the class itkKernelImageFilterIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC2IUC2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC2IUC2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUC2IUC2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_Clone, None, itkKernelImageFilterIUC2IUC2SE2)
itkKernelImageFilterIUC2IUC2SE2.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetKernel, None, itkKernelImageFilterIUC2IUC2SE2)
itkKernelImageFilterIUC2IUC2SE2.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_GetKernel, None, itkKernelImageFilterIUC2IUC2SE2)
itkKernelImageFilterIUC2IUC2SE2.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_SetRadius, None, itkKernelImageFilterIUC2IUC2SE2)
itkKernelImageFilterIUC2IUC2SE2_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_swigregister
itkKernelImageFilterIUC2IUC2SE2_swigregister(itkKernelImageFilterIUC2IUC2SE2)

def itkKernelImageFilterIUC2IUC2SE2___New_orig__() -> "itkKernelImageFilterIUC2IUC2SE2_Pointer":
    """itkKernelImageFilterIUC2IUC2SE2___New_orig__() -> itkKernelImageFilterIUC2IUC2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2___New_orig__()

def itkKernelImageFilterIUC2IUC2SE2_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC2IUC2SE2 *":
    """itkKernelImageFilterIUC2IUC2SE2_cast(itkLightObject obj) -> itkKernelImageFilterIUC2IUC2SE2"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUC2IUC2SE2_cast(obj)

class itkKernelImageFilterIUC3IUC3SE3(itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUC3IUC3SE3_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUC3IUC3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUC3IUC3SE3_Pointer":
        """Clone(itkKernelImageFilterIUC3IUC3SE3 self) -> itkKernelImageFilterIUC3IUC3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement3') -> "void":
        """
        SetKernel(itkKernelImageFilterIUC3IUC3SE3 self, itkFlatStructuringElement3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement3 const &":
        """GetKernel(itkKernelImageFilterIUC3IUC3SE3 self) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUC3IUC3SE3 self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIUC3IUC3SE3 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUC3IUC3SE3

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC3IUC3SE3 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUC3IUC3SE3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUC3IUC3SE3

        Create a new object of the class itkKernelImageFilterIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUC3IUC3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUC3IUC3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUC3IUC3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_Clone, None, itkKernelImageFilterIUC3IUC3SE3)
itkKernelImageFilterIUC3IUC3SE3.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetKernel, None, itkKernelImageFilterIUC3IUC3SE3)
itkKernelImageFilterIUC3IUC3SE3.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_GetKernel, None, itkKernelImageFilterIUC3IUC3SE3)
itkKernelImageFilterIUC3IUC3SE3.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_SetRadius, None, itkKernelImageFilterIUC3IUC3SE3)
itkKernelImageFilterIUC3IUC3SE3_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_swigregister
itkKernelImageFilterIUC3IUC3SE3_swigregister(itkKernelImageFilterIUC3IUC3SE3)

def itkKernelImageFilterIUC3IUC3SE3___New_orig__() -> "itkKernelImageFilterIUC3IUC3SE3_Pointer":
    """itkKernelImageFilterIUC3IUC3SE3___New_orig__() -> itkKernelImageFilterIUC3IUC3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3___New_orig__()

def itkKernelImageFilterIUC3IUC3SE3_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUC3IUC3SE3 *":
    """itkKernelImageFilterIUC3IUC3SE3_cast(itkLightObject obj) -> itkKernelImageFilterIUC3IUC3SE3"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUC3IUC3SE3_cast(obj)

class itkKernelImageFilterIUS2IUS2SE2(itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUS2IUS2SE2_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUS2IUS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUS2IUS2SE2_Pointer":
        """Clone(itkKernelImageFilterIUS2IUS2SE2 self) -> itkKernelImageFilterIUS2IUS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement2') -> "void":
        """
        SetKernel(itkKernelImageFilterIUS2IUS2SE2 self, itkFlatStructuringElement2 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement2 const &":
        """GetKernel(itkKernelImageFilterIUS2IUS2SE2 self) -> itkFlatStructuringElement2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUS2IUS2SE2 self, itkSize2 radius)
        SetRadius(itkKernelImageFilterIUS2IUS2SE2 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUS2IUS2SE2

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS2IUS2SE2 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUS2IUS2SE2"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS2IUS2SE2

        Create a new object of the class itkKernelImageFilterIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS2IUS2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS2IUS2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUS2IUS2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_Clone, None, itkKernelImageFilterIUS2IUS2SE2)
itkKernelImageFilterIUS2IUS2SE2.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetKernel, None, itkKernelImageFilterIUS2IUS2SE2)
itkKernelImageFilterIUS2IUS2SE2.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_GetKernel, None, itkKernelImageFilterIUS2IUS2SE2)
itkKernelImageFilterIUS2IUS2SE2.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_SetRadius, None, itkKernelImageFilterIUS2IUS2SE2)
itkKernelImageFilterIUS2IUS2SE2_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_swigregister
itkKernelImageFilterIUS2IUS2SE2_swigregister(itkKernelImageFilterIUS2IUS2SE2)

def itkKernelImageFilterIUS2IUS2SE2___New_orig__() -> "itkKernelImageFilterIUS2IUS2SE2_Pointer":
    """itkKernelImageFilterIUS2IUS2SE2___New_orig__() -> itkKernelImageFilterIUS2IUS2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2___New_orig__()

def itkKernelImageFilterIUS2IUS2SE2_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS2IUS2SE2 *":
    """itkKernelImageFilterIUS2IUS2SE2_cast(itkLightObject obj) -> itkKernelImageFilterIUS2IUS2SE2"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUS2IUS2SE2_cast(obj)

class itkKernelImageFilterIUS3IUS3SE3(itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    """


    A base class for all the filters working on an arbitrary shaped
    neighborhood.

    This filter provides the code to store the radius information about
    the neighborhood used in the subclasses.

    Gaetan Lehmann

    C++ includes: itkKernelImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkKernelImageFilterIUS3IUS3SE3_Pointer":
        """__New_orig__() -> itkKernelImageFilterIUS3IUS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkKernelImageFilterIUS3IUS3SE3_Pointer":
        """Clone(itkKernelImageFilterIUS3IUS3SE3 self) -> itkKernelImageFilterIUS3IUS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_Clone(self)


    def SetKernel(self, kernel: 'itkFlatStructuringElement3') -> "void":
        """
        SetKernel(itkKernelImageFilterIUS3IUS3SE3 self, itkFlatStructuringElement3 kernel)

        Set kernel (structuring
        element). 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetKernel(self, kernel)


    def GetKernel(self) -> "itkFlatStructuringElement3 const &":
        """GetKernel(itkKernelImageFilterIUS3IUS3SE3 self) -> itkFlatStructuringElement3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_GetKernel(self)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkKernelImageFilterIUS3IUS3SE3 self, itkSize3 radius)
        SetRadius(itkKernelImageFilterIUS3IUS3SE3 self, unsigned long const & radius)

        Set the kernel to a box
        kernel of given radius. 
        """
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetRadius(self, *args)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkKernelImageFilterIUS3IUS3SE3

    def cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS3IUS3SE3 *":
        """cast(itkLightObject obj) -> itkKernelImageFilterIUS3IUS3SE3"""
        return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkKernelImageFilterIUS3IUS3SE3

        Create a new object of the class itkKernelImageFilterIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkKernelImageFilterIUS3IUS3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkKernelImageFilterIUS3IUS3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelImageFilterIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelImageFilterIUS3IUS3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_Clone, None, itkKernelImageFilterIUS3IUS3SE3)
itkKernelImageFilterIUS3IUS3SE3.SetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetKernel, None, itkKernelImageFilterIUS3IUS3SE3)
itkKernelImageFilterIUS3IUS3SE3.GetKernel = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_GetKernel, None, itkKernelImageFilterIUS3IUS3SE3)
itkKernelImageFilterIUS3IUS3SE3.SetRadius = new_instancemethod(_itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_SetRadius, None, itkKernelImageFilterIUS3IUS3SE3)
itkKernelImageFilterIUS3IUS3SE3_swigregister = _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_swigregister
itkKernelImageFilterIUS3IUS3SE3_swigregister(itkKernelImageFilterIUS3IUS3SE3)

def itkKernelImageFilterIUS3IUS3SE3___New_orig__() -> "itkKernelImageFilterIUS3IUS3SE3_Pointer":
    """itkKernelImageFilterIUS3IUS3SE3___New_orig__() -> itkKernelImageFilterIUS3IUS3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3___New_orig__()

def itkKernelImageFilterIUS3IUS3SE3_cast(obj: 'itkLightObject') -> "itkKernelImageFilterIUS3IUS3SE3 *":
    """itkKernelImageFilterIUS3IUS3SE3_cast(itkLightObject obj) -> itkKernelImageFilterIUS3IUS3SE3"""
    return _itkFlatStructuringElementPython.itkKernelImageFilterIUS3IUS3SE3_cast(obj)

class itkMovingHistogramImageFilterBaseID2ID2SE2(itkKernelImageFilterID2ID2SE2):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseID2ID2SE2 self) -> itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseID2ID2SE2 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseID2ID2SE2

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID2ID2SE2 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID2ID2SE2"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID2ID2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseID2ID2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID2ID2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID2ID2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID2ID2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseID2ID2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_Clone, None, itkMovingHistogramImageFilterBaseID2ID2SE2)
itkMovingHistogramImageFilterBaseID2ID2SE2.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseID2ID2SE2)
itkMovingHistogramImageFilterBaseID2ID2SE2_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_swigregister
itkMovingHistogramImageFilterBaseID2ID2SE2_swigregister(itkMovingHistogramImageFilterBaseID2ID2SE2)

def itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__() -> "itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer":
    """itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__() -> itkMovingHistogramImageFilterBaseID2ID2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2___New_orig__()

def itkMovingHistogramImageFilterBaseID2ID2SE2_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID2ID2SE2 *":
    """itkMovingHistogramImageFilterBaseID2ID2SE2_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID2ID2SE2"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID2ID2SE2_cast(obj)

class itkMovingHistogramImageFilterBaseID3ID3SE3(itkKernelImageFilterID3ID3SE3):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseID3ID3SE3 self) -> itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseID3ID3SE3 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseID3ID3SE3

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID3ID3SE3 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID3ID3SE3"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseID3ID3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseID3ID3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseID3ID3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseID3ID3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseID3ID3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseID3ID3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_Clone, None, itkMovingHistogramImageFilterBaseID3ID3SE3)
itkMovingHistogramImageFilterBaseID3ID3SE3.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseID3ID3SE3)
itkMovingHistogramImageFilterBaseID3ID3SE3_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_swigregister
itkMovingHistogramImageFilterBaseID3ID3SE3_swigregister(itkMovingHistogramImageFilterBaseID3ID3SE3)

def itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__() -> "itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer":
    """itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__() -> itkMovingHistogramImageFilterBaseID3ID3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3___New_orig__()

def itkMovingHistogramImageFilterBaseID3ID3SE3_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseID3ID3SE3 *":
    """itkMovingHistogramImageFilterBaseID3ID3SE3_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseID3ID3SE3"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseID3ID3SE3_cast(obj)

class itkMovingHistogramImageFilterBaseIF2IF2SE2(itkKernelImageFilterIF2IF2SE2):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIF2IF2SE2 self) -> itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIF2IF2SE2 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIF2IF2SE2

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF2IF2SE2 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF2IF2SE2"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF2IF2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIF2IF2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF2IF2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF2IF2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF2IF2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIF2IF2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_Clone, None, itkMovingHistogramImageFilterBaseIF2IF2SE2)
itkMovingHistogramImageFilterBaseIF2IF2SE2.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIF2IF2SE2)
itkMovingHistogramImageFilterBaseIF2IF2SE2_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_swigregister
itkMovingHistogramImageFilterBaseIF2IF2SE2_swigregister(itkMovingHistogramImageFilterBaseIF2IF2SE2)

def itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__() -> "itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer":
    """itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__() -> itkMovingHistogramImageFilterBaseIF2IF2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2___New_orig__()

def itkMovingHistogramImageFilterBaseIF2IF2SE2_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF2IF2SE2 *":
    """itkMovingHistogramImageFilterBaseIF2IF2SE2_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF2IF2SE2"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF2IF2SE2_cast(obj)

class itkMovingHistogramImageFilterBaseIF3IF3SE3(itkKernelImageFilterIF3IF3SE3):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIF3IF3SE3 self) -> itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIF3IF3SE3 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIF3IF3SE3

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF3IF3SE3 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF3IF3SE3"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIF3IF3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIF3IF3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIF3IF3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIF3IF3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIF3IF3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIF3IF3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_Clone, None, itkMovingHistogramImageFilterBaseIF3IF3SE3)
itkMovingHistogramImageFilterBaseIF3IF3SE3.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIF3IF3SE3)
itkMovingHistogramImageFilterBaseIF3IF3SE3_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_swigregister
itkMovingHistogramImageFilterBaseIF3IF3SE3_swigregister(itkMovingHistogramImageFilterBaseIF3IF3SE3)

def itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__() -> "itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer":
    """itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__() -> itkMovingHistogramImageFilterBaseIF3IF3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3___New_orig__()

def itkMovingHistogramImageFilterBaseIF3IF3SE3_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIF3IF3SE3 *":
    """itkMovingHistogramImageFilterBaseIF3IF3SE3_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIF3IF3SE3"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIF3IF3SE3_cast(obj)

class itkMovingHistogramImageFilterBaseISS2ISS2SE2(itkKernelImageFilterISS2ISS2SE2):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseISS2ISS2SE2 self) -> itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseISS2ISS2SE2 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseISS2ISS2SE2

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS2ISS2SE2 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS2ISS2SE2"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS2ISS2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseISS2ISS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS2ISS2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS2ISS2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS2ISS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseISS2ISS2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_Clone, None, itkMovingHistogramImageFilterBaseISS2ISS2SE2)
itkMovingHistogramImageFilterBaseISS2ISS2SE2.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseISS2ISS2SE2)
itkMovingHistogramImageFilterBaseISS2ISS2SE2_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_swigregister
itkMovingHistogramImageFilterBaseISS2ISS2SE2_swigregister(itkMovingHistogramImageFilterBaseISS2ISS2SE2)

def itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__() -> "itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer":
    """itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__() -> itkMovingHistogramImageFilterBaseISS2ISS2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2___New_orig__()

def itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS2ISS2SE2 *":
    """itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS2ISS2SE2"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS2ISS2SE2_cast(obj)

class itkMovingHistogramImageFilterBaseISS3ISS3SE3(itkKernelImageFilterISS3ISS3SE3):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseISS3ISS3SE3 self) -> itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseISS3ISS3SE3 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseISS3ISS3SE3

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS3ISS3SE3 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS3ISS3SE3"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseISS3ISS3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseISS3ISS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseISS3ISS3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseISS3ISS3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseISS3ISS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseISS3ISS3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_Clone, None, itkMovingHistogramImageFilterBaseISS3ISS3SE3)
itkMovingHistogramImageFilterBaseISS3ISS3SE3.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseISS3ISS3SE3)
itkMovingHistogramImageFilterBaseISS3ISS3SE3_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_swigregister
itkMovingHistogramImageFilterBaseISS3ISS3SE3_swigregister(itkMovingHistogramImageFilterBaseISS3ISS3SE3)

def itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__() -> "itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer":
    """itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__() -> itkMovingHistogramImageFilterBaseISS3ISS3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3___New_orig__()

def itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseISS3ISS3SE3 *":
    """itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseISS3ISS3SE3"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseISS3ISS3SE3_cast(obj)

class itkMovingHistogramImageFilterBaseIUC2IUC2SE2(itkKernelImageFilterIUC2IUC2SE2):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUC2IUC2SE2 self) -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUC2IUC2SE2 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUC2IUC2SE2

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC2IUC2SE2 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC2IUC2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC2IUC2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC2IUC2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUC2IUC2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Clone, None, itkMovingHistogramImageFilterBaseIUC2IUC2SE2)
itkMovingHistogramImageFilterBaseIUC2IUC2SE2.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUC2IUC2SE2)
itkMovingHistogramImageFilterBaseIUC2IUC2SE2_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_swigregister
itkMovingHistogramImageFilterBaseIUC2IUC2SE2_swigregister(itkMovingHistogramImageFilterBaseIUC2IUC2SE2)

def itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__() -> "itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer":
    """itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__() -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2___New_orig__()

def itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC2IUC2SE2 *":
    """itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC2IUC2SE2"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC2IUC2SE2_cast(obj)

class itkMovingHistogramImageFilterBaseIUC3IUC3SE3(itkKernelImageFilterIUC3IUC3SE3):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUC3IUC3SE3 self) -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUC3IUC3SE3 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUC3IUC3SE3

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC3IUC3SE3 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIUC3IUC3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUC3IUC3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUC3IUC3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUC3IUC3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Clone, None, itkMovingHistogramImageFilterBaseIUC3IUC3SE3)
itkMovingHistogramImageFilterBaseIUC3IUC3SE3.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUC3IUC3SE3)
itkMovingHistogramImageFilterBaseIUC3IUC3SE3_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_swigregister
itkMovingHistogramImageFilterBaseIUC3IUC3SE3_swigregister(itkMovingHistogramImageFilterBaseIUC3IUC3SE3)

def itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__() -> "itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer":
    """itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__() -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3___New_orig__()

def itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUC3IUC3SE3 *":
    """itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUC3IUC3SE3"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUC3IUC3SE3_cast(obj)

class itkMovingHistogramImageFilterBaseIUS2IUS2SE2(itkKernelImageFilterIUS2IUS2SE2):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUS2IUS2SE2 self) -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUS2IUS2SE2 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUS2IUS2SE2

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS2IUS2SE2 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS2IUS2SE2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS2IUS2SE2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS2IUS2SE2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUS2IUS2SE2.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Clone, None, itkMovingHistogramImageFilterBaseIUS2IUS2SE2)
itkMovingHistogramImageFilterBaseIUS2IUS2SE2.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUS2IUS2SE2)
itkMovingHistogramImageFilterBaseIUS2IUS2SE2_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_swigregister
itkMovingHistogramImageFilterBaseIUS2IUS2SE2_swigregister(itkMovingHistogramImageFilterBaseIUS2IUS2SE2)

def itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__() -> "itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer":
    """itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__() -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2___New_orig__()

def itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS2IUS2SE2 *":
    """itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS2IUS2SE2"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS2IUS2SE2_cast(obj)

class itkMovingHistogramImageFilterBaseIUS3IUS3SE3(itkKernelImageFilterIUS3IUS3SE3):
    """


    Implements a generic moving histogram algorithm.

    This filter is a base class to implement efficiently many neighborhood
    filters. Instead of visiting all the neighbors of a pixel, the set of
    pixels in the neighborhood is updated when the filter is moving to a
    new pixel. The number of pixels read for each pixel can be very
    smaller than the number of pixels read by a basic algorithm.

    This filter moves the neighborhood over all the pixels of the output
    requested region, and pass the pixel added and removed of the
    neighborhood to the an histogram class. This filter doesn't implement
    the histogram class - it must be implement and passed as template
    parameter. The histogram class is not necessary a real histogram. It
    can be implemented in many ways, and only has to provide the methods
    described below.

    This filter takes 4 template parameters: the input and output image
    type, the structuring element (or kernel) type, and the histogram
    type. The input and output image must have the same number of
    dimension.

    The histogram type is a class which has to implements seven methods: a
    default constructor which takes no parameter.

    void AddPixel( const InputPixelType &p ) is called when a new pixel is
    added to the histogram.

    void RemovePixel( const InputPixelType &p ) is called when a pixel is
    removed of the histogram.

    void AddBoundary() is called when a pixel outside the image is added.
    No value is provided: it's the responsibility to the histogram class
    to get it if needed. This method can be kept empty to ignore the
    boundary pixels.

    void RemoveBoundary() is called to when a pixel outside the image is
    removed. No value is provided: it's the responsibility to the
    histogram class to get it if needed. This method can be kept empty to
    ignore the boundary pixels.

    AType GetValue() is called to set the value of the output image. AType
    must be the output pixel type, or a type castable to the output pixel
    type.

    MovingHistogramImageFilterBase add the new pixels before removing the
    old ones, so, if AddBoundary() is implemented and/or the kernel is
    symmetric, it is safe to consider that the histogram will never be
    empty.

    One histogram is created for each thread by the method NewHistogram().
    The NewHistogram() method can be overriden to pass some parameters to
    the histogram.

    The neighborhood is defined by a structuring element, and must a
    itk::Neighborhood object or a subclass. The structuring element is
    assumed to be composed of binary values (zero or one). Only elements
    of the structuring element having values > 0 are candidates for
    affecting the center pixel.

    See:  MovingWindowMeanImageFilter, RankImageFilter,
    MaskedMovingHistogramImageFilter,

    See:  MovingHistogramMorphologicalGradientImageFilter

    Gaetan Lehmann

    Richard Beare

    C++ includes: itkMovingHistogramImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer":
        """__New_orig__() -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer":
        """Clone(itkMovingHistogramImageFilterBaseIUS3IUS3SE3 self) -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Clone(self)


    def GetPixelsPerTranslation(self) -> "unsigned long":
        """GetPixelsPerTranslation(itkMovingHistogramImageFilterBaseIUS3IUS3SE3 self) -> unsigned long"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_GetPixelsPerTranslation(self)

    __swig_destroy__ = _itkFlatStructuringElementPython.delete_itkMovingHistogramImageFilterBaseIUS3IUS3SE3

    def cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS3IUS3SE3 *":
        """cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3"""
        return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3

        Create a new object of the class itkMovingHistogramImageFilterBaseIUS3IUS3SE3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMovingHistogramImageFilterBaseIUS3IUS3SE3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMovingHistogramImageFilterBaseIUS3IUS3SE3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMovingHistogramImageFilterBaseIUS3IUS3SE3.Clone = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Clone, None, itkMovingHistogramImageFilterBaseIUS3IUS3SE3)
itkMovingHistogramImageFilterBaseIUS3IUS3SE3.GetPixelsPerTranslation = new_instancemethod(_itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_GetPixelsPerTranslation, None, itkMovingHistogramImageFilterBaseIUS3IUS3SE3)
itkMovingHistogramImageFilterBaseIUS3IUS3SE3_swigregister = _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_swigregister
itkMovingHistogramImageFilterBaseIUS3IUS3SE3_swigregister(itkMovingHistogramImageFilterBaseIUS3IUS3SE3)

def itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__() -> "itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer":
    """itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__() -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3_Pointer"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3___New_orig__()

def itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast(obj: 'itkLightObject') -> "itkMovingHistogramImageFilterBaseIUS3IUS3SE3 *":
    """itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast(itkLightObject obj) -> itkMovingHistogramImageFilterBaseIUS3IUS3SE3"""
    return _itkFlatStructuringElementPython.itkMovingHistogramImageFilterBaseIUS3IUS3SE3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def kernel_image_filter(*args, **kwargs):
    """Procedural interface for KernelImageFilter"""
    import itk
    instance = itk.KernelImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def kernel_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.KernelImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.KernelImageFilter.values()[0]
    else:
        filter_object = itk.KernelImageFilter

    kernel_image_filter.__doc__ = filter_object.__doc__
    kernel_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    kernel_image_filter.__doc__ += "Available Keyword Arguments:\n"
    kernel_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def moving_histogram_image_filter_base(*args, **kwargs):
    """Procedural interface for MovingHistogramImageFilterBase"""
    import itk
    instance = itk.MovingHistogramImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def moving_histogram_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MovingHistogramImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.MovingHistogramImageFilterBase.values()[0]
    else:
        filter_object = itk.MovingHistogramImageFilterBase

    moving_histogram_image_filter_base.__doc__ = filter_object.__doc__
    moving_histogram_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    moving_histogram_image_filter_base.__doc__ += "Available Keyword Arguments:\n"
    moving_histogram_image_filter_base.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



