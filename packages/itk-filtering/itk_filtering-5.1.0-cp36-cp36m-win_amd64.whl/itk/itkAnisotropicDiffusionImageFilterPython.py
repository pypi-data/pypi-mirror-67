# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAnisotropicDiffusionImageFilterPython
else:
    import _itkAnisotropicDiffusionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAnisotropicDiffusionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAnisotropicDiffusionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkDenseFiniteDifferenceImageFilterPython
import ITKCommonBasePython
import pyBasePython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import itkPointPython
import vnl_matrix_fixedPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterAPython
import itkFiniteDifferenceFunctionPython

def itkAnisotropicDiffusionImageFilterICVF43ICVF43_New():
  return itkAnisotropicDiffusionImageFilterICVF43ICVF43.New()


def itkAnisotropicDiffusionImageFilterICVF42ICVF42_New():
  return itkAnisotropicDiffusionImageFilterICVF42ICVF42.New()


def itkAnisotropicDiffusionImageFilterICVF33ICVF33_New():
  return itkAnisotropicDiffusionImageFilterICVF33ICVF33.New()


def itkAnisotropicDiffusionImageFilterICVF32ICVF32_New():
  return itkAnisotropicDiffusionImageFilterICVF32ICVF32.New()


def itkAnisotropicDiffusionImageFilterICVF23ICVF23_New():
  return itkAnisotropicDiffusionImageFilterICVF23ICVF23.New()


def itkAnisotropicDiffusionImageFilterICVF22ICVF22_New():
  return itkAnisotropicDiffusionImageFilterICVF22ICVF22.New()


def itkAnisotropicDiffusionImageFilterIVF43IVF43_New():
  return itkAnisotropicDiffusionImageFilterIVF43IVF43.New()


def itkAnisotropicDiffusionImageFilterIVF42IVF42_New():
  return itkAnisotropicDiffusionImageFilterIVF42IVF42.New()


def itkAnisotropicDiffusionImageFilterIVF33IVF33_New():
  return itkAnisotropicDiffusionImageFilterIVF33IVF33.New()


def itkAnisotropicDiffusionImageFilterIVF32IVF32_New():
  return itkAnisotropicDiffusionImageFilterIVF32IVF32.New()


def itkAnisotropicDiffusionImageFilterIVF23IVF23_New():
  return itkAnisotropicDiffusionImageFilterIVF23IVF23.New()


def itkAnisotropicDiffusionImageFilterIVF22IVF22_New():
  return itkAnisotropicDiffusionImageFilterIVF22IVF22.New()


def itkAnisotropicDiffusionImageFilterID3ID3_New():
  return itkAnisotropicDiffusionImageFilterID3ID3.New()


def itkAnisotropicDiffusionImageFilterID2ID2_New():
  return itkAnisotropicDiffusionImageFilterID2ID2.New()


def itkAnisotropicDiffusionImageFilterIF3IF3_New():
  return itkAnisotropicDiffusionImageFilterIF3IF3.New()


def itkAnisotropicDiffusionImageFilterIF2IF2_New():
  return itkAnisotropicDiffusionImageFilterIF2IF2.New()

class itkAnisotropicDiffusionImageFilterICVF22ICVF22(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF22ICVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF22ICVF22

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF22ICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF22ICVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF22ICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF22ICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF22ICVF22 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister(itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast

class itkAnisotropicDiffusionImageFilterICVF23ICVF23(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF23ICVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF23ICVF23

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF23ICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF23ICVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF23ICVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF23ICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF23ICVF23 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister(itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast

class itkAnisotropicDiffusionImageFilterICVF32ICVF32(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF32ICVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF32ICVF32

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF32ICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF32ICVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF32ICVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF32ICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF32ICVF32 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister(itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast

class itkAnisotropicDiffusionImageFilterICVF33ICVF33(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF33ICVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF33ICVF33

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF33ICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF33ICVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF33ICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF33ICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF33ICVF33 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister(itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast

class itkAnisotropicDiffusionImageFilterICVF42ICVF42(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF42ICVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF42ICVF42

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF42ICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF42ICVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF42ICVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF42ICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF42ICVF42 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister(itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast

class itkAnisotropicDiffusionImageFilterICVF43ICVF43(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterICVF43ICVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterICVF43ICVF43

        Create a new object of the class itkAnisotropicDiffusionImageFilterICVF43ICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterICVF43ICVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterICVF43ICVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterICVF43ICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterICVF43ICVF43 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister(itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast

class itkAnisotropicDiffusionImageFilterID2ID2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID2ID2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterID2ID2

        Create a new object of the class itkAnisotropicDiffusionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterID2ID2 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_swigregister(itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast

class itkAnisotropicDiffusionImageFilterID3ID3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID3ID3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterID3ID3

        Create a new object of the class itkAnisotropicDiffusionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterID3ID3 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_swigregister(itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast

class itkAnisotropicDiffusionImageFilterIF2IF2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIF2IF2

        Create a new object of the class itkAnisotropicDiffusionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIF2IF2 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_swigregister(itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast

class itkAnisotropicDiffusionImageFilterIF3IF3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIF3IF3

        Create a new object of the class itkAnisotropicDiffusionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIF3IF3 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_swigregister(itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast

class itkAnisotropicDiffusionImageFilterIVF22IVF22(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF22IVF22 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF22IVF22

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF22IVF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF22IVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF22IVF22 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_swigregister(itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast

class itkAnisotropicDiffusionImageFilterIVF23IVF23(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF23IVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF23IVF23

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF23IVF23.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF23IVF23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF23IVF23 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_swigregister(itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast

class itkAnisotropicDiffusionImageFilterIVF32IVF32(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF32IVF32 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF32IVF32

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF32IVF32.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF32IVF32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF32IVF32 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_swigregister(itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast

class itkAnisotropicDiffusionImageFilterIVF33IVF33(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF33IVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF33IVF33

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF33IVF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF33IVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF33IVF33 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_swigregister(itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast

class itkAnisotropicDiffusionImageFilterIVF42IVF42(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF42IVF42 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF42IVF42

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF42IVF42.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF42IVF42.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF42IVF42 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_swigregister(itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast

class itkAnisotropicDiffusionImageFilterIVF43IVF43(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43):
    r"""Proxy of C++ itkAnisotropicDiffusionImageFilterIVF43IVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicDiffusionImageFilterIVF43IVF43

        Create a new object of the class itkAnisotropicDiffusionImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicDiffusionImageFilterIVF43IVF43.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicDiffusionImageFilterIVF43IVF43.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicDiffusionImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAnisotropicDiffusionImageFilterIVF43IVF43 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_swigregister(itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anisotropic_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for AnisotropicDiffusionImageFilter"""
    import itk
    instance = itk.AnisotropicDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anisotropic_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AnisotropicDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.AnisotropicDiffusionImageFilter

    anisotropic_diffusion_image_filter.__doc__ = filter_object.__doc__
    anisotropic_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anisotropic_diffusion_image_filter.__doc__ += "Available Keyword Arguments:\n"
    anisotropic_diffusion_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



