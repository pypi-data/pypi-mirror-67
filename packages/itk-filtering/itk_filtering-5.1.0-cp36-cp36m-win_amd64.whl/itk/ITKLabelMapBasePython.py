# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ITKLabelMapBasePython
else:
    import _ITKLabelMapBasePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _ITKLabelMapBasePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _ITKLabelMapBasePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkImageSourcePython
import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkVectorPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import itkPointPython
import vnl_matrix_fixedPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkStatisticsLabelObjectPython
import itkHistogramPython
import itkArrayPython
import itkSamplePython
import itkShapeLabelObjectPython
import itkLabelObjectPython
import itkLabelObjectLinePython
import itkAffineTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkArray2DPython
import itkOptimizerParametersPython
import itkMatrixOffsetTransformBasePython
import itkImageToImageFilterCommonPython

def itkImageToImageFilterLM3IRGBUC3_New():
  return itkImageToImageFilterLM3IRGBUC3.New()


def itkImageToImageFilterLM3ID3_New():
  return itkImageToImageFilterLM3ID3.New()


def itkImageToImageFilterID3LM3_New():
  return itkImageToImageFilterID3LM3.New()


def itkImageToImageFilterLM3IF3_New():
  return itkImageToImageFilterLM3IF3.New()


def itkImageToImageFilterIF3LM3_New():
  return itkImageToImageFilterIF3LM3.New()


def itkImageToImageFilterLM3IUS3_New():
  return itkImageToImageFilterLM3IUS3.New()


def itkImageToImageFilterIUS3LM3_New():
  return itkImageToImageFilterIUS3LM3.New()


def itkImageToImageFilterLM3IUC3_New():
  return itkImageToImageFilterLM3IUC3.New()


def itkImageToImageFilterIUC3LM3_New():
  return itkImageToImageFilterIUC3LM3.New()


def itkImageToImageFilterLM3ISS3_New():
  return itkImageToImageFilterLM3ISS3.New()


def itkImageToImageFilterISS3LM3_New():
  return itkImageToImageFilterISS3LM3.New()


def itkImageToImageFilterLM3LM3_New():
  return itkImageToImageFilterLM3LM3.New()


def itkImageToImageFilterLM2IRGBUC2_New():
  return itkImageToImageFilterLM2IRGBUC2.New()


def itkImageToImageFilterLM2ID2_New():
  return itkImageToImageFilterLM2ID2.New()


def itkImageToImageFilterID2LM2_New():
  return itkImageToImageFilterID2LM2.New()


def itkImageToImageFilterLM2IF2_New():
  return itkImageToImageFilterLM2IF2.New()


def itkImageToImageFilterIF2LM2_New():
  return itkImageToImageFilterIF2LM2.New()


def itkImageToImageFilterLM2IUS2_New():
  return itkImageToImageFilterLM2IUS2.New()


def itkImageToImageFilterIUS2LM2_New():
  return itkImageToImageFilterIUS2LM2.New()


def itkImageToImageFilterLM2IUC2_New():
  return itkImageToImageFilterLM2IUC2.New()


def itkImageToImageFilterIUC2LM2_New():
  return itkImageToImageFilterIUC2LM2.New()


def itkImageToImageFilterLM2ISS2_New():
  return itkImageToImageFilterLM2ISS2.New()


def itkImageToImageFilterISS2LM2_New():
  return itkImageToImageFilterISS2LM2.New()


def itkImageToImageFilterLM2LM2_New():
  return itkImageToImageFilterLM2LM2.New()


def itkImageSourceLM3_New():
  return itkImageSourceLM3.New()


def itkImageSourceLM2_New():
  return itkImageSourceLM2.New()


def itkLabelMap3_New():
  return itkLabelMap3.New()


def itkLabelMap2_New():
  return itkLabelMap2.New()


def itkLabelMap2_New():
  return itkLabelMap2.New()

class itkImageSourceLM2(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceLM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM2_GetOutput)
    GraftOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM2_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM2_MakeOutput)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageSourceLM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceLM2

        Create a new object of the class itkImageSourceLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceLM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceLM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceLM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSourceLM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageSourceLM2_swigregister(itkImageSourceLM2)
itkImageSourceLM2_cast = _ITKLabelMapBasePython.itkImageSourceLM2_cast

class itkImageSourceLM3(ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ itkImageSourceLM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM3_GetOutput)
    GraftOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM3_GraftNthOutput)
    MakeOutput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageSourceLM3_MakeOutput)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageSourceLM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageSourceLM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceLM3

        Create a new object of the class itkImageSourceLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceLM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceLM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceLM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageSourceLM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageSourceLM3_swigregister(itkImageSourceLM3)
itkImageSourceLM3_cast = _ITKLabelMapBasePython.itkImageSourceLM3_cast

class itkImageToImageFilterID2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterID2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterID2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID2LM2

        Create a new object of the class itkImageToImageFilterID2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterID2LM2_swigregister(itkImageToImageFilterID2LM2)
itkImageToImageFilterID2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterID2LM2_cast

class itkImageToImageFilterID3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterID3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterID3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterID3LM3

        Create a new object of the class itkImageToImageFilterID3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterID3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterID3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterID3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterID3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterID3LM3_swigregister(itkImageToImageFilterID3LM3)
itkImageToImageFilterID3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterID3LM3_cast

class itkImageToImageFilterIF2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIF2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF2LM2

        Create a new object of the class itkImageToImageFilterIF2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_swigregister(itkImageToImageFilterIF2LM2)
itkImageToImageFilterIF2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterIF2LM2_cast

class itkImageToImageFilterIF3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIF3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIF3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIF3LM3

        Create a new object of the class itkImageToImageFilterIF3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIF3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIF3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIF3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIF3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_swigregister(itkImageToImageFilterIF3LM3)
itkImageToImageFilterIF3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterIF3LM3_cast

class itkImageToImageFilterISS2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterISS2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS2LM2

        Create a new object of the class itkImageToImageFilterISS2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_swigregister(itkImageToImageFilterISS2LM2)
itkImageToImageFilterISS2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterISS2LM2_cast

class itkImageToImageFilterISS3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterISS3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterISS3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterISS3LM3

        Create a new object of the class itkImageToImageFilterISS3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterISS3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterISS3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterISS3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterISS3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_swigregister(itkImageToImageFilterISS3LM3)
itkImageToImageFilterISS3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterISS3LM3_cast

class itkImageToImageFilterIUC2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIUC2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC2LM2

        Create a new object of the class itkImageToImageFilterIUC2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_swigregister(itkImageToImageFilterIUC2LM2)
itkImageToImageFilterIUC2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterIUC2LM2_cast

class itkImageToImageFilterIUC3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIUC3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUC3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUC3LM3

        Create a new object of the class itkImageToImageFilterIUC3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUC3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUC3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUC3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUC3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_swigregister(itkImageToImageFilterIUC3LM3)
itkImageToImageFilterIUC3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterIUC3LM3_cast

class itkImageToImageFilterIUS2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterIUS2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS2LM2

        Create a new object of the class itkImageToImageFilterIUS2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_swigregister(itkImageToImageFilterIUS2LM2)
itkImageToImageFilterIUS2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterIUS2LM2_cast

class itkImageToImageFilterIUS3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterIUS3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterIUS3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIUS3LM3

        Create a new object of the class itkImageToImageFilterIUS3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIUS3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIUS3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIUS3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterIUS3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_swigregister(itkImageToImageFilterIUS3LM3)
itkImageToImageFilterIUS3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterIUS3LM3_cast

class itkImageToImageFilterLM2ID2(itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkImageToImageFilterLM2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2ID2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2ID2

        Create a new object of the class itkImageToImageFilterLM2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2ID2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_swigregister(itkImageToImageFilterLM2ID2)
itkImageToImageFilterLM2ID2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2ID2_cast

class itkImageToImageFilterLM2IF2(itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkImageToImageFilterLM2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IF2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IF2

        Create a new object of the class itkImageToImageFilterLM2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2IF2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_swigregister(itkImageToImageFilterLM2IF2)
itkImageToImageFilterLM2IF2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2IF2_cast

class itkImageToImageFilterLM2IRGBUC2(itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""Proxy of C++ itkImageToImageFilterLM2IRGBUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IRGBUC2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IRGBUC2

        Create a new object of the class itkImageToImageFilterLM2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2IRGBUC2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_swigregister(itkImageToImageFilterLM2IRGBUC2)
itkImageToImageFilterLM2IRGBUC2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2IRGBUC2_cast

class itkImageToImageFilterLM2ISS2(itkImageSourcePython.itkImageSourceISS2):
    r"""Proxy of C++ itkImageToImageFilterLM2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2ISS2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2ISS2

        Create a new object of the class itkImageToImageFilterLM2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2ISS2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_swigregister(itkImageToImageFilterLM2ISS2)
itkImageToImageFilterLM2ISS2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2ISS2_cast

class itkImageToImageFilterLM2IUC2(itkImageSourcePython.itkImageSourceIUC2):
    r"""Proxy of C++ itkImageToImageFilterLM2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUC2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IUC2

        Create a new object of the class itkImageToImageFilterLM2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2IUC2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_swigregister(itkImageToImageFilterLM2IUC2)
itkImageToImageFilterLM2IUC2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2IUC2_cast

class itkImageToImageFilterLM2IUS2(itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkImageToImageFilterLM2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2IUS2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2IUS2

        Create a new object of the class itkImageToImageFilterLM2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2IUS2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_swigregister(itkImageToImageFilterLM2IUS2)
itkImageToImageFilterLM2IUS2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2IUS2_cast

class itkImageToImageFilterLM2LM2(itkImageSourceLM2):
    r"""Proxy of C++ itkImageToImageFilterLM2LM2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM2LM2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM2LM2

        Create a new object of the class itkImageToImageFilterLM2LM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM2LM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM2LM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM2LM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM2LM2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_swigregister(itkImageToImageFilterLM2LM2)
itkImageToImageFilterLM2LM2_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM2LM2_cast

class itkImageToImageFilterLM3ID3(itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkImageToImageFilterLM3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3ID3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3ID3

        Create a new object of the class itkImageToImageFilterLM3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3ID3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_swigregister(itkImageToImageFilterLM3ID3)
itkImageToImageFilterLM3ID3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3ID3_cast

class itkImageToImageFilterLM3IF3(itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkImageToImageFilterLM3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IF3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IF3

        Create a new object of the class itkImageToImageFilterLM3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3IF3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_swigregister(itkImageToImageFilterLM3IF3)
itkImageToImageFilterLM3IF3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3IF3_cast

class itkImageToImageFilterLM3IRGBUC3(itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""Proxy of C++ itkImageToImageFilterLM3IRGBUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IRGBUC3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IRGBUC3

        Create a new object of the class itkImageToImageFilterLM3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3IRGBUC3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_swigregister(itkImageToImageFilterLM3IRGBUC3)
itkImageToImageFilterLM3IRGBUC3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3IRGBUC3_cast

class itkImageToImageFilterLM3ISS3(itkImageSourcePython.itkImageSourceISS3):
    r"""Proxy of C++ itkImageToImageFilterLM3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3ISS3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3ISS3

        Create a new object of the class itkImageToImageFilterLM3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3ISS3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_swigregister(itkImageToImageFilterLM3ISS3)
itkImageToImageFilterLM3ISS3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3ISS3_cast

class itkImageToImageFilterLM3IUC3(itkImageSourcePython.itkImageSourceIUC3):
    r"""Proxy of C++ itkImageToImageFilterLM3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUC3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IUC3

        Create a new object of the class itkImageToImageFilterLM3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3IUC3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_swigregister(itkImageToImageFilterLM3IUC3)
itkImageToImageFilterLM3IUC3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3IUC3_cast

class itkImageToImageFilterLM3IUS3(itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkImageToImageFilterLM3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3IUS3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3IUS3

        Create a new object of the class itkImageToImageFilterLM3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3IUS3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_swigregister(itkImageToImageFilterLM3IUS3)
itkImageToImageFilterLM3IUS3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3IUS3_cast

class itkImageToImageFilterLM3LM3(itkImageSourceLM3):
    r"""Proxy of C++ itkImageToImageFilterLM3LM3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetInput)
    GetInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetInput)
    PushBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushBackInput)
    PopBackInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_GetDirectionTolerance)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkImageToImageFilterLM3LM3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterLM3LM3

        Create a new object of the class itkImageToImageFilterLM3LM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterLM3LM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterLM3LM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterLM3LM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageToImageFilterLM3LM3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_swigregister(itkImageToImageFilterLM3LM3)
itkImageToImageFilterLM3LM3_cast = _ITKLabelMapBasePython.itkImageToImageFilterLM3LM3_cast

class itkLabelMap2(itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkLabelMap2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_ITKLabelMapBasePython.itkLabelMap2___New_orig__)
    Clone = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_Clone)
    Allocate = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_Allocate)
    Graft = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_Graft)
    HasLabel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_HasLabel)
    GetNthLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetNthLabelObject)
    GetPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetPixel)
    SetPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_SetPixel)
    AddPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_AddPixel)
    RemovePixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_RemovePixel)
    SetLine = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_SetLine)
    GetLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetLabelObject)
    AddLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_AddLabelObject)
    PushLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_PushLabelObject)
    RemoveLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_RemoveLabelObject)
    RemoveLabel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_RemoveLabel)
    ClearLabels = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_ClearLabels)
    GetNumberOfLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetNumberOfLabelObjects)
    GetLabels = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetLabels)
    GetLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetLabelObjects)
    GetBackgroundValue = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_SetBackgroundValue)
    PrintLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_PrintLabelObjects)
    Optimize = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap2_Optimize)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap2
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkLabelMap2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMap2

        Create a new object of the class itkLabelMap2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


    def New(*args, **kargs):
        """New() -> itkLabelMap2

        Create a new object of the class itkLabelMap2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


# Register itkLabelMap2 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkLabelMap2_swigregister(itkLabelMap2)
itkLabelMap2___New_orig__ = _ITKLabelMapBasePython.itkLabelMap2___New_orig__
itkLabelMap2_cast = _ITKLabelMapBasePython.itkLabelMap2_cast

class itkLabelMap3(itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkLabelMap3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_ITKLabelMapBasePython.itkLabelMap3___New_orig__)
    Clone = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_Clone)
    Allocate = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_Allocate)
    Graft = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_Graft)
    HasLabel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_HasLabel)
    GetNthLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetNthLabelObject)
    GetPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetPixel)
    SetPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_SetPixel)
    AddPixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_AddPixel)
    RemovePixel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_RemovePixel)
    SetLine = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_SetLine)
    GetLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetLabelObject)
    AddLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_AddLabelObject)
    PushLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_PushLabelObject)
    RemoveLabelObject = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_RemoveLabelObject)
    RemoveLabel = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_RemoveLabel)
    ClearLabels = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_ClearLabels)
    GetNumberOfLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetNumberOfLabelObjects)
    GetLabels = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetLabels)
    GetLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetLabelObjects)
    GetBackgroundValue = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_GetBackgroundValue)
    SetBackgroundValue = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_SetBackgroundValue)
    PrintLabelObjects = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_PrintLabelObjects)
    Optimize = _swig_new_instance_method(_ITKLabelMapBasePython.itkLabelMap3_Optimize)
    __swig_destroy__ = _ITKLabelMapBasePython.delete_itkLabelMap3
    cast = _swig_new_static_method(_ITKLabelMapBasePython.itkLabelMap3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMap3

        Create a new object of the class itkLabelMap3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMap3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLabelMap3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLabelMap3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __len__(self):
        return self.GetNumberOfLabelObjects()
    def __getitem__(self, label):
        return self.GetLabelObject(label)
    def __iter__(self):
        labels = self.GetLabels()
        for label in labels:
            yield self.GetLabelObject(label)


# Register itkLabelMap3 in _ITKLabelMapBasePython:
_ITKLabelMapBasePython.itkLabelMap3_swigregister(itkLabelMap3)
itkLabelMap3___New_orig__ = _ITKLabelMapBasePython.itkLabelMap3___New_orig__
itkLabelMap3_cast = _ITKLabelMapBasePython.itkLabelMap3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        filter_object = itk.ImageSource.values()[0]
    else:
        filter_object = itk.ImageSource

    image_source.__doc__ = filter_object.__doc__
    image_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_source.__doc__ += "Available Keyword Arguments:\n"
    image_source.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ImageToImageFilter.values()[0]
    else:
        filter_object = itk.ImageToImageFilter

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_to_image_filter.__doc__ += "Available Keyword Arguments:\n"
    image_to_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



