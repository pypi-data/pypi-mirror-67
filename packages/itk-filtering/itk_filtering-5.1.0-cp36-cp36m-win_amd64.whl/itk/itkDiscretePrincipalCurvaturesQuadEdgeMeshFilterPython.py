# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython
else:
    import _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkDiscreteCurvatureQuadEdgeMeshFilterPython
import itkQuadEdgeMeshToQuadEdgeMeshFilterPython
import ITKCommonBasePython
import pyBasePython
import itkQuadEdgeMeshBasePython
import itkQuadEdgeCellTraitsInfoPython
import itkQuadEdgeMeshPointPython
import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkVectorPython
import itkMapContainerPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkOffsetPython
import itkImageRegionPython
import itkQuadEdgeMeshLineCellPython
import itkArrayPython

def itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_New():
  return itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3.New()


def itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_New():
  return itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2.New()

class itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2(itkDiscreteCurvatureQuadEdgeMeshFilterPython.itkDiscreteCurvatureQuadEdgeMeshFilterQEMD2):
    r"""Proxy of C++ itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OutputIsFloatingPointCheck = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.delete_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2
    cast = _swig_new_static_method(_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2 in _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython:
_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_swigregister(itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2)
itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_cast = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD2_cast

class itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3(itkDiscreteCurvatureQuadEdgeMeshFilterPython.itkDiscreteCurvatureQuadEdgeMeshFilterQEMD3):
    r"""Proxy of C++ itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OutputIsFloatingPointCheck = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.delete_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3
    cast = _swig_new_static_method(_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3 in _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython:
_itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_swigregister(itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3)
itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_cast = _itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterPython.itkDiscretePrincipalCurvaturesQuadEdgeMeshFilterQEMD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def discrete_principal_curvatures_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for DiscretePrincipalCurvaturesQuadEdgeMeshFilter"""
    import itk
    instance = itk.DiscretePrincipalCurvaturesQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def discrete_principal_curvatures_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DiscretePrincipalCurvaturesQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.DiscretePrincipalCurvaturesQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.DiscretePrincipalCurvaturesQuadEdgeMeshFilter

    discrete_principal_curvatures_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    discrete_principal_curvatures_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    discrete_principal_curvatures_quad_edge_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    discrete_principal_curvatures_quad_edge_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



