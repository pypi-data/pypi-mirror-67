# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorGradientMagnitudeImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorGradientMagnitudeImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorGradientMagnitudeImageFilterPython
            return _itkVectorGradientMagnitudeImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorGradientMagnitudeImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorGradientMagnitudeImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorGradientMagnitudeImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkFixedArrayPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkVectorGradientMagnitudeImageFilterIVF33D_New():
  return itkVectorGradientMagnitudeImageFilterIVF33D.New()


def itkVectorGradientMagnitudeImageFilterIVF33F_New():
  return itkVectorGradientMagnitudeImageFilterIVF33F.New()


def itkVectorGradientMagnitudeImageFilterIVF22D_New():
  return itkVectorGradientMagnitudeImageFilterIVF22D.New()


def itkVectorGradientMagnitudeImageFilterIVF22F_New():
  return itkVectorGradientMagnitudeImageFilterIVF22F.New()

class itkVectorGradientMagnitudeImageFilterIVF22D(itkImageToImageFilterBPython.itkImageToImageFilterIVF22ID2):
    """


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkVectorGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF22D_Pointer":
        """__New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF22D_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorGradientMagnitudeImageFilterIVF22D_Pointer":
        """Clone(itkVectorGradientMagnitudeImageFilterIVF22D self) -> itkVectorGradientMagnitudeImageFilterIVF22D_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkVectorGradientMagnitudeImageFilterIVF22D self)

        VectorGradientMagnitudeImageFilter needs a larger input requested
        region than the output requested region (larger by the kernel size to
        calculate derivatives). As such, VectorGradientMagnitudeImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion()
        in order to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkVectorGradientMagnitudeImageFilterIVF22D self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the gradient in
        the space in which the data was acquired. Default is ImageSpacingOn.

        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkVectorGradientMagnitudeImageFilterIVF22D self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the gradient in the image space. Default is
        ImageSpacingOn. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF22D self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF22D self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF22D self, itkFixedArrayD2 _arg)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetDerivativeWeights(self, _arg)


    def GetDerivativeWeights(self) -> "itkFixedArrayD2 const &":
        """GetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF22D self) -> itkFixedArrayD2"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetDerivativeWeights(self)


    def SetComponentWeights(self, _arg: 'itkFixedArrayD2') -> "void":
        """
        SetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF22D self, itkFixedArrayD2 _arg)

        Set/Get the
        array of weightings for the different components of the vector.
        Default values are 1.0. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetComponentWeights(self, _arg)


    def GetComponentWeights(self) -> "itkFixedArrayD2 const &":
        """GetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF22D self) -> itkFixedArrayD2"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetComponentWeights(self)


    def SetUsePrincipleComponents(self, _arg: 'bool const') -> "void":
        """
        SetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF22D self, bool const _arg)

        Set/Get
        principle components calculation mode. When this is set to TRUE/ON,
        the gradient calculation will involve a principle component analysis
        of the partial derivatives of the color components. When this value is
        set to FALSE/OFF, the calculation is done as a square root of weighted
        sum of the derivatives squared. Default is UsePrincipleComponents =
        true. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponents(self, _arg)


    def GetUsePrincipleComponents(self) -> "bool":
        """GetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF22D self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUsePrincipleComponents(self)


    def SetUsePrincipleComponentsOn(self) -> "void":
        """SetUsePrincipleComponentsOn(itkVectorGradientMagnitudeImageFilterIVF22D self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOn(self)


    def SetUsePrincipleComponentsOff(self) -> "void":
        """SetUsePrincipleComponentsOff(itkVectorGradientMagnitudeImageFilterIVF22D self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOff(self)


    def CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
        """CubicSolver(double * arg0, double * arg1) -> int"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver(arg0, arg1)

    CubicSolver = staticmethod(CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_InputHasNumericTraitsCheck
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_RealTypeHasNumericTraitsCheck
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF22D

    def cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF22D *":
        """cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF22D"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF22D

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorGradientMagnitudeImageFilterIVF22D.Clone = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_Clone, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.GenerateInputRequestedRegion = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GenerateInputRequestedRegion, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUseImageSpacingOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOn, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUseImageSpacingOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacingOff, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.GetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.GetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.GetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.GetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_GetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUsePrincipleComponentsOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOn, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D.SetUsePrincipleComponentsOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_SetUsePrincipleComponentsOff, None, itkVectorGradientMagnitudeImageFilterIVF22D)
itkVectorGradientMagnitudeImageFilterIVF22D_swigregister = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_swigregister
itkVectorGradientMagnitudeImageFilterIVF22D_swigregister(itkVectorGradientMagnitudeImageFilterIVF22D)

def itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF22D_Pointer":
    """itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF22D_Pointer"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D___New_orig__()

def itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
    """itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver(double * arg0, double * arg1) -> int"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_CubicSolver(arg0, arg1)

def itkVectorGradientMagnitudeImageFilterIVF22D_cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF22D *":
    """itkVectorGradientMagnitudeImageFilterIVF22D_cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF22D"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22D_cast(obj)

class itkVectorGradientMagnitudeImageFilterIVF22F(itkImageToImageFilterBPython.itkImageToImageFilterIVF22IF2):
    """


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkVectorGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF22F_Pointer":
        """__New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF22F_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorGradientMagnitudeImageFilterIVF22F_Pointer":
        """Clone(itkVectorGradientMagnitudeImageFilterIVF22F self) -> itkVectorGradientMagnitudeImageFilterIVF22F_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkVectorGradientMagnitudeImageFilterIVF22F self)

        VectorGradientMagnitudeImageFilter needs a larger input requested
        region than the output requested region (larger by the kernel size to
        calculate derivatives). As such, VectorGradientMagnitudeImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion()
        in order to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkVectorGradientMagnitudeImageFilterIVF22F self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the gradient in
        the space in which the data was acquired. Default is ImageSpacingOn.

        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkVectorGradientMagnitudeImageFilterIVF22F self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the gradient in the image space. Default is
        ImageSpacingOn. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF22F self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF22F self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, _arg: 'itkFixedArrayF2') -> "void":
        """
        SetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF22F self, itkFixedArrayF2 _arg)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetDerivativeWeights(self, _arg)


    def GetDerivativeWeights(self) -> "itkFixedArrayF2 const &":
        """GetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF22F self) -> itkFixedArrayF2"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetDerivativeWeights(self)


    def SetComponentWeights(self, _arg: 'itkFixedArrayF2') -> "void":
        """
        SetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF22F self, itkFixedArrayF2 _arg)

        Set/Get the
        array of weightings for the different components of the vector.
        Default values are 1.0. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetComponentWeights(self, _arg)


    def GetComponentWeights(self) -> "itkFixedArrayF2 const &":
        """GetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF22F self) -> itkFixedArrayF2"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetComponentWeights(self)


    def SetUsePrincipleComponents(self, _arg: 'bool const') -> "void":
        """
        SetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF22F self, bool const _arg)

        Set/Get
        principle components calculation mode. When this is set to TRUE/ON,
        the gradient calculation will involve a principle component analysis
        of the partial derivatives of the color components. When this value is
        set to FALSE/OFF, the calculation is done as a square root of weighted
        sum of the derivatives squared. Default is UsePrincipleComponents =
        true. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponents(self, _arg)


    def GetUsePrincipleComponents(self) -> "bool":
        """GetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF22F self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUsePrincipleComponents(self)


    def SetUsePrincipleComponentsOn(self) -> "void":
        """SetUsePrincipleComponentsOn(itkVectorGradientMagnitudeImageFilterIVF22F self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOn(self)


    def SetUsePrincipleComponentsOff(self) -> "void":
        """SetUsePrincipleComponentsOff(itkVectorGradientMagnitudeImageFilterIVF22F self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOff(self)


    def CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
        """CubicSolver(double * arg0, double * arg1) -> int"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver(arg0, arg1)

    CubicSolver = staticmethod(CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_InputHasNumericTraitsCheck
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_RealTypeHasNumericTraitsCheck
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF22F

    def cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF22F *":
        """cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF22F"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF22F

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF22F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF22F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorGradientMagnitudeImageFilterIVF22F.Clone = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_Clone, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.GenerateInputRequestedRegion = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GenerateInputRequestedRegion, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUseImageSpacingOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOn, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUseImageSpacingOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacingOff, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.GetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.GetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.GetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.GetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_GetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUsePrincipleComponentsOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOn, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F.SetUsePrincipleComponentsOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_SetUsePrincipleComponentsOff, None, itkVectorGradientMagnitudeImageFilterIVF22F)
itkVectorGradientMagnitudeImageFilterIVF22F_swigregister = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_swigregister
itkVectorGradientMagnitudeImageFilterIVF22F_swigregister(itkVectorGradientMagnitudeImageFilterIVF22F)

def itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF22F_Pointer":
    """itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF22F_Pointer"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F___New_orig__()

def itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
    """itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver(double * arg0, double * arg1) -> int"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_CubicSolver(arg0, arg1)

def itkVectorGradientMagnitudeImageFilterIVF22F_cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF22F *":
    """itkVectorGradientMagnitudeImageFilterIVF22F_cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF22F"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF22F_cast(obj)

class itkVectorGradientMagnitudeImageFilterIVF33D(itkImageToImageFilterBPython.itkImageToImageFilterIVF33ID3):
    """


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkVectorGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF33D_Pointer":
        """__New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF33D_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorGradientMagnitudeImageFilterIVF33D_Pointer":
        """Clone(itkVectorGradientMagnitudeImageFilterIVF33D self) -> itkVectorGradientMagnitudeImageFilterIVF33D_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkVectorGradientMagnitudeImageFilterIVF33D self)

        VectorGradientMagnitudeImageFilter needs a larger input requested
        region than the output requested region (larger by the kernel size to
        calculate derivatives). As such, VectorGradientMagnitudeImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion()
        in order to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkVectorGradientMagnitudeImageFilterIVF33D self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the gradient in
        the space in which the data was acquired. Default is ImageSpacingOn.

        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkVectorGradientMagnitudeImageFilterIVF33D self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the gradient in the image space. Default is
        ImageSpacingOn. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF33D self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF33D self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF33D self, itkFixedArrayD3 _arg)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetDerivativeWeights(self, _arg)


    def GetDerivativeWeights(self) -> "itkFixedArrayD3 const &":
        """GetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF33D self) -> itkFixedArrayD3"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetDerivativeWeights(self)


    def SetComponentWeights(self, _arg: 'itkFixedArrayD3') -> "void":
        """
        SetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF33D self, itkFixedArrayD3 _arg)

        Set/Get the
        array of weightings for the different components of the vector.
        Default values are 1.0. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetComponentWeights(self, _arg)


    def GetComponentWeights(self) -> "itkFixedArrayD3 const &":
        """GetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF33D self) -> itkFixedArrayD3"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetComponentWeights(self)


    def SetUsePrincipleComponents(self, _arg: 'bool const') -> "void":
        """
        SetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF33D self, bool const _arg)

        Set/Get
        principle components calculation mode. When this is set to TRUE/ON,
        the gradient calculation will involve a principle component analysis
        of the partial derivatives of the color components. When this value is
        set to FALSE/OFF, the calculation is done as a square root of weighted
        sum of the derivatives squared. Default is UsePrincipleComponents =
        true. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponents(self, _arg)


    def GetUsePrincipleComponents(self) -> "bool":
        """GetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF33D self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUsePrincipleComponents(self)


    def SetUsePrincipleComponentsOn(self) -> "void":
        """SetUsePrincipleComponentsOn(itkVectorGradientMagnitudeImageFilterIVF33D self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOn(self)


    def SetUsePrincipleComponentsOff(self) -> "void":
        """SetUsePrincipleComponentsOff(itkVectorGradientMagnitudeImageFilterIVF33D self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOff(self)


    def CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
        """CubicSolver(double * arg0, double * arg1) -> int"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver(arg0, arg1)

    CubicSolver = staticmethod(CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_InputHasNumericTraitsCheck
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_RealTypeHasNumericTraitsCheck
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF33D

    def cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF33D *":
        """cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF33D"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF33D

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorGradientMagnitudeImageFilterIVF33D.Clone = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_Clone, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.GenerateInputRequestedRegion = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GenerateInputRequestedRegion, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUseImageSpacingOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOn, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUseImageSpacingOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacingOff, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.GetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.GetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.GetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.GetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_GetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUsePrincipleComponentsOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOn, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D.SetUsePrincipleComponentsOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_SetUsePrincipleComponentsOff, None, itkVectorGradientMagnitudeImageFilterIVF33D)
itkVectorGradientMagnitudeImageFilterIVF33D_swigregister = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_swigregister
itkVectorGradientMagnitudeImageFilterIVF33D_swigregister(itkVectorGradientMagnitudeImageFilterIVF33D)

def itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF33D_Pointer":
    """itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF33D_Pointer"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D___New_orig__()

def itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
    """itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver(double * arg0, double * arg1) -> int"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_CubicSolver(arg0, arg1)

def itkVectorGradientMagnitudeImageFilterIVF33D_cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF33D *":
    """itkVectorGradientMagnitudeImageFilterIVF33D_cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF33D"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33D_cast(obj)

class itkVectorGradientMagnitudeImageFilterIVF33F(itkImageToImageFilterBPython.itkImageToImageFilterIVF33IF3):
    """


    Computes a scalar, gradient magnitude image from a multiple channel
    (pixels are vectors) input.

    Overview This filter has two calculation modes. The first (default)
    mode calculates gradient magnitude as the difference between the
    largest two singular values in a singular value decomposition (SVD) of
    the partial derivatives [1]. The gradient is then based on the
    direction of maximal change, and is a characterization of how
    "elongated" the point-spread of the analysis is found to be.  The
    second, more heuristic, calculation mode finds gradient magnitude as
    the square-root of the sum of the * individual weighted vector
    component derivative sums squared. That is, * $ \\mathbf{magnitude}
    = \\left( \\sum_{i=0}^n \\sum_{j=0}^m \\frac{\\delta *
    \\phi_j}{\\delta \\mathbf{x}_{i}}^2 \\right)^{\\frac{1}{2}}
    $, where $\\phi_j$ * is the $j^{\\mathbf{th}}$ channel of vector
    image $\\phi$ of dimension $n$. * Weighting terms are applied to
    each vector component.

    The second mode is computationally much faster than the first and has
    the advantage that it is automatically multi-threaded (some vnl
    functions used in the first mode are not thread-safe). The first mode,
    however, tends to give intuitively better results with less (or no)
    parameter tuning.

    Template Parameters (Input and Output) This filter has one required
    template parameter which defines the input image type. The pixel type
    of the input image is assumed to be a vector (e.g., itk::Vector,
    itk::FixedArray). The scalar type of the vector components must be
    castable to floating point. Instantiating with an image of RGBPixel is
    not allowed but the image can be converted/adapted to Vector for
    processing.  The second template parameter, TRealType, can be
    optionally specified to define the scalar numerical type used in
    calculations. This is the component type of the output image. The
    default type of TRealType is float. For extra precision, you may
    safely change this parameter to double.

    The third template parameter is the output image type. The third
    parameter will be automatically constructed from the first and second
    parameters, so it is not necessary (or advisable) to set this
    parameter explicitly. Given an M-channel input image with
    dimensionality N, and a numerical type specified as TRealType, the
    output image will be of type itk::Image<TRealType, N>.

    Filter Parameters The methods Set/GetUsePrincipleComponents and
    SetUsePrincipleComponentsOn/Off determine controls the calculation
    mode that is used.  The method SetUseImageSpacingOn will cause
    derivatives in the image to be scaled (inversely) with the pixel size
    of the input image, effectively taking derivatives in world
    coordinates (versus isotropic image space). SetUseImageSpacingOff
    turns this functionality off. Default is UseImageSpacingOn. The
    parameter UseImageSpacing can be set directly with the method
    SetUseImageSpacing(bool).

    Weights can be applied to the derivatives directly using the
    SetDerivativeWeights method. Note that if UseImageSpacing is set to
    TRUE (ON), then these weights will be overridden by weights derived
    from the image spacing when the filter is updated. The argument to
    this method is a C array of TRealValue type.

    Weights can be applied to each vector component of the image when the
    component derivative values are summed during computation. Specify
    these weights using the SetComponentWeights method. The argument to
    this method is a C array of TRealValue type.

    Constraints The filter requires an image with at least two dimensions
    and a vector length of at least 2. The theory supports extension to
    scalar images, but the implementation of the itk vector classes do not
    The template parameter TRealType must be floating point (float or
    double) or a user-defined "real" numerical type with arithmetic
    operations defined sufficient to compute derivatives.

    Performance This filter will automatically multithread if run with
    SetUsePrincipleComponents=Off or on 3D data in
    UsePrincipleComponents=On mode. Unfortunately the ND eigen solver used
    is not thread safe (a special 3D solver is), so it cannot multithread
    for data other than 3D in UsePrincipleComponents=On mode. References
    [1] G. Sapiro and D. Ringach, "Anisotropic Diffusion of Multivalued
    Images  with Application to Color Filtering," IEEE Transactions on
    Image Processing, Vol 5, No. 11 pp. 1582-1586, 1996

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator

    C++ includes: itkVectorGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF33F_Pointer":
        """__New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF33F_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorGradientMagnitudeImageFilterIVF33F_Pointer":
        """Clone(itkVectorGradientMagnitudeImageFilterIVF33F self) -> itkVectorGradientMagnitudeImageFilterIVF33F_Pointer"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkVectorGradientMagnitudeImageFilterIVF33F self)

        VectorGradientMagnitudeImageFilter needs a larger input requested
        region than the output requested region (larger by the kernel size to
        calculate derivatives). As such, VectorGradientMagnitudeImageFilter
        needs to provide an implementation for GenerateInputRequestedRegion()
        in order to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkVectorGradientMagnitudeImageFilterIVF33F self)

        Set the
        derivative weights according to the spacing of the input image
        (1/spacing). Use this option if you want to calculate the gradient in
        the space in which the data was acquired. Default is ImageSpacingOn.

        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkVectorGradientMagnitudeImageFilterIVF33F self)

        Reset the
        derivative weights to ignore image spacing. Use this option if you
        want to calculate the gradient in the image space. Default is
        ImageSpacingOn. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, arg0: 'bool') -> "void":
        """
        SetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF33F self, bool arg0)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacing(self, arg0)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkVectorGradientMagnitudeImageFilterIVF33F self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUseImageSpacing(self)


    def SetDerivativeWeights(self, _arg: 'itkFixedArrayF3') -> "void":
        """
        SetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF33F self, itkFixedArrayF3 _arg)

        Directly
        Set/Get the array of weights used in the gradient calculations. Note
        that calling UseImageSpacingOn will clobber these values. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetDerivativeWeights(self, _arg)


    def GetDerivativeWeights(self) -> "itkFixedArrayF3 const &":
        """GetDerivativeWeights(itkVectorGradientMagnitudeImageFilterIVF33F self) -> itkFixedArrayF3"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetDerivativeWeights(self)


    def SetComponentWeights(self, _arg: 'itkFixedArrayF3') -> "void":
        """
        SetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF33F self, itkFixedArrayF3 _arg)

        Set/Get the
        array of weightings for the different components of the vector.
        Default values are 1.0. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetComponentWeights(self, _arg)


    def GetComponentWeights(self) -> "itkFixedArrayF3 const &":
        """GetComponentWeights(itkVectorGradientMagnitudeImageFilterIVF33F self) -> itkFixedArrayF3"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetComponentWeights(self)


    def SetUsePrincipleComponents(self, _arg: 'bool const') -> "void":
        """
        SetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF33F self, bool const _arg)

        Set/Get
        principle components calculation mode. When this is set to TRUE/ON,
        the gradient calculation will involve a principle component analysis
        of the partial derivatives of the color components. When this value is
        set to FALSE/OFF, the calculation is done as a square root of weighted
        sum of the derivatives squared. Default is UsePrincipleComponents =
        true. 
        """
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponents(self, _arg)


    def GetUsePrincipleComponents(self) -> "bool":
        """GetUsePrincipleComponents(itkVectorGradientMagnitudeImageFilterIVF33F self) -> bool"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUsePrincipleComponents(self)


    def SetUsePrincipleComponentsOn(self) -> "void":
        """SetUsePrincipleComponentsOn(itkVectorGradientMagnitudeImageFilterIVF33F self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOn(self)


    def SetUsePrincipleComponentsOff(self) -> "void":
        """SetUsePrincipleComponentsOff(itkVectorGradientMagnitudeImageFilterIVF33F self)"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOff(self)


    def CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
        """CubicSolver(double * arg0, double * arg1) -> int"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver(arg0, arg1)

    CubicSolver = staticmethod(CubicSolver)
    InputHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_InputHasNumericTraitsCheck
    RealTypeHasNumericTraitsCheck = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_RealTypeHasNumericTraitsCheck
    __swig_destroy__ = _itkVectorGradientMagnitudeImageFilterPython.delete_itkVectorGradientMagnitudeImageFilterIVF33F

    def cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF33F *":
        """cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF33F"""
        return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorGradientMagnitudeImageFilterIVF33F

        Create a new object of the class itkVectorGradientMagnitudeImageFilterIVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorGradientMagnitudeImageFilterIVF33F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorGradientMagnitudeImageFilterIVF33F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorGradientMagnitudeImageFilterIVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorGradientMagnitudeImageFilterIVF33F.Clone = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_Clone, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.GenerateInputRequestedRegion = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GenerateInputRequestedRegion, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUseImageSpacingOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOn, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUseImageSpacingOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacingOff, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.GetUseImageSpacing = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUseImageSpacing, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.GetDerivativeWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetDerivativeWeights, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.GetComponentWeights = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetComponentWeights, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.GetUsePrincipleComponents = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_GetUsePrincipleComponents, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUsePrincipleComponentsOn = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOn, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F.SetUsePrincipleComponentsOff = new_instancemethod(_itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_SetUsePrincipleComponentsOff, None, itkVectorGradientMagnitudeImageFilterIVF33F)
itkVectorGradientMagnitudeImageFilterIVF33F_swigregister = _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_swigregister
itkVectorGradientMagnitudeImageFilterIVF33F_swigregister(itkVectorGradientMagnitudeImageFilterIVF33F)

def itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__() -> "itkVectorGradientMagnitudeImageFilterIVF33F_Pointer":
    """itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__() -> itkVectorGradientMagnitudeImageFilterIVF33F_Pointer"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F___New_orig__()

def itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver(arg0: 'double *', arg1: 'double *') -> "int":
    """itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver(double * arg0, double * arg1) -> int"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_CubicSolver(arg0, arg1)

def itkVectorGradientMagnitudeImageFilterIVF33F_cast(obj: 'itkLightObject') -> "itkVectorGradientMagnitudeImageFilterIVF33F *":
    """itkVectorGradientMagnitudeImageFilterIVF33F_cast(itkLightObject obj) -> itkVectorGradientMagnitudeImageFilterIVF33F"""
    return _itkVectorGradientMagnitudeImageFilterPython.itkVectorGradientMagnitudeImageFilterIVF33F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_gradient_magnitude_image_filter(*args, **kwargs):
    """Procedural interface for VectorGradientMagnitudeImageFilter"""
    import itk
    instance = itk.VectorGradientMagnitudeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_gradient_magnitude_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorGradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorGradientMagnitudeImageFilter.values()[0]
    else:
        filter_object = itk.VectorGradientMagnitudeImageFilter

    vector_gradient_magnitude_image_filter.__doc__ = filter_object.__doc__
    vector_gradient_magnitude_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_gradient_magnitude_image_filter.__doc__ += "Available Keyword Arguments:\n"
    vector_gradient_magnitude_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



