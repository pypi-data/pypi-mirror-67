# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkShapeDetectionLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkShapeDetectionLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkShapeDetectionLevelSetImageFilterPython
            return _itkShapeDetectionLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkShapeDetectionLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkShapeDetectionLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkShapeDetectionLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSegmentationLevelSetImageFilterPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython
import itkFiniteDifferenceFunctionPython
import itkSparseFieldLevelSetImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython

def itkShapeDetectionLevelSetImageFilterID3ID3D_New():
  return itkShapeDetectionLevelSetImageFilterID3ID3D.New()


def itkShapeDetectionLevelSetImageFilterIF3IF3F_New():
  return itkShapeDetectionLevelSetImageFilterIF3IF3F.New()


def itkShapeDetectionLevelSetImageFilterID2ID2D_New():
  return itkShapeDetectionLevelSetImageFilterID2ID2D.New()


def itkShapeDetectionLevelSetImageFilterIF2IF2F_New():
  return itkShapeDetectionLevelSetImageFilterIF2IF2F.New()

class itkShapeDetectionLevelSetImageFilterID2ID2D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    """


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkShapeDetectionLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer":
        """__New_orig__() -> itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer":
        """Clone(itkShapeDetectionLevelSetImageFilterID2ID2D self) -> itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_Clone(self)

    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterID2ID2D"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterID2ID2D

        Create a new object of the class itkShapeDetectionLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapeDetectionLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapeDetectionLevelSetImageFilterID2ID2D.Clone = new_instancemethod(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_Clone, None, itkShapeDetectionLevelSetImageFilterID2ID2D)
itkShapeDetectionLevelSetImageFilterID2ID2D_swigregister = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_swigregister
itkShapeDetectionLevelSetImageFilterID2ID2D_swigregister(itkShapeDetectionLevelSetImageFilterID2ID2D)

def itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__() -> "itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer":
    """itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__() -> itkShapeDetectionLevelSetImageFilterID2ID2D_Pointer"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__()

def itkShapeDetectionLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterID2ID2D *":
    """itkShapeDetectionLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterID2ID2D"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_cast(obj)

class itkShapeDetectionLevelSetImageFilterID3ID3D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    """


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkShapeDetectionLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer":
        """__New_orig__() -> itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer":
        """Clone(itkShapeDetectionLevelSetImageFilterID3ID3D self) -> itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_Clone(self)

    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterID3ID3D"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterID3ID3D

        Create a new object of the class itkShapeDetectionLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapeDetectionLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapeDetectionLevelSetImageFilterID3ID3D.Clone = new_instancemethod(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_Clone, None, itkShapeDetectionLevelSetImageFilterID3ID3D)
itkShapeDetectionLevelSetImageFilterID3ID3D_swigregister = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_swigregister
itkShapeDetectionLevelSetImageFilterID3ID3D_swigregister(itkShapeDetectionLevelSetImageFilterID3ID3D)

def itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__() -> "itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer":
    """itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__() -> itkShapeDetectionLevelSetImageFilterID3ID3D_Pointer"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__()

def itkShapeDetectionLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterID3ID3D *":
    """itkShapeDetectionLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterID3ID3D"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_cast(obj)

class itkShapeDetectionLevelSetImageFilterIF2IF2F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    """


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkShapeDetectionLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer":
        """__New_orig__() -> itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer":
        """Clone(itkShapeDetectionLevelSetImageFilterIF2IF2F self) -> itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_Clone(self)

    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterIF2IF2F"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterIF2IF2F

        Create a new object of the class itkShapeDetectionLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapeDetectionLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapeDetectionLevelSetImageFilterIF2IF2F.Clone = new_instancemethod(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_Clone, None, itkShapeDetectionLevelSetImageFilterIF2IF2F)
itkShapeDetectionLevelSetImageFilterIF2IF2F_swigregister = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_swigregister
itkShapeDetectionLevelSetImageFilterIF2IF2F_swigregister(itkShapeDetectionLevelSetImageFilterIF2IF2F)

def itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__() -> "itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer":
    """itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__() -> itkShapeDetectionLevelSetImageFilterIF2IF2F_Pointer"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__()

def itkShapeDetectionLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterIF2IF2F *":
    """itkShapeDetectionLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterIF2IF2F"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_cast(obj)

class itkShapeDetectionLevelSetImageFilterIF3IF3F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    """


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkShapeDetectionLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer":
        """__New_orig__() -> itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer":
        """Clone(itkShapeDetectionLevelSetImageFilterIF3IF3F self) -> itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_Clone(self)

    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterIF3IF3F"""
        return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterIF3IF3F

        Create a new object of the class itkShapeDetectionLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapeDetectionLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapeDetectionLevelSetImageFilterIF3IF3F.Clone = new_instancemethod(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_Clone, None, itkShapeDetectionLevelSetImageFilterIF3IF3F)
itkShapeDetectionLevelSetImageFilterIF3IF3F_swigregister = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_swigregister
itkShapeDetectionLevelSetImageFilterIF3IF3F_swigregister(itkShapeDetectionLevelSetImageFilterIF3IF3F)

def itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__() -> "itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer":
    """itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__() -> itkShapeDetectionLevelSetImageFilterIF3IF3F_Pointer"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__()

def itkShapeDetectionLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkShapeDetectionLevelSetImageFilterIF3IF3F *":
    """itkShapeDetectionLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkShapeDetectionLevelSetImageFilterIF3IF3F"""
    return _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def shape_detection_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ShapeDetectionLevelSetImageFilter"""
    import itk
    instance = itk.ShapeDetectionLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def shape_detection_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ShapeDetectionLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ShapeDetectionLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ShapeDetectionLevelSetImageFilter

    shape_detection_level_set_image_filter.__doc__ = filter_object.__doc__
    shape_detection_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    shape_detection_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    shape_detection_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



