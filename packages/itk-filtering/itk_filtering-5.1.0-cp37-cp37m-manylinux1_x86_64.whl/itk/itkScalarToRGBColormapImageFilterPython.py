# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkScalarToRGBColormapImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScalarToRGBColormapImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkScalarToRGBColormapImageFilterPython
            return _itkScalarToRGBColormapImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkScalarToRGBColormapImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkScalarToRGBColormapImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScalarToRGBColormapImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import stdcomplexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkColormapFunctionPython

def itkScalarToRGBColormapImageFilterID3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterID3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterID2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterID2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterID3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterID3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterID2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterID2IRGBUC2.New()


def itkScalarToRGBColormapImageFilterIF3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterIF3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterIF2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterIF2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterIF3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterIF3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterIF2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterIF2IRGBUC2.New()


def itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterIUS3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterIUS3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterIUS2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterIUS2IRGBUC2.New()


def itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterIUC3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterIUC3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterIUC2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterIUC2IRGBUC2.New()


def itkScalarToRGBColormapImageFilterISS3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterISS3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterISS2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterISS2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterISS3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterISS3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterISS2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterISS2IRGBUC2.New()


def itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_New():
  return itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.New()


def itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_New():
  return itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.New()


def itkScalarToRGBColormapImageFilterIUL3IRGBUC3_New():
  return itkScalarToRGBColormapImageFilterIUL3IRGBUC3.New()


def itkScalarToRGBColormapImageFilterIUL2IRGBUC2_New():
  return itkScalarToRGBColormapImageFilterIUL2IRGBUC2.New()

class itkScalarToRGBColormapImageFilterEnums(object):
    """Proxy of C++ itkScalarToRGBColormapImageFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    RGBColormapFilter_Red = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Red
    RGBColormapFilter_Green = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Green
    RGBColormapFilter_Blue = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Blue
    RGBColormapFilter_Grey = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Grey
    RGBColormapFilter_Hot = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Hot
    RGBColormapFilter_Cool = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Cool
    RGBColormapFilter_Spring = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Spring
    RGBColormapFilter_Summer = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Summer
    RGBColormapFilter_Autumn = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Autumn
    RGBColormapFilter_Winter = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Winter
    RGBColormapFilter_Copper = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Copper
    RGBColormapFilter_Jet = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_Jet
    RGBColormapFilter_HSV = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_HSV
    RGBColormapFilter_OverUnder = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_RGBColormapFilter_OverUnder

    def __init__(self, *args):
        """
        __init__(itkScalarToRGBColormapImageFilterEnums self) -> itkScalarToRGBColormapImageFilterEnums
        __init__(itkScalarToRGBColormapImageFilterEnums self, itkScalarToRGBColormapImageFilterEnums arg0) -> itkScalarToRGBColormapImageFilterEnums
        """
        _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_swiginit(self, _itkScalarToRGBColormapImageFilterPython.new_itkScalarToRGBColormapImageFilterEnums(*args))
    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterEnums
itkScalarToRGBColormapImageFilterEnums_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterEnums_swigregister
itkScalarToRGBColormapImageFilterEnums_swigregister(itkScalarToRGBColormapImageFilterEnums)

class itkScalarToRGBColormapImageFilterID2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self, itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterID2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterID2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterID2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterID2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterID2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterID2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterID2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterID2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterID2IRGBAUC2)
itkScalarToRGBColormapImageFilterID2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterID2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterID2IRGBAUC2)

def itkScalarToRGBColormapImageFilterID2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterID2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterID2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterID2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterID2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterID2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterID2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterID2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterID2IRGBUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterID2IRGBUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterID2IRGBUC2 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterID2IRGBUC2 self, itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterID2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterID2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterID2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterID2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterID2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterID2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterID2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterID2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterID2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterID2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterID2IRGBUC2)
itkScalarToRGBColormapImageFilterID2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterID2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterID2IRGBUC2)

def itkScalarToRGBColormapImageFilterID2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterID2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterID2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterID2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterID2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterID3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self, itk::Function::ColormapFunction< double,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterID3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterID3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterID3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterID3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterID3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterID3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterID3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterID3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterID3IRGBAUC3)
itkScalarToRGBColormapImageFilterID3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterID3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterID3IRGBAUC3)

def itkScalarToRGBColormapImageFilterID3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterID3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterID3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterID3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterID3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterID3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterID3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterID3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterID3IRGBUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterID3IRGBUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterID3IRGBUC3 self) -> itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterID3IRGBUC3 self, itk::Function::ColormapFunction< double,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterID3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterID3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterID3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterID3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterID3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterID3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterID3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterID3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterID3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterID3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterID3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterID3IRGBUC3)
itkScalarToRGBColormapImageFilterID3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterID3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterID3IRGBUC3)

def itkScalarToRGBColormapImageFilterID3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterID3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterID3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterID3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterID3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterID3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterID3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterID3IRGBUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIF2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self, itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIF2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIF2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIF2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIF2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIF2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIF2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIF2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIF2IRGBAUC2)
itkScalarToRGBColormapImageFilterIF2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterIF2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterIF2IRGBAUC2)

def itkScalarToRGBColormapImageFilterIF2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIF2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIF2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterIF2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIF2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterIF2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self, itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIF2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIF2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIF2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIF2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIF2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIF2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIF2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIF2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIF2IRGBUC2)
itkScalarToRGBColormapImageFilterIF2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterIF2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterIF2IRGBUC2)

def itkScalarToRGBColormapImageFilterIF2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIF2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIF2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIF2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterIF2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIF3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self, itk::Function::ColormapFunction< float,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIF3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIF3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIF3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIF3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIF3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIF3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIF3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIF3IRGBAUC3)
itkScalarToRGBColormapImageFilterIF3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterIF3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterIF3IRGBAUC3)

def itkScalarToRGBColormapImageFilterIF3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIF3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIF3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterIF3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIF3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterIF3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self) -> itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self, itk::Function::ColormapFunction< float,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIF3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIF3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIF3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIF3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIF3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIF3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIF3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIF3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIF3IRGBUC3)
itkScalarToRGBColormapImageFilterIF3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterIF3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterIF3IRGBUC3)

def itkScalarToRGBColormapImageFilterIF3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIF3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIF3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIF3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIF3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterIF3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIF3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIF3IRGBUC3_cast(obj)

class itkScalarToRGBColormapImageFilterISS2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self, itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterISS2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterISS2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterISS2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterISS2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterISS2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterISS2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterISS2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterISS2IRGBAUC2)
itkScalarToRGBColormapImageFilterISS2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterISS2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterISS2IRGBAUC2)

def itkScalarToRGBColormapImageFilterISS2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterISS2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterISS2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterISS2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterISS2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterISS2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self, itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterISS2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterISS2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterISS2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterISS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterISS2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterISS2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterISS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterISS2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterISS2IRGBUC2)
itkScalarToRGBColormapImageFilterISS2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterISS2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterISS2IRGBUC2)

def itkScalarToRGBColormapImageFilterISS2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterISS2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterISS2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterISS2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterISS2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterISS3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self, itk::Function::ColormapFunction< short,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterISS3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterISS3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterISS3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterISS3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterISS3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterISS3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterISS3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterISS3IRGBAUC3)
itkScalarToRGBColormapImageFilterISS3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterISS3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterISS3IRGBAUC3)

def itkScalarToRGBColormapImageFilterISS3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterISS3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterISS3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterISS3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterISS3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterISS3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self) -> itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self, itk::Function::ColormapFunction< short,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterISS3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterISS3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterISS3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterISS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterISS3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterISS3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterISS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterISS3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterISS3IRGBUC3)
itkScalarToRGBColormapImageFilterISS3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterISS3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterISS3IRGBUC3)

def itkScalarToRGBColormapImageFilterISS3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterISS3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterISS3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterISS3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterISS3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterISS3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterISS3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterISS3IRGBUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUC2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itkColormapFunctionUCRGBAPUC *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self) -> itkColormapFunctionUCRGBAPUC"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itkColormapFunctionUCRGBAPUC *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self) -> itkColormapFunctionUCRGBAPUC
        GetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self) -> itkColormapFunctionUCRGBAPUC
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self, itkColormapFunctionUCRGBAPUC _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUC2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterIUC2IRGBAUC2)

def itkScalarToRGBColormapImageFilterIUC2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUC2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUC2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUC2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itkColormapFunctionUCRGBPUC *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self) -> itkColormapFunctionUCRGBPUC"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itkColormapFunctionUCRGBPUC *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self) -> itkColormapFunctionUCRGBPUC
        GetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self) -> itkColormapFunctionUCRGBPUC
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self, itkColormapFunctionUCRGBPUC _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUC2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUC2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUC2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUC2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUC2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUC2IRGBUC2)
itkScalarToRGBColormapImageFilterIUC2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterIUC2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterIUC2IRGBUC2)

def itkScalarToRGBColormapImageFilterIUC2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUC2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUC2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterIUC2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUC3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itkColormapFunctionUCRGBAPUC *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self) -> itkColormapFunctionUCRGBAPUC"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itkColormapFunctionUCRGBAPUC *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self) -> itkColormapFunctionUCRGBAPUC
        GetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self) -> itkColormapFunctionUCRGBAPUC
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self, itkColormapFunctionUCRGBAPUC _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUC3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterIUC3IRGBAUC3)

def itkScalarToRGBColormapImageFilterIUC3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUC3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUC3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUC3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itkColormapFunctionUCRGBPUC *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self) -> itkColormapFunctionUCRGBPUC"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itkColormapFunctionUCRGBPUC *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self) -> itkColormapFunctionUCRGBPUC
        GetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self) -> itkColormapFunctionUCRGBPUC
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self, itkColormapFunctionUCRGBPUC _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUC3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUC3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUC3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUC3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUC3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUC3IRGBUC3)
itkScalarToRGBColormapImageFilterIUC3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterIUC3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterIUC3IRGBUC3)

def itkScalarToRGBColormapImageFilterIUC3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUC3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUC3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUC3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterIUC3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUC3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUC3IRGBUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUL2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self, itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUL2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterIUL2IRGBAUC2)

def itkScalarToRGBColormapImageFilterIUL2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUL2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUL2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUL2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self, itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUL2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUL2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUL2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUL2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUL2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUL2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUL2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUL2IRGBUC2)
itkScalarToRGBColormapImageFilterIUL2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterIUL2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterIUL2IRGBUC2)

def itkScalarToRGBColormapImageFilterIUL2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUL2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUL2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterIUL2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUL3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self, itk::Function::ColormapFunction< unsigned long,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUL3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterIUL3IRGBAUC3)

def itkScalarToRGBColormapImageFilterIUL3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUL3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUL3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUL3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self, itk::Function::ColormapFunction< unsigned long,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUL3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUL3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUL3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUL3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUL3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUL3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUL3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUL3IRGBUC3)
itkScalarToRGBColormapImageFilterIUL3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterIUL3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterIUL3IRGBUC3)

def itkScalarToRGBColormapImageFilterIUL3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUL3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUL3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUL3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterIUL3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUL3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUL3IRGBUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUS2IRGBAUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBAUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self) -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self, itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUS2IRGBAUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Clone, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_swigregister
itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_swigregister(itkScalarToRGBColormapImageFilterIUS2IRGBAUC2)

def itkScalarToRGBColormapImageFilterIUS2IRGBAUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUS2IRGBAUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS2IRGBAUC2 *":
    """itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS2IRGBAUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBAUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUS2IRGBUC2(itkImageToImageFilterBPython.itkImageToImageFilterIUS2IRGBUC2):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self) -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self, itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUS2IRGBUC2 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUS2IRGBUC2

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS2IRGBUC2 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2

        Create a new object of the class itkScalarToRGBColormapImageFilterIUS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUS2IRGBUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUS2IRGBUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUS2IRGBUC2.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Clone, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_SetColormap, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUS2IRGBUC2)
itkScalarToRGBColormapImageFilterIUS2IRGBUC2_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_swigregister
itkScalarToRGBColormapImageFilterIUS2IRGBUC2_swigregister(itkScalarToRGBColormapImageFilterIUS2IRGBUC2)

def itkScalarToRGBColormapImageFilterIUS2IRGBUC2___New_orig__() -> "itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer":
    """itkScalarToRGBColormapImageFilterIUS2IRGBUC2___New_orig__() -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2___New_orig__()

def itkScalarToRGBColormapImageFilterIUS2IRGBUC2_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS2IRGBUC2 *":
    """itkScalarToRGBColormapImageFilterIUS2IRGBUC2_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS2IRGBUC2"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS2IRGBUC2_cast(obj)

class itkScalarToRGBColormapImageFilterIUS3IRGBAUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBAUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self) -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self, itk::Function::ColormapFunction< unsigned short,itk::RGBAPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUS3IRGBAUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Clone, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_swigregister
itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_swigregister(itkScalarToRGBColormapImageFilterIUS3IRGBAUC3)

def itkScalarToRGBColormapImageFilterIUS3IRGBAUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUS3IRGBAUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS3IRGBAUC3 *":
    """itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS3IRGBAUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBAUC3_cast(obj)

class itkScalarToRGBColormapImageFilterIUS3IRGBUC3(itkImageToImageFilterBPython.itkImageToImageFilterIUS3IRGBUC3):
    """


    Implements pixel-wise intensity->rgb mapping operation on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    The input image's scalar pixel values are mapped into a color map. The
    color map is specified by passing the SetColormap function one of the
    predefined maps. The following selects the
    "RGBColormapFilterEnum::Hot" colormap:

    You can also specify a custom color map. This is done by creating a
    CustomColormapFunction, and then creating lists of values for of a
    colormap with only 2 colors is given below. The blue and green
    channels should be specified in the same manner.

    The range of values present in the input image is the range that is
    mapped to the entire range of colors.

    This code was contributed in the Insight Journal paper: "Meeting Andy
    Warhol Somewhere Over the Rainbow: RGB Colormapping and ITK" by
    Tustison N., Zhang H., Lehmann G., Yushkevich P., Gee
    J.https://hdl.handle.net/1926/1452http://www.insight-
    journal.org/browse/publication/285

    See:  BinaryFunctionImageFilter TernaryFunctionImageFilter

    C++ includes: itkScalarToRGBColormapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer":
        """__New_orig__() -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer":
        """Clone(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self) -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Clone(self)


    def GetModifiableColormap(self) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *":
        """GetModifiableColormap(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetModifiableColormap(self)


    def GetColormap(self, *args) -> "itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *":
        """
        GetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > const
        GetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self) -> itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > *
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetColormap(self, *args)


    def SetColormap(self, *args) -> "void":
        """
        SetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self, itk::Function::ColormapFunction< unsigned short,itk::RGBPixel< unsigned char > > * _arg)
        SetColormap(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self, itkScalarToRGBColormapImageFilterEnums::RGBColormapFilter arg0)

        Set/Get the colormap
        object. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_SetColormap(self, *args)


    def SetUseInputImageExtremaForScaling(self, _arg: 'bool const') -> "void":
        """
        SetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self, bool const _arg)

        Set/Get UseInputImageExtremaForScaling. If true, the colormap uses the
        min and max values from the image to scale appropriately. Otherwise,
        these values can be set in the colormap manually. 
        """
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_SetUseInputImageExtremaForScaling(self, _arg)


    def GetUseInputImageExtremaForScaling(self) -> "bool":
        """GetUseInputImageExtremaForScaling(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self) -> bool"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetUseInputImageExtremaForScaling(self)


    def UseInputImageExtremaForScalingOn(self) -> "void":
        """UseInputImageExtremaForScalingOn(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_UseInputImageExtremaForScalingOn(self)


    def UseInputImageExtremaForScalingOff(self) -> "void":
        """UseInputImageExtremaForScalingOff(itkScalarToRGBColormapImageFilterIUS3IRGBUC3 self)"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_UseInputImageExtremaForScalingOff(self)

    __swig_destroy__ = _itkScalarToRGBColormapImageFilterPython.delete_itkScalarToRGBColormapImageFilterIUS3IRGBUC3

    def cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS3IRGBUC3 *":
        """cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3"""
        return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3

        Create a new object of the class itkScalarToRGBColormapImageFilterIUS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarToRGBColormapImageFilterIUS3IRGBUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkScalarToRGBColormapImageFilterIUS3IRGBUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalarToRGBColormapImageFilterIUS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalarToRGBColormapImageFilterIUS3IRGBUC3.Clone = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Clone, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.GetModifiableColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetModifiableColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.GetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.SetColormap = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_SetColormap, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.SetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_SetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.GetUseInputImageExtremaForScaling = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_GetUseInputImageExtremaForScaling, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.UseInputImageExtremaForScalingOn = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_UseInputImageExtremaForScalingOn, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3.UseInputImageExtremaForScalingOff = new_instancemethod(_itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_UseInputImageExtremaForScalingOff, None, itkScalarToRGBColormapImageFilterIUS3IRGBUC3)
itkScalarToRGBColormapImageFilterIUS3IRGBUC3_swigregister = _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_swigregister
itkScalarToRGBColormapImageFilterIUS3IRGBUC3_swigregister(itkScalarToRGBColormapImageFilterIUS3IRGBUC3)

def itkScalarToRGBColormapImageFilterIUS3IRGBUC3___New_orig__() -> "itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer":
    """itkScalarToRGBColormapImageFilterIUS3IRGBUC3___New_orig__() -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3_Pointer"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3___New_orig__()

def itkScalarToRGBColormapImageFilterIUS3IRGBUC3_cast(obj: 'itkLightObject') -> "itkScalarToRGBColormapImageFilterIUS3IRGBUC3 *":
    """itkScalarToRGBColormapImageFilterIUS3IRGBUC3_cast(itkLightObject obj) -> itkScalarToRGBColormapImageFilterIUS3IRGBUC3"""
    return _itkScalarToRGBColormapImageFilterPython.itkScalarToRGBColormapImageFilterIUS3IRGBUC3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_to_rgb_colormap_image_filter(*args, **kwargs):
    """Procedural interface for ScalarToRGBColormapImageFilter"""
    import itk
    instance = itk.ScalarToRGBColormapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_to_rgb_colormap_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScalarToRGBColormapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScalarToRGBColormapImageFilter.values()[0]
    else:
        filter_object = itk.ScalarToRGBColormapImageFilter

    scalar_to_rgb_colormap_image_filter.__doc__ = filter_object.__doc__
    scalar_to_rgb_colormap_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scalar_to_rgb_colormap_image_filter.__doc__ += "Available Keyword Arguments:\n"
    scalar_to_rgb_colormap_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



