# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNarrowBandImageFilterBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNarrowBandImageFilterBasePython', [dirname(__file__)])
        except ImportError:
            import _itkNarrowBandImageFilterBasePython
            return _itkNarrowBandImageFilterBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNarrowBandImageFilterBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNarrowBandImageFilterBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNarrowBandImageFilterBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFiniteDifferenceImageFilterPython
import itkFiniteDifferenceFunctionPython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkSizePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import ITKNarrowBandBasePython

def itkNarrowBandImageFilterBaseID3ID3_New():
  return itkNarrowBandImageFilterBaseID3ID3.New()


def itkNarrowBandImageFilterBaseID2ID2_New():
  return itkNarrowBandImageFilterBaseID2ID2.New()


def itkNarrowBandImageFilterBaseIF3IF3_New():
  return itkNarrowBandImageFilterBaseIF3IF3.New()


def itkNarrowBandImageFilterBaseIF2IF2_New():
  return itkNarrowBandImageFilterBaseIF2IF2.New()

class itkNarrowBandImageFilterBaseID2ID2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID2ID2):
    """


    This class implements a multi-threaded finite difference image to
    image solver that can be applied to an arbitrary list of pixels.

    This class is intended as a common base class for classical narrowband
    solvers and manifold solvers. This base class implements a common
    memory management and multi-threaded architecture for applying a
    finite difference function to a list of pixels in an image. The
    specifics of narrowband solvers such as re-initialization and the use
    of land-mines are not implemented. INPUTS This filter takes an
    itk::Image as input. The appropriate type of input image is entirely
    determined by the application. As a rule, however, the input type is
    immediately converted to the output type before processing. This is
    because the input is not assumed to be a real value type and must be
    converted to signed, real values for the calculations. OUTPUTS The
    output is an itk::Image and is the solution of the pde. The embedding
    of the interface may vary with the application, but the usual ITK
    convention is that it is the zero level set in the output image.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Sethian, J.A. Level Set Methods. Cambridge University
    Press. 1996.

    C++ includes: itkNarrowBandImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkNarrowBandImageFilterBaseID2ID2 self, double const _arg)

        Set/Get
        IsoSurfaceValue to use in the input image 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkNarrowBandImageFilterBaseID2ID2 self) -> double"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetIsoSurfaceValue(self)


    def InsertNarrowBandNode(self, *args) -> "void":
        """
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID2ID2 self, itkBandNodeI2D node)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID2ID2 self, itkIndex2 index)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID2ID2 self, itkIndex2 index, double const & value, signed char const & nodestate)

        Root Mean
        Square Change between successive iterations This function is used to
        insert a pixel index into the narrow band The entire narrow band can
        be constructed using this method. Usually, however, the narrow band is
        initialized and reinitialized automatically by the subclass. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_InsertNarrowBandNode(self, *args)


    def SetNarrowBandTotalRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseID2ID2 self, float const & val)

        Set the
        narrow band total radius. The narrow band width will be twice this
        value (positive and negative distance to the zero level set). The
        default value is 3. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBandTotalRadius(self, val)


    def GetNarrowBandTotalRadius(self) -> "float":
        """
        GetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseID2ID2 self) -> float

        Get the
        narrow band total radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetNarrowBandTotalRadius(self)


    def SetNarrowBandInnerRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseID2ID2 self, float const & val)

        Set the
        narrow band inner radius. The inner radius is the safe are where the
        level set can be computed. The default value is 1. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBandInnerRadius(self, val)


    def GetNarrowBandInnerRadius(self) -> "float":
        """
        GetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseID2ID2 self) -> float

        Get the
        narrow band inner radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetNarrowBandInnerRadius(self)


    def CreateNarrowBand(self) -> "void":
        """
        CreateNarrowBand(itkNarrowBandImageFilterBaseID2ID2 self)

        This is the
        virtual method called by Initialize to set the band of operation. It
        is left to the subclasses to define this functionality. This function
        can make use of above InsertNarrowBandNode function to create a band.

        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_CreateNarrowBand(self)


    def SetNarrowBand(self, ptr: 'itkNarrowBandBNI2D') -> "void":
        """SetNarrowBand(itkNarrowBandImageFilterBaseID2ID2 self, itkNarrowBandBNI2D ptr)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBand(self, ptr)


    def CopyInputToOutput(self) -> "void":
        """CopyInputToOutput(itkNarrowBandImageFilterBaseID2ID2 self)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_CopyInputToOutput(self)

    __swig_destroy__ = _itkNarrowBandImageFilterBasePython.delete_itkNarrowBandImageFilterBaseID2ID2

    def cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseID2ID2 *":
        """cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseID2ID2"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandImageFilterBaseID2ID2

        Create a new object of the class itkNarrowBandImageFilterBaseID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandImageFilterBaseID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandImageFilterBaseID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandImageFilterBaseID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandImageFilterBaseID2ID2.SetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.GetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.InsertNarrowBandNode = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_InsertNarrowBandNode, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.SetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.GetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.SetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.GetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_GetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.CreateNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_CreateNarrowBand, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.SetNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_SetNarrowBand, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2.CopyInputToOutput = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_CopyInputToOutput, None, itkNarrowBandImageFilterBaseID2ID2)
itkNarrowBandImageFilterBaseID2ID2_swigregister = _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_swigregister
itkNarrowBandImageFilterBaseID2ID2_swigregister(itkNarrowBandImageFilterBaseID2ID2)

def itkNarrowBandImageFilterBaseID2ID2_cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseID2ID2 *":
    """itkNarrowBandImageFilterBaseID2ID2_cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseID2ID2"""
    return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2_cast(obj)

class itkNarrowBandImageFilterBaseID3ID3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID3ID3):
    """


    This class implements a multi-threaded finite difference image to
    image solver that can be applied to an arbitrary list of pixels.

    This class is intended as a common base class for classical narrowband
    solvers and manifold solvers. This base class implements a common
    memory management and multi-threaded architecture for applying a
    finite difference function to a list of pixels in an image. The
    specifics of narrowband solvers such as re-initialization and the use
    of land-mines are not implemented. INPUTS This filter takes an
    itk::Image as input. The appropriate type of input image is entirely
    determined by the application. As a rule, however, the input type is
    immediately converted to the output type before processing. This is
    because the input is not assumed to be a real value type and must be
    converted to signed, real values for the calculations. OUTPUTS The
    output is an itk::Image and is the solution of the pde. The embedding
    of the interface may vary with the application, but the usual ITK
    convention is that it is the zero level set in the output image.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Sethian, J.A. Level Set Methods. Cambridge University
    Press. 1996.

    C++ includes: itkNarrowBandImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkNarrowBandImageFilterBaseID3ID3 self, double const _arg)

        Set/Get
        IsoSurfaceValue to use in the input image 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkNarrowBandImageFilterBaseID3ID3 self) -> double"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetIsoSurfaceValue(self)


    def InsertNarrowBandNode(self, *args) -> "void":
        """
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID3ID3 self, itkBandNodeI3D node)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID3ID3 self, itkIndex3 index)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseID3ID3 self, itkIndex3 index, double const & value, signed char const & nodestate)

        Root Mean
        Square Change between successive iterations This function is used to
        insert a pixel index into the narrow band The entire narrow band can
        be constructed using this method. Usually, however, the narrow band is
        initialized and reinitialized automatically by the subclass. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_InsertNarrowBandNode(self, *args)


    def SetNarrowBandTotalRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseID3ID3 self, float const & val)

        Set the
        narrow band total radius. The narrow band width will be twice this
        value (positive and negative distance to the zero level set). The
        default value is 3. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBandTotalRadius(self, val)


    def GetNarrowBandTotalRadius(self) -> "float":
        """
        GetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseID3ID3 self) -> float

        Get the
        narrow band total radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetNarrowBandTotalRadius(self)


    def SetNarrowBandInnerRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseID3ID3 self, float const & val)

        Set the
        narrow band inner radius. The inner radius is the safe are where the
        level set can be computed. The default value is 1. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBandInnerRadius(self, val)


    def GetNarrowBandInnerRadius(self) -> "float":
        """
        GetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseID3ID3 self) -> float

        Get the
        narrow band inner radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetNarrowBandInnerRadius(self)


    def CreateNarrowBand(self) -> "void":
        """
        CreateNarrowBand(itkNarrowBandImageFilterBaseID3ID3 self)

        This is the
        virtual method called by Initialize to set the band of operation. It
        is left to the subclasses to define this functionality. This function
        can make use of above InsertNarrowBandNode function to create a band.

        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_CreateNarrowBand(self)


    def SetNarrowBand(self, ptr: 'itkNarrowBandBNI3D') -> "void":
        """SetNarrowBand(itkNarrowBandImageFilterBaseID3ID3 self, itkNarrowBandBNI3D ptr)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBand(self, ptr)


    def CopyInputToOutput(self) -> "void":
        """CopyInputToOutput(itkNarrowBandImageFilterBaseID3ID3 self)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_CopyInputToOutput(self)

    __swig_destroy__ = _itkNarrowBandImageFilterBasePython.delete_itkNarrowBandImageFilterBaseID3ID3

    def cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseID3ID3 *":
        """cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseID3ID3"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandImageFilterBaseID3ID3

        Create a new object of the class itkNarrowBandImageFilterBaseID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandImageFilterBaseID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandImageFilterBaseID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandImageFilterBaseID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandImageFilterBaseID3ID3.SetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.GetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.InsertNarrowBandNode = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_InsertNarrowBandNode, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.SetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.GetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.SetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.GetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_GetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.CreateNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_CreateNarrowBand, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.SetNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_SetNarrowBand, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3.CopyInputToOutput = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_CopyInputToOutput, None, itkNarrowBandImageFilterBaseID3ID3)
itkNarrowBandImageFilterBaseID3ID3_swigregister = _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_swigregister
itkNarrowBandImageFilterBaseID3ID3_swigregister(itkNarrowBandImageFilterBaseID3ID3)

def itkNarrowBandImageFilterBaseID3ID3_cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseID3ID3 *":
    """itkNarrowBandImageFilterBaseID3ID3_cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseID3ID3"""
    return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3_cast(obj)

class itkNarrowBandImageFilterBaseIF2IF2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    """


    This class implements a multi-threaded finite difference image to
    image solver that can be applied to an arbitrary list of pixels.

    This class is intended as a common base class for classical narrowband
    solvers and manifold solvers. This base class implements a common
    memory management and multi-threaded architecture for applying a
    finite difference function to a list of pixels in an image. The
    specifics of narrowband solvers such as re-initialization and the use
    of land-mines are not implemented. INPUTS This filter takes an
    itk::Image as input. The appropriate type of input image is entirely
    determined by the application. As a rule, however, the input type is
    immediately converted to the output type before processing. This is
    because the input is not assumed to be a real value type and must be
    converted to signed, real values for the calculations. OUTPUTS The
    output is an itk::Image and is the solution of the pde. The embedding
    of the interface may vary with the application, but the usual ITK
    convention is that it is the zero level set in the output image.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Sethian, J.A. Level Set Methods. Cambridge University
    Press. 1996.

    C++ includes: itkNarrowBandImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkNarrowBandImageFilterBaseIF2IF2 self, float const _arg)

        Set/Get
        IsoSurfaceValue to use in the input image 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkNarrowBandImageFilterBaseIF2IF2 self) -> float"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetIsoSurfaceValue(self)


    def InsertNarrowBandNode(self, *args) -> "void":
        """
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF2IF2 self, itkBandNodeI2F node)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF2IF2 self, itkIndex2 index)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF2IF2 self, itkIndex2 index, float const & value, signed char const & nodestate)

        Root Mean
        Square Change between successive iterations This function is used to
        insert a pixel index into the narrow band The entire narrow band can
        be constructed using this method. Usually, however, the narrow band is
        initialized and reinitialized automatically by the subclass. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_InsertNarrowBandNode(self, *args)


    def SetNarrowBandTotalRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseIF2IF2 self, float const & val)

        Set the
        narrow band total radius. The narrow band width will be twice this
        value (positive and negative distance to the zero level set). The
        default value is 3. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBandTotalRadius(self, val)


    def GetNarrowBandTotalRadius(self) -> "float":
        """
        GetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseIF2IF2 self) -> float

        Get the
        narrow band total radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetNarrowBandTotalRadius(self)


    def SetNarrowBandInnerRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseIF2IF2 self, float const & val)

        Set the
        narrow band inner radius. The inner radius is the safe are where the
        level set can be computed. The default value is 1. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBandInnerRadius(self, val)


    def GetNarrowBandInnerRadius(self) -> "float":
        """
        GetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseIF2IF2 self) -> float

        Get the
        narrow band inner radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetNarrowBandInnerRadius(self)


    def CreateNarrowBand(self) -> "void":
        """
        CreateNarrowBand(itkNarrowBandImageFilterBaseIF2IF2 self)

        This is the
        virtual method called by Initialize to set the band of operation. It
        is left to the subclasses to define this functionality. This function
        can make use of above InsertNarrowBandNode function to create a band.

        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_CreateNarrowBand(self)


    def SetNarrowBand(self, ptr: 'itkNarrowBandBNI2F') -> "void":
        """SetNarrowBand(itkNarrowBandImageFilterBaseIF2IF2 self, itkNarrowBandBNI2F ptr)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBand(self, ptr)


    def CopyInputToOutput(self) -> "void":
        """CopyInputToOutput(itkNarrowBandImageFilterBaseIF2IF2 self)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_CopyInputToOutput(self)

    __swig_destroy__ = _itkNarrowBandImageFilterBasePython.delete_itkNarrowBandImageFilterBaseIF2IF2

    def cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseIF2IF2 *":
        """cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseIF2IF2"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandImageFilterBaseIF2IF2

        Create a new object of the class itkNarrowBandImageFilterBaseIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandImageFilterBaseIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandImageFilterBaseIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandImageFilterBaseIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandImageFilterBaseIF2IF2.SetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.GetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.InsertNarrowBandNode = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_InsertNarrowBandNode, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.SetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.GetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.SetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.GetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_GetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.CreateNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_CreateNarrowBand, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.SetNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_SetNarrowBand, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2.CopyInputToOutput = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_CopyInputToOutput, None, itkNarrowBandImageFilterBaseIF2IF2)
itkNarrowBandImageFilterBaseIF2IF2_swigregister = _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_swigregister
itkNarrowBandImageFilterBaseIF2IF2_swigregister(itkNarrowBandImageFilterBaseIF2IF2)

def itkNarrowBandImageFilterBaseIF2IF2_cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseIF2IF2 *":
    """itkNarrowBandImageFilterBaseIF2IF2_cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseIF2IF2"""
    return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2_cast(obj)

class itkNarrowBandImageFilterBaseIF3IF3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    """


    This class implements a multi-threaded finite difference image to
    image solver that can be applied to an arbitrary list of pixels.

    This class is intended as a common base class for classical narrowband
    solvers and manifold solvers. This base class implements a common
    memory management and multi-threaded architecture for applying a
    finite difference function to a list of pixels in an image. The
    specifics of narrowband solvers such as re-initialization and the use
    of land-mines are not implemented. INPUTS This filter takes an
    itk::Image as input. The appropriate type of input image is entirely
    determined by the application. As a rule, however, the input type is
    immediately converted to the output type before processing. This is
    because the input is not assumed to be a real value type and must be
    converted to signed, real values for the calculations. OUTPUTS The
    output is an itk::Image and is the solution of the pde. The embedding
    of the interface may vary with the application, but the usual ITK
    convention is that it is the zero level set in the output image.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Sethian, J.A. Level Set Methods. Cambridge University
    Press. 1996.

    C++ includes: itkNarrowBandImageFilterBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkNarrowBandImageFilterBaseIF3IF3 self, float const _arg)

        Set/Get
        IsoSurfaceValue to use in the input image 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkNarrowBandImageFilterBaseIF3IF3 self) -> float"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetIsoSurfaceValue(self)


    def InsertNarrowBandNode(self, *args) -> "void":
        """
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF3IF3 self, itkBandNodeI3F node)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF3IF3 self, itkIndex3 index)
        InsertNarrowBandNode(itkNarrowBandImageFilterBaseIF3IF3 self, itkIndex3 index, float const & value, signed char const & nodestate)

        Root Mean
        Square Change between successive iterations This function is used to
        insert a pixel index into the narrow band The entire narrow band can
        be constructed using this method. Usually, however, the narrow band is
        initialized and reinitialized automatically by the subclass. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_InsertNarrowBandNode(self, *args)


    def SetNarrowBandTotalRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseIF3IF3 self, float const & val)

        Set the
        narrow band total radius. The narrow band width will be twice this
        value (positive and negative distance to the zero level set). The
        default value is 3. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBandTotalRadius(self, val)


    def GetNarrowBandTotalRadius(self) -> "float":
        """
        GetNarrowBandTotalRadius(itkNarrowBandImageFilterBaseIF3IF3 self) -> float

        Get the
        narrow band total radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetNarrowBandTotalRadius(self)


    def SetNarrowBandInnerRadius(self, val: 'float const &') -> "void":
        """
        SetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseIF3IF3 self, float const & val)

        Set the
        narrow band inner radius. The inner radius is the safe are where the
        level set can be computed. The default value is 1. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBandInnerRadius(self, val)


    def GetNarrowBandInnerRadius(self) -> "float":
        """
        GetNarrowBandInnerRadius(itkNarrowBandImageFilterBaseIF3IF3 self) -> float

        Get the
        narrow band inner radius. 
        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetNarrowBandInnerRadius(self)


    def CreateNarrowBand(self) -> "void":
        """
        CreateNarrowBand(itkNarrowBandImageFilterBaseIF3IF3 self)

        This is the
        virtual method called by Initialize to set the band of operation. It
        is left to the subclasses to define this functionality. This function
        can make use of above InsertNarrowBandNode function to create a band.

        """
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_CreateNarrowBand(self)


    def SetNarrowBand(self, ptr: 'itkNarrowBandBNI3F') -> "void":
        """SetNarrowBand(itkNarrowBandImageFilterBaseIF3IF3 self, itkNarrowBandBNI3F ptr)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBand(self, ptr)


    def CopyInputToOutput(self) -> "void":
        """CopyInputToOutput(itkNarrowBandImageFilterBaseIF3IF3 self)"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_CopyInputToOutput(self)

    __swig_destroy__ = _itkNarrowBandImageFilterBasePython.delete_itkNarrowBandImageFilterBaseIF3IF3

    def cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseIF3IF3 *":
        """cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseIF3IF3"""
        return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandImageFilterBaseIF3IF3

        Create a new object of the class itkNarrowBandImageFilterBaseIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandImageFilterBaseIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandImageFilterBaseIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandImageFilterBaseIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandImageFilterBaseIF3IF3.SetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.GetIsoSurfaceValue = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetIsoSurfaceValue, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.InsertNarrowBandNode = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_InsertNarrowBandNode, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.SetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.GetNarrowBandTotalRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetNarrowBandTotalRadius, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.SetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.GetNarrowBandInnerRadius = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_GetNarrowBandInnerRadius, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.CreateNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_CreateNarrowBand, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.SetNarrowBand = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_SetNarrowBand, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3.CopyInputToOutput = new_instancemethod(_itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_CopyInputToOutput, None, itkNarrowBandImageFilterBaseIF3IF3)
itkNarrowBandImageFilterBaseIF3IF3_swigregister = _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_swigregister
itkNarrowBandImageFilterBaseIF3IF3_swigregister(itkNarrowBandImageFilterBaseIF3IF3)

def itkNarrowBandImageFilterBaseIF3IF3_cast(obj: 'itkLightObject') -> "itkNarrowBandImageFilterBaseIF3IF3 *":
    """itkNarrowBandImageFilterBaseIF3IF3_cast(itkLightObject obj) -> itkNarrowBandImageFilterBaseIF3IF3"""
    return _itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def narrow_band_image_filter_base(*args, **kwargs):
    """Procedural interface for NarrowBandImageFilterBase"""
    import itk
    instance = itk.NarrowBandImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def narrow_band_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NarrowBandImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.NarrowBandImageFilterBase.values()[0]
    else:
        filter_object = itk.NarrowBandImageFilterBase

    narrow_band_image_filter_base.__doc__ = filter_object.__doc__
    narrow_band_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    narrow_band_image_filter_base.__doc__ += "Available Keyword Arguments:\n"
    narrow_band_image_filter_base.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



