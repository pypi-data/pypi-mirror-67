# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython
            return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkNarrowBandLevelSetImageFilterPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython
import itkFiniteDifferenceFunctionPython
import itkNarrowBandImageFilterBasePython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import ITKNarrowBandBasePython

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_New():
  return itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New()


def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_New():
  return itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New()


def itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_New():
  return itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New()


def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_New():
  return itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New()

class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D(itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkNarrowBandThresholdSegmentationLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
        """__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
        """Clone(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Clone(self)


    def SetUpperThreshold(self, v: 'double') -> "void":
        """
        SetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'double') -> "void":
        """SetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'double') -> "void":
        """
        SetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "double":
        """GetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'double') -> "void":
        """
        SetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "double":
        """GetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'double') -> "void":
        """
        SetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "double":
        """GetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.Clone = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Clone, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.SetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D.GetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister
itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__()

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D *":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_cast(obj)

class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D(itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkNarrowBandThresholdSegmentationLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
        """__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
        """Clone(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Clone(self)


    def SetUpperThreshold(self, v: 'double') -> "void":
        """
        SetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'double') -> "void":
        """SetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "double":
        """GetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "double":
        """GetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'double') -> "void":
        """
        SetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "double":
        """GetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'double') -> "void":
        """
        SetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "double":
        """GetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'double') -> "void":
        """
        SetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self, double v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "double":
        """GetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.Clone = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Clone, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.SetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D.GetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister
itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__()

def itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D *":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_cast(obj)

class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F(itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkNarrowBandThresholdSegmentationLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """Clone(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone(self)


    def SetUpperThreshold(self, v: 'float') -> "void":
        """
        SetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'float') -> "void":
        """SetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'float') -> "void":
        """
        SetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "float":
        """GetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'float') -> "void":
        """
        SetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "float":
        """GetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'float') -> "void":
        """
        SetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "float":
        """GetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.Clone = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.SetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F.GetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__()

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F *":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_cast(obj)

class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F(itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkNarrowBandThresholdSegmentationLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """__New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """Clone(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone(self)


    def SetUpperThreshold(self, v: 'float') -> "void":
        """
        SetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Get/Set the
        threshold values that will be used to calculate the speed function. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold(self, v)


    def SetLowerThreshold(self, v: 'float') -> "void":
        """SetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold(self, v)


    def GetUpperThreshold(self) -> "float":
        """GetUpperThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold(self)


    def GetLowerThreshold(self) -> "float":
        """GetLowerThreshold(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold(self)


    def SetEdgeWeight(self, v: 'float') -> "void":
        """
        SetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Set/Get the weight
        applied to the edge (Laplacian) attractor in the speed term function.
        Zero will turn this term off. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight(self, v)


    def GetEdgeWeight(self) -> "float":
        """GetEdgeWeight(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight(self)


    def SetSmoothingIterations(self, v: 'int') -> "void":
        """
        SetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, int v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the number of diffusion
        iterations. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations(self, v)


    def GetSmoothingIterations(self) -> "int":
        """GetSmoothingIterations(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> int"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations(self)


    def SetSmoothingTimeStep(self, v: 'float') -> "void":
        """
        SetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the diffusion time step.

        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep(self, v)


    def GetSmoothingTimeStep(self) -> "float":
        """GetSmoothingTimeStep(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep(self)


    def SetSmoothingConductance(self, v: 'float') -> "void":
        """
        SetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self, float v)

        Anisotropic
        diffusion is applied to the FeatureImage before calculating the
        Laplacian (edge) term. This method sets/gets the smoothing
        conductance. 
        """
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance(self, v)


    def GetSmoothingConductance(self) -> "float":
        """GetSmoothingConductance(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance(self)

    OutputHasNumericTraitsCheck = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.delete_itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F"""
        return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.Clone = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetUpperThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetLowerThreshold = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetEdgeWeight = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingIterations = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingTimeStep = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.SetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F.GetSmoothingConductance = new_instancemethod(_itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance, None, itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister = _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister
itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F)

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__()

def itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F *":
    """itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F"""
    return _itkNarrowBandThresholdSegmentationLevelSetImageFilterPython.itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def narrow_band_threshold_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for NarrowBandThresholdSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.NarrowBandThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def narrow_band_threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NarrowBandThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NarrowBandThresholdSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.NarrowBandThresholdSegmentationLevelSetImageFilter

    narrow_band_threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    narrow_band_threshold_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    narrow_band_threshold_segmentation_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    narrow_band_threshold_segmentation_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



