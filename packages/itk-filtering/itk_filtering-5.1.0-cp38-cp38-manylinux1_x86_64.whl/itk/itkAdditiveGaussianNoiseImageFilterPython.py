# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAdditiveGaussianNoiseImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAdditiveGaussianNoiseImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAdditiveGaussianNoiseImageFilterPython
            return _itkAdditiveGaussianNoiseImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAdditiveGaussianNoiseImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAdditiveGaussianNoiseImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAdditiveGaussianNoiseImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkNoiseBaseImageFilterPython
import ITKCommonBasePython
import pyBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import stdcomplexPython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython

def itkAdditiveGaussianNoiseImageFilterID3ID3_New():
  return itkAdditiveGaussianNoiseImageFilterID3ID3.New()


def itkAdditiveGaussianNoiseImageFilterID2ID2_New():
  return itkAdditiveGaussianNoiseImageFilterID2ID2.New()


def itkAdditiveGaussianNoiseImageFilterIF3IF3_New():
  return itkAdditiveGaussianNoiseImageFilterIF3IF3.New()


def itkAdditiveGaussianNoiseImageFilterIF2IF2_New():
  return itkAdditiveGaussianNoiseImageFilterIF2IF2.New()


def itkAdditiveGaussianNoiseImageFilterIUS3IUS3_New():
  return itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New()


def itkAdditiveGaussianNoiseImageFilterIUS2IUS2_New():
  return itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New()


def itkAdditiveGaussianNoiseImageFilterIUC3IUC3_New():
  return itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New()


def itkAdditiveGaussianNoiseImageFilterIUC2IUC2_New():
  return itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New()


def itkAdditiveGaussianNoiseImageFilterISS3ISS3_New():
  return itkAdditiveGaussianNoiseImageFilterISS3ISS3.New()


def itkAdditiveGaussianNoiseImageFilterISS2ISS2_New():
  return itkAdditiveGaussianNoiseImageFilterISS2ISS2.New()

class itkAdditiveGaussianNoiseImageFilterID2ID2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID2ID2):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterID2ID2 self) -> itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterID2ID2 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterID2ID2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterID2ID2 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterID2ID2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterID2ID2"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterID2ID2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterID2ID2.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_Clone, None, itkAdditiveGaussianNoiseImageFilterID2ID2)
itkAdditiveGaussianNoiseImageFilterID2ID2.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetMean, None, itkAdditiveGaussianNoiseImageFilterID2ID2)
itkAdditiveGaussianNoiseImageFilterID2ID2.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetMean, None, itkAdditiveGaussianNoiseImageFilterID2ID2)
itkAdditiveGaussianNoiseImageFilterID2ID2.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterID2ID2)
itkAdditiveGaussianNoiseImageFilterID2ID2.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterID2ID2)
itkAdditiveGaussianNoiseImageFilterID2ID2_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_swigregister
itkAdditiveGaussianNoiseImageFilterID2ID2_swigregister(itkAdditiveGaussianNoiseImageFilterID2ID2)

def itkAdditiveGaussianNoiseImageFilterID2ID2___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer":
    """itkAdditiveGaussianNoiseImageFilterID2ID2___New_orig__() -> itkAdditiveGaussianNoiseImageFilterID2ID2_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2___New_orig__()

def itkAdditiveGaussianNoiseImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterID2ID2 *":
    """itkAdditiveGaussianNoiseImageFilterID2ID2_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterID2ID2"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID2ID2_cast(obj)

class itkAdditiveGaussianNoiseImageFilterID3ID3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterID3ID3):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterID3ID3 self) -> itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterID3ID3 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterID3ID3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterID3ID3 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterID3ID3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterID3ID3"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterID3ID3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterID3ID3.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_Clone, None, itkAdditiveGaussianNoiseImageFilterID3ID3)
itkAdditiveGaussianNoiseImageFilterID3ID3.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetMean, None, itkAdditiveGaussianNoiseImageFilterID3ID3)
itkAdditiveGaussianNoiseImageFilterID3ID3.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetMean, None, itkAdditiveGaussianNoiseImageFilterID3ID3)
itkAdditiveGaussianNoiseImageFilterID3ID3.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterID3ID3)
itkAdditiveGaussianNoiseImageFilterID3ID3.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterID3ID3)
itkAdditiveGaussianNoiseImageFilterID3ID3_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_swigregister
itkAdditiveGaussianNoiseImageFilterID3ID3_swigregister(itkAdditiveGaussianNoiseImageFilterID3ID3)

def itkAdditiveGaussianNoiseImageFilterID3ID3___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer":
    """itkAdditiveGaussianNoiseImageFilterID3ID3___New_orig__() -> itkAdditiveGaussianNoiseImageFilterID3ID3_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3___New_orig__()

def itkAdditiveGaussianNoiseImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterID3ID3 *":
    """itkAdditiveGaussianNoiseImageFilterID3ID3_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterID3ID3"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterID3ID3_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIF2IF2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF2IF2):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIF2IF2 self) -> itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIF2IF2 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIF2IF2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIF2IF2 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIF2IF2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIF2IF2"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIF2IF2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIF2IF2.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_Clone, None, itkAdditiveGaussianNoiseImageFilterIF2IF2)
itkAdditiveGaussianNoiseImageFilterIF2IF2.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetMean, None, itkAdditiveGaussianNoiseImageFilterIF2IF2)
itkAdditiveGaussianNoiseImageFilterIF2IF2.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetMean, None, itkAdditiveGaussianNoiseImageFilterIF2IF2)
itkAdditiveGaussianNoiseImageFilterIF2IF2.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIF2IF2)
itkAdditiveGaussianNoiseImageFilterIF2IF2.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIF2IF2)
itkAdditiveGaussianNoiseImageFilterIF2IF2_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_swigregister
itkAdditiveGaussianNoiseImageFilterIF2IF2_swigregister(itkAdditiveGaussianNoiseImageFilterIF2IF2)

def itkAdditiveGaussianNoiseImageFilterIF2IF2___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIF2IF2___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF2IF2_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIF2IF2 *":
    """itkAdditiveGaussianNoiseImageFilterIF2IF2_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIF2IF2"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF2IF2_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIF3IF3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIF3IF3):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIF3IF3 self) -> itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIF3IF3 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIF3IF3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIF3IF3 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIF3IF3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIF3IF3"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIF3IF3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIF3IF3.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_Clone, None, itkAdditiveGaussianNoiseImageFilterIF3IF3)
itkAdditiveGaussianNoiseImageFilterIF3IF3.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetMean, None, itkAdditiveGaussianNoiseImageFilterIF3IF3)
itkAdditiveGaussianNoiseImageFilterIF3IF3.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetMean, None, itkAdditiveGaussianNoiseImageFilterIF3IF3)
itkAdditiveGaussianNoiseImageFilterIF3IF3.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIF3IF3)
itkAdditiveGaussianNoiseImageFilterIF3IF3.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIF3IF3)
itkAdditiveGaussianNoiseImageFilterIF3IF3_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_swigregister
itkAdditiveGaussianNoiseImageFilterIF3IF3_swigregister(itkAdditiveGaussianNoiseImageFilterIF3IF3)

def itkAdditiveGaussianNoiseImageFilterIF3IF3___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIF3IF3___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIF3IF3_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIF3IF3 *":
    """itkAdditiveGaussianNoiseImageFilterIF3IF3_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIF3IF3"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIF3IF3_cast(obj)

class itkAdditiveGaussianNoiseImageFilterISS2ISS2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS2ISS2):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterISS2ISS2 self) -> itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterISS2ISS2 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterISS2ISS2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterISS2ISS2 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterISS2ISS2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterISS2ISS2"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterISS2ISS2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterISS2ISS2.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_Clone, None, itkAdditiveGaussianNoiseImageFilterISS2ISS2)
itkAdditiveGaussianNoiseImageFilterISS2ISS2.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetMean, None, itkAdditiveGaussianNoiseImageFilterISS2ISS2)
itkAdditiveGaussianNoiseImageFilterISS2ISS2.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetMean, None, itkAdditiveGaussianNoiseImageFilterISS2ISS2)
itkAdditiveGaussianNoiseImageFilterISS2ISS2.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterISS2ISS2)
itkAdditiveGaussianNoiseImageFilterISS2ISS2.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterISS2ISS2)
itkAdditiveGaussianNoiseImageFilterISS2ISS2_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_swigregister
itkAdditiveGaussianNoiseImageFilterISS2ISS2_swigregister(itkAdditiveGaussianNoiseImageFilterISS2ISS2)

def itkAdditiveGaussianNoiseImageFilterISS2ISS2___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer":
    """itkAdditiveGaussianNoiseImageFilterISS2ISS2___New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS2ISS2_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2___New_orig__()

def itkAdditiveGaussianNoiseImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterISS2ISS2 *":
    """itkAdditiveGaussianNoiseImageFilterISS2ISS2_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterISS2ISS2"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS2ISS2_cast(obj)

class itkAdditiveGaussianNoiseImageFilterISS3ISS3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterISS3ISS3):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterISS3ISS3 self) -> itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterISS3ISS3 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterISS3ISS3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterISS3ISS3 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterISS3ISS3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterISS3ISS3"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterISS3ISS3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterISS3ISS3.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_Clone, None, itkAdditiveGaussianNoiseImageFilterISS3ISS3)
itkAdditiveGaussianNoiseImageFilterISS3ISS3.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetMean, None, itkAdditiveGaussianNoiseImageFilterISS3ISS3)
itkAdditiveGaussianNoiseImageFilterISS3ISS3.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetMean, None, itkAdditiveGaussianNoiseImageFilterISS3ISS3)
itkAdditiveGaussianNoiseImageFilterISS3ISS3.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterISS3ISS3)
itkAdditiveGaussianNoiseImageFilterISS3ISS3.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterISS3ISS3)
itkAdditiveGaussianNoiseImageFilterISS3ISS3_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_swigregister
itkAdditiveGaussianNoiseImageFilterISS3ISS3_swigregister(itkAdditiveGaussianNoiseImageFilterISS3ISS3)

def itkAdditiveGaussianNoiseImageFilterISS3ISS3___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer":
    """itkAdditiveGaussianNoiseImageFilterISS3ISS3___New_orig__() -> itkAdditiveGaussianNoiseImageFilterISS3ISS3_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3___New_orig__()

def itkAdditiveGaussianNoiseImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterISS3ISS3 *":
    """itkAdditiveGaussianNoiseImageFilterISS3ISS3_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterISS3ISS3"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterISS3ISS3_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIUC2IUC2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC2IUC2):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIUC2IUC2 self) -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIUC2IUC2 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUC2IUC2 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIUC2IUC2.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Clone, None, itkAdditiveGaussianNoiseImageFilterIUC2IUC2)
itkAdditiveGaussianNoiseImageFilterIUC2IUC2.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetMean, None, itkAdditiveGaussianNoiseImageFilterIUC2IUC2)
itkAdditiveGaussianNoiseImageFilterIUC2IUC2.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetMean, None, itkAdditiveGaussianNoiseImageFilterIUC2IUC2)
itkAdditiveGaussianNoiseImageFilterIUC2IUC2.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUC2IUC2)
itkAdditiveGaussianNoiseImageFilterIUC2IUC2.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUC2IUC2)
itkAdditiveGaussianNoiseImageFilterIUC2IUC2_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_swigregister
itkAdditiveGaussianNoiseImageFilterIUC2IUC2_swigregister(itkAdditiveGaussianNoiseImageFilterIUC2IUC2)

def itkAdditiveGaussianNoiseImageFilterIUC2IUC2___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIUC2IUC2___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUC2IUC2 *":
    """itkAdditiveGaussianNoiseImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUC2IUC2"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC2IUC2_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIUC3IUC3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUC3IUC3):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIUC3IUC3 self) -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIUC3IUC3 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUC3IUC3 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIUC3IUC3.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Clone, None, itkAdditiveGaussianNoiseImageFilterIUC3IUC3)
itkAdditiveGaussianNoiseImageFilterIUC3IUC3.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetMean, None, itkAdditiveGaussianNoiseImageFilterIUC3IUC3)
itkAdditiveGaussianNoiseImageFilterIUC3IUC3.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetMean, None, itkAdditiveGaussianNoiseImageFilterIUC3IUC3)
itkAdditiveGaussianNoiseImageFilterIUC3IUC3.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUC3IUC3)
itkAdditiveGaussianNoiseImageFilterIUC3IUC3.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUC3IUC3)
itkAdditiveGaussianNoiseImageFilterIUC3IUC3_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_swigregister
itkAdditiveGaussianNoiseImageFilterIUC3IUC3_swigregister(itkAdditiveGaussianNoiseImageFilterIUC3IUC3)

def itkAdditiveGaussianNoiseImageFilterIUC3IUC3___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIUC3IUC3___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUC3IUC3 *":
    """itkAdditiveGaussianNoiseImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUC3IUC3"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUC3IUC3_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIUS2IUS2(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS2IUS2):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIUS2IUS2 self) -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIUS2IUS2 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUS2IUS2 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIUS2IUS2.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Clone, None, itkAdditiveGaussianNoiseImageFilterIUS2IUS2)
itkAdditiveGaussianNoiseImageFilterIUS2IUS2.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetMean, None, itkAdditiveGaussianNoiseImageFilterIUS2IUS2)
itkAdditiveGaussianNoiseImageFilterIUS2IUS2.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetMean, None, itkAdditiveGaussianNoiseImageFilterIUS2IUS2)
itkAdditiveGaussianNoiseImageFilterIUS2IUS2.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUS2IUS2)
itkAdditiveGaussianNoiseImageFilterIUS2IUS2.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUS2IUS2)
itkAdditiveGaussianNoiseImageFilterIUS2IUS2_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_swigregister
itkAdditiveGaussianNoiseImageFilterIUS2IUS2_swigregister(itkAdditiveGaussianNoiseImageFilterIUS2IUS2)

def itkAdditiveGaussianNoiseImageFilterIUS2IUS2___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIUS2IUS2___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUS2IUS2 *":
    """itkAdditiveGaussianNoiseImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUS2IUS2"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS2IUS2_cast(obj)

class itkAdditiveGaussianNoiseImageFilterIUS3IUS3(itkNoiseBaseImageFilterPython.itkNoiseBaseImageFilterIUS3IUS3):
    """


    Alter an image with additive Gaussian white noise.

    Additive Gaussian white noise can be modeled as:

    $ I = I_0 + N $

    where $ I $ is the observed image, $ I_0 $ is the noise-free image and
    $ N $ is a normally distributed random variable of mean $ \\mu $ and
    variance $ \\sigma^2 $:

    $ N \\sim \\mathcal{N}(\\mu, \\sigma^2) $  The noise is
    independent of the pixel intensities.

    Gaetan Lehmann  This code was contributed in the Insight Journal paper
    "Noise Simulation".https://hdl.handle.net/10380/3158

    C++ includes: itkAdditiveGaussianNoiseImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer":
        """Clone(itkAdditiveGaussianNoiseImageFilterIUS3IUS3 self) -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Clone(self)


    def GetMean(self) -> "double":
        """
        GetMean(itkAdditiveGaussianNoiseImageFilterIUS3IUS3 self) -> double

        Set/Get the mean of the
        Gaussian distribution. Defaults to 0.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetMean(self)


    def SetMean(self, _arg: 'double const') -> "void":
        """SetMean(itkAdditiveGaussianNoiseImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetMean(self, _arg)


    def GetStandardDeviation(self) -> "double":
        """
        GetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUS3IUS3 self) -> double

        Set/Get the
        standard deviation of the Gaussian distribution. Defaults to 1.0. 
        """
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetStandardDeviation(self)


    def SetStandardDeviation(self, _arg: 'double const') -> "void":
        """SetStandardDeviation(itkAdditiveGaussianNoiseImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetStandardDeviation(self, _arg)

    InputConvertibleToOutputCheck = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkAdditiveGaussianNoiseImageFilterPython.delete_itkAdditiveGaussianNoiseImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3"""
        return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3

        Create a new object of the class itkAdditiveGaussianNoiseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAdditiveGaussianNoiseImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdditiveGaussianNoiseImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdditiveGaussianNoiseImageFilterIUS3IUS3.Clone = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Clone, None, itkAdditiveGaussianNoiseImageFilterIUS3IUS3)
itkAdditiveGaussianNoiseImageFilterIUS3IUS3.GetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetMean, None, itkAdditiveGaussianNoiseImageFilterIUS3IUS3)
itkAdditiveGaussianNoiseImageFilterIUS3IUS3.SetMean = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetMean, None, itkAdditiveGaussianNoiseImageFilterIUS3IUS3)
itkAdditiveGaussianNoiseImageFilterIUS3IUS3.GetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_GetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUS3IUS3)
itkAdditiveGaussianNoiseImageFilterIUS3IUS3.SetStandardDeviation = new_instancemethod(_itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_SetStandardDeviation, None, itkAdditiveGaussianNoiseImageFilterIUS3IUS3)
itkAdditiveGaussianNoiseImageFilterIUS3IUS3_swigregister = _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_swigregister
itkAdditiveGaussianNoiseImageFilterIUS3IUS3_swigregister(itkAdditiveGaussianNoiseImageFilterIUS3IUS3)

def itkAdditiveGaussianNoiseImageFilterIUS3IUS3___New_orig__() -> "itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer":
    """itkAdditiveGaussianNoiseImageFilterIUS3IUS3___New_orig__() -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3_Pointer"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3___New_orig__()

def itkAdditiveGaussianNoiseImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkAdditiveGaussianNoiseImageFilterIUS3IUS3 *":
    """itkAdditiveGaussianNoiseImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAdditiveGaussianNoiseImageFilterIUS3IUS3"""
    return _itkAdditiveGaussianNoiseImageFilterPython.itkAdditiveGaussianNoiseImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def additive_gaussian_noise_image_filter(*args, **kwargs):
    """Procedural interface for AdditiveGaussianNoiseImageFilter"""
    import itk
    instance = itk.AdditiveGaussianNoiseImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def additive_gaussian_noise_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AdditiveGaussianNoiseImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AdditiveGaussianNoiseImageFilter.values()[0]
    else:
        filter_object = itk.AdditiveGaussianNoiseImageFilter

    additive_gaussian_noise_image_filter.__doc__ = filter_object.__doc__
    additive_gaussian_noise_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    additive_gaussian_noise_image_filter.__doc__ += "Available Keyword Arguments:\n"
    additive_gaussian_noise_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



