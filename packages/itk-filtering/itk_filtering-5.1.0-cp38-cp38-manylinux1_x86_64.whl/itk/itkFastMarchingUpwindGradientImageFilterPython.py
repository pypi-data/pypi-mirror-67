# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFastMarchingUpwindGradientImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFastMarchingUpwindGradientImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkFastMarchingUpwindGradientImageFilterPython
            return _itkFastMarchingUpwindGradientImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFastMarchingUpwindGradientImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFastMarchingUpwindGradientImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFastMarchingUpwindGradientImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFastMarchingImageFilterPython
import itkImageRegionPython
import ITKCommonBasePython
import pyBasePython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkMatrixPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vectorPython
import itkPointPython
import itkFixedArrayPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterAPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImagePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import ITKFastMarchingBasePython
import itkLevelSetNodePython
import itkNodePairPython
import itkFastMarchingStoppingCriterionBasePython

def itkFastMarchingUpwindGradientImageFilterID3ID3_New():
  return itkFastMarchingUpwindGradientImageFilterID3ID3.New()


def itkFastMarchingUpwindGradientImageFilterID2ID2_New():
  return itkFastMarchingUpwindGradientImageFilterID2ID2.New()


def itkFastMarchingUpwindGradientImageFilterIF3IF3_New():
  return itkFastMarchingUpwindGradientImageFilterIF3IF3.New()


def itkFastMarchingUpwindGradientImageFilterIF2IF2_New():
  return itkFastMarchingUpwindGradientImageFilterIF2IF2.New()

class itkFastMarchingUpwindGradientImageFilterID2ID2(itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2):
    """


    Generates the upwind gradient field of fast marching arrival times.

    This filter adds some extra functionality to its base class. While the
    solution T(x) of the Eikonal equation is being generated by the base
    class with the fast marching method, the filter generates the upwind
    gradient vectors of T(x), storing them in an image.

    Since the Eikonal equation generates the arrival times of a wave
    traveling at a given speed, the generated gradient vectors can be
    interpreted as the slowness (1/velocity) vectors of the front (the
    quantity inside the modulus operator in the Eikonal equation).

    Gradient vectors are computed using upwind finite differences, that
    is, information only propagates from points where the wavefront has
    already passed. This is consistent with how the fast marching method
    works.

    One more extra feature is the possibility to define a set of Target
    points where the propagation stops. This can be used to avoid
    computing the Eikonal solution for the whole domain. The front can be
    stopped either when one Target point is reached or all Target points
    are reached. The propagation can stop after a time TargetOffset has
    passed since the stop condition is met. This way the solution is
    computed a bit downstream the Target points, so that the level sets of
    T(x) corresponding to the Target are smooth.

    For an alternative implementation, see
    itk::FastMarchingUpwindGradientImageFilterBase.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy.

    C++ includes: itkFastMarchingUpwindGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer":
        """Clone(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_Clone(self)


    def SetTargetPoints(self, points: 'itkVectorContainerUILSND2') -> "void":
        """
        SetTargetPoints(itkFastMarchingUpwindGradientImageFilterID2ID2 self, itkVectorContainerUILSND2 points)

        Set the container
        of Target Points. If a target point is reached, the propagation stops.
        Trial points are represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetPoints(self, points)


    def GetTargetPoints(self) -> "itkVectorContainerUILSND2_Pointer":
        """
        GetTargetPoints(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> itkVectorContainerUILSND2_Pointer

        Get the container
        of Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetPoints(self)


    def GetReachedTargetPoints(self) -> "itkVectorContainerUILSND2_Pointer":
        """
        GetReachedTargetPoints(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> itkVectorContainerUILSND2_Pointer

        Get the
        container of Reached Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetReachedTargetPoints(self)


    def GetGradientImage(self) -> "itkImageCVD22_Pointer":
        """
        GetGradientImage(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> itkImageCVD22_Pointer

        Get the gradient
        image. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetGradientImage(self)


    def SetGenerateGradientImage(self, _arg: 'bool const') -> "void":
        """
        SetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterID2ID2 self, bool const _arg)

        Set the
        GenerateGradientImage flag. Instrument the algorithm to generate the
        gradient of the Eikonal equation solution while fast marching. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetGenerateGradientImage(self, _arg)


    def GetGenerateGradientImage(self) -> "bool const &":
        """
        GetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> bool const &

        Get the
        GenerateGradientImage flag. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetGenerateGradientImage(self)


    def GenerateGradientImageOn(self) -> "void":
        """GenerateGradientImageOn(itkFastMarchingUpwindGradientImageFilterID2ID2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GenerateGradientImageOn(self)


    def GenerateGradientImageOff(self) -> "void":
        """GenerateGradientImageOff(itkFastMarchingUpwindGradientImageFilterID2ID2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GenerateGradientImageOff(self)


    def SetTargetOffset(self, _arg: 'double const') -> "void":
        """
        SetTargetOffset(itkFastMarchingUpwindGradientImageFilterID2ID2 self, double const _arg)

        Set how long (in
        terms of arrival times) after targets are reached the front must stop.
        This is useful to ensure that the level set of target arrival time is
        smooth. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetOffset(self, _arg)


    def GetTargetOffset(self) -> "double const &":
        """
        GetTargetOffset(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> double const &

        Get the
        TargetOffset ivar. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetOffset(self)


    def SetTargetReachedMode(self, _arg: 'int const') -> "void":
        """
        SetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterID2ID2 self, int const _arg)

        Choose whether
        the front must stop when the first target has been reached or all
        targets have been reached. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedMode(self, _arg)


    def GetTargetReachedMode(self) -> "int const &":
        """GetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> int const &"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetReachedMode(self)


    def SetTargetReachedModeToNoTargets(self) -> "void":
        """SetTargetReachedModeToNoTargets(itkFastMarchingUpwindGradientImageFilterID2ID2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToNoTargets(self)


    def SetTargetReachedModeToOneTarget(self) -> "void":
        """SetTargetReachedModeToOneTarget(itkFastMarchingUpwindGradientImageFilterID2ID2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToOneTarget(self)


    def SetTargetReachedModeToSomeTargets(self, numberOfTargets: 'unsigned long') -> "void":
        """SetTargetReachedModeToSomeTargets(itkFastMarchingUpwindGradientImageFilterID2ID2 self, unsigned long numberOfTargets)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToSomeTargets(self, numberOfTargets)


    def SetTargetReachedModeToAllTargets(self) -> "void":
        """SetTargetReachedModeToAllTargets(itkFastMarchingUpwindGradientImageFilterID2ID2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToAllTargets(self)


    def GetNumberOfTargets(self) -> "unsigned long const &":
        """
        GetNumberOfTargets(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> unsigned long const &

        Get the number
        of targets. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetNumberOfTargets(self)


    def GetTargetValue(self) -> "double const &":
        """
        GetTargetValue(itkFastMarchingUpwindGradientImageFilterID2ID2 self) -> double const &

        Get the arrival time
        corresponding to the last reached target. If TargetReachedMode is set
        to NoTargets, TargetValue contains the last (aka largest) Eikonal
        solution value generated. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetValue(self)

    NoTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_NoTargets
    OneTarget = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_OneTarget
    SomeTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SomeTargets
    AllTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_AllTargets
    LevelSetDoubleDivisionOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_LevelSetDoubleDivisionOperatorsCheck
    LevelSetDoubleDivisionAndAssignOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_LevelSetDoubleDivisionAndAssignOperatorsCheck
    __swig_destroy__ = _itkFastMarchingUpwindGradientImageFilterPython.delete_itkFastMarchingUpwindGradientImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterID2ID2"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingUpwindGradientImageFilterID2ID2

        Create a new object of the class itkFastMarchingUpwindGradientImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingUpwindGradientImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingUpwindGradientImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingUpwindGradientImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingUpwindGradientImageFilterID2ID2.Clone = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_Clone, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetReachedTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetReachedTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetGradientImage, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GenerateGradientImageOn = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GenerateGradientImageOn, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GenerateGradientImageOff = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GenerateGradientImageOff, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetReachedModeToNoTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToNoTargets, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetReachedModeToOneTarget = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToOneTarget, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetReachedModeToSomeTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToSomeTargets, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.SetTargetReachedModeToAllTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_SetTargetReachedModeToAllTargets, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetNumberOfTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetNumberOfTargets, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2.GetTargetValue = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_GetTargetValue, None, itkFastMarchingUpwindGradientImageFilterID2ID2)
itkFastMarchingUpwindGradientImageFilterID2ID2_swigregister = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_swigregister
itkFastMarchingUpwindGradientImageFilterID2ID2_swigregister(itkFastMarchingUpwindGradientImageFilterID2ID2)

def itkFastMarchingUpwindGradientImageFilterID2ID2___New_orig__() -> "itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer":
    """itkFastMarchingUpwindGradientImageFilterID2ID2___New_orig__() -> itkFastMarchingUpwindGradientImageFilterID2ID2_Pointer"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2___New_orig__()

def itkFastMarchingUpwindGradientImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterID2ID2 *":
    """itkFastMarchingUpwindGradientImageFilterID2ID2_cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterID2ID2"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID2ID2_cast(obj)

class itkFastMarchingUpwindGradientImageFilterID3ID3(itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3):
    """


    Generates the upwind gradient field of fast marching arrival times.

    This filter adds some extra functionality to its base class. While the
    solution T(x) of the Eikonal equation is being generated by the base
    class with the fast marching method, the filter generates the upwind
    gradient vectors of T(x), storing them in an image.

    Since the Eikonal equation generates the arrival times of a wave
    traveling at a given speed, the generated gradient vectors can be
    interpreted as the slowness (1/velocity) vectors of the front (the
    quantity inside the modulus operator in the Eikonal equation).

    Gradient vectors are computed using upwind finite differences, that
    is, information only propagates from points where the wavefront has
    already passed. This is consistent with how the fast marching method
    works.

    One more extra feature is the possibility to define a set of Target
    points where the propagation stops. This can be used to avoid
    computing the Eikonal solution for the whole domain. The front can be
    stopped either when one Target point is reached or all Target points
    are reached. The propagation can stop after a time TargetOffset has
    passed since the stop condition is met. This way the solution is
    computed a bit downstream the Target points, so that the level sets of
    T(x) corresponding to the Target are smooth.

    For an alternative implementation, see
    itk::FastMarchingUpwindGradientImageFilterBase.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy.

    C++ includes: itkFastMarchingUpwindGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer":
        """Clone(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_Clone(self)


    def SetTargetPoints(self, points: 'itkVectorContainerUILSND3') -> "void":
        """
        SetTargetPoints(itkFastMarchingUpwindGradientImageFilterID3ID3 self, itkVectorContainerUILSND3 points)

        Set the container
        of Target Points. If a target point is reached, the propagation stops.
        Trial points are represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetPoints(self, points)


    def GetTargetPoints(self) -> "itkVectorContainerUILSND3_Pointer":
        """
        GetTargetPoints(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> itkVectorContainerUILSND3_Pointer

        Get the container
        of Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetPoints(self)


    def GetReachedTargetPoints(self) -> "itkVectorContainerUILSND3_Pointer":
        """
        GetReachedTargetPoints(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> itkVectorContainerUILSND3_Pointer

        Get the
        container of Reached Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetReachedTargetPoints(self)


    def GetGradientImage(self) -> "itkImageCVD33_Pointer":
        """
        GetGradientImage(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> itkImageCVD33_Pointer

        Get the gradient
        image. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetGradientImage(self)


    def SetGenerateGradientImage(self, _arg: 'bool const') -> "void":
        """
        SetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterID3ID3 self, bool const _arg)

        Set the
        GenerateGradientImage flag. Instrument the algorithm to generate the
        gradient of the Eikonal equation solution while fast marching. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetGenerateGradientImage(self, _arg)


    def GetGenerateGradientImage(self) -> "bool const &":
        """
        GetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> bool const &

        Get the
        GenerateGradientImage flag. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetGenerateGradientImage(self)


    def GenerateGradientImageOn(self) -> "void":
        """GenerateGradientImageOn(itkFastMarchingUpwindGradientImageFilterID3ID3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GenerateGradientImageOn(self)


    def GenerateGradientImageOff(self) -> "void":
        """GenerateGradientImageOff(itkFastMarchingUpwindGradientImageFilterID3ID3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GenerateGradientImageOff(self)


    def SetTargetOffset(self, _arg: 'double const') -> "void":
        """
        SetTargetOffset(itkFastMarchingUpwindGradientImageFilterID3ID3 self, double const _arg)

        Set how long (in
        terms of arrival times) after targets are reached the front must stop.
        This is useful to ensure that the level set of target arrival time is
        smooth. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetOffset(self, _arg)


    def GetTargetOffset(self) -> "double const &":
        """
        GetTargetOffset(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> double const &

        Get the
        TargetOffset ivar. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetOffset(self)


    def SetTargetReachedMode(self, _arg: 'int const') -> "void":
        """
        SetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterID3ID3 self, int const _arg)

        Choose whether
        the front must stop when the first target has been reached or all
        targets have been reached. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedMode(self, _arg)


    def GetTargetReachedMode(self) -> "int const &":
        """GetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> int const &"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetReachedMode(self)


    def SetTargetReachedModeToNoTargets(self) -> "void":
        """SetTargetReachedModeToNoTargets(itkFastMarchingUpwindGradientImageFilterID3ID3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToNoTargets(self)


    def SetTargetReachedModeToOneTarget(self) -> "void":
        """SetTargetReachedModeToOneTarget(itkFastMarchingUpwindGradientImageFilterID3ID3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToOneTarget(self)


    def SetTargetReachedModeToSomeTargets(self, numberOfTargets: 'unsigned long') -> "void":
        """SetTargetReachedModeToSomeTargets(itkFastMarchingUpwindGradientImageFilterID3ID3 self, unsigned long numberOfTargets)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToSomeTargets(self, numberOfTargets)


    def SetTargetReachedModeToAllTargets(self) -> "void":
        """SetTargetReachedModeToAllTargets(itkFastMarchingUpwindGradientImageFilterID3ID3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToAllTargets(self)


    def GetNumberOfTargets(self) -> "unsigned long const &":
        """
        GetNumberOfTargets(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> unsigned long const &

        Get the number
        of targets. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetNumberOfTargets(self)


    def GetTargetValue(self) -> "double const &":
        """
        GetTargetValue(itkFastMarchingUpwindGradientImageFilterID3ID3 self) -> double const &

        Get the arrival time
        corresponding to the last reached target. If TargetReachedMode is set
        to NoTargets, TargetValue contains the last (aka largest) Eikonal
        solution value generated. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetValue(self)

    NoTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_NoTargets
    OneTarget = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_OneTarget
    SomeTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SomeTargets
    AllTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_AllTargets
    LevelSetDoubleDivisionOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_LevelSetDoubleDivisionOperatorsCheck
    LevelSetDoubleDivisionAndAssignOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_LevelSetDoubleDivisionAndAssignOperatorsCheck
    __swig_destroy__ = _itkFastMarchingUpwindGradientImageFilterPython.delete_itkFastMarchingUpwindGradientImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterID3ID3"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingUpwindGradientImageFilterID3ID3

        Create a new object of the class itkFastMarchingUpwindGradientImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingUpwindGradientImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingUpwindGradientImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingUpwindGradientImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingUpwindGradientImageFilterID3ID3.Clone = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_Clone, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetReachedTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetReachedTargetPoints, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetGradientImage, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GenerateGradientImageOn = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GenerateGradientImageOn, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GenerateGradientImageOff = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GenerateGradientImageOff, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetReachedModeToNoTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToNoTargets, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetReachedModeToOneTarget = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToOneTarget, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetReachedModeToSomeTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToSomeTargets, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.SetTargetReachedModeToAllTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_SetTargetReachedModeToAllTargets, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetNumberOfTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetNumberOfTargets, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3.GetTargetValue = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_GetTargetValue, None, itkFastMarchingUpwindGradientImageFilterID3ID3)
itkFastMarchingUpwindGradientImageFilterID3ID3_swigregister = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_swigregister
itkFastMarchingUpwindGradientImageFilterID3ID3_swigregister(itkFastMarchingUpwindGradientImageFilterID3ID3)

def itkFastMarchingUpwindGradientImageFilterID3ID3___New_orig__() -> "itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer":
    """itkFastMarchingUpwindGradientImageFilterID3ID3___New_orig__() -> itkFastMarchingUpwindGradientImageFilterID3ID3_Pointer"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3___New_orig__()

def itkFastMarchingUpwindGradientImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterID3ID3 *":
    """itkFastMarchingUpwindGradientImageFilterID3ID3_cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterID3ID3"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterID3ID3_cast(obj)

class itkFastMarchingUpwindGradientImageFilterIF2IF2(itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2):
    """


    Generates the upwind gradient field of fast marching arrival times.

    This filter adds some extra functionality to its base class. While the
    solution T(x) of the Eikonal equation is being generated by the base
    class with the fast marching method, the filter generates the upwind
    gradient vectors of T(x), storing them in an image.

    Since the Eikonal equation generates the arrival times of a wave
    traveling at a given speed, the generated gradient vectors can be
    interpreted as the slowness (1/velocity) vectors of the front (the
    quantity inside the modulus operator in the Eikonal equation).

    Gradient vectors are computed using upwind finite differences, that
    is, information only propagates from points where the wavefront has
    already passed. This is consistent with how the fast marching method
    works.

    One more extra feature is the possibility to define a set of Target
    points where the propagation stops. This can be used to avoid
    computing the Eikonal solution for the whole domain. The front can be
    stopped either when one Target point is reached or all Target points
    are reached. The propagation can stop after a time TargetOffset has
    passed since the stop condition is met. This way the solution is
    computed a bit downstream the Target points, so that the level sets of
    T(x) corresponding to the Target are smooth.

    For an alternative implementation, see
    itk::FastMarchingUpwindGradientImageFilterBase.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy.

    C++ includes: itkFastMarchingUpwindGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer":
        """Clone(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_Clone(self)


    def SetTargetPoints(self, points: 'itkVectorContainerUILSNF2') -> "void":
        """
        SetTargetPoints(itkFastMarchingUpwindGradientImageFilterIF2IF2 self, itkVectorContainerUILSNF2 points)

        Set the container
        of Target Points. If a target point is reached, the propagation stops.
        Trial points are represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetPoints(self, points)


    def GetTargetPoints(self) -> "itkVectorContainerUILSNF2_Pointer":
        """
        GetTargetPoints(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> itkVectorContainerUILSNF2_Pointer

        Get the container
        of Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetPoints(self)


    def GetReachedTargetPoints(self) -> "itkVectorContainerUILSNF2_Pointer":
        """
        GetReachedTargetPoints(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> itkVectorContainerUILSNF2_Pointer

        Get the
        container of Reached Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetReachedTargetPoints(self)


    def GetGradientImage(self) -> "itkImageCVF22_Pointer":
        """
        GetGradientImage(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> itkImageCVF22_Pointer

        Get the gradient
        image. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetGradientImage(self)


    def SetGenerateGradientImage(self, _arg: 'bool const') -> "void":
        """
        SetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterIF2IF2 self, bool const _arg)

        Set the
        GenerateGradientImage flag. Instrument the algorithm to generate the
        gradient of the Eikonal equation solution while fast marching. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetGenerateGradientImage(self, _arg)


    def GetGenerateGradientImage(self) -> "bool const &":
        """
        GetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> bool const &

        Get the
        GenerateGradientImage flag. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetGenerateGradientImage(self)


    def GenerateGradientImageOn(self) -> "void":
        """GenerateGradientImageOn(itkFastMarchingUpwindGradientImageFilterIF2IF2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GenerateGradientImageOn(self)


    def GenerateGradientImageOff(self) -> "void":
        """GenerateGradientImageOff(itkFastMarchingUpwindGradientImageFilterIF2IF2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GenerateGradientImageOff(self)


    def SetTargetOffset(self, _arg: 'double const') -> "void":
        """
        SetTargetOffset(itkFastMarchingUpwindGradientImageFilterIF2IF2 self, double const _arg)

        Set how long (in
        terms of arrival times) after targets are reached the front must stop.
        This is useful to ensure that the level set of target arrival time is
        smooth. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetOffset(self, _arg)


    def GetTargetOffset(self) -> "double const &":
        """
        GetTargetOffset(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> double const &

        Get the
        TargetOffset ivar. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetOffset(self)


    def SetTargetReachedMode(self, _arg: 'int const') -> "void":
        """
        SetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterIF2IF2 self, int const _arg)

        Choose whether
        the front must stop when the first target has been reached or all
        targets have been reached. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedMode(self, _arg)


    def GetTargetReachedMode(self) -> "int const &":
        """GetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> int const &"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetReachedMode(self)


    def SetTargetReachedModeToNoTargets(self) -> "void":
        """SetTargetReachedModeToNoTargets(itkFastMarchingUpwindGradientImageFilterIF2IF2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToNoTargets(self)


    def SetTargetReachedModeToOneTarget(self) -> "void":
        """SetTargetReachedModeToOneTarget(itkFastMarchingUpwindGradientImageFilterIF2IF2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToOneTarget(self)


    def SetTargetReachedModeToSomeTargets(self, numberOfTargets: 'unsigned long') -> "void":
        """SetTargetReachedModeToSomeTargets(itkFastMarchingUpwindGradientImageFilterIF2IF2 self, unsigned long numberOfTargets)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToSomeTargets(self, numberOfTargets)


    def SetTargetReachedModeToAllTargets(self) -> "void":
        """SetTargetReachedModeToAllTargets(itkFastMarchingUpwindGradientImageFilterIF2IF2 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToAllTargets(self)


    def GetNumberOfTargets(self) -> "unsigned long const &":
        """
        GetNumberOfTargets(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> unsigned long const &

        Get the number
        of targets. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetNumberOfTargets(self)


    def GetTargetValue(self) -> "double const &":
        """
        GetTargetValue(itkFastMarchingUpwindGradientImageFilterIF2IF2 self) -> double const &

        Get the arrival time
        corresponding to the last reached target. If TargetReachedMode is set
        to NoTargets, TargetValue contains the last (aka largest) Eikonal
        solution value generated. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetValue(self)

    NoTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_NoTargets
    OneTarget = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_OneTarget
    SomeTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SomeTargets
    AllTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_AllTargets
    LevelSetDoubleDivisionOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_LevelSetDoubleDivisionOperatorsCheck
    LevelSetDoubleDivisionAndAssignOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_LevelSetDoubleDivisionAndAssignOperatorsCheck
    __swig_destroy__ = _itkFastMarchingUpwindGradientImageFilterPython.delete_itkFastMarchingUpwindGradientImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterIF2IF2"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingUpwindGradientImageFilterIF2IF2

        Create a new object of the class itkFastMarchingUpwindGradientImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingUpwindGradientImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingUpwindGradientImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingUpwindGradientImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingUpwindGradientImageFilterIF2IF2.Clone = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_Clone, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetReachedTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetReachedTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GenerateGradientImageOn = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GenerateGradientImageOn, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GenerateGradientImageOff = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GenerateGradientImageOff, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetReachedModeToNoTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToNoTargets, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetReachedModeToOneTarget = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToOneTarget, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetReachedModeToSomeTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToSomeTargets, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.SetTargetReachedModeToAllTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_SetTargetReachedModeToAllTargets, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetNumberOfTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetNumberOfTargets, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2.GetTargetValue = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_GetTargetValue, None, itkFastMarchingUpwindGradientImageFilterIF2IF2)
itkFastMarchingUpwindGradientImageFilterIF2IF2_swigregister = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_swigregister
itkFastMarchingUpwindGradientImageFilterIF2IF2_swigregister(itkFastMarchingUpwindGradientImageFilterIF2IF2)

def itkFastMarchingUpwindGradientImageFilterIF2IF2___New_orig__() -> "itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer":
    """itkFastMarchingUpwindGradientImageFilterIF2IF2___New_orig__() -> itkFastMarchingUpwindGradientImageFilterIF2IF2_Pointer"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2___New_orig__()

def itkFastMarchingUpwindGradientImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterIF2IF2 *":
    """itkFastMarchingUpwindGradientImageFilterIF2IF2_cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterIF2IF2"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF2IF2_cast(obj)

class itkFastMarchingUpwindGradientImageFilterIF3IF3(itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3):
    """


    Generates the upwind gradient field of fast marching arrival times.

    This filter adds some extra functionality to its base class. While the
    solution T(x) of the Eikonal equation is being generated by the base
    class with the fast marching method, the filter generates the upwind
    gradient vectors of T(x), storing them in an image.

    Since the Eikonal equation generates the arrival times of a wave
    traveling at a given speed, the generated gradient vectors can be
    interpreted as the slowness (1/velocity) vectors of the front (the
    quantity inside the modulus operator in the Eikonal equation).

    Gradient vectors are computed using upwind finite differences, that
    is, information only propagates from points where the wavefront has
    already passed. This is consistent with how the fast marching method
    works.

    One more extra feature is the possibility to define a set of Target
    points where the propagation stops. This can be used to avoid
    computing the Eikonal solution for the whole domain. The front can be
    stopped either when one Target point is reached or all Target points
    are reached. The propagation can stop after a time TargetOffset has
    passed since the stop condition is met. This way the solution is
    computed a bit downstream the Target points, so that the level sets of
    T(x) corresponding to the Target are smooth.

    For an alternative implementation, see
    itk::FastMarchingUpwindGradientImageFilterBase.

    Luca Antiga Ph.D. Biomedical Technologies Laboratory, Bioengineering
    Department, Mario Negri Institute, Italy.

    C++ includes: itkFastMarchingUpwindGradientImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer":
        """Clone(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_Clone(self)


    def SetTargetPoints(self, points: 'itkVectorContainerUILSNF3') -> "void":
        """
        SetTargetPoints(itkFastMarchingUpwindGradientImageFilterIF3IF3 self, itkVectorContainerUILSNF3 points)

        Set the container
        of Target Points. If a target point is reached, the propagation stops.
        Trial points are represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetPoints(self, points)


    def GetTargetPoints(self) -> "itkVectorContainerUILSNF3_Pointer":
        """
        GetTargetPoints(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> itkVectorContainerUILSNF3_Pointer

        Get the container
        of Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetPoints(self)


    def GetReachedTargetPoints(self) -> "itkVectorContainerUILSNF3_Pointer":
        """
        GetReachedTargetPoints(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> itkVectorContainerUILSNF3_Pointer

        Get the
        container of Reached Target Points. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetReachedTargetPoints(self)


    def GetGradientImage(self) -> "itkImageCVF33_Pointer":
        """
        GetGradientImage(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> itkImageCVF33_Pointer

        Get the gradient
        image. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetGradientImage(self)


    def SetGenerateGradientImage(self, _arg: 'bool const') -> "void":
        """
        SetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterIF3IF3 self, bool const _arg)

        Set the
        GenerateGradientImage flag. Instrument the algorithm to generate the
        gradient of the Eikonal equation solution while fast marching. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetGenerateGradientImage(self, _arg)


    def GetGenerateGradientImage(self) -> "bool const &":
        """
        GetGenerateGradientImage(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> bool const &

        Get the
        GenerateGradientImage flag. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetGenerateGradientImage(self)


    def GenerateGradientImageOn(self) -> "void":
        """GenerateGradientImageOn(itkFastMarchingUpwindGradientImageFilterIF3IF3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GenerateGradientImageOn(self)


    def GenerateGradientImageOff(self) -> "void":
        """GenerateGradientImageOff(itkFastMarchingUpwindGradientImageFilterIF3IF3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GenerateGradientImageOff(self)


    def SetTargetOffset(self, _arg: 'double const') -> "void":
        """
        SetTargetOffset(itkFastMarchingUpwindGradientImageFilterIF3IF3 self, double const _arg)

        Set how long (in
        terms of arrival times) after targets are reached the front must stop.
        This is useful to ensure that the level set of target arrival time is
        smooth. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetOffset(self, _arg)


    def GetTargetOffset(self) -> "double const &":
        """
        GetTargetOffset(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> double const &

        Get the
        TargetOffset ivar. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetOffset(self)


    def SetTargetReachedMode(self, _arg: 'int const') -> "void":
        """
        SetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterIF3IF3 self, int const _arg)

        Choose whether
        the front must stop when the first target has been reached or all
        targets have been reached. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedMode(self, _arg)


    def GetTargetReachedMode(self) -> "int const &":
        """GetTargetReachedMode(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> int const &"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetReachedMode(self)


    def SetTargetReachedModeToNoTargets(self) -> "void":
        """SetTargetReachedModeToNoTargets(itkFastMarchingUpwindGradientImageFilterIF3IF3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToNoTargets(self)


    def SetTargetReachedModeToOneTarget(self) -> "void":
        """SetTargetReachedModeToOneTarget(itkFastMarchingUpwindGradientImageFilterIF3IF3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToOneTarget(self)


    def SetTargetReachedModeToSomeTargets(self, numberOfTargets: 'unsigned long') -> "void":
        """SetTargetReachedModeToSomeTargets(itkFastMarchingUpwindGradientImageFilterIF3IF3 self, unsigned long numberOfTargets)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToSomeTargets(self, numberOfTargets)


    def SetTargetReachedModeToAllTargets(self) -> "void":
        """SetTargetReachedModeToAllTargets(itkFastMarchingUpwindGradientImageFilterIF3IF3 self)"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToAllTargets(self)


    def GetNumberOfTargets(self) -> "unsigned long const &":
        """
        GetNumberOfTargets(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> unsigned long const &

        Get the number
        of targets. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetNumberOfTargets(self)


    def GetTargetValue(self) -> "double const &":
        """
        GetTargetValue(itkFastMarchingUpwindGradientImageFilterIF3IF3 self) -> double const &

        Get the arrival time
        corresponding to the last reached target. If TargetReachedMode is set
        to NoTargets, TargetValue contains the last (aka largest) Eikonal
        solution value generated. 
        """
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetValue(self)

    NoTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_NoTargets
    OneTarget = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_OneTarget
    SomeTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SomeTargets
    AllTargets = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_AllTargets
    LevelSetDoubleDivisionOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_LevelSetDoubleDivisionOperatorsCheck
    LevelSetDoubleDivisionAndAssignOperatorsCheck = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_LevelSetDoubleDivisionAndAssignOperatorsCheck
    __swig_destroy__ = _itkFastMarchingUpwindGradientImageFilterPython.delete_itkFastMarchingUpwindGradientImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterIF3IF3"""
        return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingUpwindGradientImageFilterIF3IF3

        Create a new object of the class itkFastMarchingUpwindGradientImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingUpwindGradientImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingUpwindGradientImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingUpwindGradientImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingUpwindGradientImageFilterIF3IF3.Clone = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_Clone, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetReachedTargetPoints = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetReachedTargetPoints, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetGenerateGradientImage = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetGenerateGradientImage, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GenerateGradientImageOn = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GenerateGradientImageOn, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GenerateGradientImageOff = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GenerateGradientImageOff, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetTargetOffset = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetOffset, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetTargetReachedMode = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetReachedMode, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetReachedModeToNoTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToNoTargets, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetReachedModeToOneTarget = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToOneTarget, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetReachedModeToSomeTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToSomeTargets, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.SetTargetReachedModeToAllTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_SetTargetReachedModeToAllTargets, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetNumberOfTargets = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetNumberOfTargets, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3.GetTargetValue = new_instancemethod(_itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_GetTargetValue, None, itkFastMarchingUpwindGradientImageFilterIF3IF3)
itkFastMarchingUpwindGradientImageFilterIF3IF3_swigregister = _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_swigregister
itkFastMarchingUpwindGradientImageFilterIF3IF3_swigregister(itkFastMarchingUpwindGradientImageFilterIF3IF3)

def itkFastMarchingUpwindGradientImageFilterIF3IF3___New_orig__() -> "itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer":
    """itkFastMarchingUpwindGradientImageFilterIF3IF3___New_orig__() -> itkFastMarchingUpwindGradientImageFilterIF3IF3_Pointer"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3___New_orig__()

def itkFastMarchingUpwindGradientImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkFastMarchingUpwindGradientImageFilterIF3IF3 *":
    """itkFastMarchingUpwindGradientImageFilterIF3IF3_cast(itkLightObject obj) -> itkFastMarchingUpwindGradientImageFilterIF3IF3"""
    return _itkFastMarchingUpwindGradientImageFilterPython.itkFastMarchingUpwindGradientImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fast_marching_upwind_gradient_image_filter(*args, **kwargs):
    """Procedural interface for FastMarchingUpwindGradientImageFilter"""
    import itk
    instance = itk.FastMarchingUpwindGradientImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fast_marching_upwind_gradient_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FastMarchingUpwindGradientImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FastMarchingUpwindGradientImageFilter.values()[0]
    else:
        filter_object = itk.FastMarchingUpwindGradientImageFilter

    fast_marching_upwind_gradient_image_filter.__doc__ = filter_object.__doc__
    fast_marching_upwind_gradient_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fast_marching_upwind_gradient_image_filter.__doc__ += "Available Keyword Arguments:\n"
    fast_marching_upwind_gradient_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



