# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkDanielssonDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDanielssonDistanceMapImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDanielssonDistanceMapImageFilterPython
            return _itkDanielssonDistanceMapImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDanielssonDistanceMapImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDanielssonDistanceMapImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDanielssonDistanceMapImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkDanielssonDistanceMapImageFilterIUS3ID3_New():
  return itkDanielssonDistanceMapImageFilterIUS3ID3.New()


def itkDanielssonDistanceMapImageFilterIUS2ID2_New():
  return itkDanielssonDistanceMapImageFilterIUS2ID2.New()


def itkDanielssonDistanceMapImageFilterIUS3IF3_New():
  return itkDanielssonDistanceMapImageFilterIUS3IF3.New()


def itkDanielssonDistanceMapImageFilterIUS2IF2_New():
  return itkDanielssonDistanceMapImageFilterIUS2IF2.New()


def itkDanielssonDistanceMapImageFilterIUC3ID3_New():
  return itkDanielssonDistanceMapImageFilterIUC3ID3.New()


def itkDanielssonDistanceMapImageFilterIUC2ID2_New():
  return itkDanielssonDistanceMapImageFilterIUC2ID2.New()


def itkDanielssonDistanceMapImageFilterIUC3IF3_New():
  return itkDanielssonDistanceMapImageFilterIUC3IF3.New()


def itkDanielssonDistanceMapImageFilterIUC2IF2_New():
  return itkDanielssonDistanceMapImageFilterIUC2IF2.New()


def itkDanielssonDistanceMapImageFilterID3ID3_New():
  return itkDanielssonDistanceMapImageFilterID3ID3.New()


def itkDanielssonDistanceMapImageFilterID2ID2_New():
  return itkDanielssonDistanceMapImageFilterID2ID2.New()


def itkDanielssonDistanceMapImageFilterIF3IF3_New():
  return itkDanielssonDistanceMapImageFilterIF3IF3.New()


def itkDanielssonDistanceMapImageFilterIF2IF2_New():
  return itkDanielssonDistanceMapImageFilterIF2IF2.New()


def itkDanielssonDistanceMapImageFilterIUS3IUS3_New():
  return itkDanielssonDistanceMapImageFilterIUS3IUS3.New()


def itkDanielssonDistanceMapImageFilterIUS2IUS2_New():
  return itkDanielssonDistanceMapImageFilterIUS2IUS2.New()


def itkDanielssonDistanceMapImageFilterIUC3IUC3_New():
  return itkDanielssonDistanceMapImageFilterIUC3IUC3.New()


def itkDanielssonDistanceMapImageFilterIUC2IUC2_New():
  return itkDanielssonDistanceMapImageFilterIUC2IUC2.New()


def itkDanielssonDistanceMapImageFilterISS3ISS3_New():
  return itkDanielssonDistanceMapImageFilterISS3ISS3.New()


def itkDanielssonDistanceMapImageFilterISS2ISS2_New():
  return itkDanielssonDistanceMapImageFilterISS2ISS2.New()

class itkDanielssonDistanceMapImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterID2ID2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterID2ID2 self) -> itkDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterID2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterID2ID2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterID2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageD2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageD2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterID2ID2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterID2ID2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_Clone, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterID2ID2)
itkDanielssonDistanceMapImageFilterID2ID2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_swigregister
itkDanielssonDistanceMapImageFilterID2ID2_swigregister(itkDanielssonDistanceMapImageFilterID2ID2)

def itkDanielssonDistanceMapImageFilterID2ID2___New_orig__() -> "itkDanielssonDistanceMapImageFilterID2ID2_Pointer":
    """itkDanielssonDistanceMapImageFilterID2ID2___New_orig__() -> itkDanielssonDistanceMapImageFilterID2ID2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2___New_orig__()

def itkDanielssonDistanceMapImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterID2ID2 *":
    """itkDanielssonDistanceMapImageFilterID2ID2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterID2ID2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID2ID2_cast(obj)

class itkDanielssonDistanceMapImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterID3ID3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterID3ID3 self) -> itkDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterID3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterID3ID3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterID3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageD3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageD3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterID3ID3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterID3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterID3ID3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_Clone, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterID3ID3)
itkDanielssonDistanceMapImageFilterID3ID3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_swigregister
itkDanielssonDistanceMapImageFilterID3ID3_swigregister(itkDanielssonDistanceMapImageFilterID3ID3)

def itkDanielssonDistanceMapImageFilterID3ID3___New_orig__() -> "itkDanielssonDistanceMapImageFilterID3ID3_Pointer":
    """itkDanielssonDistanceMapImageFilterID3ID3___New_orig__() -> itkDanielssonDistanceMapImageFilterID3ID3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3___New_orig__()

def itkDanielssonDistanceMapImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterID3ID3 *":
    """itkDanielssonDistanceMapImageFilterID3ID3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterID3ID3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterID3ID3_cast(obj)

class itkDanielssonDistanceMapImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIF2IF2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> itkDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIF2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIF2IF2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIF2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageF2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageF2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIF2IF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIF2IF2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_Clone, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIF2IF2)
itkDanielssonDistanceMapImageFilterIF2IF2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_swigregister
itkDanielssonDistanceMapImageFilterIF2IF2_swigregister(itkDanielssonDistanceMapImageFilterIF2IF2)

def itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIF2IF2_Pointer":
    """itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__() -> itkDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2___New_orig__()

def itkDanielssonDistanceMapImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIF2IF2 *":
    """itkDanielssonDistanceMapImageFilterIF2IF2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIF2IF2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF2IF2_cast(obj)

class itkDanielssonDistanceMapImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIF3IF3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> itkDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIF3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIF3IF3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIF3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageF3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageF3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIF3IF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIF3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIF3IF3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_Clone, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIF3IF3)
itkDanielssonDistanceMapImageFilterIF3IF3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_swigregister
itkDanielssonDistanceMapImageFilterIF3IF3_swigregister(itkDanielssonDistanceMapImageFilterIF3IF3)

def itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIF3IF3_Pointer":
    """itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__() -> itkDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3___New_orig__()

def itkDanielssonDistanceMapImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIF3IF3 *":
    """itkDanielssonDistanceMapImageFilterIF3IF3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIF3IF3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIF3IF3_cast(obj)

class itkDanielssonDistanceMapImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageSS2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageSS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageSS2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageSS2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterISS2ISS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterISS2ISS2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_Clone, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterISS2ISS2)
itkDanielssonDistanceMapImageFilterISS2ISS2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_swigregister
itkDanielssonDistanceMapImageFilterISS2ISS2_swigregister(itkDanielssonDistanceMapImageFilterISS2ISS2)

def itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__() -> "itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
    """itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__() -> itkDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2___New_orig__()

def itkDanielssonDistanceMapImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterISS2ISS2 *":
    """itkDanielssonDistanceMapImageFilterISS2ISS2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterISS2ISS2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS2ISS2_cast(obj)

class itkDanielssonDistanceMapImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageSS3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageSS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageSS3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageSS3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterISS3ISS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterISS3ISS3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_Clone, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterISS3ISS3)
itkDanielssonDistanceMapImageFilterISS3ISS3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_swigregister
itkDanielssonDistanceMapImageFilterISS3ISS3_swigregister(itkDanielssonDistanceMapImageFilterISS3ISS3)

def itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__() -> "itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
    """itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__() -> itkDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3___New_orig__()

def itkDanielssonDistanceMapImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterISS3ISS3 *":
    """itkDanielssonDistanceMapImageFilterISS3ISS3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterISS3ISS3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterISS3ISS3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageUC2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2ID2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC2ID2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_Clone, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2ID2)
itkDanielssonDistanceMapImageFilterIUC2ID2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_swigregister
itkDanielssonDistanceMapImageFilterIUC2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUC2ID2)

def itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2ID2 *":
    """itkDanielssonDistanceMapImageFilterIUC2ID2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2ID2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2ID2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageUC2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2IF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC2IF2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_Clone, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2IF2)
itkDanielssonDistanceMapImageFilterIUC2IF2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_swigregister
itkDanielssonDistanceMapImageFilterIUC2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IF2)

def itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2IF2 *":
    """itkDanielssonDistanceMapImageFilterIUC2IF2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2IF2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IF2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2IUC2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2IUC2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2IUC2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC2IUC2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> itkImageUC2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageUC2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> itkImageUC2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC2IUC2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2IUC2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC2IUC2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC2IUC2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_Clone, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC2IUC2)
itkDanielssonDistanceMapImageFilterIUC2IUC2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_swigregister
itkDanielssonDistanceMapImageFilterIUC2IUC2_swigregister(itkDanielssonDistanceMapImageFilterIUC2IUC2)

def itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC2IUC2 *":
    """itkDanielssonDistanceMapImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC2IUC2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC2IUC2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageUC3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3ID3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC3ID3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_Clone, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3ID3)
itkDanielssonDistanceMapImageFilterIUC3ID3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_swigregister
itkDanielssonDistanceMapImageFilterIUC3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUC3ID3)

def itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3ID3 *":
    """itkDanielssonDistanceMapImageFilterIUC3ID3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3ID3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3ID3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageUC3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3IF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC3IF3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_Clone, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3IF3)
itkDanielssonDistanceMapImageFilterIUC3IF3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_swigregister
itkDanielssonDistanceMapImageFilterIUC3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IF3)

def itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3IF3 *":
    """itkDanielssonDistanceMapImageFilterIUC3IF3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3IF3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IF3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3IUC3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3IUC3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3IUC3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUC3IUC3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUC3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> itkImageUC3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageUC3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> itkImageUC3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUC3IUC3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3IUC3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUC3IUC3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUC3IUC3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_Clone, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUC3IUC3)
itkDanielssonDistanceMapImageFilterIUC3IUC3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_swigregister
itkDanielssonDistanceMapImageFilterIUC3IUC3_swigregister(itkDanielssonDistanceMapImageFilterIUC3IUC3)

def itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUC3IUC3 *":
    """itkDanielssonDistanceMapImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUC3IUC3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUC3IUC3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageUS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2ID2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS2ID2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_Clone, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2ID2)
itkDanielssonDistanceMapImageFilterIUS2ID2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_swigregister
itkDanielssonDistanceMapImageFilterIUS2ID2_swigregister(itkDanielssonDistanceMapImageFilterIUS2ID2)

def itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2ID2 *":
    """itkDanielssonDistanceMapImageFilterIUS2ID2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2ID2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2ID2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageUS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2IF2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS2IF2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_Clone, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2IF2)
itkDanielssonDistanceMapImageFilterIUS2IF2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_swigregister
itkDanielssonDistanceMapImageFilterIUS2IF2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IF2)

def itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2IF2 *":
    """itkDanielssonDistanceMapImageFilterIUS2IF2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2IF2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IF2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2IUS2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2IUS2 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2IUS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS2IUS2 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS2 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> itkImageUS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageUS2 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> itkImageUS2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS2IUS2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2IUS2"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS2IUS2

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS2IUS2.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_Clone, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS2IUS2)
itkDanielssonDistanceMapImageFilterIUS2IUS2_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_swigregister
itkDanielssonDistanceMapImageFilterIUS2IUS2_swigregister(itkDanielssonDistanceMapImageFilterIUS2IUS2)

def itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS2IUS2 *":
    """itkDanielssonDistanceMapImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS2IUS2"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS2IUS2_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageUS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3ID3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS3ID3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_Clone, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3ID3)
itkDanielssonDistanceMapImageFilterIUS3ID3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_swigregister
itkDanielssonDistanceMapImageFilterIUS3ID3_swigregister(itkDanielssonDistanceMapImageFilterIUS3ID3)

def itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3ID3 *":
    """itkDanielssonDistanceMapImageFilterIUS3ID3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3ID3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3ID3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageUS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3IF3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS3IF3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_Clone, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3IF3)
itkDanielssonDistanceMapImageFilterIUS3IF3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_swigregister
itkDanielssonDistanceMapImageFilterIUS3IF3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IF3)

def itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3IF3 *":
    """itkDanielssonDistanceMapImageFilterIUS3IF3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3IF3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IF3_cast(obj)

class itkDanielssonDistanceMapImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    This filter computes the distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    Parameters:
    -----------

    TInputImage:  Input Image Type

    TOutputImage:  Output Image Type

    TVoronoiImage:  Voronoi Image Type. Note the default value is
    TInputImage.

    The input is assumed to contain numeric codes defining objects. The
    filter will produce as output the following images:

    A Voronoi partition using the same numeric codes as the input.

    A distance map with the approximation to the euclidean distance. from
    a particular pixel to the nearest object to this pixel in the input
    image.

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used.  This filter is N-dimensional and
    known to be efficient in computational time. The algorithm is the
    N-dimensional version of the 4SED algorithm given for two dimensions
    in:

    Danielsson, Per-Erik. Euclidean Distance Mapping. Computer Graphics
    and Image Processing 14, 227-248 (1980).

    C++ includes: itkDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer":
        """Clone(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3IUS3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOff(self)


    def SetInputIsBinary(self, _arg: 'bool const') -> "void":
        """
        SetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3IUS3 self, bool const _arg)

        Set if the input
        is binary. If this variable is set, each nonzero pixel in the input
        image will be given a unique numeric code to be used by the Voronoi
        partition. If the image is binary but you are not interested in the
        Voronoi regions of the different nonzero pixels, then you need not set
        this. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetInputIsBinary(self, _arg)


    def GetInputIsBinary(self) -> "bool const &":
        """
        GetInputIsBinary(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> bool const &

        Get if the input
        is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetInputIsBinary(self)


    def InputIsBinaryOn(self) -> "void":
        """
        InputIsBinaryOn(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)

        Set On/Off if the
        input is binary. See SetInputIsBinary(). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOn(self)


    def InputIsBinaryOff(self) -> "void":
        """InputIsBinaryOff(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3IUS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkDanielssonDistanceMapImageFilterIUS3IUS3 self)"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOff(self)


    def GetVoronoiMap(self) -> "itkImageUS3 *":
        """
        GetVoronoiMap(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> itkImageUS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageUS3 *":
        """
        GetDistanceMap(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> itkImageUS3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkDanielssonDistanceMapImageFilterIUS3IUS3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVectorDistanceMap(self)

    InputOutputSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputOutputSameDimensionCheck
    InputVoronoiSameDimensionCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputVoronoiSameDimensionCheck
    DoubleConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    InputConvertibleToOutputCheck = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkDanielssonDistanceMapImageFilterPython.delete_itkDanielssonDistanceMapImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3IUS3"""
        return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkDanielssonDistanceMapImageFilterIUS3IUS3

        Create a new object of the class itkDanielssonDistanceMapImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDanielssonDistanceMapImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDanielssonDistanceMapImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDanielssonDistanceMapImageFilterIUS3IUS3.Clone = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_Clone, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.SetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetSquaredDistance = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetSquaredDistance, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.SquaredDistanceOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOn, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.SquaredDistanceOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SquaredDistanceOff, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.SetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetInputIsBinary = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetInputIsBinary, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.InputIsBinaryOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOn, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.InputIsBinaryOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_InputIsBinaryOff, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.SetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_SetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetUseImageSpacing = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetUseImageSpacing, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.UseImageSpacingOn = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOn, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.UseImageSpacingOff = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_UseImageSpacingOff, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetVoronoiMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVoronoiMap, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3.GetVectorDistanceMap = new_instancemethod(_itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_GetVectorDistanceMap, None, itkDanielssonDistanceMapImageFilterIUS3IUS3)
itkDanielssonDistanceMapImageFilterIUS3IUS3_swigregister = _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_swigregister
itkDanielssonDistanceMapImageFilterIUS3IUS3_swigregister(itkDanielssonDistanceMapImageFilterIUS3IUS3)

def itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__() -> "itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer":
    """itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__() -> itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3___New_orig__()

def itkDanielssonDistanceMapImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkDanielssonDistanceMapImageFilterIUS3IUS3 *":
    """itkDanielssonDistanceMapImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkDanielssonDistanceMapImageFilterIUS3IUS3"""
    return _itkDanielssonDistanceMapImageFilterPython.itkDanielssonDistanceMapImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def danielsson_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for DanielssonDistanceMapImageFilter"""
    import itk
    instance = itk.DanielssonDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def danielsson_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DanielssonDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.DanielssonDistanceMapImageFilter

    danielsson_distance_map_image_filter.__doc__ = filter_object.__doc__
    danielsson_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    danielsson_distance_map_image_filter.__doc__ += "Available Keyword Arguments:\n"
    danielsson_distance_map_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



