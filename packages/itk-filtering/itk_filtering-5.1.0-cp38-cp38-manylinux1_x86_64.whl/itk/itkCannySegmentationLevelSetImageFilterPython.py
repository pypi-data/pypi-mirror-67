# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkCannySegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCannySegmentationLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCannySegmentationLevelSetImageFilterPython
            return _itkCannySegmentationLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCannySegmentationLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCannySegmentationLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCannySegmentationLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkFixedArrayPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import stdcomplexPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkSegmentationLevelSetImageFilterPython
import itkSparseFieldLevelSetImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkFiniteDifferenceFunctionPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterAPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython

def itkCannySegmentationLevelSetImageFilterID3ID3D_New():
  return itkCannySegmentationLevelSetImageFilterID3ID3D.New()


def itkCannySegmentationLevelSetImageFilterIF3IF3F_New():
  return itkCannySegmentationLevelSetImageFilterIF3IF3F.New()


def itkCannySegmentationLevelSetImageFilterID2ID2D_New():
  return itkCannySegmentationLevelSetImageFilterID2ID2D.New()


def itkCannySegmentationLevelSetImageFilterIF2IF2F_New():
  return itkCannySegmentationLevelSetImageFilterIF2IF2F.New()

class itkCannySegmentationLevelSetImageFilterID2ID2D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    """


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkCannySegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer":
        """__New_orig__() -> itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer":
        """Clone(itkCannySegmentationLevelSetImageFilterID2ID2D self) -> itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_Clone(self)


    def SetThreshold(self, v: 'double') -> "void":
        """
        SetThreshold(itkCannySegmentationLevelSetImageFilterID2ID2D self, double v)

        Set the Threshold
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetThreshold(self, v)


    def GetThreshold(self) -> "double":
        """GetThreshold(itkCannySegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetThreshold(self)


    def SetVariance(self, v: 'double') -> "void":
        """
        SetVariance(itkCannySegmentationLevelSetImageFilterID2ID2D self, double v)

        Set the Variance
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetVariance(self, v)


    def GetVariance(self) -> "double":
        """GetVariance(itkCannySegmentationLevelSetImageFilterID2ID2D self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetVariance(self)


    def GetCannyImage(self) -> "itkImageD2 *":
        """
        GetCannyImage(itkCannySegmentationLevelSetImageFilterID2ID2D self) -> itkImageD2

        Get the Canny image
        that was used to create the speed and advection images 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetCannyImage(self)

    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterID2ID2D"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkCannySegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannySegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannySegmentationLevelSetImageFilterID2ID2D.Clone = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_Clone, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D.SetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetThreshold, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D.GetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetThreshold, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D.SetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_SetVariance, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D.GetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetVariance, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D.GetCannyImage = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_GetCannyImage, None, itkCannySegmentationLevelSetImageFilterID2ID2D)
itkCannySegmentationLevelSetImageFilterID2ID2D_swigregister = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_swigregister
itkCannySegmentationLevelSetImageFilterID2ID2D_swigregister(itkCannySegmentationLevelSetImageFilterID2ID2D)

def itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__() -> "itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer":
    """itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__() -> itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D___New_orig__()

def itkCannySegmentationLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterID2ID2D *":
    """itkCannySegmentationLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterID2ID2D"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID2ID2D_cast(obj)

class itkCannySegmentationLevelSetImageFilterID3ID3D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    """


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkCannySegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer":
        """__New_orig__() -> itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer":
        """Clone(itkCannySegmentationLevelSetImageFilterID3ID3D self) -> itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_Clone(self)


    def SetThreshold(self, v: 'double') -> "void":
        """
        SetThreshold(itkCannySegmentationLevelSetImageFilterID3ID3D self, double v)

        Set the Threshold
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetThreshold(self, v)


    def GetThreshold(self) -> "double":
        """GetThreshold(itkCannySegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetThreshold(self)


    def SetVariance(self, v: 'double') -> "void":
        """
        SetVariance(itkCannySegmentationLevelSetImageFilterID3ID3D self, double v)

        Set the Variance
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetVariance(self, v)


    def GetVariance(self) -> "double":
        """GetVariance(itkCannySegmentationLevelSetImageFilterID3ID3D self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetVariance(self)


    def GetCannyImage(self) -> "itkImageD3 *":
        """
        GetCannyImage(itkCannySegmentationLevelSetImageFilterID3ID3D self) -> itkImageD3

        Get the Canny image
        that was used to create the speed and advection images 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetCannyImage(self)

    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterID3ID3D"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkCannySegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannySegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannySegmentationLevelSetImageFilterID3ID3D.Clone = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_Clone, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D.SetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetThreshold, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D.GetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetThreshold, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D.SetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_SetVariance, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D.GetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetVariance, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D.GetCannyImage = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_GetCannyImage, None, itkCannySegmentationLevelSetImageFilterID3ID3D)
itkCannySegmentationLevelSetImageFilterID3ID3D_swigregister = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_swigregister
itkCannySegmentationLevelSetImageFilterID3ID3D_swigregister(itkCannySegmentationLevelSetImageFilterID3ID3D)

def itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__() -> "itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer":
    """itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__() -> itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D___New_orig__()

def itkCannySegmentationLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterID3ID3D *":
    """itkCannySegmentationLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterID3ID3D"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterID3ID3D_cast(obj)

class itkCannySegmentationLevelSetImageFilterIF2IF2F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    """


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkCannySegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """__New_orig__() -> itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer":
        """Clone(itkCannySegmentationLevelSetImageFilterIF2IF2F self) -> itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_Clone(self)


    def SetThreshold(self, v: 'float') -> "void":
        """
        SetThreshold(itkCannySegmentationLevelSetImageFilterIF2IF2F self, float v)

        Set the Threshold
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetThreshold(self, v)


    def GetThreshold(self) -> "float":
        """GetThreshold(itkCannySegmentationLevelSetImageFilterIF2IF2F self) -> float"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetThreshold(self)


    def SetVariance(self, v: 'double') -> "void":
        """
        SetVariance(itkCannySegmentationLevelSetImageFilterIF2IF2F self, double v)

        Set the Variance
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetVariance(self, v)


    def GetVariance(self) -> "double":
        """GetVariance(itkCannySegmentationLevelSetImageFilterIF2IF2F self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetVariance(self)


    def GetCannyImage(self) -> "itkImageF2 *":
        """
        GetCannyImage(itkCannySegmentationLevelSetImageFilterIF2IF2F self) -> itkImageF2

        Get the Canny image
        that was used to create the speed and advection images 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetCannyImage(self)

    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterIF2IF2F"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkCannySegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannySegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannySegmentationLevelSetImageFilterIF2IF2F.Clone = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_Clone, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F.SetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetThreshold, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F.GetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetThreshold, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F.SetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_SetVariance, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F.GetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetVariance, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F.GetCannyImage = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_GetCannyImage, None, itkCannySegmentationLevelSetImageFilterIF2IF2F)
itkCannySegmentationLevelSetImageFilterIF2IF2F_swigregister = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_swigregister
itkCannySegmentationLevelSetImageFilterIF2IF2F_swigregister(itkCannySegmentationLevelSetImageFilterIF2IF2F)

def itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> "itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer":
    """itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__() -> itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F___New_orig__()

def itkCannySegmentationLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterIF2IF2F *":
    """itkCannySegmentationLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterIF2IF2F"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF2IF2F_cast(obj)

class itkCannySegmentationLevelSetImageFilterIF3IF3F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    """


    Segments structures in images based on image features derived from
    pseudo-canny-edges.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    CannySegmentationLevelSetFunction class contain additional information
    necessary to the full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. It
    constructs a speed function which is designed to lock onto edges as
    detected by a Canny filter.

    The CannySegmentationLevelSetImageFilter can be a tool for refining an
    existing segmentation, or it can be used to try to segment a region by
    itself. Like all other level-set based segmentation filters (see
    SegmentationLevelSetImageFilter), it works by first constructing a
    scalar speed term and a vector advection field based on edge features
    in the image. The level set front is then moved according to these two
    terms with the addition of a third curvature term to contol the
    smoothness of the solution.

    The speed term is constructed as the Danielsson distance transform of
    the Canny edge image, as calculated by the
    CannyEdgeDetectionImageFilter. This scalar speed can be tuned in and
    out of the final evolution equation by setting the PropagationScaling
    parameter (a value of 0 removes the speed term).

    The advection field term is constructed by minimizing Danielsson
    distance squared. i.e. $ \\mbox{min} \\int D^2 \\Rightarrow D
    \\nabla D $. This term moves the level set down the gradient of the
    distance transform.

    In practice, you may set the speed (propagation) term to zero if your
    initialization is already close to the edge you are interested in. If
    you are trying to segment a region by seeding with a small surface
    (blob, sphere) then you will likely want to add speed (propagation) to
    the equation so that the levelsets can expand along zero gradients.
    The relative influence of these two terms are controlled by the
    SetPropagationScaling and SetAdvectionScaling parameters. INPUTS This
    filter requires two inputs. The first input is a seed image. This seed
    image must contain an isosurface that you want to use as the seed for
    your segmentation. It can be a binary, graylevel, or floating point
    image. The only requirement is that it contain a closed isosurface
    that you will identify as the seed by setting the IsosurfaceValue
    parameter of the filter. For a binary image you will want to set your
    isosurface value halfway between your on and off values (i.e. for 0's
    and 1's, use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive *values in the output image are inside the segmented region
    and negative *values in the image are outside of the inside region.
    The zero crossings of *the image correspond to the position of the
    level set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS There are five parameters important
    for controlling the behavior of this filter.

    (1) Threshold. Sets the thresholding value of the Canny edge
    detection. See CannyEdgeDetectionImageFilter for more information.

    (2) Variance. Controls the smoothing parameter of the gaussian
    filtering done during Canny edge detection.

    (3) CurvatureScaling. Controls the degree to which curvature
    influences the evolution of the level set. Higher values relative to
    Propagation and Advection scalings will yield a smoother surface.

    (4) PropagationScaling. Scales the propagation (speed) term of the
    level set equation. Set this term to zero to allow the level set to
    flow only down the gradient of the distance transform.

    (5) AdvectionScaling. Scales influence of the advection field relative
    to curvature and propagation terms.

    See:   SegmentationLevelSetImageFilter

    See:  CannySegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkCannySegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """__New_orig__() -> itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer":
        """Clone(itkCannySegmentationLevelSetImageFilterIF3IF3F self) -> itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_Clone(self)


    def SetThreshold(self, v: 'float') -> "void":
        """
        SetThreshold(itkCannySegmentationLevelSetImageFilterIF3IF3F self, float v)

        Set the Threshold
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetThreshold(self, v)


    def GetThreshold(self) -> "float":
        """GetThreshold(itkCannySegmentationLevelSetImageFilterIF3IF3F self) -> float"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetThreshold(self)


    def SetVariance(self, v: 'double') -> "void":
        """
        SetVariance(itkCannySegmentationLevelSetImageFilterIF3IF3F self, double v)

        Set the Variance
        parameter of the CannyEdgeDetectionImageFilter used by the underlying
        level set function. 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetVariance(self, v)


    def GetVariance(self) -> "double":
        """GetVariance(itkCannySegmentationLevelSetImageFilterIF3IF3F self) -> double"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetVariance(self)


    def GetCannyImage(self) -> "itkImageF3 *":
        """
        GetCannyImage(itkCannySegmentationLevelSetImageFilterIF3IF3F self) -> itkImageF3

        Get the Canny image
        that was used to create the speed and advection images 
        """
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetCannyImage(self)

    OutputHasNumericTraitsCheck = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkCannySegmentationLevelSetImageFilterPython.delete_itkCannySegmentationLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterIF3IF3F"""
        return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkCannySegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkCannySegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannySegmentationLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkCannySegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCannySegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCannySegmentationLevelSetImageFilterIF3IF3F.Clone = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_Clone, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F.SetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetThreshold, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F.GetThreshold = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetThreshold, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F.SetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_SetVariance, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F.GetVariance = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetVariance, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F.GetCannyImage = new_instancemethod(_itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_GetCannyImage, None, itkCannySegmentationLevelSetImageFilterIF3IF3F)
itkCannySegmentationLevelSetImageFilterIF3IF3F_swigregister = _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_swigregister
itkCannySegmentationLevelSetImageFilterIF3IF3F_swigregister(itkCannySegmentationLevelSetImageFilterIF3IF3F)

def itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> "itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer":
    """itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__() -> itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F___New_orig__()

def itkCannySegmentationLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkCannySegmentationLevelSetImageFilterIF3IF3F *":
    """itkCannySegmentationLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkCannySegmentationLevelSetImageFilterIF3IF3F"""
    return _itkCannySegmentationLevelSetImageFilterPython.itkCannySegmentationLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def canny_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for CannySegmentationLevelSetImageFilter"""
    import itk
    instance = itk.CannySegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def canny_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CannySegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CannySegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.CannySegmentationLevelSetImageFilter

    canny_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    canny_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    canny_segmentation_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    canny_segmentation_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



