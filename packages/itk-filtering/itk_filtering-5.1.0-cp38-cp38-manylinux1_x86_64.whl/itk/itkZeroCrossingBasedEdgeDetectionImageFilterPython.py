# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkZeroCrossingBasedEdgeDetectionImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkZeroCrossingBasedEdgeDetectionImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkZeroCrossingBasedEdgeDetectionImageFilterPython
            return _itkZeroCrossingBasedEdgeDetectionImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkZeroCrossingBasedEdgeDetectionImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkZeroCrossingBasedEdgeDetectionImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkZeroCrossingBasedEdgeDetectionImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkVectorImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import stdcomplexPython
import ITKCommonBasePython
import itkVariableLengthVectorPython
import itkImagePython
import itkFixedArrayPython
import itkRGBAPixelPython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageToImageFilterCommonPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_New():
  return itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New()


def itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_New():
  return itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New()


def itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_New():
  return itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New()


def itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_New():
  return itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New()

class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter

    C++ includes: itkZeroCrossingBasedEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer":
        """Clone(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self) -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetMaximumError(self)


    def GetBackgroundValue(self) -> "double":
        """
        GetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self) -> double

        Get/Set the
        label values for the ZeroCrossingImageFilter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'double const') -> "void":
        """SetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, double const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetBackgroundValue(self, _arg)


    def GetForegroundValue(self) -> "double":
        """GetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self) -> double"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetForegroundValue(self)


    def SetForegroundValue(self, _arg: 'double const') -> "void":
        """SetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, double const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetForegroundValue(self, _arg)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, double const v)

        Set the variance
        parameter needed by the embedded gaussian filter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 self, double const v)

        Set the
        MaximumError parameter needed by the embedded gaussian filter This
        value is used to set the desired maximum error of the gaussian
        approximation. Maximum error is the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. The value
        must be between 0.0 and 1.0. 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetMaximumError(self, *args)

    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_OutputEqualityComparableCheck
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SameTypeCheck
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_OutputOStreamWritableCheck
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_PixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.Clone = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Clone, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.GetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.GetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.GetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.SetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.GetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_GetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.SetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.SetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2.SetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_SetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_swigregister = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_swigregister
itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2)

def itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer":
    """itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2___New_orig__()

def itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 *":
    """itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_cast(obj)

class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter

    C++ includes: itkZeroCrossingBasedEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer":
        """Clone(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self) -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetMaximumError(self)


    def GetBackgroundValue(self) -> "double":
        """
        GetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self) -> double

        Get/Set the
        label values for the ZeroCrossingImageFilter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'double const') -> "void":
        """SetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, double const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetBackgroundValue(self, _arg)


    def GetForegroundValue(self) -> "double":
        """GetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self) -> double"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetForegroundValue(self)


    def SetForegroundValue(self, _arg: 'double const') -> "void":
        """SetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, double const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetForegroundValue(self, _arg)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, double const v)

        Set the variance
        parameter needed by the embedded gaussian filter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 self, double const v)

        Set the
        MaximumError parameter needed by the embedded gaussian filter This
        value is used to set the desired maximum error of the gaussian
        approximation. Maximum error is the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. The value
        must be between 0.0 and 1.0. 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetMaximumError(self, *args)

    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_OutputEqualityComparableCheck
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SameTypeCheck
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_OutputOStreamWritableCheck
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_PixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.Clone = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Clone, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.GetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.GetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.GetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.SetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.GetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_GetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.SetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.SetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3.SetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_SetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_swigregister = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_swigregister
itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3)

def itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer":
    """itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3___New_orig__()

def itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 *":
    """itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_cast(obj)

class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter

    C++ includes: itkZeroCrossingBasedEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer":
        """Clone(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD2 const":
        """GetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD2 const":
        """GetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetMaximumError(self)


    def GetBackgroundValue(self) -> "float":
        """
        GetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self) -> float

        Get/Set the
        label values for the ZeroCrossingImageFilter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'float const') -> "void":
        """SetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, float const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetBackgroundValue(self, _arg)


    def GetForegroundValue(self) -> "float":
        """GetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self) -> float"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetForegroundValue(self)


    def SetForegroundValue(self, _arg: 'float const') -> "void":
        """SetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, float const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetForegroundValue(self, _arg)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, double const v)

        Set the variance
        parameter needed by the embedded gaussian filter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 self, double const v)

        Set the
        MaximumError parameter needed by the embedded gaussian filter This
        value is used to set the desired maximum error of the gaussian
        approximation. Maximum error is the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. The value
        must be between 0.0 and 1.0. 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetMaximumError(self, *args)

    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_OutputEqualityComparableCheck
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SameTypeCheck
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_OutputOStreamWritableCheck
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_PixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.Clone = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Clone, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.GetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.GetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.GetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.SetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.GetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_GetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.SetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.SetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2.SetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_SetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_swigregister = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_swigregister
itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2)

def itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer":
    """itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2___New_orig__()

def itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 *":
    """itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_cast(obj)

class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    This filter implements a zero-crossing based edge detecor.

    The zero-crossing based edge detector looks for pixels in the
    Laplacian of an image where the value of the Laplacian passes through
    zero points where the Laplacian changes sign. Such points often occur
    at "edges" in images i.e. points where the intensity of the image
    changes rapidly, but they also occur at places that are not as easy to
    associate with edges. It is best to think of the zero crossing
    detector as some sort of feature detector rather than as a specific
    edge detector.

    Zero crossings always lie on closed contours and so the output from
    the zero crossing detector is usually a binary image with single pixel
    thickness lines showing the positions of the zero crossing points.

    In this implementation, the input image is first smoothed with a
    Gaussian filter, then the LaplacianImageFilter is applied to smoothed
    image. Finally the zero-crossing of the Laplacian of the smoothed
    image is detected. The output is a binary image. Inputs and Outputs
    The input to the filter should be a scalar, itk::Image of arbitrary
    dimension. The output image is a binary, labeled image. See
    itkZeroCrossingImageFilter for more information on requirements of the
    data type of the output.

    To use this filter, first set the parameters (variance and maximum
    error) needed by the embedded DiscreteGaussianImageFilter, i.e. See
    DiscreteGaussianImageFilter for information about these parameters.
    Optionally, you may also set foreground and background values for the
    zero-crossing filter. The default label values are Zero for the
    background and One for the foreground, as defined in NumericTraits for
    the data type of the output image.

    See:  DiscreteGaussianImageFilter

    See:   LaplacianImageFilter

    See:   ZeroCrossingImageFilter

    C++ includes: itkZeroCrossingBasedEdgeDetectionImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer":
        """Clone(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Clone(self)


    def GetVariance(self) -> "itkFixedArrayD3 const":
        """GetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetVariance(self)


    def GetMaximumError(self) -> "itkFixedArrayD3 const":
        """GetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetMaximumError(self)


    def GetBackgroundValue(self) -> "float":
        """
        GetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self) -> float

        Get/Set the
        label values for the ZeroCrossingImageFilter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetBackgroundValue(self)


    def SetBackgroundValue(self, _arg: 'float const') -> "void":
        """SetBackgroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, float const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetBackgroundValue(self, _arg)


    def GetForegroundValue(self) -> "float":
        """GetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self) -> float"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetForegroundValue(self)


    def SetForegroundValue(self, _arg: 'float const') -> "void":
        """SetForegroundValue(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, float const _arg)"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetForegroundValue(self, _arg)


    def SetVariance(self, *args) -> "void":
        """
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetVariance(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, double const v)

        Set the variance
        parameter needed by the embedded gaussian filter 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetVariance(self, *args)


    def SetMaximumError(self, *args) -> "void":
        """
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetMaximumError(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 self, double const v)

        Set the
        MaximumError parameter needed by the embedded gaussian filter This
        value is used to set the desired maximum error of the gaussian
        approximation. Maximum error is the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. The value
        must be between 0.0 and 1.0. 
        """
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetMaximumError(self, *args)

    OutputEqualityComparableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_OutputEqualityComparableCheck
    SameDimensionCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    SameTypeCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SameTypeCheck
    OutputOStreamWritableCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_OutputOStreamWritableCheck
    PixelTypeIsFloatingPointCheck = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_PixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.delete_itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3"""
        return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.Clone = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Clone, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.GetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.GetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.GetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.SetBackgroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetBackgroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.GetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_GetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.SetForegroundValue = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetForegroundValue, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.SetVariance = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetVariance, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3.SetMaximumError = new_instancemethod(_itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_SetMaximumError, None, itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_swigregister = _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_swigregister
itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_swigregister(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3)

def itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__() -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer":
    """itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__() -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3___New_orig__()

def itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 *":
    """itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast(itkLightObject obj) -> itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3"""
    return _itkZeroCrossingBasedEdgeDetectionImageFilterPython.itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def zero_crossing_based_edge_detection_image_filter(*args, **kwargs):
    """Procedural interface for ZeroCrossingBasedEdgeDetectionImageFilter"""
    import itk
    instance = itk.ZeroCrossingBasedEdgeDetectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def zero_crossing_based_edge_detection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ZeroCrossingBasedEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ZeroCrossingBasedEdgeDetectionImageFilter.values()[0]
    else:
        filter_object = itk.ZeroCrossingBasedEdgeDetectionImageFilter

    zero_crossing_based_edge_detection_image_filter.__doc__ = filter_object.__doc__
    zero_crossing_based_edge_detection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    zero_crossing_based_edge_detection_image_filter.__doc__ += "Available Keyword Arguments:\n"
    zero_crossing_based_edge_detection_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



