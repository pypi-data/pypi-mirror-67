# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython
            return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkShapePriorSegmentationLevelSetImageFilterPython
import itkSegmentationLevelSetImageFilterPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython
import itkFixedArrayPython
import pyBasePython
import itkSizePython
import ITKCommonBasePython
import itkFiniteDifferenceFunctionPython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkImagePython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkSparseFieldLevelSetImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterAPython
import itkShapeSignedDistanceFunctionPython
import itkSpatialFunctionPython
import itkFunctionBasePython
import itkContinuousIndexPython
import itkArrayPython
import itkOptimizerParametersPython
import ITKOptimizersBasePython
import ITKCostFunctionsPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import vnl_least_squares_functionPython
import itkCostFunctionPython
import itkArray2DPython
import ITKFastMarchingBasePython
import itkNodePairPython
import itkLevelSetNodePython
import itkFastMarchingStoppingCriterionBasePython
import itkShapePriorMAPCostFunctionBasePython

def itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_New():
  return itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.New()


def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_New():
  return itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.New()


def itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_New():
  return itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.New()


def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_New():
  return itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.New()

class itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D(itkShapePriorSegmentationLevelSetImageFilterPython.itkShapePriorSegmentationLevelSetImageFilterID2ID2D):
    """


    Segments structures in an image based on a user supplied edge
    potential map and user supplied shape model.

    IMPORTANT The SegmentationLevelSetImageFilter class,
    ShapePriorSegmentationLevelSetImageFilter class and the
    GeodesicActiveContourShapePrior0LevelSetFunction class contain
    additional information necessary to gain full understanding of how to
    use this filter. OVERVIEW This class is a level set method
    segmentation filter. An initial contour is propagated outwards (or
    inwards) until it ''sticks'' to the shape boundaries. This is done by
    using a level set speed function based on a user supplied edge
    potential map and a user supplied shape model. INPUTS This filter
    requires two inputs. The first input is a initial level set. The
    initial level set is a real image which contains the initial
    contour/surface as the zero level set. For example, a signed distance
    function from the initial contour/surface is typically used. Unlike
    the simpler ShapeDetectionLevelSetImageFilter the initial contour does
    not have to lie wholly within the shape to be segmented. The initial
    contour is allow to overlap the shape boundary. The advection term in
    the update equation behaves like a doublet and attracts the contour to
    the boundary. The shape prior term adds robustness by incorporating
    aprior information about the shape to be segmented. This approach for
    segmentation follows that of Leventon et al (2000).

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute from the image gradient, for example:  \\[
    g(I) = 1 / ( 1 + | (\\nabla * G)(I)| ) \\] \\[ g(I) =
    \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  This implementation allows the user to set the weights
    between the propagation, advection curvature and shape prior term
    using methods SetPropagationScaling(), SetAdvectionScaling(),
    SetCurvatureScaling() and SetShapePriorScaling. In general, the larger
    the CurvatureScaling, the smoother the resulting contour. To follow
    the implementation in Leventon et al paper, set the PropagationScaling
    to $ \\lambda_1 \\times c $, the AdvectionScaling and
    CurvatureScaling both to $ \\lambda_1 $ and the ShapePriorScaling to
    $ \\lambda_2 $.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    Leventon, M.E. et al. "Statistical Shape Influence in Geodesic Active
    Contours", CVPR 2000.

    See:   SegmentationLevelSetImageFilter

    See:   ShapePriorSegmentationLevelSetImageFilter

    See:  GeodesicActiveContourShapePriorLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    See:  ShapeSignedDistanceFunction

    C++ includes: itkGeodesicActiveContourShapePriorLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer":
        """__New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer":
        """Clone(itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D self) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Clone(self)


    def SetDerivativeSigma(self, value: 'float') -> "void":
        """
        SetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D self, float value)

        Set the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_SetDerivativeSigma(self, value)


    def GetDerivativeSigma(self) -> "float":
        """
        GetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D self) -> float

        Get the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_GetDerivativeSigma(self)

    __swig_destroy__ = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.delete_itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D

    def cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D *":
        """cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D

        Create a new object of the class itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.Clone = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Clone, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.SetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_SetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D.GetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_GetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_swigregister = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_swigregister
itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_swigregister(itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D)

def itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D___New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D___New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_Pointer"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D___New_orig__()

def itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D *":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID2ID2D_cast(obj)

class itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D(itkShapePriorSegmentationLevelSetImageFilterPython.itkShapePriorSegmentationLevelSetImageFilterID3ID3D):
    """


    Segments structures in an image based on a user supplied edge
    potential map and user supplied shape model.

    IMPORTANT The SegmentationLevelSetImageFilter class,
    ShapePriorSegmentationLevelSetImageFilter class and the
    GeodesicActiveContourShapePrior0LevelSetFunction class contain
    additional information necessary to gain full understanding of how to
    use this filter. OVERVIEW This class is a level set method
    segmentation filter. An initial contour is propagated outwards (or
    inwards) until it ''sticks'' to the shape boundaries. This is done by
    using a level set speed function based on a user supplied edge
    potential map and a user supplied shape model. INPUTS This filter
    requires two inputs. The first input is a initial level set. The
    initial level set is a real image which contains the initial
    contour/surface as the zero level set. For example, a signed distance
    function from the initial contour/surface is typically used. Unlike
    the simpler ShapeDetectionLevelSetImageFilter the initial contour does
    not have to lie wholly within the shape to be segmented. The initial
    contour is allow to overlap the shape boundary. The advection term in
    the update equation behaves like a doublet and attracts the contour to
    the boundary. The shape prior term adds robustness by incorporating
    aprior information about the shape to be segmented. This approach for
    segmentation follows that of Leventon et al (2000).

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute from the image gradient, for example:  \\[
    g(I) = 1 / ( 1 + | (\\nabla * G)(I)| ) \\] \\[ g(I) =
    \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  This implementation allows the user to set the weights
    between the propagation, advection curvature and shape prior term
    using methods SetPropagationScaling(), SetAdvectionScaling(),
    SetCurvatureScaling() and SetShapePriorScaling. In general, the larger
    the CurvatureScaling, the smoother the resulting contour. To follow
    the implementation in Leventon et al paper, set the PropagationScaling
    to $ \\lambda_1 \\times c $, the AdvectionScaling and
    CurvatureScaling both to $ \\lambda_1 $ and the ShapePriorScaling to
    $ \\lambda_2 $.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    Leventon, M.E. et al. "Statistical Shape Influence in Geodesic Active
    Contours", CVPR 2000.

    See:   SegmentationLevelSetImageFilter

    See:   ShapePriorSegmentationLevelSetImageFilter

    See:  GeodesicActiveContourShapePriorLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    See:  ShapeSignedDistanceFunction

    C++ includes: itkGeodesicActiveContourShapePriorLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer":
        """__New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer":
        """Clone(itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D self) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Clone(self)


    def SetDerivativeSigma(self, value: 'float') -> "void":
        """
        SetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D self, float value)

        Set the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_SetDerivativeSigma(self, value)


    def GetDerivativeSigma(self) -> "float":
        """
        GetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D self) -> float

        Get the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_GetDerivativeSigma(self)

    __swig_destroy__ = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.delete_itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D

    def cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D *":
        """cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D

        Create a new object of the class itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.Clone = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Clone, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.SetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_SetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D.GetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_GetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D)
itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_swigregister = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_swigregister
itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_swigregister(itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D)

def itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D___New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D___New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_Pointer"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D___New_orig__()

def itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D *":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterID3ID3D_cast(obj)

class itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F(itkShapePriorSegmentationLevelSetImageFilterPython.itkShapePriorSegmentationLevelSetImageFilterIF2IF2F):
    """


    Segments structures in an image based on a user supplied edge
    potential map and user supplied shape model.

    IMPORTANT The SegmentationLevelSetImageFilter class,
    ShapePriorSegmentationLevelSetImageFilter class and the
    GeodesicActiveContourShapePrior0LevelSetFunction class contain
    additional information necessary to gain full understanding of how to
    use this filter. OVERVIEW This class is a level set method
    segmentation filter. An initial contour is propagated outwards (or
    inwards) until it ''sticks'' to the shape boundaries. This is done by
    using a level set speed function based on a user supplied edge
    potential map and a user supplied shape model. INPUTS This filter
    requires two inputs. The first input is a initial level set. The
    initial level set is a real image which contains the initial
    contour/surface as the zero level set. For example, a signed distance
    function from the initial contour/surface is typically used. Unlike
    the simpler ShapeDetectionLevelSetImageFilter the initial contour does
    not have to lie wholly within the shape to be segmented. The initial
    contour is allow to overlap the shape boundary. The advection term in
    the update equation behaves like a doublet and attracts the contour to
    the boundary. The shape prior term adds robustness by incorporating
    aprior information about the shape to be segmented. This approach for
    segmentation follows that of Leventon et al (2000).

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute from the image gradient, for example:  \\[
    g(I) = 1 / ( 1 + | (\\nabla * G)(I)| ) \\] \\[ g(I) =
    \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  This implementation allows the user to set the weights
    between the propagation, advection curvature and shape prior term
    using methods SetPropagationScaling(), SetAdvectionScaling(),
    SetCurvatureScaling() and SetShapePriorScaling. In general, the larger
    the CurvatureScaling, the smoother the resulting contour. To follow
    the implementation in Leventon et al paper, set the PropagationScaling
    to $ \\lambda_1 \\times c $, the AdvectionScaling and
    CurvatureScaling both to $ \\lambda_1 $ and the ShapePriorScaling to
    $ \\lambda_2 $.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    Leventon, M.E. et al. "Statistical Shape Influence in Geodesic Active
    Contours", CVPR 2000.

    See:   SegmentationLevelSetImageFilter

    See:   ShapePriorSegmentationLevelSetImageFilter

    See:  GeodesicActiveContourShapePriorLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    See:  ShapeSignedDistanceFunction

    C++ includes: itkGeodesicActiveContourShapePriorLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer":
        """__New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer":
        """Clone(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F self) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Clone(self)


    def SetDerivativeSigma(self, value: 'float') -> "void":
        """
        SetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F self, float value)

        Set the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_SetDerivativeSigma(self, value)


    def GetDerivativeSigma(self) -> "float":
        """
        GetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F self) -> float

        Get the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_GetDerivativeSigma(self)

    __swig_destroy__ = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.delete_itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F

    def cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F *":
        """cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F

        Create a new object of the class itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.Clone = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Clone, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.SetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_SetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F.GetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_GetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_swigregister = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_swigregister
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_swigregister(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F)

def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F___New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F___New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_Pointer"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F___New_orig__()

def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F *":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF2IF2F_cast(obj)

class itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F(itkShapePriorSegmentationLevelSetImageFilterPython.itkShapePriorSegmentationLevelSetImageFilterIF3IF3F):
    """


    Segments structures in an image based on a user supplied edge
    potential map and user supplied shape model.

    IMPORTANT The SegmentationLevelSetImageFilter class,
    ShapePriorSegmentationLevelSetImageFilter class and the
    GeodesicActiveContourShapePrior0LevelSetFunction class contain
    additional information necessary to gain full understanding of how to
    use this filter. OVERVIEW This class is a level set method
    segmentation filter. An initial contour is propagated outwards (or
    inwards) until it ''sticks'' to the shape boundaries. This is done by
    using a level set speed function based on a user supplied edge
    potential map and a user supplied shape model. INPUTS This filter
    requires two inputs. The first input is a initial level set. The
    initial level set is a real image which contains the initial
    contour/surface as the zero level set. For example, a signed distance
    function from the initial contour/surface is typically used. Unlike
    the simpler ShapeDetectionLevelSetImageFilter the initial contour does
    not have to lie wholly within the shape to be segmented. The initial
    contour is allow to overlap the shape boundary. The advection term in
    the update equation behaves like a doublet and attracts the contour to
    the boundary. The shape prior term adds robustness by incorporating
    aprior information about the shape to be segmented. This approach for
    segmentation follows that of Leventon et al (2000).

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute from the image gradient, for example:  \\[
    g(I) = 1 / ( 1 + | (\\nabla * G)(I)| ) \\] \\[ g(I) =
    \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  This implementation allows the user to set the weights
    between the propagation, advection curvature and shape prior term
    using methods SetPropagationScaling(), SetAdvectionScaling(),
    SetCurvatureScaling() and SetShapePriorScaling. In general, the larger
    the CurvatureScaling, the smoother the resulting contour. To follow
    the implementation in Leventon et al paper, set the PropagationScaling
    to $ \\lambda_1 \\times c $, the AdvectionScaling and
    CurvatureScaling both to $ \\lambda_1 $ and the ShapePriorScaling to
    $ \\lambda_2 $.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    Leventon, M.E. et al. "Statistical Shape Influence in Geodesic Active
    Contours", CVPR 2000.

    See:   SegmentationLevelSetImageFilter

    See:   ShapePriorSegmentationLevelSetImageFilter

    See:  GeodesicActiveContourShapePriorLevelSetFunction

    See:   SparseFieldLevelSetImageFilter

    See:  ShapeSignedDistanceFunction

    C++ includes: itkGeodesicActiveContourShapePriorLevelSetImageFilter.h

    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer":
        """__New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer":
        """Clone(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F self) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Clone(self)


    def SetDerivativeSigma(self, value: 'float') -> "void":
        """
        SetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F self, float value)

        Set the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_SetDerivativeSigma(self, value)


    def GetDerivativeSigma(self) -> "float":
        """
        GetDerivativeSigma(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F self) -> float

        Get the value of
        sigma used to compute the edge potential map derivatives. 
        """
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_GetDerivativeSigma(self)

    __swig_destroy__ = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.delete_itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F

    def cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F *":
        """cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F"""
        return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F

        Create a new object of the class itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.Clone = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Clone, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.SetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_SetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F.GetDerivativeSigma = new_instancemethod(_itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_GetDerivativeSigma, None, itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F)
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_swigregister = _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_swigregister
itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_swigregister(itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F)

def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F___New_orig__() -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F___New_orig__() -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_Pointer"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F___New_orig__()

def itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_cast(obj: 'itkLightObject') -> "itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F *":
    """itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_cast(itkLightObject obj) -> itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F"""
    return _itkGeodesicActiveContourShapePriorLevelSetImageFilterPython.itkGeodesicActiveContourShapePriorLevelSetImageFilterIF3IF3F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def geodesic_active_contour_shape_prior_level_set_image_filter(*args, **kwargs):
    """Procedural interface for GeodesicActiveContourShapePriorLevelSetImageFilter"""
    import itk
    instance = itk.GeodesicActiveContourShapePriorLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def geodesic_active_contour_shape_prior_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GeodesicActiveContourShapePriorLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GeodesicActiveContourShapePriorLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.GeodesicActiveContourShapePriorLevelSetImageFilter

    geodesic_active_contour_shape_prior_level_set_image_filter.__doc__ = filter_object.__doc__
    geodesic_active_contour_shape_prior_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    geodesic_active_contour_shape_prior_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    geodesic_active_contour_shape_prior_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



