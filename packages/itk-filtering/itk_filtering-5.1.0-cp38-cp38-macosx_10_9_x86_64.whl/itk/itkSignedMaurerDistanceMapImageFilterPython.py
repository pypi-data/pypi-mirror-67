# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSignedMaurerDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSignedMaurerDistanceMapImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSignedMaurerDistanceMapImageFilterPython
            return _itkSignedMaurerDistanceMapImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSignedMaurerDistanceMapImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSignedMaurerDistanceMapImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSignedMaurerDistanceMapImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import itkImageRegionPython
import ITKCommonBasePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkSignedMaurerDistanceMapImageFilterIUS3ID3_New():
  return itkSignedMaurerDistanceMapImageFilterIUS3ID3.New()


def itkSignedMaurerDistanceMapImageFilterIUS2ID2_New():
  return itkSignedMaurerDistanceMapImageFilterIUS2ID2.New()


def itkSignedMaurerDistanceMapImageFilterIUS3IF3_New():
  return itkSignedMaurerDistanceMapImageFilterIUS3IF3.New()


def itkSignedMaurerDistanceMapImageFilterIUS2IF2_New():
  return itkSignedMaurerDistanceMapImageFilterIUS2IF2.New()


def itkSignedMaurerDistanceMapImageFilterIUC3ID3_New():
  return itkSignedMaurerDistanceMapImageFilterIUC3ID3.New()


def itkSignedMaurerDistanceMapImageFilterIUC2ID2_New():
  return itkSignedMaurerDistanceMapImageFilterIUC2ID2.New()


def itkSignedMaurerDistanceMapImageFilterIUC3IF3_New():
  return itkSignedMaurerDistanceMapImageFilterIUC3IF3.New()


def itkSignedMaurerDistanceMapImageFilterIUC2IF2_New():
  return itkSignedMaurerDistanceMapImageFilterIUC2IF2.New()


def itkSignedMaurerDistanceMapImageFilterID3ID3_New():
  return itkSignedMaurerDistanceMapImageFilterID3ID3.New()


def itkSignedMaurerDistanceMapImageFilterID2ID2_New():
  return itkSignedMaurerDistanceMapImageFilterID2ID2.New()


def itkSignedMaurerDistanceMapImageFilterIF3IF3_New():
  return itkSignedMaurerDistanceMapImageFilterIF3IF3.New()


def itkSignedMaurerDistanceMapImageFilterIF2IF2_New():
  return itkSignedMaurerDistanceMapImageFilterIF2IF2.New()


def itkSignedMaurerDistanceMapImageFilterISS3ISS3_New():
  return itkSignedMaurerDistanceMapImageFilterISS3ISS3.New()


def itkSignedMaurerDistanceMapImageFilterISS2ISS2_New():
  return itkSignedMaurerDistanceMapImageFilterISS2ISS2.New()

class itkSignedMaurerDistanceMapImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterID2ID2 self) -> itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterID2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterID2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterID2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterID2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterID2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterID2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'double const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterID2ID2 self, double const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "double const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterID2ID2 self) -> double const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterID2ID2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterID2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterID2ID2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_Clone, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_swigregister
itkSignedMaurerDistanceMapImageFilterID2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterID2ID2)

def itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterID2ID2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterID2ID2 *":
    """itkSignedMaurerDistanceMapImageFilterID2ID2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterID2ID2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterID3ID3 self) -> itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterID3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterID3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterID3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterID3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterID3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterID3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'double const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterID3ID3 self, double const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "double const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterID3ID3 self) -> double const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterID3ID3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterID3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterID3ID3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_Clone, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_swigregister
itkSignedMaurerDistanceMapImageFilterID3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterID3ID3)

def itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterID3ID3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterID3ID3 *":
    """itkSignedMaurerDistanceMapImageFilterID3ID3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterID3ID3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIF2IF2 self) -> itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'float const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIF2IF2 self, float const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "float const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIF2IF2 self) -> float const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIF2IF2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIF2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIF2IF2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_Clone, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_swigregister
itkSignedMaurerDistanceMapImageFilterIF2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIF2IF2)

def itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIF2IF2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIF2IF2 *":
    """itkSignedMaurerDistanceMapImageFilterIF2IF2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIF2IF2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIF3IF3 self) -> itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'float const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIF3IF3 self, float const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "float const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIF3IF3 self) -> float const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIF3IF3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIF3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIF3IF3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_Clone, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_swigregister
itkSignedMaurerDistanceMapImageFilterIF3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIF3IF3)

def itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIF3IF3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIF3IF3 *":
    """itkSignedMaurerDistanceMapImageFilterIF3IF3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIF3IF3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self) -> itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self, short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterISS2ISS2 self) -> short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterISS2ISS2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterISS2ISS2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_Clone, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_swigregister
itkSignedMaurerDistanceMapImageFilterISS2ISS2_swigregister(itkSignedMaurerDistanceMapImageFilterISS2ISS2)

def itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterISS2ISS2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterISS2ISS2 *":
    """itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterISS2ISS2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self) -> itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self, short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterISS3ISS3 self) -> short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterISS3ISS3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterISS3ISS3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_Clone, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_swigregister
itkSignedMaurerDistanceMapImageFilterISS3ISS3_swigregister(itkSignedMaurerDistanceMapImageFilterISS3ISS3)

def itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterISS3ISS3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterISS3ISS3 *":
    """itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterISS3ISS3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self) -> itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self, unsigned char const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned char const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC2ID2 self) -> unsigned char const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC2ID2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUC2ID2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_Clone, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_swigregister
itkSignedMaurerDistanceMapImageFilterIUC2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterIUC2ID2)

def itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC2ID2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC2ID2 *":
    """itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC2ID2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self) -> itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self, unsigned char const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned char const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC2IF2 self) -> unsigned char const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC2IF2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUC2IF2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_Clone, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_swigregister
itkSignedMaurerDistanceMapImageFilterIUC2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIUC2IF2)

def itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC2IF2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC2IF2 *":
    """itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC2IF2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self) -> itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self, unsigned char const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned char const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC3ID3 self) -> unsigned char const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC3ID3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUC3ID3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_Clone, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_swigregister
itkSignedMaurerDistanceMapImageFilterIUC3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterIUC3ID3)

def itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC3ID3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC3ID3 *":
    """itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC3ID3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self) -> itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned char const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self, unsigned char const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned char const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUC3IF3 self) -> unsigned char const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC3IF3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUC3IF3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_Clone, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_swigregister
itkSignedMaurerDistanceMapImageFilterIUC3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIUC3IF3)

def itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUC3IF3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUC3IF3 *":
    """itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUC3IF3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self) -> itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self, unsigned short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS2ID2 self) -> unsigned short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS2ID2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUS2ID2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_Clone, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_swigregister
itkSignedMaurerDistanceMapImageFilterIUS2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterIUS2ID2)

def itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS2ID2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS2ID2 *":
    """itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS2ID2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self) -> itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self, unsigned short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS2IF2 self) -> unsigned short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS2IF2"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUS2IF2.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_Clone, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_swigregister
itkSignedMaurerDistanceMapImageFilterIUS2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIUS2IF2)

def itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS2IF2_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS2IF2 *":
    """itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS2IF2"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self) -> itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self, unsigned short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS3ID3 self) -> unsigned short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS3ID3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUS3ID3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_Clone, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_swigregister
itkSignedMaurerDistanceMapImageFilterIUS3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterIUS3ID3)

def itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS3ID3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS3ID3 *":
    """itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS3ID3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast(obj)

class itkSignedMaurerDistanceMapImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    """


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    \\sphinx \\sphinxexample{Filtering/DistanceMap/MaurerDistanceMapOf
    Binary,Maurer Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedMaurerDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer":
        """Clone(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self) -> itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See:
        GetInsideIsPositive() 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOff(self)


    def SetBackgroundValue(self, _arg: 'unsigned short const') -> "void":
        """
        SetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self, unsigned short const _arg)

        Set the
        background value which defines the object. Usually this value is = 0.

        """
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetBackgroundValue(self, _arg)


    def GetBackgroundValue(self) -> "unsigned short const &":
        """GetBackgroundValue(itkSignedMaurerDistanceMapImageFilterIUS3IF3 self) -> unsigned short const &"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetBackgroundValue(self)

    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS3IF3"""
        return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedMaurerDistanceMapImageFilterIUS3IF3.Clone = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_Clone, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.GetSquaredDistance = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetSquaredDistance, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOn, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOff, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetInsideIsPositive, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetUseImageSpacing, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOn, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOff, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.SetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3.GetBackgroundValue = new_instancemethod(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetBackgroundValue, None, itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3_swigregister = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_swigregister
itkSignedMaurerDistanceMapImageFilterIUS3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIUS3IF3)

def itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__() -> "itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer":
    """itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__() -> itkSignedMaurerDistanceMapImageFilterIUS3IF3_Pointer"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__()

def itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkSignedMaurerDistanceMapImageFilterIUS3IF3 *":
    """itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast(itkLightObject obj) -> itkSignedMaurerDistanceMapImageFilterIUS3IF3"""
    return _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def signed_maurer_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for SignedMaurerDistanceMapImageFilter"""
    import itk
    instance = itk.SignedMaurerDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def signed_maurer_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SignedMaurerDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SignedMaurerDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.SignedMaurerDistanceMapImageFilter

    signed_maurer_distance_map_image_filter.__doc__ = filter_object.__doc__
    signed_maurer_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    signed_maurer_distance_map_image_filter.__doc__ += "Available Keyword Arguments:\n"
    signed_maurer_distance_map_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



