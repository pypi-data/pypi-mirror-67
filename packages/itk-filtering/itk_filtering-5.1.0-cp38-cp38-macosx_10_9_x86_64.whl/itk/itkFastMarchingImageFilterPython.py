# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkFastMarchingImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFastMarchingImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkFastMarchingImageFilterPython
            return _itkFastMarchingImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFastMarchingImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFastMarchingImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFastMarchingImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageRegionPython
import ITKCommonBasePython
import pyBasePython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import ITKFastMarchingBasePython
import itkNodePairPython
import itkLevelSetNodePython
import itkImagePython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkFastMarchingStoppingCriterionBasePython

def itkFastMarchingImageFilterID3ID3_New():
  return itkFastMarchingImageFilterID3ID3.New()


def itkFastMarchingImageFilterID2ID2_New():
  return itkFastMarchingImageFilterID2ID2.New()


def itkFastMarchingImageFilterIF3IF3_New():
  return itkFastMarchingImageFilterIF3IF3.New()


def itkFastMarchingImageFilterIF2IF2_New():
  return itkFastMarchingImageFilterIF2IF2.New()

class itkFastMarchingImageFilterEnums(object):
    """Proxy of C++ itkFastMarchingImageFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Label_FarPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_FarPoint
    Label_AlivePoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_AlivePoint
    Label_TrialPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_TrialPoint
    Label_InitialTrialPoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_InitialTrialPoint
    Label_OutsidePoint = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_Label_OutsidePoint

    def __init__(self, *args):
        """
        __init__(itkFastMarchingImageFilterEnums self) -> itkFastMarchingImageFilterEnums
        __init__(itkFastMarchingImageFilterEnums self, itkFastMarchingImageFilterEnums arg0) -> itkFastMarchingImageFilterEnums
        """
        _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_swiginit(self, _itkFastMarchingImageFilterPython.new_itkFastMarchingImageFilterEnums(*args))
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterEnums
itkFastMarchingImageFilterEnums_swigregister = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterEnums_swigregister
itkFastMarchingImageFilterEnums_swigregister(itkFastMarchingImageFilterEnums)

class itkFastMarchingImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault

    C++ includes: itkFastMarchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkFastMarchingImageFilterID2ID2_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingImageFilterID2ID2_Pointer":
        """Clone(itkFastMarchingImageFilterID2ID2 self) -> itkFastMarchingImageFilterID2ID2_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_Clone(self)


    def SetOutsidePoints(self, points: 'itkVectorContainerUILSND2') -> "void":
        """
        SetOutsidePoints(itkFastMarchingImageFilterID2ID2 self, itkVectorContainerUILSND2 points)

        Set the container
        of points that are not meant to be evaluated. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutsidePoints(self, points)


    def SetAlivePoints(self, points: 'itkVectorContainerUILSND2') -> "void":
        """
        SetAlivePoints(itkFastMarchingImageFilterID2ID2 self, itkVectorContainerUILSND2 points)

        Set the container of
        Alive Points representing the initial front. Alive points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetAlivePoints(self, points)


    def GetAlivePoints(self) -> "itkVectorContainerUILSND2_Pointer":
        """
        GetAlivePoints(itkFastMarchingImageFilterID2ID2 self) -> itkVectorContainerUILSND2_Pointer

        Get the container of
        Alive Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetAlivePoints(self)


    def SetTrialPoints(self, points: 'itkVectorContainerUILSND2') -> "void":
        """
        SetTrialPoints(itkFastMarchingImageFilterID2ID2 self, itkVectorContainerUILSND2 points)

        Set the container of
        Trial Points representing the initial front. Trial points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetTrialPoints(self, points)


    def GetTrialPoints(self) -> "itkVectorContainerUILSND2_Pointer":
        """
        GetTrialPoints(itkFastMarchingImageFilterID2ID2 self) -> itkVectorContainerUILSND2_Pointer

        Get the container of
        Trial Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetTrialPoints(self)


    def GetLabelImage(self) -> "itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,2 > >":
        """
        GetLabelImage(itkFastMarchingImageFilterID2ID2 self) -> itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,2 > >

        Get the point type
        label image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetLabelImage(self)


    def SetSpeedConstant(self, value: 'double') -> "void":
        """
        SetSpeedConstant(itkFastMarchingImageFilterID2ID2 self, double value)

        Set the Speed
        Constant. If the Speed Image is nullptr, the SpeedConstant value is
        used for the whole level set. By default, the SpeedConstant is set to
        1.0. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetSpeedConstant(self, value)


    def GetSpeedConstant(self) -> "double const &":
        """
        GetSpeedConstant(itkFastMarchingImageFilterID2ID2 self) -> double const &

        Get the Speed
        Constant. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetSpeedConstant(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """
        SetNormalizationFactor(itkFastMarchingImageFilterID2ID2 self, double const _arg)

        Set/Get the
        Normalization Factor for the Speed Image. The values in the Speed
        Image is divided by this factor. This allows the use of images with
        integer pixel types to represent the speed. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetNormalizationFactor(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """GetNormalizationFactor(itkFastMarchingImageFilterID2ID2 self) -> double"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetNormalizationFactor(self)


    def SetStoppingValue(self, _arg: 'double const') -> "void":
        """
        SetStoppingValue(itkFastMarchingImageFilterID2ID2 self, double const _arg)

        Set the Fast
        Marching algorithm Stopping Value. The Fast Marching algorithm is
        terminated when the value of the smallest trial point is greater than
        the stopping value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetStoppingValue(self, _arg)


    def GetStoppingValue(self) -> "double const &":
        """
        GetStoppingValue(itkFastMarchingImageFilterID2ID2 self) -> double const &

        Get the Fast
        Marching algorithm Stopping Value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetStoppingValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingImageFilterID2ID2 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingImageFilterID2ID2 self) -> bool const &

        Get thConste
        Collect Points flag. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingImageFilterID2ID2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingImageFilterID2ID2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOff(self)


    def GetProcessedPoints(self) -> "itkVectorContainerUILSND2_Pointer":
        """
        GetProcessedPoints(itkFastMarchingImageFilterID2ID2 self) -> itkVectorContainerUILSND2_Pointer

        Get the
        container of Processed Points. If the CollectPoints flag is set, the
        algorithm collects a container of all processed nodes. This is useful
        for defining creating Narrowbands for level set algorithms that
        supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetProcessedPoints(self)


    def SetOutputSize(self, size: 'itkSize2') -> "void":
        """
        SetOutputSize(itkFastMarchingImageFilterID2ID2 self, itkSize2 size)

        The output largest
        possible, spacing and origin is computed as follows. If the speed
        image is nullptr or if the OverrideOutputInformation is true, the
        output information is set from user specified parameters. These
        parameters can be specified using methods SetOutputRegion(),
        SetOutputSpacing(), SetOutputDirection(), and SetOutputOrigin(). Else
        if the speed image is not nullptr, the output information is copied
        from the input speed image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSize(self, size)


    def GetOutputSize(self) -> "itkSize2":
        """GetOutputSize(itkFastMarchingImageFilterID2ID2 self) -> itkSize2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSize(self)


    def SetOutputRegion(self, _arg: 'itkImageRegion2') -> "void":
        """SetOutputRegion(itkFastMarchingImageFilterID2ID2 self, itkImageRegion2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputRegion(self, _arg)


    def GetOutputRegion(self) -> "itkImageRegion2 const &":
        """GetOutputRegion(itkFastMarchingImageFilterID2ID2 self) -> itkImageRegion2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputRegion(self)


    def SetOutputSpacing(self, _arg: 'itkVectorD2') -> "void":
        """SetOutputSpacing(itkFastMarchingImageFilterID2ID2 self, itkVectorD2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSpacing(self, _arg)


    def GetOutputSpacing(self) -> "itkVectorD2 const &":
        """GetOutputSpacing(itkFastMarchingImageFilterID2ID2 self) -> itkVectorD2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSpacing(self)


    def SetOutputDirection(self, _arg: 'itkMatrixD22') -> "void":
        """SetOutputDirection(itkFastMarchingImageFilterID2ID2 self, itkMatrixD22 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputDirection(self, _arg)


    def GetOutputDirection(self) -> "itkMatrixD22 const &":
        """GetOutputDirection(itkFastMarchingImageFilterID2ID2 self) -> itkMatrixD22"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputDirection(self)


    def SetOutputOrigin(self, _arg: 'itkPointD2') -> "void":
        """SetOutputOrigin(itkFastMarchingImageFilterID2ID2 self, itkPointD2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputOrigin(self, _arg)


    def GetOutputOrigin(self) -> "itkPointD2 const &":
        """GetOutputOrigin(itkFastMarchingImageFilterID2ID2 self) -> itkPointD2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputOrigin(self)


    def SetOverrideOutputInformation(self, _arg: 'bool const') -> "void":
        """SetOverrideOutputInformation(itkFastMarchingImageFilterID2ID2 self, bool const _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOverrideOutputInformation(self, _arg)


    def GetOverrideOutputInformation(self) -> "bool const &":
        """GetOverrideOutputInformation(itkFastMarchingImageFilterID2ID2 self) -> bool const &"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOverrideOutputInformation(self)


    def OverrideOutputInformationOn(self) -> "void":
        """OverrideOutputInformationOn(itkFastMarchingImageFilterID2ID2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOn(self)


    def OverrideOutputInformationOff(self) -> "void":
        """OverrideOutputInformationOff(itkFastMarchingImageFilterID2ID2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOff(self)

    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SameDimensionCheck
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SpeedConvertibleToDoubleCheck
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_DoubleConvertibleToLevelSetCheck
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_LevelSetOStreamWritableCheck
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkFastMarchingImageFilterID2ID2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterID2ID2

        Create a new object of the class itkFastMarchingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingImageFilterID2ID2.Clone = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_Clone, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutsidePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutsidePoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetAlivePoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetAlivePoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetTrialPoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetTrialPoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetLabelImage = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetLabelImage, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetSpeedConstant, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetSpeedConstant, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetNormalizationFactor, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetNormalizationFactor, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetStoppingValue, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetStoppingValue, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetCollectPoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetCollectPoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.CollectPointsOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOn, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.CollectPointsOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_CollectPointsOff, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetProcessedPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetProcessedPoints, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSize, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSize, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputRegion, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputRegion, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputSpacing, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputSpacing, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputDirection, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputDirection, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOutputOrigin, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOutputOrigin, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.SetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_SetOverrideOutputInformation, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.GetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_GetOverrideOutputInformation, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.OverrideOutputInformationOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOn, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2.OverrideOutputInformationOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_OverrideOutputInformationOff, None, itkFastMarchingImageFilterID2ID2)
itkFastMarchingImageFilterID2ID2_swigregister = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_swigregister
itkFastMarchingImageFilterID2ID2_swigregister(itkFastMarchingImageFilterID2ID2)

def itkFastMarchingImageFilterID2ID2___New_orig__() -> "itkFastMarchingImageFilterID2ID2_Pointer":
    """itkFastMarchingImageFilterID2ID2___New_orig__() -> itkFastMarchingImageFilterID2ID2_Pointer"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2___New_orig__()

def itkFastMarchingImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterID2ID2 *":
    """itkFastMarchingImageFilterID2ID2_cast(itkLightObject obj) -> itkFastMarchingImageFilterID2ID2"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2_cast(obj)

class itkFastMarchingImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault

    C++ includes: itkFastMarchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkFastMarchingImageFilterID3ID3_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingImageFilterID3ID3_Pointer":
        """Clone(itkFastMarchingImageFilterID3ID3 self) -> itkFastMarchingImageFilterID3ID3_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_Clone(self)


    def SetOutsidePoints(self, points: 'itkVectorContainerUILSND3') -> "void":
        """
        SetOutsidePoints(itkFastMarchingImageFilterID3ID3 self, itkVectorContainerUILSND3 points)

        Set the container
        of points that are not meant to be evaluated. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutsidePoints(self, points)


    def SetAlivePoints(self, points: 'itkVectorContainerUILSND3') -> "void":
        """
        SetAlivePoints(itkFastMarchingImageFilterID3ID3 self, itkVectorContainerUILSND3 points)

        Set the container of
        Alive Points representing the initial front. Alive points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetAlivePoints(self, points)


    def GetAlivePoints(self) -> "itkVectorContainerUILSND3_Pointer":
        """
        GetAlivePoints(itkFastMarchingImageFilterID3ID3 self) -> itkVectorContainerUILSND3_Pointer

        Get the container of
        Alive Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetAlivePoints(self)


    def SetTrialPoints(self, points: 'itkVectorContainerUILSND3') -> "void":
        """
        SetTrialPoints(itkFastMarchingImageFilterID3ID3 self, itkVectorContainerUILSND3 points)

        Set the container of
        Trial Points representing the initial front. Trial points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetTrialPoints(self, points)


    def GetTrialPoints(self) -> "itkVectorContainerUILSND3_Pointer":
        """
        GetTrialPoints(itkFastMarchingImageFilterID3ID3 self) -> itkVectorContainerUILSND3_Pointer

        Get the container of
        Trial Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetTrialPoints(self)


    def GetLabelImage(self) -> "itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,3 > >":
        """
        GetLabelImage(itkFastMarchingImageFilterID3ID3 self) -> itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,3 > >

        Get the point type
        label image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetLabelImage(self)


    def SetSpeedConstant(self, value: 'double') -> "void":
        """
        SetSpeedConstant(itkFastMarchingImageFilterID3ID3 self, double value)

        Set the Speed
        Constant. If the Speed Image is nullptr, the SpeedConstant value is
        used for the whole level set. By default, the SpeedConstant is set to
        1.0. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetSpeedConstant(self, value)


    def GetSpeedConstant(self) -> "double const &":
        """
        GetSpeedConstant(itkFastMarchingImageFilterID3ID3 self) -> double const &

        Get the Speed
        Constant. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetSpeedConstant(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """
        SetNormalizationFactor(itkFastMarchingImageFilterID3ID3 self, double const _arg)

        Set/Get the
        Normalization Factor for the Speed Image. The values in the Speed
        Image is divided by this factor. This allows the use of images with
        integer pixel types to represent the speed. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetNormalizationFactor(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """GetNormalizationFactor(itkFastMarchingImageFilterID3ID3 self) -> double"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetNormalizationFactor(self)


    def SetStoppingValue(self, _arg: 'double const') -> "void":
        """
        SetStoppingValue(itkFastMarchingImageFilterID3ID3 self, double const _arg)

        Set the Fast
        Marching algorithm Stopping Value. The Fast Marching algorithm is
        terminated when the value of the smallest trial point is greater than
        the stopping value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetStoppingValue(self, _arg)


    def GetStoppingValue(self) -> "double const &":
        """
        GetStoppingValue(itkFastMarchingImageFilterID3ID3 self) -> double const &

        Get the Fast
        Marching algorithm Stopping Value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetStoppingValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingImageFilterID3ID3 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingImageFilterID3ID3 self) -> bool const &

        Get thConste
        Collect Points flag. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingImageFilterID3ID3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingImageFilterID3ID3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOff(self)


    def GetProcessedPoints(self) -> "itkVectorContainerUILSND3_Pointer":
        """
        GetProcessedPoints(itkFastMarchingImageFilterID3ID3 self) -> itkVectorContainerUILSND3_Pointer

        Get the
        container of Processed Points. If the CollectPoints flag is set, the
        algorithm collects a container of all processed nodes. This is useful
        for defining creating Narrowbands for level set algorithms that
        supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetProcessedPoints(self)


    def SetOutputSize(self, size: 'itkSize3') -> "void":
        """
        SetOutputSize(itkFastMarchingImageFilterID3ID3 self, itkSize3 size)

        The output largest
        possible, spacing and origin is computed as follows. If the speed
        image is nullptr or if the OverrideOutputInformation is true, the
        output information is set from user specified parameters. These
        parameters can be specified using methods SetOutputRegion(),
        SetOutputSpacing(), SetOutputDirection(), and SetOutputOrigin(). Else
        if the speed image is not nullptr, the output information is copied
        from the input speed image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSize(self, size)


    def GetOutputSize(self) -> "itkSize3":
        """GetOutputSize(itkFastMarchingImageFilterID3ID3 self) -> itkSize3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSize(self)


    def SetOutputRegion(self, _arg: 'itkImageRegion3') -> "void":
        """SetOutputRegion(itkFastMarchingImageFilterID3ID3 self, itkImageRegion3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputRegion(self, _arg)


    def GetOutputRegion(self) -> "itkImageRegion3 const &":
        """GetOutputRegion(itkFastMarchingImageFilterID3ID3 self) -> itkImageRegion3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputRegion(self)


    def SetOutputSpacing(self, _arg: 'itkVectorD3') -> "void":
        """SetOutputSpacing(itkFastMarchingImageFilterID3ID3 self, itkVectorD3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSpacing(self, _arg)


    def GetOutputSpacing(self) -> "itkVectorD3 const &":
        """GetOutputSpacing(itkFastMarchingImageFilterID3ID3 self) -> itkVectorD3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSpacing(self)


    def SetOutputDirection(self, _arg: 'itkMatrixD33') -> "void":
        """SetOutputDirection(itkFastMarchingImageFilterID3ID3 self, itkMatrixD33 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputDirection(self, _arg)


    def GetOutputDirection(self) -> "itkMatrixD33 const &":
        """GetOutputDirection(itkFastMarchingImageFilterID3ID3 self) -> itkMatrixD33"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputDirection(self)


    def SetOutputOrigin(self, _arg: 'itkPointD3') -> "void":
        """SetOutputOrigin(itkFastMarchingImageFilterID3ID3 self, itkPointD3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputOrigin(self, _arg)


    def GetOutputOrigin(self) -> "itkPointD3 const &":
        """GetOutputOrigin(itkFastMarchingImageFilterID3ID3 self) -> itkPointD3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputOrigin(self)


    def SetOverrideOutputInformation(self, _arg: 'bool const') -> "void":
        """SetOverrideOutputInformation(itkFastMarchingImageFilterID3ID3 self, bool const _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOverrideOutputInformation(self, _arg)


    def GetOverrideOutputInformation(self) -> "bool const &":
        """GetOverrideOutputInformation(itkFastMarchingImageFilterID3ID3 self) -> bool const &"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOverrideOutputInformation(self)


    def OverrideOutputInformationOn(self) -> "void":
        """OverrideOutputInformationOn(itkFastMarchingImageFilterID3ID3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOn(self)


    def OverrideOutputInformationOff(self) -> "void":
        """OverrideOutputInformationOff(itkFastMarchingImageFilterID3ID3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOff(self)

    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SameDimensionCheck
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SpeedConvertibleToDoubleCheck
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_DoubleConvertibleToLevelSetCheck
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_LevelSetOStreamWritableCheck
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkFastMarchingImageFilterID3ID3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterID3ID3

        Create a new object of the class itkFastMarchingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingImageFilterID3ID3.Clone = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_Clone, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutsidePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutsidePoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetAlivePoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetAlivePoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetTrialPoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetTrialPoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetLabelImage = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetLabelImage, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetSpeedConstant, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetSpeedConstant, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetNormalizationFactor, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetNormalizationFactor, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetStoppingValue, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetStoppingValue, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetCollectPoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetCollectPoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.CollectPointsOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOn, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.CollectPointsOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_CollectPointsOff, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetProcessedPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetProcessedPoints, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSize, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSize, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputRegion, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputRegion, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputSpacing, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputSpacing, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputDirection, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputDirection, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOutputOrigin, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOutputOrigin, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.SetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_SetOverrideOutputInformation, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.GetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_GetOverrideOutputInformation, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.OverrideOutputInformationOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOn, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3.OverrideOutputInformationOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_OverrideOutputInformationOff, None, itkFastMarchingImageFilterID3ID3)
itkFastMarchingImageFilterID3ID3_swigregister = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_swigregister
itkFastMarchingImageFilterID3ID3_swigregister(itkFastMarchingImageFilterID3ID3)

def itkFastMarchingImageFilterID3ID3___New_orig__() -> "itkFastMarchingImageFilterID3ID3_Pointer":
    """itkFastMarchingImageFilterID3ID3___New_orig__() -> itkFastMarchingImageFilterID3ID3_Pointer"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3___New_orig__()

def itkFastMarchingImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterID3ID3 *":
    """itkFastMarchingImageFilterID3ID3_cast(itkLightObject obj) -> itkFastMarchingImageFilterID3ID3"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3_cast(obj)

class itkFastMarchingImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault

    C++ includes: itkFastMarchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkFastMarchingImageFilterIF2IF2_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingImageFilterIF2IF2_Pointer":
        """Clone(itkFastMarchingImageFilterIF2IF2 self) -> itkFastMarchingImageFilterIF2IF2_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_Clone(self)


    def SetOutsidePoints(self, points: 'itkVectorContainerUILSNF2') -> "void":
        """
        SetOutsidePoints(itkFastMarchingImageFilterIF2IF2 self, itkVectorContainerUILSNF2 points)

        Set the container
        of points that are not meant to be evaluated. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutsidePoints(self, points)


    def SetAlivePoints(self, points: 'itkVectorContainerUILSNF2') -> "void":
        """
        SetAlivePoints(itkFastMarchingImageFilterIF2IF2 self, itkVectorContainerUILSNF2 points)

        Set the container of
        Alive Points representing the initial front. Alive points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetAlivePoints(self, points)


    def GetAlivePoints(self) -> "itkVectorContainerUILSNF2_Pointer":
        """
        GetAlivePoints(itkFastMarchingImageFilterIF2IF2 self) -> itkVectorContainerUILSNF2_Pointer

        Get the container of
        Alive Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetAlivePoints(self)


    def SetTrialPoints(self, points: 'itkVectorContainerUILSNF2') -> "void":
        """
        SetTrialPoints(itkFastMarchingImageFilterIF2IF2 self, itkVectorContainerUILSNF2 points)

        Set the container of
        Trial Points representing the initial front. Trial points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetTrialPoints(self, points)


    def GetTrialPoints(self) -> "itkVectorContainerUILSNF2_Pointer":
        """
        GetTrialPoints(itkFastMarchingImageFilterIF2IF2 self) -> itkVectorContainerUILSNF2_Pointer

        Get the container of
        Trial Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetTrialPoints(self)


    def GetLabelImage(self) -> "itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,2 > >":
        """
        GetLabelImage(itkFastMarchingImageFilterIF2IF2 self) -> itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,2 > >

        Get the point type
        label image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetLabelImage(self)


    def SetSpeedConstant(self, value: 'double') -> "void":
        """
        SetSpeedConstant(itkFastMarchingImageFilterIF2IF2 self, double value)

        Set the Speed
        Constant. If the Speed Image is nullptr, the SpeedConstant value is
        used for the whole level set. By default, the SpeedConstant is set to
        1.0. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetSpeedConstant(self, value)


    def GetSpeedConstant(self) -> "double const &":
        """
        GetSpeedConstant(itkFastMarchingImageFilterIF2IF2 self) -> double const &

        Get the Speed
        Constant. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetSpeedConstant(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """
        SetNormalizationFactor(itkFastMarchingImageFilterIF2IF2 self, double const _arg)

        Set/Get the
        Normalization Factor for the Speed Image. The values in the Speed
        Image is divided by this factor. This allows the use of images with
        integer pixel types to represent the speed. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetNormalizationFactor(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """GetNormalizationFactor(itkFastMarchingImageFilterIF2IF2 self) -> double"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetNormalizationFactor(self)


    def SetStoppingValue(self, _arg: 'double const') -> "void":
        """
        SetStoppingValue(itkFastMarchingImageFilterIF2IF2 self, double const _arg)

        Set the Fast
        Marching algorithm Stopping Value. The Fast Marching algorithm is
        terminated when the value of the smallest trial point is greater than
        the stopping value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetStoppingValue(self, _arg)


    def GetStoppingValue(self) -> "double const &":
        """
        GetStoppingValue(itkFastMarchingImageFilterIF2IF2 self) -> double const &

        Get the Fast
        Marching algorithm Stopping Value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetStoppingValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingImageFilterIF2IF2 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingImageFilterIF2IF2 self) -> bool const &

        Get thConste
        Collect Points flag. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingImageFilterIF2IF2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingImageFilterIF2IF2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOff(self)


    def GetProcessedPoints(self) -> "itkVectorContainerUILSNF2_Pointer":
        """
        GetProcessedPoints(itkFastMarchingImageFilterIF2IF2 self) -> itkVectorContainerUILSNF2_Pointer

        Get the
        container of Processed Points. If the CollectPoints flag is set, the
        algorithm collects a container of all processed nodes. This is useful
        for defining creating Narrowbands for level set algorithms that
        supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetProcessedPoints(self)


    def SetOutputSize(self, size: 'itkSize2') -> "void":
        """
        SetOutputSize(itkFastMarchingImageFilterIF2IF2 self, itkSize2 size)

        The output largest
        possible, spacing and origin is computed as follows. If the speed
        image is nullptr or if the OverrideOutputInformation is true, the
        output information is set from user specified parameters. These
        parameters can be specified using methods SetOutputRegion(),
        SetOutputSpacing(), SetOutputDirection(), and SetOutputOrigin(). Else
        if the speed image is not nullptr, the output information is copied
        from the input speed image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSize(self, size)


    def GetOutputSize(self) -> "itkSize2":
        """GetOutputSize(itkFastMarchingImageFilterIF2IF2 self) -> itkSize2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSize(self)


    def SetOutputRegion(self, _arg: 'itkImageRegion2') -> "void":
        """SetOutputRegion(itkFastMarchingImageFilterIF2IF2 self, itkImageRegion2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputRegion(self, _arg)


    def GetOutputRegion(self) -> "itkImageRegion2 const &":
        """GetOutputRegion(itkFastMarchingImageFilterIF2IF2 self) -> itkImageRegion2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputRegion(self)


    def SetOutputSpacing(self, _arg: 'itkVectorD2') -> "void":
        """SetOutputSpacing(itkFastMarchingImageFilterIF2IF2 self, itkVectorD2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSpacing(self, _arg)


    def GetOutputSpacing(self) -> "itkVectorD2 const &":
        """GetOutputSpacing(itkFastMarchingImageFilterIF2IF2 self) -> itkVectorD2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSpacing(self)


    def SetOutputDirection(self, _arg: 'itkMatrixD22') -> "void":
        """SetOutputDirection(itkFastMarchingImageFilterIF2IF2 self, itkMatrixD22 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputDirection(self, _arg)


    def GetOutputDirection(self) -> "itkMatrixD22 const &":
        """GetOutputDirection(itkFastMarchingImageFilterIF2IF2 self) -> itkMatrixD22"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputDirection(self)


    def SetOutputOrigin(self, _arg: 'itkPointD2') -> "void":
        """SetOutputOrigin(itkFastMarchingImageFilterIF2IF2 self, itkPointD2 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputOrigin(self, _arg)


    def GetOutputOrigin(self) -> "itkPointD2 const &":
        """GetOutputOrigin(itkFastMarchingImageFilterIF2IF2 self) -> itkPointD2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputOrigin(self)


    def SetOverrideOutputInformation(self, _arg: 'bool const') -> "void":
        """SetOverrideOutputInformation(itkFastMarchingImageFilterIF2IF2 self, bool const _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOverrideOutputInformation(self, _arg)


    def GetOverrideOutputInformation(self) -> "bool const &":
        """GetOverrideOutputInformation(itkFastMarchingImageFilterIF2IF2 self) -> bool const &"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOverrideOutputInformation(self)


    def OverrideOutputInformationOn(self) -> "void":
        """OverrideOutputInformationOn(itkFastMarchingImageFilterIF2IF2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOn(self)


    def OverrideOutputInformationOff(self) -> "void":
        """OverrideOutputInformationOff(itkFastMarchingImageFilterIF2IF2 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOff(self)

    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SameDimensionCheck
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SpeedConvertibleToDoubleCheck
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_DoubleConvertibleToLevelSetCheck
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_LevelSetOStreamWritableCheck
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkFastMarchingImageFilterIF2IF2"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterIF2IF2

        Create a new object of the class itkFastMarchingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingImageFilterIF2IF2.Clone = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_Clone, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutsidePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutsidePoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetAlivePoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetAlivePoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetTrialPoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetTrialPoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetLabelImage = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetLabelImage, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetSpeedConstant, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetSpeedConstant, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetNormalizationFactor, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetNormalizationFactor, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetStoppingValue, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetStoppingValue, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetCollectPoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetCollectPoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.CollectPointsOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOn, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.CollectPointsOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_CollectPointsOff, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetProcessedPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetProcessedPoints, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSize, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSize, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputRegion, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputRegion, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputSpacing, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputSpacing, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputDirection, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputDirection, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOutputOrigin, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOutputOrigin, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.SetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_SetOverrideOutputInformation, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.GetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_GetOverrideOutputInformation, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.OverrideOutputInformationOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOn, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2.OverrideOutputInformationOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_OverrideOutputInformationOff, None, itkFastMarchingImageFilterIF2IF2)
itkFastMarchingImageFilterIF2IF2_swigregister = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_swigregister
itkFastMarchingImageFilterIF2IF2_swigregister(itkFastMarchingImageFilterIF2IF2)

def itkFastMarchingImageFilterIF2IF2___New_orig__() -> "itkFastMarchingImageFilterIF2IF2_Pointer":
    """itkFastMarchingImageFilterIF2IF2___New_orig__() -> itkFastMarchingImageFilterIF2IF2_Pointer"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2___New_orig__()

def itkFastMarchingImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterIF2IF2 *":
    """itkFastMarchingImageFilterIF2IF2_cast(itkLightObject obj) -> itkFastMarchingImageFilterIF2IF2"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2_cast(obj)

class itkFastMarchingImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Solve an Eikonal equation using Fast Marching.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one grid point at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper grid
    position to update.

    Fast Marching sweeps through N grid points in (N log N) steps to
    obtain the arrival time value as the front propagates through the
    grid.

    Implementation of this class is based on Chapter 8 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    This class is templated over the level set image type and the speed
    image type. The initial front is specified by two containers: one
    containing the known points and one containing the trial points. Alive
    points are those that are already part of the object, and trial points
    are considered for inclusion. In order for the filter to evolve, at
    least some trial points must be specified. These can for instance be
    specified as the layer of pixels around the alive points.

    The speed function can be specified as a speed image or a speed
    constant. The speed image is set using the method SetInput(). If the
    speed image is nullptr, a constant speed function is used and is
    specified using method the SetSpeedConstant().

    If the speed function is constant and of value one, fast marching
    results in an approximate distance function from the initial alive
    points. FastMarchingImageFilter is used in the
    ReinitializeLevelSetImageFilter object to create a signed distance
    function from the zero level set.

    The algorithm can be terminated early by setting an appropriate
    stopping value. The algorithm terminates when the current arrival time
    being processed is greater than the stopping value.

    There are two ways to specify the output image information (
    LargestPossibleRegion, Spacing, Origin): (a) it is copied directly
    from the input speed image or (b) it is specified by the user. Default
    values are used if the user does not specify all the information.

    The output information is computed as follows. If the speed image is
    nullptr or if the OverrideOutputInformation is set to true, the output
    information is set from user specified parameters. These parameters
    can be specified using methods SetOutputRegion(), SetOutputSpacing(),
    SetOutputDirection(), and SetOutputOrigin(). Else if the speed image
    is not nullptr, the output information is copied from the input speed
    image.

    For an alternative implementation, see itk::FastMarchingImageFilter.

    Possible Improvements: In the current implementation,
    std::priority_queue only allows taking nodes out from the front and
    putting nodes in from the back. To update a value already on the heap,
    a new node is added to the heap. The defunct old node is left on the
    heap. When it is removed from the top, it will be recognized as
    invalid and not used. Future implementations can implement the heap in
    a different way allowing the values to be updated. This will generally
    require some sift-up and sift-down functions and an image of back-
    pointers going from the image to heap in order to locate the node
    which is to be updated.

    See:   FastMarchingImageFilterBase

    See:  LevelSetTypeDefault

    C++ includes: itkFastMarchingImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkFastMarchingImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkFastMarchingImageFilterIF3IF3_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkFastMarchingImageFilterIF3IF3_Pointer":
        """Clone(itkFastMarchingImageFilterIF3IF3 self) -> itkFastMarchingImageFilterIF3IF3_Pointer"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_Clone(self)


    def SetOutsidePoints(self, points: 'itkVectorContainerUILSNF3') -> "void":
        """
        SetOutsidePoints(itkFastMarchingImageFilterIF3IF3 self, itkVectorContainerUILSNF3 points)

        Set the container
        of points that are not meant to be evaluated. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutsidePoints(self, points)


    def SetAlivePoints(self, points: 'itkVectorContainerUILSNF3') -> "void":
        """
        SetAlivePoints(itkFastMarchingImageFilterIF3IF3 self, itkVectorContainerUILSNF3 points)

        Set the container of
        Alive Points representing the initial front. Alive points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetAlivePoints(self, points)


    def GetAlivePoints(self) -> "itkVectorContainerUILSNF3_Pointer":
        """
        GetAlivePoints(itkFastMarchingImageFilterIF3IF3 self) -> itkVectorContainerUILSNF3_Pointer

        Get the container of
        Alive Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetAlivePoints(self)


    def SetTrialPoints(self, points: 'itkVectorContainerUILSNF3') -> "void":
        """
        SetTrialPoints(itkFastMarchingImageFilterIF3IF3 self, itkVectorContainerUILSNF3 points)

        Set the container of
        Trial Points representing the initial front. Trial points are
        represented as a VectorContainer of LevelSetNodes. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetTrialPoints(self, points)


    def GetTrialPoints(self) -> "itkVectorContainerUILSNF3_Pointer":
        """
        GetTrialPoints(itkFastMarchingImageFilterIF3IF3 self) -> itkVectorContainerUILSNF3_Pointer

        Get the container of
        Trial Points representing the initial front. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetTrialPoints(self)


    def GetLabelImage(self) -> "itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,3 > >":
        """
        GetLabelImage(itkFastMarchingImageFilterIF3IF3 self) -> itk::SmartPointer< itk::Image< itk::FastMarchingImageFilterEnums::Label,3 > >

        Get the point type
        label image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetLabelImage(self)


    def SetSpeedConstant(self, value: 'double') -> "void":
        """
        SetSpeedConstant(itkFastMarchingImageFilterIF3IF3 self, double value)

        Set the Speed
        Constant. If the Speed Image is nullptr, the SpeedConstant value is
        used for the whole level set. By default, the SpeedConstant is set to
        1.0. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetSpeedConstant(self, value)


    def GetSpeedConstant(self) -> "double const &":
        """
        GetSpeedConstant(itkFastMarchingImageFilterIF3IF3 self) -> double const &

        Get the Speed
        Constant. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetSpeedConstant(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """
        SetNormalizationFactor(itkFastMarchingImageFilterIF3IF3 self, double const _arg)

        Set/Get the
        Normalization Factor for the Speed Image. The values in the Speed
        Image is divided by this factor. This allows the use of images with
        integer pixel types to represent the speed. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetNormalizationFactor(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """GetNormalizationFactor(itkFastMarchingImageFilterIF3IF3 self) -> double"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetNormalizationFactor(self)


    def SetStoppingValue(self, _arg: 'double const') -> "void":
        """
        SetStoppingValue(itkFastMarchingImageFilterIF3IF3 self, double const _arg)

        Set the Fast
        Marching algorithm Stopping Value. The Fast Marching algorithm is
        terminated when the value of the smallest trial point is greater than
        the stopping value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetStoppingValue(self, _arg)


    def GetStoppingValue(self) -> "double const &":
        """
        GetStoppingValue(itkFastMarchingImageFilterIF3IF3 self) -> double const &

        Get the Fast
        Marching algorithm Stopping Value. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetStoppingValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingImageFilterIF3IF3 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingImageFilterIF3IF3 self) -> bool const &

        Get thConste
        Collect Points flag. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingImageFilterIF3IF3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingImageFilterIF3IF3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOff(self)


    def GetProcessedPoints(self) -> "itkVectorContainerUILSNF3_Pointer":
        """
        GetProcessedPoints(itkFastMarchingImageFilterIF3IF3 self) -> itkVectorContainerUILSNF3_Pointer

        Get the
        container of Processed Points. If the CollectPoints flag is set, the
        algorithm collects a container of all processed nodes. This is useful
        for defining creating Narrowbands for level set algorithms that
        supports narrow banding. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetProcessedPoints(self)


    def SetOutputSize(self, size: 'itkSize3') -> "void":
        """
        SetOutputSize(itkFastMarchingImageFilterIF3IF3 self, itkSize3 size)

        The output largest
        possible, spacing and origin is computed as follows. If the speed
        image is nullptr or if the OverrideOutputInformation is true, the
        output information is set from user specified parameters. These
        parameters can be specified using methods SetOutputRegion(),
        SetOutputSpacing(), SetOutputDirection(), and SetOutputOrigin(). Else
        if the speed image is not nullptr, the output information is copied
        from the input speed image. 
        """
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSize(self, size)


    def GetOutputSize(self) -> "itkSize3":
        """GetOutputSize(itkFastMarchingImageFilterIF3IF3 self) -> itkSize3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSize(self)


    def SetOutputRegion(self, _arg: 'itkImageRegion3') -> "void":
        """SetOutputRegion(itkFastMarchingImageFilterIF3IF3 self, itkImageRegion3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputRegion(self, _arg)


    def GetOutputRegion(self) -> "itkImageRegion3 const &":
        """GetOutputRegion(itkFastMarchingImageFilterIF3IF3 self) -> itkImageRegion3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputRegion(self)


    def SetOutputSpacing(self, _arg: 'itkVectorD3') -> "void":
        """SetOutputSpacing(itkFastMarchingImageFilterIF3IF3 self, itkVectorD3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSpacing(self, _arg)


    def GetOutputSpacing(self) -> "itkVectorD3 const &":
        """GetOutputSpacing(itkFastMarchingImageFilterIF3IF3 self) -> itkVectorD3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSpacing(self)


    def SetOutputDirection(self, _arg: 'itkMatrixD33') -> "void":
        """SetOutputDirection(itkFastMarchingImageFilterIF3IF3 self, itkMatrixD33 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputDirection(self, _arg)


    def GetOutputDirection(self) -> "itkMatrixD33 const &":
        """GetOutputDirection(itkFastMarchingImageFilterIF3IF3 self) -> itkMatrixD33"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputDirection(self)


    def SetOutputOrigin(self, _arg: 'itkPointD3') -> "void":
        """SetOutputOrigin(itkFastMarchingImageFilterIF3IF3 self, itkPointD3 _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputOrigin(self, _arg)


    def GetOutputOrigin(self) -> "itkPointD3 const &":
        """GetOutputOrigin(itkFastMarchingImageFilterIF3IF3 self) -> itkPointD3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputOrigin(self)


    def SetOverrideOutputInformation(self, _arg: 'bool const') -> "void":
        """SetOverrideOutputInformation(itkFastMarchingImageFilterIF3IF3 self, bool const _arg)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOverrideOutputInformation(self, _arg)


    def GetOverrideOutputInformation(self) -> "bool const &":
        """GetOverrideOutputInformation(itkFastMarchingImageFilterIF3IF3 self) -> bool const &"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOverrideOutputInformation(self)


    def OverrideOutputInformationOn(self) -> "void":
        """OverrideOutputInformationOn(itkFastMarchingImageFilterIF3IF3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOn(self)


    def OverrideOutputInformationOff(self) -> "void":
        """OverrideOutputInformationOff(itkFastMarchingImageFilterIF3IF3 self)"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOff(self)

    SameDimensionCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SameDimensionCheck
    SpeedConvertibleToDoubleCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SpeedConvertibleToDoubleCheck
    DoubleConvertibleToLevelSetCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_DoubleConvertibleToLevelSetCheck
    LevelSetOStreamWritableCheck = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_LevelSetOStreamWritableCheck
    __swig_destroy__ = _itkFastMarchingImageFilterPython.delete_itkFastMarchingImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkFastMarchingImageFilterIF3IF3"""
        return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingImageFilterIF3IF3

        Create a new object of the class itkFastMarchingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingImageFilterIF3IF3.Clone = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_Clone, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutsidePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutsidePoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetAlivePoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetAlivePoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetAlivePoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetTrialPoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetTrialPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetTrialPoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetLabelImage = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetLabelImage, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetSpeedConstant, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetSpeedConstant = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetSpeedConstant, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetNormalizationFactor, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetNormalizationFactor = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetNormalizationFactor, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetStoppingValue, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetStoppingValue = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetStoppingValue, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetCollectPoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetCollectPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetCollectPoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.CollectPointsOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOn, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.CollectPointsOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_CollectPointsOff, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetProcessedPoints = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetProcessedPoints, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSize, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOutputSize = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSize, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputRegion, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOutputRegion = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputRegion, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputSpacing, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOutputSpacing = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputSpacing, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputDirection, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOutputDirection = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputDirection, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOutputOrigin, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOutputOrigin = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOutputOrigin, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.SetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_SetOverrideOutputInformation, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.GetOverrideOutputInformation = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_GetOverrideOutputInformation, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.OverrideOutputInformationOn = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOn, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3.OverrideOutputInformationOff = new_instancemethod(_itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_OverrideOutputInformationOff, None, itkFastMarchingImageFilterIF3IF3)
itkFastMarchingImageFilterIF3IF3_swigregister = _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_swigregister
itkFastMarchingImageFilterIF3IF3_swigregister(itkFastMarchingImageFilterIF3IF3)

def itkFastMarchingImageFilterIF3IF3___New_orig__() -> "itkFastMarchingImageFilterIF3IF3_Pointer":
    """itkFastMarchingImageFilterIF3IF3___New_orig__() -> itkFastMarchingImageFilterIF3IF3_Pointer"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3___New_orig__()

def itkFastMarchingImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkFastMarchingImageFilterIF3IF3 *":
    """itkFastMarchingImageFilterIF3IF3_cast(itkLightObject obj) -> itkFastMarchingImageFilterIF3IF3"""
    return _itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fast_marching_image_filter(*args, **kwargs):
    """Procedural interface for FastMarchingImageFilter"""
    import itk
    instance = itk.FastMarchingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fast_marching_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FastMarchingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FastMarchingImageFilter.values()[0]
    else:
        filter_object = itk.FastMarchingImageFilter

    fast_marching_image_filter.__doc__ = filter_object.__doc__
    fast_marching_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fast_marching_image_filter.__doc__ += "Available Keyword Arguments:\n"
    fast_marching_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



