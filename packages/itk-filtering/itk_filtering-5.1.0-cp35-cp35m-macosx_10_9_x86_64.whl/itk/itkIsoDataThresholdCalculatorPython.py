# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkIsoDataThresholdCalculatorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkIsoDataThresholdCalculatorPython', [dirname(__file__)])
        except ImportError:
            import _itkIsoDataThresholdCalculatorPython
            return _itkIsoDataThresholdCalculatorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkIsoDataThresholdCalculatorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkIsoDataThresholdCalculatorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkIsoDataThresholdCalculatorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkHistogramThresholdCalculatorPython
import itkHistogramPython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSamplePython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkSimpleDataObjectDecoratorPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkCovariantVectorPython

def itkIsoDataThresholdCalculatorHFD_New():
  return itkIsoDataThresholdCalculatorHFD.New()


def itkIsoDataThresholdCalculatorHDD_New():
  return itkIsoDataThresholdCalculatorHDD.New()


def itkIsoDataThresholdCalculatorHFF_New():
  return itkIsoDataThresholdCalculatorHFF.New()


def itkIsoDataThresholdCalculatorHDF_New():
  return itkIsoDataThresholdCalculatorHDF.New()


def itkIsoDataThresholdCalculatorHFUS_New():
  return itkIsoDataThresholdCalculatorHFUS.New()


def itkIsoDataThresholdCalculatorHDUS_New():
  return itkIsoDataThresholdCalculatorHDUS.New()


def itkIsoDataThresholdCalculatorHFUC_New():
  return itkIsoDataThresholdCalculatorHFUC.New()


def itkIsoDataThresholdCalculatorHDUC_New():
  return itkIsoDataThresholdCalculatorHDUC.New()


def itkIsoDataThresholdCalculatorHFSS_New():
  return itkIsoDataThresholdCalculatorHFSS.New()


def itkIsoDataThresholdCalculatorHDSS_New():
  return itkIsoDataThresholdCalculatorHDSS.New()

class itkIsoDataThresholdCalculatorHDD(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHDD_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHDD_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHDD_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHDD self) -> itkIsoDataThresholdCalculatorHDD_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDD

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDD *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDD"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDD

        Create a new object of the class itkIsoDataThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHDD.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_Clone, None, itkIsoDataThresholdCalculatorHDD)
itkIsoDataThresholdCalculatorHDD_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_swigregister
itkIsoDataThresholdCalculatorHDD_swigregister(itkIsoDataThresholdCalculatorHDD)

def itkIsoDataThresholdCalculatorHDD___New_orig__() -> "itkIsoDataThresholdCalculatorHDD_Pointer":
    """itkIsoDataThresholdCalculatorHDD___New_orig__() -> itkIsoDataThresholdCalculatorHDD_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD___New_orig__()

def itkIsoDataThresholdCalculatorHDD_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDD *":
    """itkIsoDataThresholdCalculatorHDD_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDD"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_cast(obj)

class itkIsoDataThresholdCalculatorHDF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHDF_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHDF_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHDF_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHDF self) -> itkIsoDataThresholdCalculatorHDF_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDF

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDF *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDF"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDF

        Create a new object of the class itkIsoDataThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHDF.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_Clone, None, itkIsoDataThresholdCalculatorHDF)
itkIsoDataThresholdCalculatorHDF_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_swigregister
itkIsoDataThresholdCalculatorHDF_swigregister(itkIsoDataThresholdCalculatorHDF)

def itkIsoDataThresholdCalculatorHDF___New_orig__() -> "itkIsoDataThresholdCalculatorHDF_Pointer":
    """itkIsoDataThresholdCalculatorHDF___New_orig__() -> itkIsoDataThresholdCalculatorHDF_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF___New_orig__()

def itkIsoDataThresholdCalculatorHDF_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDF *":
    """itkIsoDataThresholdCalculatorHDF_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDF"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_cast(obj)

class itkIsoDataThresholdCalculatorHDSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHDSS_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHDSS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHDSS_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHDSS self) -> itkIsoDataThresholdCalculatorHDSS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDSS

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDSS *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDSS"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDSS

        Create a new object of the class itkIsoDataThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHDSS.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_Clone, None, itkIsoDataThresholdCalculatorHDSS)
itkIsoDataThresholdCalculatorHDSS_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_swigregister
itkIsoDataThresholdCalculatorHDSS_swigregister(itkIsoDataThresholdCalculatorHDSS)

def itkIsoDataThresholdCalculatorHDSS___New_orig__() -> "itkIsoDataThresholdCalculatorHDSS_Pointer":
    """itkIsoDataThresholdCalculatorHDSS___New_orig__() -> itkIsoDataThresholdCalculatorHDSS_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS___New_orig__()

def itkIsoDataThresholdCalculatorHDSS_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDSS *":
    """itkIsoDataThresholdCalculatorHDSS_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDSS"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_cast(obj)

class itkIsoDataThresholdCalculatorHDUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHDUC_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHDUC_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHDUC_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHDUC self) -> itkIsoDataThresholdCalculatorHDUC_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDUC

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDUC *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDUC"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDUC

        Create a new object of the class itkIsoDataThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHDUC.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_Clone, None, itkIsoDataThresholdCalculatorHDUC)
itkIsoDataThresholdCalculatorHDUC_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_swigregister
itkIsoDataThresholdCalculatorHDUC_swigregister(itkIsoDataThresholdCalculatorHDUC)

def itkIsoDataThresholdCalculatorHDUC___New_orig__() -> "itkIsoDataThresholdCalculatorHDUC_Pointer":
    """itkIsoDataThresholdCalculatorHDUC___New_orig__() -> itkIsoDataThresholdCalculatorHDUC_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC___New_orig__()

def itkIsoDataThresholdCalculatorHDUC_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDUC *":
    """itkIsoDataThresholdCalculatorHDUC_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDUC"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_cast(obj)

class itkIsoDataThresholdCalculatorHDUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHDUS_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHDUS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHDUS_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHDUS self) -> itkIsoDataThresholdCalculatorHDUS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDUS

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDUS *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDUS"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDUS

        Create a new object of the class itkIsoDataThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHDUS.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_Clone, None, itkIsoDataThresholdCalculatorHDUS)
itkIsoDataThresholdCalculatorHDUS_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_swigregister
itkIsoDataThresholdCalculatorHDUS_swigregister(itkIsoDataThresholdCalculatorHDUS)

def itkIsoDataThresholdCalculatorHDUS___New_orig__() -> "itkIsoDataThresholdCalculatorHDUS_Pointer":
    """itkIsoDataThresholdCalculatorHDUS___New_orig__() -> itkIsoDataThresholdCalculatorHDUS_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS___New_orig__()

def itkIsoDataThresholdCalculatorHDUS_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHDUS *":
    """itkIsoDataThresholdCalculatorHDUS_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHDUS"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_cast(obj)

class itkIsoDataThresholdCalculatorHFD(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHFD_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHFD_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHFD_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHFD self) -> itkIsoDataThresholdCalculatorHFD_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFD

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFD *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFD"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFD

        Create a new object of the class itkIsoDataThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFD.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHFD.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_Clone, None, itkIsoDataThresholdCalculatorHFD)
itkIsoDataThresholdCalculatorHFD_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_swigregister
itkIsoDataThresholdCalculatorHFD_swigregister(itkIsoDataThresholdCalculatorHFD)

def itkIsoDataThresholdCalculatorHFD___New_orig__() -> "itkIsoDataThresholdCalculatorHFD_Pointer":
    """itkIsoDataThresholdCalculatorHFD___New_orig__() -> itkIsoDataThresholdCalculatorHFD_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD___New_orig__()

def itkIsoDataThresholdCalculatorHFD_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFD *":
    """itkIsoDataThresholdCalculatorHFD_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFD"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_cast(obj)

class itkIsoDataThresholdCalculatorHFF(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHFF_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHFF_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHFF_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHFF self) -> itkIsoDataThresholdCalculatorHFF_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFF

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFF *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFF"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFF

        Create a new object of the class itkIsoDataThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFF.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHFF.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_Clone, None, itkIsoDataThresholdCalculatorHFF)
itkIsoDataThresholdCalculatorHFF_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_swigregister
itkIsoDataThresholdCalculatorHFF_swigregister(itkIsoDataThresholdCalculatorHFF)

def itkIsoDataThresholdCalculatorHFF___New_orig__() -> "itkIsoDataThresholdCalculatorHFF_Pointer":
    """itkIsoDataThresholdCalculatorHFF___New_orig__() -> itkIsoDataThresholdCalculatorHFF_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF___New_orig__()

def itkIsoDataThresholdCalculatorHFF_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFF *":
    """itkIsoDataThresholdCalculatorHFF_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFF"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_cast(obj)

class itkIsoDataThresholdCalculatorHFSS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHFSS_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHFSS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHFSS_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHFSS self) -> itkIsoDataThresholdCalculatorHFSS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFSS

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFSS *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFSS"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFSS

        Create a new object of the class itkIsoDataThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFSS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHFSS.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_Clone, None, itkIsoDataThresholdCalculatorHFSS)
itkIsoDataThresholdCalculatorHFSS_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_swigregister
itkIsoDataThresholdCalculatorHFSS_swigregister(itkIsoDataThresholdCalculatorHFSS)

def itkIsoDataThresholdCalculatorHFSS___New_orig__() -> "itkIsoDataThresholdCalculatorHFSS_Pointer":
    """itkIsoDataThresholdCalculatorHFSS___New_orig__() -> itkIsoDataThresholdCalculatorHFSS_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS___New_orig__()

def itkIsoDataThresholdCalculatorHFSS_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFSS *":
    """itkIsoDataThresholdCalculatorHFSS_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFSS"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_cast(obj)

class itkIsoDataThresholdCalculatorHFUC(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHFUC_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHFUC_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHFUC_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHFUC self) -> itkIsoDataThresholdCalculatorHFUC_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFUC

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFUC *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFUC"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFUC

        Create a new object of the class itkIsoDataThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFUC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHFUC.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_Clone, None, itkIsoDataThresholdCalculatorHFUC)
itkIsoDataThresholdCalculatorHFUC_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_swigregister
itkIsoDataThresholdCalculatorHFUC_swigregister(itkIsoDataThresholdCalculatorHFUC)

def itkIsoDataThresholdCalculatorHFUC___New_orig__() -> "itkIsoDataThresholdCalculatorHFUC_Pointer":
    """itkIsoDataThresholdCalculatorHFUC___New_orig__() -> itkIsoDataThresholdCalculatorHFUC_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC___New_orig__()

def itkIsoDataThresholdCalculatorHFUC_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFUC *":
    """itkIsoDataThresholdCalculatorHFUC_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFUC"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_cast(obj)

class itkIsoDataThresholdCalculatorHFUS(itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    """


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811

    C++ includes: itkIsoDataThresholdCalculator.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkIsoDataThresholdCalculatorHFUS_Pointer":
        """__New_orig__() -> itkIsoDataThresholdCalculatorHFUS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkIsoDataThresholdCalculatorHFUS_Pointer":
        """Clone(itkIsoDataThresholdCalculatorHFUS self) -> itkIsoDataThresholdCalculatorHFUS_Pointer"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_Clone(self)

    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFUS

    def cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFUS *":
        """cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFUS"""
        return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFUS

        Create a new object of the class itkIsoDataThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFUS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkIsoDataThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkIsoDataThresholdCalculatorHFUS.Clone = new_instancemethod(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_Clone, None, itkIsoDataThresholdCalculatorHFUS)
itkIsoDataThresholdCalculatorHFUS_swigregister = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_swigregister
itkIsoDataThresholdCalculatorHFUS_swigregister(itkIsoDataThresholdCalculatorHFUS)

def itkIsoDataThresholdCalculatorHFUS___New_orig__() -> "itkIsoDataThresholdCalculatorHFUS_Pointer":
    """itkIsoDataThresholdCalculatorHFUS___New_orig__() -> itkIsoDataThresholdCalculatorHFUS_Pointer"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS___New_orig__()

def itkIsoDataThresholdCalculatorHFUS_cast(obj: 'itkLightObject') -> "itkIsoDataThresholdCalculatorHFUS *":
    """itkIsoDataThresholdCalculatorHFUS_cast(itkLightObject obj) -> itkIsoDataThresholdCalculatorHFUS"""
    return _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def iso_data_threshold_calculator(*args, **kwargs):
    """Procedural interface for IsoDataThresholdCalculator"""
    import itk
    instance = itk.IsoDataThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def iso_data_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IsoDataThresholdCalculator, itkTemplate.itkTemplate):
        filter_object = itk.IsoDataThresholdCalculator.values()[0]
    else:
        filter_object = itk.IsoDataThresholdCalculator

    iso_data_threshold_calculator.__doc__ = filter_object.__doc__
    iso_data_threshold_calculator.__doc__ += "\n Args are Input(s) to the filter.\n"
    iso_data_threshold_calculator.__doc__ += "Available Keyword Arguments:\n"
    iso_data_threshold_calculator.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



