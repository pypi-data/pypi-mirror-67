# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkVectorThresholdSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorThresholdSegmentationLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorThresholdSegmentationLevelSetImageFilterPython
            return _itkVectorThresholdSegmentationLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorThresholdSegmentationLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorThresholdSegmentationLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorThresholdSegmentationLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkVariableSizeMatrixPython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkSegmentationLevelSetImageFilterPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkSegmentationLevelSetFunctionPython
import itkLevelSetFunctionPython
import itkFiniteDifferenceFunctionPython
import itkSparseFieldLevelSetImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkImageToImageFilterBPython

def itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_New():
  return itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()


def itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_New():
  return itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()


def itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_New():
  return itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()


def itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_New():
  return itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()

class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2IVF22D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkVectorThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer":
        """__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer":
        """Clone(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self) -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Clone(self)


    def SetMean(self, mean: 'double const &') -> "void":
        """
        SetMean(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self, double const & mean)

        Set/Get mean and covariance
        that will be used to calculate the speed function 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetMean(self, mean)


    def GetMean(self) -> "double const &":
        """GetMean(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self) -> double const &"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetMean(self)


    def SetCovariance(self, cov: 'itkVariableSizeMatrixD') -> "void":
        """SetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self, itkVariableSizeMatrixD cov)"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetCovariance(self, cov)


    def GetCovariance(self) -> "itkVariableSizeMatrixD const &":
        """GetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetCovariance(self)


    def SetThreshold(self, thr: 'double') -> "void":
        """
        SetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self, double thr)

        Set/Get the threshold
        for the Mahanalobis Distance 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetThreshold(self, thr)


    def GetThreshold(self) -> "double":
        """GetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D self) -> double"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetThreshold(self)

    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

    def cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D *":
        """cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.Clone = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Clone, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.SetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.GetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.SetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.GetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.SetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_SetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D.GetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_GetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_swigregister = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_swigregister
itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D)

def itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer":
    """itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_Pointer"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D___New_orig__()

def itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D *":
    """itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID2IVF22D_cast(obj)

class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3IVF33D):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkVectorThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer":
        """__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer":
        """Clone(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self) -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Clone(self)


    def SetMean(self, mean: 'double const &') -> "void":
        """
        SetMean(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self, double const & mean)

        Set/Get mean and covariance
        that will be used to calculate the speed function 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetMean(self, mean)


    def GetMean(self) -> "double const &":
        """GetMean(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self) -> double const &"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetMean(self)


    def SetCovariance(self, cov: 'itkVariableSizeMatrixD') -> "void":
        """SetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self, itkVariableSizeMatrixD cov)"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetCovariance(self, cov)


    def GetCovariance(self) -> "itkVariableSizeMatrixD const &":
        """GetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetCovariance(self)


    def SetThreshold(self, thr: 'double') -> "void":
        """
        SetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self, double thr)

        Set/Get the threshold
        for the Mahanalobis Distance 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetThreshold(self, thr)


    def GetThreshold(self) -> "double":
        """GetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D self) -> double"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetThreshold(self)

    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

    def cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D *":
        """cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.Clone = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Clone, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.SetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.GetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.SetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.GetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.SetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_SetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D.GetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_GetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_swigregister = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_swigregister
itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D)

def itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer":
    """itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_Pointer"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D___New_orig__()

def itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D *":
    """itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterID3IVF33D_cast(obj)

class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IVF22F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkVectorThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer":
        """__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer":
        """Clone(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self) -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Clone(self)


    def SetMean(self, mean: 'double const &') -> "void":
        """
        SetMean(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self, double const & mean)

        Set/Get mean and covariance
        that will be used to calculate the speed function 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetMean(self, mean)


    def GetMean(self) -> "double const &":
        """GetMean(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self) -> double const &"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetMean(self)


    def SetCovariance(self, cov: 'itkVariableSizeMatrixD') -> "void":
        """SetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self, itkVariableSizeMatrixD cov)"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetCovariance(self, cov)


    def GetCovariance(self) -> "itkVariableSizeMatrixD const &":
        """GetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetCovariance(self)


    def SetThreshold(self, thr: 'float') -> "void":
        """
        SetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self, float thr)

        Set/Get the threshold
        for the Mahanalobis Distance 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetThreshold(self, thr)


    def GetThreshold(self) -> "float":
        """GetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F self) -> float"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetThreshold(self)

    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

    def cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F *":
        """cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.Clone = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Clone, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.SetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.GetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.SetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.GetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.SetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_SetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F.GetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_GetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_swigregister = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_swigregister
itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F)

def itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer":
    """itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_Pointer"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F___New_orig__()

def itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F *":
    """itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF2IVF22F_cast(obj)

class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F(itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IVF33F):
    """


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    VectorThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. CREDITS This class was contributed to ITK by Stefan
    Lindenauhttps://www.itk.org/pipermail/insight-
    users/2003-December/005969.html OVERVIEW This class is a level set
    method segmentation filter. It constructs a speed function which is
    close to zero where the Mahalabonian Distance exceeds a certain
    threshold, effectively locking the propagating front onto those edges.
    Elsewhere, the front will propagate quickly. INPUTS This filter
    requires two inputs. The first input is a seed image. This seed image
    must contain an isosurface that you want to use as the seed for your
    segmentation. It can be a binary, graylevel, or floating point image.
    The only requirement is that it contain a closed isosurface that you
    will identify as the seed by setting the IsosurfaceValue parameter of
    the filter. For a binary image you will want to set your isosurface
    value halfway between your on and off values (i.e. for 0's and 1's,
    use an isosurface value of 0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated the feature image has to be a
    Vector Image. For most applications, this is the image that you want
    to segment. The desired isosurface in your seed image should lie
    within the region of your feature image that you are trying to
    segment. Note that this filter does no preprocessing of the feature
    image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the Threshold,
    the Mean and the Covariance. See
    VectorThresholdSegmentationLevelSetFunction for a description of how
    this value affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter

    C++ includes: itkVectorThresholdSegmentationLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer":
        """__New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer":
        """Clone(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self) -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Clone(self)


    def SetMean(self, mean: 'double const &') -> "void":
        """
        SetMean(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self, double const & mean)

        Set/Get mean and covariance
        that will be used to calculate the speed function 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetMean(self, mean)


    def GetMean(self) -> "double const &":
        """GetMean(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self) -> double const &"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetMean(self)


    def SetCovariance(self, cov: 'itkVariableSizeMatrixD') -> "void":
        """SetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self, itkVariableSizeMatrixD cov)"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetCovariance(self, cov)


    def GetCovariance(self) -> "itkVariableSizeMatrixD const &":
        """GetCovariance(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self) -> itkVariableSizeMatrixD"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetCovariance(self)


    def SetThreshold(self, thr: 'float') -> "void":
        """
        SetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self, float thr)

        Set/Get the threshold
        for the Mahanalobis Distance 
        """
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetThreshold(self, thr)


    def GetThreshold(self) -> "float":
        """GetThreshold(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F self) -> float"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetThreshold(self)

    __swig_destroy__ = _itkVectorThresholdSegmentationLevelSetImageFilterPython.delete_itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

    def cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F *":
        """cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F"""
        return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F

        Create a new object of the class itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.Clone = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Clone, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.SetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.GetMean = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetMean, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.SetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.GetCovariance = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetCovariance, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.SetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_SetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F.GetThreshold = new_instancemethod(_itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_GetThreshold, None, itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_swigregister = _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_swigregister
itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_swigregister(itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F)

def itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__() -> "itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer":
    """itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__() -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_Pointer"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F___New_orig__()

def itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast(obj: 'itkLightObject') -> "itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F *":
    """itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast(itkLightObject obj) -> itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F"""
    return _itkVectorThresholdSegmentationLevelSetImageFilterPython.itkVectorThresholdSegmentationLevelSetImageFilterIF3IVF33F_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_threshold_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for VectorThresholdSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.VectorThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def vector_threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VectorThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.VectorThresholdSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.VectorThresholdSegmentationLevelSetImageFilter

    vector_threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    vector_threshold_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    vector_threshold_segmentation_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    vector_threshold_segmentation_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



