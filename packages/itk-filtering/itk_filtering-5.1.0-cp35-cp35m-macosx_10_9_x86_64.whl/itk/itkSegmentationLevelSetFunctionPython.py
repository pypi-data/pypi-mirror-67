# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSegmentationLevelSetFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSegmentationLevelSetFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkSegmentationLevelSetFunctionPython
            return _itkSegmentationLevelSetFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSegmentationLevelSetFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSegmentationLevelSetFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSegmentationLevelSetFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkLevelSetFunctionPython
import itkFiniteDifferenceFunctionPython

def itkSegmentationLevelSetFunctionID3ID3_New():
  return itkSegmentationLevelSetFunctionID3ID3.New()


def itkSegmentationLevelSetFunctionID2ID2_New():
  return itkSegmentationLevelSetFunctionID2ID2.New()


def itkSegmentationLevelSetFunctionIF3IF3_New():
  return itkSegmentationLevelSetFunctionIF3IF3.New()


def itkSegmentationLevelSetFunctionIF2IF2_New():
  return itkSegmentationLevelSetFunctionIF2IF2.New()

class itkSegmentationLevelSetFunctionID2ID2(itkLevelSetFunctionPython.itkLevelSetFunctionID2):
    """


    This object defines the API for a class of function objects which
    perform level set based segmentations. The
    SegmentationLevelSetImageFilter objects use these
    SegmentationLevelSetFunction objects to perform the numerical
    calculations which move a level set front to lock onto image features.

    In order to create a working function object, you must subclass the
    CalculateSpeedImage method to produce a "feature image" that is used
    by the parent LevelSetFunction class as the PropagationSpeed for its
    calculations.

    See:   SegmentationLevelSetImageFilter

    See:   LevelSetFunction

    C++ includes: itkSegmentationLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFeatureImage(self) -> "itkImageD2 const *":
        """
        GetFeatureImage(itkSegmentationLevelSetFunctionID2ID2 self) -> itkImageD2

        Set/Get the image
        which will be used to calculate the speed function. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetFeatureImage(self)


    def SetFeatureImage(self, f: 'itkImageD2') -> "void":
        """SetFeatureImage(itkSegmentationLevelSetFunctionID2ID2 self, itkImageD2 f)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetFeatureImage(self, f)


    def GetSpeedImage(self) -> "itkImageD2 *":
        """
        GetSpeedImage(itkSegmentationLevelSetFunctionID2ID2 self) -> itkImageD2

        Get/Set the image
        used as the speed function in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetSpeedImage(self)


    def SetSpeedImage(self, s: 'itkImageD2') -> "void":
        """SetSpeedImage(itkSegmentationLevelSetFunctionID2ID2 self, itkImageD2 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetSpeedImage(self, s)


    def GetAdvectionImage(self) -> "itkImageFAD22 *":
        """
        GetAdvectionImage(itkSegmentationLevelSetFunctionID2ID2 self) -> itkImageFAD22

        Get/Set the image
        used as the advection field in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetAdvectionImage(self)


    def SetAdvectionImage(self, s: 'itkImageFAD22') -> "void":
        """SetAdvectionImage(itkSegmentationLevelSetFunctionID2ID2 self, itkImageFAD22 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetAdvectionImage(self, s)


    def CalculateSpeedImage(self) -> "void":
        """
        CalculateSpeedImage(itkSegmentationLevelSetFunctionID2ID2 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Propagation speed term.
        See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateSpeedImage(self)


    def CalculateAdvectionImage(self) -> "void":
        """
        CalculateAdvectionImage(itkSegmentationLevelSetFunctionID2ID2 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Advection field term. See
        LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateAdvectionImage(self)


    def AllocateSpeedImage(self) -> "void":
        """
        AllocateSpeedImage(itkSegmentationLevelSetFunctionID2ID2 self)

        Allocates the
        image that will be used for the level set function's Propagation Speed
        term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateSpeedImage(self)


    def AllocateAdvectionImage(self) -> "void":
        """
        AllocateAdvectionImage(itkSegmentationLevelSetFunctionID2ID2 self)

        Allocates
        the image that will be used for the level set function's Advection
        field term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateAdvectionImage(self)


    def ReverseExpansionDirection(self) -> "void":
        """
        ReverseExpansionDirection(itkSegmentationLevelSetFunctionID2ID2 self)

        Determines whether Positive or Negative speed terms will cause surface
        expansion. This method flips the sign of all of the speed, advection,
        etc terms. By convention, filters should be written so that POSITIVE
        speed terms cause surface expansion. Calling this method will toggle
        between the standard POSITIVE EXPANSION convention and the nonstandard
        NEGATIVE EXPANSION convention.

        IMPORTANT: When adding terms to the level-set equation through
        subclassing you may need to override this function so that your new
        terms will be properly adjusted. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_ReverseExpansionDirection(self)

    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionID2ID2

    def cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionID2ID2 *":
        """cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionID2ID2"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionID2ID2

        Create a new object of the class itkSegmentationLevelSetFunctionID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSegmentationLevelSetFunctionID2ID2.GetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetFeatureImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.SetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetFeatureImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.GetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetSpeedImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.SetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetSpeedImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.GetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetAdvectionImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.SetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetAdvectionImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.CalculateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateSpeedImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.CalculateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateAdvectionImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.AllocateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateSpeedImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.AllocateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateAdvectionImage, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2.ReverseExpansionDirection = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_ReverseExpansionDirection, None, itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2_swigregister = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_swigregister
itkSegmentationLevelSetFunctionID2ID2_swigregister(itkSegmentationLevelSetFunctionID2ID2)

def itkSegmentationLevelSetFunctionID2ID2_cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionID2ID2 *":
    """itkSegmentationLevelSetFunctionID2ID2_cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionID2ID2"""
    return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_cast(obj)

class itkSegmentationLevelSetFunctionID3ID3(itkLevelSetFunctionPython.itkLevelSetFunctionID3):
    """


    This object defines the API for a class of function objects which
    perform level set based segmentations. The
    SegmentationLevelSetImageFilter objects use these
    SegmentationLevelSetFunction objects to perform the numerical
    calculations which move a level set front to lock onto image features.

    In order to create a working function object, you must subclass the
    CalculateSpeedImage method to produce a "feature image" that is used
    by the parent LevelSetFunction class as the PropagationSpeed for its
    calculations.

    See:   SegmentationLevelSetImageFilter

    See:   LevelSetFunction

    C++ includes: itkSegmentationLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFeatureImage(self) -> "itkImageD3 const *":
        """
        GetFeatureImage(itkSegmentationLevelSetFunctionID3ID3 self) -> itkImageD3

        Set/Get the image
        which will be used to calculate the speed function. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetFeatureImage(self)


    def SetFeatureImage(self, f: 'itkImageD3') -> "void":
        """SetFeatureImage(itkSegmentationLevelSetFunctionID3ID3 self, itkImageD3 f)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetFeatureImage(self, f)


    def GetSpeedImage(self) -> "itkImageD3 *":
        """
        GetSpeedImage(itkSegmentationLevelSetFunctionID3ID3 self) -> itkImageD3

        Get/Set the image
        used as the speed function in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetSpeedImage(self)


    def SetSpeedImage(self, s: 'itkImageD3') -> "void":
        """SetSpeedImage(itkSegmentationLevelSetFunctionID3ID3 self, itkImageD3 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetSpeedImage(self, s)


    def GetAdvectionImage(self) -> "itkImageFAD33 *":
        """
        GetAdvectionImage(itkSegmentationLevelSetFunctionID3ID3 self) -> itkImageFAD33

        Get/Set the image
        used as the advection field in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetAdvectionImage(self)


    def SetAdvectionImage(self, s: 'itkImageFAD33') -> "void":
        """SetAdvectionImage(itkSegmentationLevelSetFunctionID3ID3 self, itkImageFAD33 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetAdvectionImage(self, s)


    def CalculateSpeedImage(self) -> "void":
        """
        CalculateSpeedImage(itkSegmentationLevelSetFunctionID3ID3 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Propagation speed term.
        See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateSpeedImage(self)


    def CalculateAdvectionImage(self) -> "void":
        """
        CalculateAdvectionImage(itkSegmentationLevelSetFunctionID3ID3 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Advection field term. See
        LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateAdvectionImage(self)


    def AllocateSpeedImage(self) -> "void":
        """
        AllocateSpeedImage(itkSegmentationLevelSetFunctionID3ID3 self)

        Allocates the
        image that will be used for the level set function's Propagation Speed
        term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateSpeedImage(self)


    def AllocateAdvectionImage(self) -> "void":
        """
        AllocateAdvectionImage(itkSegmentationLevelSetFunctionID3ID3 self)

        Allocates
        the image that will be used for the level set function's Advection
        field term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateAdvectionImage(self)


    def ReverseExpansionDirection(self) -> "void":
        """
        ReverseExpansionDirection(itkSegmentationLevelSetFunctionID3ID3 self)

        Determines whether Positive or Negative speed terms will cause surface
        expansion. This method flips the sign of all of the speed, advection,
        etc terms. By convention, filters should be written so that POSITIVE
        speed terms cause surface expansion. Calling this method will toggle
        between the standard POSITIVE EXPANSION convention and the nonstandard
        NEGATIVE EXPANSION convention.

        IMPORTANT: When adding terms to the level-set equation through
        subclassing you may need to override this function so that your new
        terms will be properly adjusted. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_ReverseExpansionDirection(self)

    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionID3ID3

    def cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionID3ID3 *":
        """cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionID3ID3"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionID3ID3

        Create a new object of the class itkSegmentationLevelSetFunctionID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSegmentationLevelSetFunctionID3ID3.GetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetFeatureImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.SetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetFeatureImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.GetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetSpeedImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.SetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetSpeedImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.GetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetAdvectionImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.SetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetAdvectionImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.CalculateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateSpeedImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.CalculateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateAdvectionImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.AllocateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateSpeedImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.AllocateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateAdvectionImage, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3.ReverseExpansionDirection = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_ReverseExpansionDirection, None, itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3_swigregister = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_swigregister
itkSegmentationLevelSetFunctionID3ID3_swigregister(itkSegmentationLevelSetFunctionID3ID3)

def itkSegmentationLevelSetFunctionID3ID3_cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionID3ID3 *":
    """itkSegmentationLevelSetFunctionID3ID3_cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionID3ID3"""
    return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_cast(obj)

class itkSegmentationLevelSetFunctionIF2IF2(itkLevelSetFunctionPython.itkLevelSetFunctionIF2):
    """


    This object defines the API for a class of function objects which
    perform level set based segmentations. The
    SegmentationLevelSetImageFilter objects use these
    SegmentationLevelSetFunction objects to perform the numerical
    calculations which move a level set front to lock onto image features.

    In order to create a working function object, you must subclass the
    CalculateSpeedImage method to produce a "feature image" that is used
    by the parent LevelSetFunction class as the PropagationSpeed for its
    calculations.

    See:   SegmentationLevelSetImageFilter

    See:   LevelSetFunction

    C++ includes: itkSegmentationLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFeatureImage(self) -> "itkImageF2 const *":
        """
        GetFeatureImage(itkSegmentationLevelSetFunctionIF2IF2 self) -> itkImageF2

        Set/Get the image
        which will be used to calculate the speed function. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetFeatureImage(self)


    def SetFeatureImage(self, f: 'itkImageF2') -> "void":
        """SetFeatureImage(itkSegmentationLevelSetFunctionIF2IF2 self, itkImageF2 f)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetFeatureImage(self, f)


    def GetSpeedImage(self) -> "itkImageF2 *":
        """
        GetSpeedImage(itkSegmentationLevelSetFunctionIF2IF2 self) -> itkImageF2

        Get/Set the image
        used as the speed function in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetSpeedImage(self)


    def SetSpeedImage(self, s: 'itkImageF2') -> "void":
        """SetSpeedImage(itkSegmentationLevelSetFunctionIF2IF2 self, itkImageF2 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetSpeedImage(self, s)


    def GetAdvectionImage(self) -> "itkImageFAF22 *":
        """
        GetAdvectionImage(itkSegmentationLevelSetFunctionIF2IF2 self) -> itkImageFAF22

        Get/Set the image
        used as the advection field in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetAdvectionImage(self)


    def SetAdvectionImage(self, s: 'itkImageFAF22') -> "void":
        """SetAdvectionImage(itkSegmentationLevelSetFunctionIF2IF2 self, itkImageFAF22 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetAdvectionImage(self, s)


    def CalculateSpeedImage(self) -> "void":
        """
        CalculateSpeedImage(itkSegmentationLevelSetFunctionIF2IF2 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Propagation speed term.
        See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateSpeedImage(self)


    def CalculateAdvectionImage(self) -> "void":
        """
        CalculateAdvectionImage(itkSegmentationLevelSetFunctionIF2IF2 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Advection field term. See
        LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateAdvectionImage(self)


    def AllocateSpeedImage(self) -> "void":
        """
        AllocateSpeedImage(itkSegmentationLevelSetFunctionIF2IF2 self)

        Allocates the
        image that will be used for the level set function's Propagation Speed
        term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateSpeedImage(self)


    def AllocateAdvectionImage(self) -> "void":
        """
        AllocateAdvectionImage(itkSegmentationLevelSetFunctionIF2IF2 self)

        Allocates
        the image that will be used for the level set function's Advection
        field term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateAdvectionImage(self)


    def ReverseExpansionDirection(self) -> "void":
        """
        ReverseExpansionDirection(itkSegmentationLevelSetFunctionIF2IF2 self)

        Determines whether Positive or Negative speed terms will cause surface
        expansion. This method flips the sign of all of the speed, advection,
        etc terms. By convention, filters should be written so that POSITIVE
        speed terms cause surface expansion. Calling this method will toggle
        between the standard POSITIVE EXPANSION convention and the nonstandard
        NEGATIVE EXPANSION convention.

        IMPORTANT: When adding terms to the level-set equation through
        subclassing you may need to override this function so that your new
        terms will be properly adjusted. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_ReverseExpansionDirection(self)

    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionIF2IF2 *":
        """cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionIF2IF2"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionIF2IF2

        Create a new object of the class itkSegmentationLevelSetFunctionIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSegmentationLevelSetFunctionIF2IF2.GetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetFeatureImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.SetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetFeatureImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.GetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetSpeedImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.SetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetSpeedImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.GetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetAdvectionImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.SetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetAdvectionImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.CalculateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateSpeedImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.CalculateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateAdvectionImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.AllocateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateSpeedImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.AllocateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateAdvectionImage, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2.ReverseExpansionDirection = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_ReverseExpansionDirection, None, itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2_swigregister = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_swigregister
itkSegmentationLevelSetFunctionIF2IF2_swigregister(itkSegmentationLevelSetFunctionIF2IF2)

def itkSegmentationLevelSetFunctionIF2IF2_cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionIF2IF2 *":
    """itkSegmentationLevelSetFunctionIF2IF2_cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionIF2IF2"""
    return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_cast(obj)

class itkSegmentationLevelSetFunctionIF3IF3(itkLevelSetFunctionPython.itkLevelSetFunctionIF3):
    """


    This object defines the API for a class of function objects which
    perform level set based segmentations. The
    SegmentationLevelSetImageFilter objects use these
    SegmentationLevelSetFunction objects to perform the numerical
    calculations which move a level set front to lock onto image features.

    In order to create a working function object, you must subclass the
    CalculateSpeedImage method to produce a "feature image" that is used
    by the parent LevelSetFunction class as the PropagationSpeed for its
    calculations.

    See:   SegmentationLevelSetImageFilter

    See:   LevelSetFunction

    C++ includes: itkSegmentationLevelSetFunction.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetFeatureImage(self) -> "itkImageF3 const *":
        """
        GetFeatureImage(itkSegmentationLevelSetFunctionIF3IF3 self) -> itkImageF3

        Set/Get the image
        which will be used to calculate the speed function. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetFeatureImage(self)


    def SetFeatureImage(self, f: 'itkImageF3') -> "void":
        """SetFeatureImage(itkSegmentationLevelSetFunctionIF3IF3 self, itkImageF3 f)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetFeatureImage(self, f)


    def GetSpeedImage(self) -> "itkImageF3 *":
        """
        GetSpeedImage(itkSegmentationLevelSetFunctionIF3IF3 self) -> itkImageF3

        Get/Set the image
        used as the speed function in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetSpeedImage(self)


    def SetSpeedImage(self, s: 'itkImageF3') -> "void":
        """SetSpeedImage(itkSegmentationLevelSetFunctionIF3IF3 self, itkImageF3 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetSpeedImage(self, s)


    def GetAdvectionImage(self) -> "itkImageFAF33 *":
        """
        GetAdvectionImage(itkSegmentationLevelSetFunctionIF3IF3 self) -> itkImageFAF33

        Get/Set the image
        used as the advection field in the level set equation 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetAdvectionImage(self)


    def SetAdvectionImage(self, s: 'itkImageFAF33') -> "void":
        """SetAdvectionImage(itkSegmentationLevelSetFunctionIF3IF3 self, itkImageFAF33 s)"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetAdvectionImage(self, s)


    def CalculateSpeedImage(self) -> "void":
        """
        CalculateSpeedImage(itkSegmentationLevelSetFunctionIF3IF3 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Propagation speed term.
        See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateSpeedImage(self)


    def CalculateAdvectionImage(self) -> "void":
        """
        CalculateAdvectionImage(itkSegmentationLevelSetFunctionIF3IF3 self)

        This method
        must be defined in a subclass to implement a working function object.
        This method is called before the solver begins its work to produce the
        speed image used as the level set function's Advection field term. See
        LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateAdvectionImage(self)


    def AllocateSpeedImage(self) -> "void":
        """
        AllocateSpeedImage(itkSegmentationLevelSetFunctionIF3IF3 self)

        Allocates the
        image that will be used for the level set function's Propagation Speed
        term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateSpeedImage(self)


    def AllocateAdvectionImage(self) -> "void":
        """
        AllocateAdvectionImage(itkSegmentationLevelSetFunctionIF3IF3 self)

        Allocates
        the image that will be used for the level set function's Advection
        field term. See LevelSetFunction for more information. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateAdvectionImage(self)


    def ReverseExpansionDirection(self) -> "void":
        """
        ReverseExpansionDirection(itkSegmentationLevelSetFunctionIF3IF3 self)

        Determines whether Positive or Negative speed terms will cause surface
        expansion. This method flips the sign of all of the speed, advection,
        etc terms. By convention, filters should be written so that POSITIVE
        speed terms cause surface expansion. Calling this method will toggle
        between the standard POSITIVE EXPANSION convention and the nonstandard
        NEGATIVE EXPANSION convention.

        IMPORTANT: When adding terms to the level-set equation through
        subclassing you may need to override this function so that your new
        terms will be properly adjusted. 
        """
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_ReverseExpansionDirection(self)

    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionIF3IF3 *":
        """cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionIF3IF3"""
        return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionIF3IF3

        Create a new object of the class itkSegmentationLevelSetFunctionIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSegmentationLevelSetFunctionIF3IF3.GetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetFeatureImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.SetFeatureImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetFeatureImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.GetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetSpeedImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.SetSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetSpeedImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.GetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetAdvectionImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.SetAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetAdvectionImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.CalculateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateSpeedImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.CalculateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateAdvectionImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.AllocateSpeedImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateSpeedImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.AllocateAdvectionImage = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateAdvectionImage, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3.ReverseExpansionDirection = new_instancemethod(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_ReverseExpansionDirection, None, itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3_swigregister = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_swigregister
itkSegmentationLevelSetFunctionIF3IF3_swigregister(itkSegmentationLevelSetFunctionIF3IF3)

def itkSegmentationLevelSetFunctionIF3IF3_cast(obj: 'itkLightObject') -> "itkSegmentationLevelSetFunctionIF3IF3 *":
    """itkSegmentationLevelSetFunctionIF3IF3_cast(itkLightObject obj) -> itkSegmentationLevelSetFunctionIF3IF3"""
    return _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_cast(obj)



