# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGradientMagnitudeImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGradientMagnitudeImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkGradientMagnitudeImageFilterPython
            return _itkGradientMagnitudeImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGradientMagnitudeImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGradientMagnitudeImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGradientMagnitudeImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkGradientMagnitudeImageFilterID3ID3_New():
  return itkGradientMagnitudeImageFilterID3ID3.New()


def itkGradientMagnitudeImageFilterID2ID2_New():
  return itkGradientMagnitudeImageFilterID2ID2.New()


def itkGradientMagnitudeImageFilterIF3IF3_New():
  return itkGradientMagnitudeImageFilterIF3IF3.New()


def itkGradientMagnitudeImageFilterIF2IF2_New():
  return itkGradientMagnitudeImageFilterIF2IF2.New()


def itkGradientMagnitudeImageFilterIUS3IUS3_New():
  return itkGradientMagnitudeImageFilterIUS3IUS3.New()


def itkGradientMagnitudeImageFilterIUS2IUS2_New():
  return itkGradientMagnitudeImageFilterIUS2IUS2.New()


def itkGradientMagnitudeImageFilterIUC3IUC3_New():
  return itkGradientMagnitudeImageFilterIUC3IUC3.New()


def itkGradientMagnitudeImageFilterIUC2IUC2_New():
  return itkGradientMagnitudeImageFilterIUC2IUC2.New()


def itkGradientMagnitudeImageFilterISS3ISS3_New():
  return itkGradientMagnitudeImageFilterISS3ISS3.New()


def itkGradientMagnitudeImageFilterISS2ISS2_New():
  return itkGradientMagnitudeImageFilterISS2ISS2.New()

class itkGradientMagnitudeImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterID2ID2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterID2ID2_Pointer":
        """Clone(itkGradientMagnitudeImageFilterID2ID2 self) -> itkGradientMagnitudeImageFilterID2ID2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterID2ID2 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterID2ID2 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterID2ID2 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterID2ID2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterID2ID2 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterID2ID2"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID2ID2

        Create a new object of the class itkGradientMagnitudeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterID2ID2.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_Clone, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterID2ID2)
itkGradientMagnitudeImageFilterID2ID2_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_swigregister
itkGradientMagnitudeImageFilterID2ID2_swigregister(itkGradientMagnitudeImageFilterID2ID2)

def itkGradientMagnitudeImageFilterID2ID2___New_orig__() -> "itkGradientMagnitudeImageFilterID2ID2_Pointer":
    """itkGradientMagnitudeImageFilterID2ID2___New_orig__() -> itkGradientMagnitudeImageFilterID2ID2_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2___New_orig__()

def itkGradientMagnitudeImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterID2ID2 *":
    """itkGradientMagnitudeImageFilterID2ID2_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterID2ID2"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID2ID2_cast(obj)

class itkGradientMagnitudeImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterID3ID3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterID3ID3_Pointer":
        """Clone(itkGradientMagnitudeImageFilterID3ID3 self) -> itkGradientMagnitudeImageFilterID3ID3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterID3ID3 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterID3ID3 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterID3ID3 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterID3ID3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterID3ID3 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterID3ID3"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterID3ID3

        Create a new object of the class itkGradientMagnitudeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterID3ID3.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_Clone, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterID3ID3)
itkGradientMagnitudeImageFilterID3ID3_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_swigregister
itkGradientMagnitudeImageFilterID3ID3_swigregister(itkGradientMagnitudeImageFilterID3ID3)

def itkGradientMagnitudeImageFilterID3ID3___New_orig__() -> "itkGradientMagnitudeImageFilterID3ID3_Pointer":
    """itkGradientMagnitudeImageFilterID3ID3___New_orig__() -> itkGradientMagnitudeImageFilterID3ID3_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3___New_orig__()

def itkGradientMagnitudeImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterID3ID3 *":
    """itkGradientMagnitudeImageFilterID3ID3_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterID3ID3"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterID3ID3_cast(obj)

class itkGradientMagnitudeImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIF2IF2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIF2IF2_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIF2IF2 self) -> itkGradientMagnitudeImageFilterIF2IF2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIF2IF2 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIF2IF2 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIF2IF2 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIF2IF2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIF2IF2 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIF2IF2"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF2IF2

        Create a new object of the class itkGradientMagnitudeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIF2IF2.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_Clone, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIF2IF2)
itkGradientMagnitudeImageFilterIF2IF2_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_swigregister
itkGradientMagnitudeImageFilterIF2IF2_swigregister(itkGradientMagnitudeImageFilterIF2IF2)

def itkGradientMagnitudeImageFilterIF2IF2___New_orig__() -> "itkGradientMagnitudeImageFilterIF2IF2_Pointer":
    """itkGradientMagnitudeImageFilterIF2IF2___New_orig__() -> itkGradientMagnitudeImageFilterIF2IF2_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2___New_orig__()

def itkGradientMagnitudeImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIF2IF2 *":
    """itkGradientMagnitudeImageFilterIF2IF2_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIF2IF2"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF2IF2_cast(obj)

class itkGradientMagnitudeImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIF3IF3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIF3IF3_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIF3IF3 self) -> itkGradientMagnitudeImageFilterIF3IF3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIF3IF3 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIF3IF3 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIF3IF3 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIF3IF3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIF3IF3 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIF3IF3"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIF3IF3

        Create a new object of the class itkGradientMagnitudeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIF3IF3.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_Clone, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIF3IF3)
itkGradientMagnitudeImageFilterIF3IF3_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_swigregister
itkGradientMagnitudeImageFilterIF3IF3_swigregister(itkGradientMagnitudeImageFilterIF3IF3)

def itkGradientMagnitudeImageFilterIF3IF3___New_orig__() -> "itkGradientMagnitudeImageFilterIF3IF3_Pointer":
    """itkGradientMagnitudeImageFilterIF3IF3___New_orig__() -> itkGradientMagnitudeImageFilterIF3IF3_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3___New_orig__()

def itkGradientMagnitudeImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIF3IF3 *":
    """itkGradientMagnitudeImageFilterIF3IF3_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIF3IF3"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIF3IF3_cast(obj)

class itkGradientMagnitudeImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterISS2ISS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterISS2ISS2_Pointer":
        """Clone(itkGradientMagnitudeImageFilterISS2ISS2 self) -> itkGradientMagnitudeImageFilterISS2ISS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterISS2ISS2 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterISS2ISS2 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterISS2ISS2 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterISS2ISS2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterISS2ISS2 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterISS2ISS2"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS2ISS2

        Create a new object of the class itkGradientMagnitudeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterISS2ISS2.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_Clone, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterISS2ISS2)
itkGradientMagnitudeImageFilterISS2ISS2_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_swigregister
itkGradientMagnitudeImageFilterISS2ISS2_swigregister(itkGradientMagnitudeImageFilterISS2ISS2)

def itkGradientMagnitudeImageFilterISS2ISS2___New_orig__() -> "itkGradientMagnitudeImageFilterISS2ISS2_Pointer":
    """itkGradientMagnitudeImageFilterISS2ISS2___New_orig__() -> itkGradientMagnitudeImageFilterISS2ISS2_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2___New_orig__()

def itkGradientMagnitudeImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterISS2ISS2 *":
    """itkGradientMagnitudeImageFilterISS2ISS2_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterISS2ISS2"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS2ISS2_cast(obj)

class itkGradientMagnitudeImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterISS3ISS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterISS3ISS3_Pointer":
        """Clone(itkGradientMagnitudeImageFilterISS3ISS3 self) -> itkGradientMagnitudeImageFilterISS3ISS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterISS3ISS3 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterISS3ISS3 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterISS3ISS3 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterISS3ISS3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterISS3ISS3 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterISS3ISS3"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterISS3ISS3

        Create a new object of the class itkGradientMagnitudeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterISS3ISS3.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_Clone, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterISS3ISS3)
itkGradientMagnitudeImageFilterISS3ISS3_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_swigregister
itkGradientMagnitudeImageFilterISS3ISS3_swigregister(itkGradientMagnitudeImageFilterISS3ISS3)

def itkGradientMagnitudeImageFilterISS3ISS3___New_orig__() -> "itkGradientMagnitudeImageFilterISS3ISS3_Pointer":
    """itkGradientMagnitudeImageFilterISS3ISS3___New_orig__() -> itkGradientMagnitudeImageFilterISS3ISS3_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3___New_orig__()

def itkGradientMagnitudeImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterISS3ISS3 *":
    """itkGradientMagnitudeImageFilterISS3ISS3_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterISS3ISS3"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterISS3ISS3_cast(obj)

class itkGradientMagnitudeImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIUC2IUC2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIUC2IUC2_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIUC2IUC2 self) -> itkGradientMagnitudeImageFilterIUC2IUC2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIUC2IUC2 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIUC2IUC2 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIUC2IUC2 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIUC2IUC2 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUC2IUC2"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC2IUC2

        Create a new object of the class itkGradientMagnitudeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIUC2IUC2.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_Clone, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUC2IUC2)
itkGradientMagnitudeImageFilterIUC2IUC2_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_swigregister
itkGradientMagnitudeImageFilterIUC2IUC2_swigregister(itkGradientMagnitudeImageFilterIUC2IUC2)

def itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__() -> "itkGradientMagnitudeImageFilterIUC2IUC2_Pointer":
    """itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__() -> itkGradientMagnitudeImageFilterIUC2IUC2_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2___New_orig__()

def itkGradientMagnitudeImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUC2IUC2 *":
    """itkGradientMagnitudeImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUC2IUC2"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC2IUC2_cast(obj)

class itkGradientMagnitudeImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIUC3IUC3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIUC3IUC3_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIUC3IUC3 self) -> itkGradientMagnitudeImageFilterIUC3IUC3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIUC3IUC3 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIUC3IUC3 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIUC3IUC3 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIUC3IUC3 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUC3IUC3"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUC3IUC3

        Create a new object of the class itkGradientMagnitudeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIUC3IUC3.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_Clone, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUC3IUC3)
itkGradientMagnitudeImageFilterIUC3IUC3_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_swigregister
itkGradientMagnitudeImageFilterIUC3IUC3_swigregister(itkGradientMagnitudeImageFilterIUC3IUC3)

def itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__() -> "itkGradientMagnitudeImageFilterIUC3IUC3_Pointer":
    """itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__() -> itkGradientMagnitudeImageFilterIUC3IUC3_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3___New_orig__()

def itkGradientMagnitudeImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUC3IUC3 *":
    """itkGradientMagnitudeImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUC3IUC3"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUC3IUC3_cast(obj)

class itkGradientMagnitudeImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIUS2IUS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIUS2IUS2_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIUS2IUS2 self) -> itkGradientMagnitudeImageFilterIUS2IUS2_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIUS2IUS2 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIUS2IUS2 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIUS2IUS2 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIUS2IUS2 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUS2IUS2"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS2IUS2

        Create a new object of the class itkGradientMagnitudeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIUS2IUS2.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_Clone, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUS2IUS2)
itkGradientMagnitudeImageFilterIUS2IUS2_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_swigregister
itkGradientMagnitudeImageFilterIUS2IUS2_swigregister(itkGradientMagnitudeImageFilterIUS2IUS2)

def itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__() -> "itkGradientMagnitudeImageFilterIUS2IUS2_Pointer":
    """itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__() -> itkGradientMagnitudeImageFilterIUS2IUS2_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2___New_orig__()

def itkGradientMagnitudeImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUS2IUS2 *":
    """itkGradientMagnitudeImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUS2IUS2"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS2IUS2_cast(obj)

class itkGradientMagnitudeImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Computes the gradient magnitude of an image region at each pixel.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator  \\sphinx
    \\sphinxexample{Filtering/ImageGradient/ComputeGradientM
    agnitude,Compute Gradient Magnitude Of Grayscale Image} \\endsphinx

    C++ includes: itkGradientMagnitudeImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGradientMagnitudeImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkGradientMagnitudeImageFilterIUS3IUS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGradientMagnitudeImageFilterIUS3IUS3_Pointer":
        """Clone(itkGradientMagnitudeImageFilterIUS3IUS3 self) -> itkGradientMagnitudeImageFilterIUS3IUS3_Pointer"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_Clone(self)


    def GenerateInputRequestedRegion(self) -> "void":
        """
        GenerateInputRequestedRegion(itkGradientMagnitudeImageFilterIUS3IUS3 self)

        GradientMagnitudeImageFilter needs a larger input requested region
        than the output requested region (larger by the kernel size to
        calculate derivatives). As such, GradientMagnitudeImageFilter needs to
        provide an implementation for GenerateInputRequestedRegion() in order
        to inform the pipeline execution model.

        See:  ImageToImageFilter::GenerateInputRequestedRegion() 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GenerateInputRequestedRegion(self)


    def SetUseImageSpacingOn(self) -> "void":
        """
        SetUseImageSpacingOn(itkGradientMagnitudeImageFilterIUS3IUS3 self)

        Use the image
        spacing information in calculations. Use this option if you want
        derivatives in physical space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOn(self)


    def SetUseImageSpacingOff(self) -> "void":
        """
        SetUseImageSpacingOff(itkGradientMagnitudeImageFilterIUS3IUS3 self)

        Ignore the
        image spacing. Use this option if you want derivatives in isotropic
        pixel space. Default is UseImageSpacingOn. 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkGradientMagnitudeImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get whether
        or not the filter will use the spacing of the input image in its
        calculations 
        """
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool":
        """GetUseImageSpacing(itkGradientMagnitudeImageFilterIUS3IUS3 self) -> bool"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GetUseImageSpacing(self)

    InputHasNumericTraitsCheck = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkGradientMagnitudeImageFilterPython.delete_itkGradientMagnitudeImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUS3IUS3"""
        return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGradientMagnitudeImageFilterIUS3IUS3

        Create a new object of the class itkGradientMagnitudeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientMagnitudeImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGradientMagnitudeImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGradientMagnitudeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGradientMagnitudeImageFilterIUS3IUS3.Clone = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_Clone, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3.GenerateInputRequestedRegion = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GenerateInputRequestedRegion, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3.SetUseImageSpacingOn = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOn, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3.SetUseImageSpacingOff = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacingOff, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3.SetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_SetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3.GetUseImageSpacing = new_instancemethod(_itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_GetUseImageSpacing, None, itkGradientMagnitudeImageFilterIUS3IUS3)
itkGradientMagnitudeImageFilterIUS3IUS3_swigregister = _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_swigregister
itkGradientMagnitudeImageFilterIUS3IUS3_swigregister(itkGradientMagnitudeImageFilterIUS3IUS3)

def itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__() -> "itkGradientMagnitudeImageFilterIUS3IUS3_Pointer":
    """itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__() -> itkGradientMagnitudeImageFilterIUS3IUS3_Pointer"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3___New_orig__()

def itkGradientMagnitudeImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkGradientMagnitudeImageFilterIUS3IUS3 *":
    """itkGradientMagnitudeImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkGradientMagnitudeImageFilterIUS3IUS3"""
    return _itkGradientMagnitudeImageFilterPython.itkGradientMagnitudeImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def gradient_magnitude_image_filter(*args, **kwargs):
    """Procedural interface for GradientMagnitudeImageFilter"""
    import itk
    instance = itk.GradientMagnitudeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def gradient_magnitude_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GradientMagnitudeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GradientMagnitudeImageFilter.values()[0]
    else:
        filter_object = itk.GradientMagnitudeImageFilter

    gradient_magnitude_image_filter.__doc__ = filter_object.__doc__
    gradient_magnitude_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    gradient_magnitude_image_filter.__doc__ += "Available Keyword Arguments:\n"
    gradient_magnitude_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



