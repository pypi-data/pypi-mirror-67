# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSignedDanielssonDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSignedDanielssonDistanceMapImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSignedDanielssonDistanceMapImageFilterPython
            return _itkSignedDanielssonDistanceMapImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSignedDanielssonDistanceMapImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSignedDanielssonDistanceMapImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSignedDanielssonDistanceMapImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkSignedDanielssonDistanceMapImageFilterIUS3ID3_New():
  return itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New()


def itkSignedDanielssonDistanceMapImageFilterIUS2ID2_New():
  return itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New()


def itkSignedDanielssonDistanceMapImageFilterIUS3IF3_New():
  return itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New()


def itkSignedDanielssonDistanceMapImageFilterIUS2IF2_New():
  return itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New()


def itkSignedDanielssonDistanceMapImageFilterIUC3ID3_New():
  return itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New()


def itkSignedDanielssonDistanceMapImageFilterIUC2ID2_New():
  return itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New()


def itkSignedDanielssonDistanceMapImageFilterIUC3IF3_New():
  return itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New()


def itkSignedDanielssonDistanceMapImageFilterIUC2IF2_New():
  return itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New()


def itkSignedDanielssonDistanceMapImageFilterID3ID3_New():
  return itkSignedDanielssonDistanceMapImageFilterID3ID3.New()


def itkSignedDanielssonDistanceMapImageFilterID2ID2_New():
  return itkSignedDanielssonDistanceMapImageFilterID2ID2.New()


def itkSignedDanielssonDistanceMapImageFilterIF3IF3_New():
  return itkSignedDanielssonDistanceMapImageFilterIF3IF3.New()


def itkSignedDanielssonDistanceMapImageFilterIF2IF2_New():
  return itkSignedDanielssonDistanceMapImageFilterIF2IF2.New()


def itkSignedDanielssonDistanceMapImageFilterISS3ISS3_New():
  return itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New()


def itkSignedDanielssonDistanceMapImageFilterISS2ISS2_New():
  return itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New()

class itkSignedDanielssonDistanceMapImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterID2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterID2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageD2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageD2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterID2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterID2ID2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterID2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterID2ID2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_Clone, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterID2ID2)
itkSignedDanielssonDistanceMapImageFilterID2ID2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_swigregister
itkSignedDanielssonDistanceMapImageFilterID2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterID2ID2)

def itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterID2ID2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterID2ID2 *":
    """itkSignedDanielssonDistanceMapImageFilterID2ID2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterID2ID2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID2ID2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterID3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterID3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageD3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageD3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterID3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterID3ID3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterID3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterID3ID3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_Clone, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterID3ID3)
itkSignedDanielssonDistanceMapImageFilterID3ID3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_swigregister
itkSignedDanielssonDistanceMapImageFilterID3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterID3ID3)

def itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterID3ID3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterID3ID3 *":
    """itkSignedDanielssonDistanceMapImageFilterID3ID3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterID3ID3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterID3ID3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageF2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageF2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIF2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIF2IF2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIF2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIF2IF2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_Clone, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIF2IF2)
itkSignedDanielssonDistanceMapImageFilterIF2IF2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_swigregister
itkSignedDanielssonDistanceMapImageFilterIF2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIF2IF2)

def itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIF2IF2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIF2IF2 *":
    """itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIF2IF2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF2IF2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageF3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageF3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIF3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIF3IF3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIF3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIF3IF3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_Clone, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIF3IF3)
itkSignedDanielssonDistanceMapImageFilterIF3IF3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_swigregister
itkSignedDanielssonDistanceMapImageFilterIF3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIF3IF3)

def itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIF3IF3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIF3IF3 *":
    """itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIF3IF3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIF3IF3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageSS2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageSS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageSS2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageSS2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterISS2ISS2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterISS2ISS2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Clone, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterISS2ISS2)
itkSignedDanielssonDistanceMapImageFilterISS2ISS2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_swigregister
itkSignedDanielssonDistanceMapImageFilterISS2ISS2_swigregister(itkSignedDanielssonDistanceMapImageFilterISS2ISS2)

def itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterISS2ISS2 *":
    """itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterISS2ISS2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS2ISS2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageSS3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageSS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageSS3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageSS3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterISS3ISS3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterISS3ISS3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Clone, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterISS3ISS3)
itkSignedDanielssonDistanceMapImageFilterISS3ISS3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_swigregister
itkSignedDanielssonDistanceMapImageFilterISS3ISS3_swigregister(itkSignedDanielssonDistanceMapImageFilterISS3ISS3)

def itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterISS3ISS3 *":
    """itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterISS3ISS3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterISS3ISS3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUC2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageUC2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUC2ID2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2ID2)
itkSignedDanielssonDistanceMapImageFilterIUC2ID2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_swigregister
itkSignedDanielssonDistanceMapImageFilterIUC2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC2ID2)

def itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC2ID2 *":
    """itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC2ID2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2ID2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUC2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageUC2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUC2IF2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC2IF2)
itkSignedDanielssonDistanceMapImageFilterIUC2IF2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_swigregister
itkSignedDanielssonDistanceMapImageFilterIUC2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC2IF2)

def itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC2IF2 *":
    """itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC2IF2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC2IF2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUC3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageUC3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUC3ID3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3ID3)
itkSignedDanielssonDistanceMapImageFilterIUC3ID3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_swigregister
itkSignedDanielssonDistanceMapImageFilterIUC3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC3ID3)

def itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC3ID3 *":
    """itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC3ID3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3ID3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUC3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageUC3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUC3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUC3IF3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUC3IF3)
itkSignedDanielssonDistanceMapImageFilterIUC3IF3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_swigregister
itkSignedDanielssonDistanceMapImageFilterIUC3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUC3IF3)

def itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUC3IF3 *":
    """itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUC3IF3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUC3IF3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUS2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageUS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageD2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS2ID2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUS2ID2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2ID2)
itkSignedDanielssonDistanceMapImageFilterIUS2ID2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_swigregister
itkSignedDanielssonDistanceMapImageFilterIUS2ID2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS2ID2)

def itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS2ID2 *":
    """itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS2ID2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2ID2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUS2 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageUS2

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF2 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageF2

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO22 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS2IF2 self) -> itkImageO22

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUS2IF2.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS2IF2)
itkSignedDanielssonDistanceMapImageFilterIUS2IF2_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_swigregister
itkSignedDanielssonDistanceMapImageFilterIUS2IF2_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS2IF2)

def itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS2IF2 *":
    """itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS2IF2"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS2IF2_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUS3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageUS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageD3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageD3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS3ID3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUS3ID3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3ID3)
itkSignedDanielssonDistanceMapImageFilterIUS3ID3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_swigregister
itkSignedDanielssonDistanceMapImageFilterIUS3ID3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS3ID3)

def itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS3ID3 *":
    """itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS3ID3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3ID3_cast(obj)

class itkSignedDanielssonDistanceMapImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    """


    This filter computes the signed distance map of the input image as an
    approximation with pixel accuracy to the Euclidean distance.

    This class is parameterized over the type of the input image and the
    type of the output image.

    For purposes of evaluating the signed distance map, the input is
    assumed to be binary composed of pixels with value 0 and non-zero.

    The inside is considered as having negative distances. Outside is
    treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    As a convention, the distance is evaluated from the boundary of the ON
    pixels.

    The filter returns A signed distance map with the approximation to the
    euclidean distance.

    A voronoi partition. (See itkDanielssonDistanceMapImageFilter)

    A vector map containing the component of the vector relating the
    current pixel with the closest point of the closest object to this
    pixel. Given that the components of the distance are computed in
    "pixels", the vector is represented by an itk::Offset. That is,
    physical coordinates are not used. (See
    itkDanielssonDistanceMapImageFilter)

    This filter internally uses the DanielssonDistanceMap filter. This
    filter is N-dimensional.

    See:  itkDanielssonDistanceMapImageFilter  \\sphinx
    \\sphinxexample{Filtering/DistanceMap/SignedDistanceMapO
    fBinary,Signed Distance Map Of Binary Image} \\endsphinx

    C++ includes: itkSignedDanielssonDistanceMapImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
        """Clone(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Clone(self)


    def SetSquaredDistance(self, _arg: 'bool const') -> "void":
        """
        SetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the
        distance should be squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance(self, _arg)


    def GetSquaredDistance(self) -> "bool const &":
        """
        GetSquaredDistance(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get the distance
        squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance(self)


    def SquaredDistanceOn(self) -> "void":
        """
        SquaredDistanceOn(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set On/Off if the
        distance is squared. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn(self)


    def SquaredDistanceOff(self) -> "void":
        """SquaredDistanceOff(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff(self)


    def SetUseImageSpacing(self, _arg: 'bool const') -> "void":
        """
        SetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if image
        spacing should be used in computing distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing(self, _arg)


    def GetUseImageSpacing(self) -> "bool const &":
        """
        GetUseImageSpacing(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get whether
        spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing(self)


    def UseImageSpacingOn(self) -> "void":
        """
        UseImageSpacingOn(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set On/Off
        whether spacing is used. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn(self)


    def UseImageSpacingOff(self) -> "void":
        """UseImageSpacingOff(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff(self)


    def SetInsideIsPositive(self, _arg: 'bool const') -> "void":
        """
        SetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self, bool const _arg)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetInsideIsPositive(self, _arg)


    def GetInsideIsPositive(self) -> "bool const &":
        """
        GetInsideIsPositive(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> bool const &

        Get if the
        inside represents positive values in the signed distance map. See
        GetInsideIsPositive() 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetInsideIsPositive(self)


    def InsideIsPositiveOn(self) -> "void":
        """
        InsideIsPositiveOn(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)

        Set if the
        inside represents positive values in the signed distance map. By
        convention ON pixels are treated as inside pixels. Default is true. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn(self)


    def InsideIsPositiveOff(self) -> "void":
        """InsideIsPositiveOff(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self)"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff(self)


    def GetVoronoiMap(self) -> "itkImageUS3 *":
        """
        GetVoronoiMap(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageUS3

        Get Voronoi Map This
        map shows for each pixel what object is closest to it. Each object
        should be labeled by a number (larger than 0), so the map has a value
        for each pixel corresponding to the label of the closest object. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap(self)


    def GetDistanceMap(self) -> "itkImageF3 *":
        """
        GetDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageF3

        Get Distance map
        image. The distance map is shown as a gray value image depending on
        the pixel type of the output image. Regarding the source image,
        background should be dark (gray value = 0) and object should have a
        gray value larger than 0. The minimal distance is calculated on the
        object frontier, and the output image gives for each pixel its minimal
        distance from the object (if there is more than one object the closest
        object is considered). 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap(self)


    def GetVectorDistanceMap(self) -> "itkImageO33 *":
        """
        GetVectorDistanceMap(itkSignedDanielssonDistanceMapImageFilterIUS3IF3 self) -> itkImageO33

        Get vector
        field of distances. 
        """
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap(self)

    IntConvertibleToInputCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_IntConvertibleToInputCheck
    InputHasNumericTraitsCheck = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSignedDanielssonDistanceMapImageFilterPython.delete_itkSignedDanielssonDistanceMapImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3"""
        return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkSignedDanielssonDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSignedDanielssonDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSignedDanielssonDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSignedDanielssonDistanceMapImageFilterIUS3IF3.Clone = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Clone, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.SetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetSquaredDistance = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetSquaredDistance, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.SquaredDistanceOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.SquaredDistanceOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SquaredDistanceOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.SetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetUseImageSpacing = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetUseImageSpacing, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.UseImageSpacingOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.UseImageSpacingOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_UseImageSpacingOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.SetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_SetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetInsideIsPositive = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetInsideIsPositive, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.InsideIsPositiveOn = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.InsideIsPositiveOff = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetVoronoiMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVoronoiMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3.GetVectorDistanceMap = new_instancemethod(_itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_GetVectorDistanceMap, None, itkSignedDanielssonDistanceMapImageFilterIUS3IF3)
itkSignedDanielssonDistanceMapImageFilterIUS3IF3_swigregister = _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_swigregister
itkSignedDanielssonDistanceMapImageFilterIUS3IF3_swigregister(itkSignedDanielssonDistanceMapImageFilterIUS3IF3)

def itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__() -> "itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer":
    """itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__() -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3_Pointer"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3___New_orig__()

def itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkSignedDanielssonDistanceMapImageFilterIUS3IF3 *":
    """itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast(itkLightObject obj) -> itkSignedDanielssonDistanceMapImageFilterIUS3IF3"""
    return _itkSignedDanielssonDistanceMapImageFilterPython.itkSignedDanielssonDistanceMapImageFilterIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def signed_danielsson_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for SignedDanielssonDistanceMapImageFilter"""
    import itk
    instance = itk.SignedDanielssonDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def signed_danielsson_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SignedDanielssonDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SignedDanielssonDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.SignedDanielssonDistanceMapImageFilter

    signed_danielsson_distance_map_image_filter.__doc__ = filter_object.__doc__
    signed_danielsson_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    signed_danielsson_distance_map_image_filter.__doc__ += "Available Keyword Arguments:\n"
    signed_danielsson_distance_map_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



