# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMaskedFFTNormalizedCorrelationImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMaskedFFTNormalizedCorrelationImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkMaskedFFTNormalizedCorrelationImageFilterPython
            return _itkMaskedFFTNormalizedCorrelationImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMaskedFFTNormalizedCorrelationImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMaskedFFTNormalizedCorrelationImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMaskedFFTNormalizedCorrelationImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkImageRegionPython
import itkSizePython
import pyBasePython
import ITKCommonBasePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.New()


def itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.New()


def itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_New():
  return itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.New()

class itkMaskedFFTNormalizedCorrelationImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageD2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageD2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageD2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageD2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageD2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterID2ID2)

def itkMaskedFFTNormalizedCorrelationImageFilterID2ID2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterID2ID2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID2ID2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID2ID2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2ID2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterID2IF2(itkImageToImageFilterAPython.itkImageToImageFilterID2IF2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageD2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageD2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageD2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageD2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, itkImageD2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageD2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> itkImageD2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterID2IF2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterID2IF2)

def itkMaskedFFTNormalizedCorrelationImageFilterID2IF2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterID2IF2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID2IF2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID2IF2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID2IF2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageD3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageD3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageD3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterID3ID3)

def itkMaskedFFTNormalizedCorrelationImageFilterID3ID3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterID3ID3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID3ID3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID3ID3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3ID3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterID3IF3(itkImageToImageFilterAPython.itkImageToImageFilterID3IF3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageD3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageD3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageD3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageD3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageD3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageD3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, itkImageD3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageD3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> itkImageD3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterID3IF3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterID3IF3)

def itkMaskedFFTNormalizedCorrelationImageFilterID3IF3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterID3IF3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterID3IF3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterID3IF3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterID3IF3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIF2ID2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageF2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageF2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageF2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageF2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageF2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2)

def itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2ID2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageF2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageF2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageF2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageF2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, itkImageF2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageF2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2)

def itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF2IF2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIF3ID3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageF3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageF3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageF3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3)

def itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3ID3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageF3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageF3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageF3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageF3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageF3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageF3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, itkImageF3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageF3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3)

def itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIF3IF3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ID2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageSS2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageSS2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageSS2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageSS2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageSS2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2)

def itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2ID2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterISS2IF2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageSS2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageSS2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageSS2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageSS2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, itkImageSS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageSS2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> itkImageSS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2)

def itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS2IF2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ID3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageSS3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageSS3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageSS3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageSS3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageSS3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3)

def itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3ID3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterISS3IF3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageSS3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageSS3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageSS3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageSS3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageSS3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageSS3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageSS3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, itkImageSS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageSS3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> itkImageSS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3)

def itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterISS3IF3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUC2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUC2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUC2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUC2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUC2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2)

def itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2ID2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUC2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUC2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUC2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUC2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, itkImageUC2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUC2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> itkImageUC2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2)

def itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC2IF2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUC3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUC3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUC3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUC3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUC3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3)

def itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3ID3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUC3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUC3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUC3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUC3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUC3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUC3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUC3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, itkImageUC3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUC3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> itkImageUC3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3)

def itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUC3IF3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUS2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUS2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUS2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUS2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUS2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUS2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUS2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUS2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2)

def itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2ID2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUS2') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUS2 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUS2') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUS2 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUS2') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUS2 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUS2') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, itkImageUS2 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUS2 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> itkImageUS2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2)

def itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS2IF2_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUS3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUS3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUS3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUS3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUS3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUS3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUS3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUS3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "double":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> double

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'double') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self, double _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3)

def itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3ID3_cast(obj)

class itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    """


    Calculate masked normalized cross correlation using FFTs.

    This filter calculates the masked normalized cross correlation (NCC)
    of two images under masks using FFTs instead of spatial correlation.
    It is much faster than spatial correlation for reasonably large
    structuring elements. This filter is not equivalent to simply masking
    the images first and then correlating them; the latter approach yields
    incorrect results because the zeros in the images still affect the
    metric in the correlation process. This filter implements the masked
    NCC correctly so that the masked-out regions are completely ignored.
    The fundamental difference is described in detail in the references
    below. If the masks are set to images of all ones, the result of this
    filter is the same as standard NCC.

    Inputs: Two images are required as inputs, fixedImage and movingImage,
    and two are optional, fixedMask and movingMask. In the context of
    correlation, inputs are often defined as: "image" and "template".
    In this filter, the fixedImage plays the role of the image, and the
    movingImage plays the role of the template. However, this filter is
    capable of correlating any two images and is not restricted to small
    movingImages (templates). In the fixedMask and movingMask, non-zero
    positive values indicate locations of useful information in the
    corresponding image, whereas zero and negative values indicate
    locations that should be masked out (ignored). Internally, the masks
    are converted to have values of only 0 and 1. For each optional mask
    that is not set, the filter internally creates an image of ones, which
    is equivalent to not masking the image. Thus, if both masks are not
    set, the result will be equivalent to unmasked NCC. For example, if
    only a mask for the fixed image is needed, the movingMask can either
    not be set or can be set to an image of ones.

    Optional parameters: The RequiredNumberOfOverlappingPixels enables the
    user to specify the minimum number of voxels of the two masks that
    must overlap; any location in the correlation map that results from
    fewer than this number of voxels will be set to zero. Larger values
    zero-out pixels on a larger border around the correlation image. Thus,
    larger values remove less stable computations but also limit the
    capture range. If RequiredNumberOfOverlappingPixels is set to 0, the
    default, no zeroing will take place.

    The RequiredFractionOfOverlappingPixels enables the user to specify a
    fraction of the maximum number of overlapping pixels that need to
    overlap; any location in the correlation map that results from fewer
    than the product of this fraction and the internally computed maximum
    number of overlapping pixels will be set to zero. The value ranges
    between 0.0 and 1.0. This is very useful when the user does does not
    know beforehand the maximum number of pixels of the masks that will
    overlap. For example, when the masks have strange shapes, it is
    difficult to predict how the correlation of the masks will interact
    and what the maximum overlap will be. It is also useful when the mask
    shapes or sizes change because it is relative to the internally
    computed maximum of the overlap. Larger values zero-out pixels on a
    larger border around the correlation image. Thus, larger values remove
    less stable computations but also limit the capture range. Experiments
    have shown that a value between 0.1 and 0.6 works well for images with
    significant overlap and between 0.05 and 0.1 for images with little
    overlap (such as in stitching applications). If
    RequiredFractionOfOverlappingPixels is set to 0, the default, no
    zeroing will take place.

    The user can either specify RequiredNumberOfOverlappingPixels or
    RequiredFractionOfOverlappingPixels (or both or none). Internally, the
    number of required pixels resulting from both of these methods is
    calculated and the one that gives the largest number of pixels is
    chosen. Since these both default to 0, if a user only sets one, the
    other is ignored.

    Image size: fixedImage and movingImage need not be the same size, but
    fixedMask must be the same size as fixedImage, and movingMask must be
    the same size as movingImage. Furthermore, whereas some algorithms
    require that the "template" be smaller than the "image" because of
    errors in the regions where the two are not fully overlapping, this
    filter has no such restriction.

    Image spacing: Since the computations are done in the pixel domain,
    all input images must have the same spacing.

    Outputs; The output is an image of RealPixelType that is the masked
    NCC of the two images and its values range from -1.0 to 1.0. The size
    of this NCC image is, by definition, size(fixedImage) +
    size(movingImage) - 1.

    Example filter usage:

    WARNING:  The pixel type of the output image must be of real type
    (float or double). ConceptChecking is used to enforce the output pixel
    type. You will get a compilation error if the pixel type of the output
    image is not float or double.  References: 1) D. Padfield. "Masked
    object registration in the Fourier domain." Transactions on Image
    Processing. 2) D. Padfield. "Masked FFT registration". In Proc.
    Computer Vision and Pattern Recognition, 2010.

    : Dirk Padfield, GE Global Research, padfield@research.ge.com
    \\sphinx \\sphinxexample{Filtering/Convolution/NormalizedCorrelat
    ionUsingFFTWithMaskImages,Normalized Correlation Using FFT With Mask
    Images For Input Images} \\endsphinx

    C++ includes: itkMaskedFFTNormalizedCorrelationImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer":
        """__New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer":
        """Clone(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Clone(self)


    def SetFixedImage(self, _arg: 'itkImageUS3') -> "void":
        """SetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetFixedImage(self, _arg)


    def GetFixedImage(self) -> "itkImageUS3 const *":
        """GetFixedImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetFixedImage(self)


    def SetMovingImage(self, _arg: 'itkImageUS3') -> "void":
        """SetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetMovingImage(self, _arg)


    def GetMovingImage(self) -> "itkImageUS3 const *":
        """GetMovingImage(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMovingImage(self)


    def SetFixedImageMask(self, _arg: 'itkImageUS3') -> "void":
        """SetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetFixedImageMask(self, _arg)


    def GetFixedImageMask(self) -> "itkImageUS3 const *":
        """GetFixedImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetFixedImageMask(self)


    def SetMovingImageMask(self, _arg: 'itkImageUS3') -> "void":
        """SetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, itkImageUS3 _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetMovingImageMask(self, _arg)


    def GetMovingImageMask(self) -> "itkImageUS3 const *":
        """GetMovingImageMask(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> itkImageUS3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMovingImageMask(self)


    def SetRequiredNumberOfOverlappingPixels(self, _arg: 'unsigned long const') -> "void":
        """
        SetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, unsigned long const _arg)

        Set and get the required number of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetRequiredNumberOfOverlappingPixels(self, _arg)


    def GetRequiredNumberOfOverlappingPixels(self) -> "unsigned long":
        """GetRequiredNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> unsigned long"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetRequiredNumberOfOverlappingPixels(self)


    def GetRequiredFractionOfOverlappingPixels(self) -> "float":
        """
        GetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> float

        Set and get the
        required fraction of overlapping pixels 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetRequiredFractionOfOverlappingPixels(self)


    def SetRequiredFractionOfOverlappingPixels(self, _arg: 'float') -> "void":
        """SetRequiredFractionOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self, float _arg)"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetRequiredFractionOfOverlappingPixels(self, _arg)


    def GetMaximumNumberOfOverlappingPixels(self) -> "unsigned long":
        """
        GetMaximumNumberOfOverlappingPixels(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 self) -> unsigned long

        Get the maximum number of overlapping pixels. 
        """
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMaximumNumberOfOverlappingPixels(self)

    OutputPixelTypeIsFloatingPointCheck = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_OutputPixelTypeIsFloatingPointCheck
    __swig_destroy__ = _itkMaskedFFTNormalizedCorrelationImageFilterPython.delete_itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3

    def cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 *":
        """cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3"""
        return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3

        Create a new object of the class itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.Clone = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Clone, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetFixedImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetFixedImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetMovingImage = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMovingImage, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetFixedImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetFixedImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetMovingImageMask = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMovingImageMask, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetRequiredNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetRequiredNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.SetRequiredFractionOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_SetRequiredFractionOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3.GetMaximumNumberOfOverlappingPixels = new_instancemethod(_itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_GetMaximumNumberOfOverlappingPixels, None, itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_swigregister = _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_swigregister
itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_swigregister(itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3)

def itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3___New_orig__() -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3___New_orig__() -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_Pointer"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3___New_orig__()

def itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_cast(obj: 'itkLightObject') -> "itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3 *":
    """itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_cast(itkLightObject obj) -> itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3"""
    return _itkMaskedFFTNormalizedCorrelationImageFilterPython.itkMaskedFFTNormalizedCorrelationImageFilterIUS3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def masked_fft_normalized_correlation_image_filter(*args, **kwargs):
    """Procedural interface for MaskedFFTNormalizedCorrelationImageFilter"""
    import itk
    instance = itk.MaskedFFTNormalizedCorrelationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def masked_fft_normalized_correlation_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MaskedFFTNormalizedCorrelationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MaskedFFTNormalizedCorrelationImageFilter.values()[0]
    else:
        filter_object = itk.MaskedFFTNormalizedCorrelationImageFilter

    masked_fft_normalized_correlation_image_filter.__doc__ = filter_object.__doc__
    masked_fft_normalized_correlation_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    masked_fft_normalized_correlation_image_filter.__doc__ += "Available Keyword Arguments:\n"
    masked_fft_normalized_correlation_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



