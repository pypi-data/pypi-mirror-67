# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkRealToHalfHermitianForwardFFTImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRealToHalfHermitianForwardFFTImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRealToHalfHermitianForwardFFTImageFilterPython
            return _itkRealToHalfHermitianForwardFFTImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRealToHalfHermitianForwardFFTImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRealToHalfHermitianForwardFFTImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRealToHalfHermitianForwardFFTImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterBPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython

def itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_New():
  return itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()


def itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_New():
  return itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2(itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    """


    Base class for specialized real-to-complex forward Fast Fourier
    Transform.

    This is a base class for the "forward" or "direct" discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    This class transforms a real input image into its complex Fourier
    transform. The Fourier transform of a real input image has Hermitian
    symmetry: $ f(\\mathbf{x}) = f^*(-\\mathbf{x}) $. That is, when
    the result of the transform is split in half along the X-dimension,
    the values in the second half of the transform are the complex
    conjugates of values in the first half reflected about the center of
    the image in each dimension. This filter takes advantage of the
    Hermitian symmetry property and reduces the size of the output in the
    first dimension to N/2+1, where N is the size of the input image in
    that dimension and the division by 2 is rounded down.

    See:   HalfHermitianToRealInverseFFTImageFilter

    See:   ForwardFFTImageFilter

    C++ includes: itkRealToHalfHermitianForwardFFTImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer":
        """__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def GetSizeGreatestPrimeFactor(self) -> "unsigned long":
        """GetSizeGreatestPrimeFactor(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 self) -> unsigned long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetSizeGreatestPrimeFactor(self)


    def GetActualXDimensionIsOddOutput(self) -> "itkSimpleDataObjectDecoratorB const *":
        """GetActualXDimensionIsOddOutput(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOddOutput(self)


    def GetActualXDimensionIsOdd(self) -> "bool const &":
        """GetActualXDimensionIsOdd(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOdd(self)

    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

    def cast(obj: 'itkLightObject') -> "itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 *":
        """cast(itkLightObject obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.GetSizeGreatestPrimeFactor = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetSizeGreatestPrimeFactor, None, itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.GetActualXDimensionIsOddOutput = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOddOutput, None, itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.GetActualXDimensionIsOdd = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOdd, None, itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_swigregister = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_swigregister
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)

def itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__() -> "itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer":
    """itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_Pointer"""
    return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__()

def itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast(obj: 'itkLightObject') -> "itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 *":
    """itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast(itkLightObject obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2"""
    return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast(obj)

class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3(itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    """


    Base class for specialized real-to-complex forward Fast Fourier
    Transform.

    This is a base class for the "forward" or "direct" discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    This class transforms a real input image into its complex Fourier
    transform. The Fourier transform of a real input image has Hermitian
    symmetry: $ f(\\mathbf{x}) = f^*(-\\mathbf{x}) $. That is, when
    the result of the transform is split in half along the X-dimension,
    the values in the second half of the transform are the complex
    conjugates of values in the first half reflected about the center of
    the image in each dimension. This filter takes advantage of the
    Hermitian symmetry property and reduces the size of the output in the
    first dimension to N/2+1, where N is the size of the input image in
    that dimension and the division by 2 is rounded down.

    See:   HalfHermitianToRealInverseFFTImageFilter

    See:   ForwardFFTImageFilter

    C++ includes: itkRealToHalfHermitianForwardFFTImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer":
        """__New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def GetSizeGreatestPrimeFactor(self) -> "unsigned long":
        """GetSizeGreatestPrimeFactor(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 self) -> unsigned long"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetSizeGreatestPrimeFactor(self)


    def GetActualXDimensionIsOddOutput(self) -> "itkSimpleDataObjectDecoratorB const *":
        """GetActualXDimensionIsOddOutput(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 self) -> itkSimpleDataObjectDecoratorB"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOddOutput(self)


    def GetActualXDimensionIsOdd(self) -> "bool const &":
        """GetActualXDimensionIsOdd(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 self) -> bool const &"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOdd(self)

    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

    def cast(obj: 'itkLightObject') -> "itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 *":
        """cast(itkLightObject obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3"""
        return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.GetSizeGreatestPrimeFactor = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetSizeGreatestPrimeFactor, None, itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.GetActualXDimensionIsOddOutput = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOddOutput, None, itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.GetActualXDimensionIsOdd = new_instancemethod(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOdd, None, itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_swigregister = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_swigregister
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)

def itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__() -> "itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer":
    """itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_Pointer"""
    return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__()

def itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast(obj: 'itkLightObject') -> "itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 *":
    """itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast(itkLightObject obj) -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3"""
    return _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def real_to_half_hermitian_forward_fft_image_filter(*args, **kwargs):
    """Procedural interface for RealToHalfHermitianForwardFFTImageFilter"""
    import itk
    instance = itk.RealToHalfHermitianForwardFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def real_to_half_hermitian_forward_fft_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RealToHalfHermitianForwardFFTImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RealToHalfHermitianForwardFFTImageFilter.values()[0]
    else:
        filter_object = itk.RealToHalfHermitianForwardFFTImageFilter

    real_to_half_hermitian_forward_fft_image_filter.__doc__ = filter_object.__doc__
    real_to_half_hermitian_forward_fft_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    real_to_half_hermitian_forward_fft_image_filter.__doc__ += "Available Keyword Arguments:\n"
    real_to_half_hermitian_forward_fft_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



