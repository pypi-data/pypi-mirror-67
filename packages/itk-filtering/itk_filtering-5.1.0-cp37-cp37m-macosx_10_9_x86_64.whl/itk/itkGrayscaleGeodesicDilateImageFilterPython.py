# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkGrayscaleGeodesicDilateImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkGrayscaleGeodesicDilateImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkGrayscaleGeodesicDilateImageFilterPython
            return _itkGrayscaleGeodesicDilateImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkGrayscaleGeodesicDilateImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkGrayscaleGeodesicDilateImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkGrayscaleGeodesicDilateImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython

def itkGrayscaleGeodesicDilateImageFilterID3ID3_New():
  return itkGrayscaleGeodesicDilateImageFilterID3ID3.New()


def itkGrayscaleGeodesicDilateImageFilterID2ID2_New():
  return itkGrayscaleGeodesicDilateImageFilterID2ID2.New()


def itkGrayscaleGeodesicDilateImageFilterIF3IF3_New():
  return itkGrayscaleGeodesicDilateImageFilterIF3IF3.New()


def itkGrayscaleGeodesicDilateImageFilterIF2IF2_New():
  return itkGrayscaleGeodesicDilateImageFilterIF2IF2.New()


def itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_New():
  return itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.New()


def itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_New():
  return itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.New()


def itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_New():
  return itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.New()


def itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_New():
  return itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.New()


def itkGrayscaleGeodesicDilateImageFilterISS3ISS3_New():
  return itkGrayscaleGeodesicDilateImageFilterISS3ISS3.New()


def itkGrayscaleGeodesicDilateImageFilterISS2ISS2_New():
  return itkGrayscaleGeodesicDilateImageFilterISS2ISS2.New()

class itkGrayscaleGeodesicDilateImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageD2') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterID2ID2 self, itkImageD2 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageD2 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> itkImageD2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageD2') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterID2ID2 self, itkImageD2 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageD2 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> itkImageD2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterID2ID2 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterID2ID2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterID2ID2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterID2ID2 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterID2ID2 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterID2ID2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterID2ID2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterID2ID2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterID2ID2

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterID2ID2.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_Clone, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterID2ID2)
itkGrayscaleGeodesicDilateImageFilterID2ID2_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_swigregister
itkGrayscaleGeodesicDilateImageFilterID2ID2_swigregister(itkGrayscaleGeodesicDilateImageFilterID2ID2)

def itkGrayscaleGeodesicDilateImageFilterID2ID2___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterID2ID2___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterID2ID2_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterID2ID2 *":
    """itkGrayscaleGeodesicDilateImageFilterID2ID2_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterID2ID2"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID2ID2_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageD3') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterID3ID3 self, itkImageD3 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageD3 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> itkImageD3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageD3') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterID3ID3 self, itkImageD3 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageD3 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> itkImageD3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterID3ID3 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterID3ID3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterID3ID3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterID3ID3 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterID3ID3 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterID3ID3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterID3ID3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterID3ID3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterID3ID3

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterID3ID3.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_Clone, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterID3ID3)
itkGrayscaleGeodesicDilateImageFilterID3ID3_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_swigregister
itkGrayscaleGeodesicDilateImageFilterID3ID3_swigregister(itkGrayscaleGeodesicDilateImageFilterID3ID3)

def itkGrayscaleGeodesicDilateImageFilterID3ID3___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterID3ID3___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterID3ID3_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterID3ID3 *":
    """itkGrayscaleGeodesicDilateImageFilterID3ID3_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterID3ID3"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterID3ID3_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageF2') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self, itkImageF2 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageF2 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageF2') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self, itkImageF2 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageF2 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> itkImageF2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIF2IF2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIF2IF2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIF2IF2

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIF2IF2.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_Clone, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIF2IF2)
itkGrayscaleGeodesicDilateImageFilterIF2IF2_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_swigregister
itkGrayscaleGeodesicDilateImageFilterIF2IF2_swigregister(itkGrayscaleGeodesicDilateImageFilterIF2IF2)

def itkGrayscaleGeodesicDilateImageFilterIF2IF2___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIF2IF2___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIF2IF2_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIF2IF2 *":
    """itkGrayscaleGeodesicDilateImageFilterIF2IF2_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIF2IF2"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF2IF2_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageF3') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self, itkImageF3 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageF3 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageF3') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self, itkImageF3 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageF3 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> itkImageF3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIF3IF3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIF3IF3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIF3IF3

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIF3IF3.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_Clone, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIF3IF3)
itkGrayscaleGeodesicDilateImageFilterIF3IF3_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_swigregister
itkGrayscaleGeodesicDilateImageFilterIF3IF3_swigregister(itkGrayscaleGeodesicDilateImageFilterIF3IF3)

def itkGrayscaleGeodesicDilateImageFilterIF3IF3___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIF3IF3___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIF3IF3_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIF3IF3 *":
    """itkGrayscaleGeodesicDilateImageFilterIF3IF3_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIF3IF3"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIF3IF3_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageSS2') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self, itkImageSS2 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageSS2 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> itkImageSS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageSS2') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self, itkImageSS2 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageSS2 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> itkImageSS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterISS2ISS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterISS2ISS2.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Clone, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterISS2ISS2)
itkGrayscaleGeodesicDilateImageFilterISS2ISS2_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_swigregister
itkGrayscaleGeodesicDilateImageFilterISS2ISS2_swigregister(itkGrayscaleGeodesicDilateImageFilterISS2ISS2)

def itkGrayscaleGeodesicDilateImageFilterISS2ISS2___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterISS2ISS2___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterISS2ISS2 *":
    """itkGrayscaleGeodesicDilateImageFilterISS2ISS2_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterISS2ISS2"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS2ISS2_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageSS3') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self, itkImageSS3 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageSS3 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> itkImageSS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageSS3') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self, itkImageSS3 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageSS3 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> itkImageSS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterISS3ISS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterISS3ISS3.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Clone, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterISS3ISS3)
itkGrayscaleGeodesicDilateImageFilterISS3ISS3_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_swigregister
itkGrayscaleGeodesicDilateImageFilterISS3ISS3_swigregister(itkGrayscaleGeodesicDilateImageFilterISS3ISS3)

def itkGrayscaleGeodesicDilateImageFilterISS3ISS3___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterISS3ISS3___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterISS3ISS3 *":
    """itkGrayscaleGeodesicDilateImageFilterISS3ISS3_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterISS3ISS3"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterISS3ISS3_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageUC2') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self, itkImageUC2 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageUC2 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> itkImageUC2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageUC2') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self, itkImageUC2 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageUC2 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> itkImageUC2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Clone, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_swigregister
itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_swigregister(itkGrayscaleGeodesicDilateImageFilterIUC2IUC2)

def itkGrayscaleGeodesicDilateImageFilterIUC2IUC2___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIUC2IUC2___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUC2IUC2 *":
    """itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUC2IUC2"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC2IUC2_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageUC3') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self, itkImageUC3 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageUC3 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> itkImageUC3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageUC3') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self, itkImageUC3 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageUC3 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> itkImageUC3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Clone, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_swigregister
itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_swigregister(itkGrayscaleGeodesicDilateImageFilterIUC3IUC3)

def itkGrayscaleGeodesicDilateImageFilterIUC3IUC3___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIUC3IUC3___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUC3IUC3 *":
    """itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUC3IUC3"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUC3IUC3_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageUS2') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self, itkImageUS2 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageUS2 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> itkImageUS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageUS2') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self, itkImageUS2 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageUS2 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> itkImageUS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Clone, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_swigregister
itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_swigregister(itkGrayscaleGeodesicDilateImageFilterIUS2IUS2)

def itkGrayscaleGeodesicDilateImageFilterIUS2IUS2___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIUS2IUS2___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUS2IUS2 *":
    """itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUS2IUS2"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS2IUS2_cast(obj)

class itkGrayscaleGeodesicDilateImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    geodesic gray scale dilation of an image

    Geodesic dilation operates on a "marker" image and a "mask" image.
    The marker image is dilated using an elementary structuring element
    (neighborhood of radius one using only the face connected neighbors).
    The resulting image is then compared with the mask image. The output
    image is the pixelwise minimum of the dilated marker image and the
    mask image.

    Geodesic dilation is run either one iteration or until convergence. In
    the convergence case, the filter is equivalent to "reconstruction by
    dilation". This filter is implemented to handle both scenarios. The
    one iteration case is multi-threaded. The convergence case is
    delegated to another instance of the same filter (but configured to
    run a single iteration).

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6 of Pierre Soille's book
    "Morphological Image Analysis: Principles and Applications", Second
    Edition, Springer, 2003.

    A noniterative version of this algorithm can be found in the
    ReconstructionByDilationImageFilter. This noniterative solution is
    much faster than the implementation provided here. All ITK filters
    that previously used GrayscaleGeodesicDiliateImageFilter as part of
    their implementation have been converted to use the
    ReconstructionByDilationImageFilter. The
    GrayscaleGeodesicDilateImageFilter is maintained for backward
    compatibility.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByDilationImageFilter

    C++ includes: itkGrayscaleGeodesicDilateImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer":
        """Clone(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Clone(self)


    def SetMarkerImage(self, arg0: 'itkImageUS3') -> "void":
        """
        SetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self, itkImageUS3 arg0)

        Set/Get the marker
        image. The marker image must be pixelwise less than or equal to the
        mask image. The marker image the image that is dilated by this filter.

        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetMarkerImage(self, arg0)


    def GetMarkerImage(self) -> "itkImageUS3 const *":
        """GetMarkerImage(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> itkImageUS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetMarkerImage(self)


    def SetMaskImage(self, arg0: 'itkImageUS3') -> "void":
        """
        SetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self, itkImageUS3 arg0)

        Set/Get the mask
        image. The mask image is used to "mask" the dilated marker image.
        The mask operation is a pixelwise minimum. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetMaskImage(self, arg0)


    def GetMaskImage(self) -> "itkImageUS3 const *":
        """GetMaskImage(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> itkImageUS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetMaskImage(self)


    def SetRunOneIteration(self, _arg: 'bool const') -> "void":
        """
        SetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get whether
        the filter should run one iteration or until convergence. When run to
        convergence, this filter is equivalent to "reconstruction by
        dilation". Default is off. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetRunOneIteration(self, _arg)


    def GetRunOneIteration(self) -> "bool":
        """GetRunOneIteration(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> bool"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetRunOneIteration(self)


    def RunOneIterationOn(self) -> "void":
        """RunOneIterationOn(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_RunOneIterationOn(self)


    def RunOneIterationOff(self) -> "void":
        """RunOneIterationOff(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_RunOneIterationOff(self)


    def GetNumberOfIterationsUsed(self) -> "unsigned long":
        """
        GetNumberOfIterationsUsed(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> unsigned long

        Get the
        number of iterations used to produce the current output. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetNumberOfIterationsUsed(self)


    def SetFullyConnected(self, _arg: 'bool const') -> "void":
        """
        SetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self, bool const _arg)

        Set/Get whether
        the connected components are defined strictly by face connectivity or
        by face+edge+vertex connectivity. Default is FullyConnectedOff. For
        objects that are 1 pixel wide, use FullyConnectedOn. 
        """
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetFullyConnected(self, _arg)


    def GetFullyConnected(self) -> "bool const &":
        """GetFullyConnected(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self) -> bool const &"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetFullyConnected(self)


    def FullyConnectedOn(self) -> "void":
        """FullyConnectedOn(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_FullyConnectedOn(self)


    def FullyConnectedOff(self) -> "void":
        """FullyConnectedOff(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 self)"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_FullyConnectedOff(self)

    SameDimensionCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SameDimensionCheck
    InputComparableCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_InputComparableCheck
    InputConvertibleToOutputCheck = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    __swig_destroy__ = _itkGrayscaleGeodesicDilateImageFilterPython.delete_itkGrayscaleGeodesicDilateImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3"""
        return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3

        Create a new object of the class itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.Clone = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Clone, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.SetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.GetMarkerImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetMarkerImage, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.SetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.GetMaskImage = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetMaskImage, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.SetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.GetRunOneIteration = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetRunOneIteration, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.RunOneIterationOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_RunOneIterationOn, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.RunOneIterationOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_RunOneIterationOff, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.GetNumberOfIterationsUsed = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetNumberOfIterationsUsed, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.SetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_SetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.GetFullyConnected = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_GetFullyConnected, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.FullyConnectedOn = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_FullyConnectedOn, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3.FullyConnectedOff = new_instancemethod(_itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_FullyConnectedOff, None, itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_swigregister = _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_swigregister
itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_swigregister(itkGrayscaleGeodesicDilateImageFilterIUS3IUS3)

def itkGrayscaleGeodesicDilateImageFilterIUS3IUS3___New_orig__() -> "itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer":
    """itkGrayscaleGeodesicDilateImageFilterIUS3IUS3___New_orig__() -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_Pointer"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3___New_orig__()

def itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkGrayscaleGeodesicDilateImageFilterIUS3IUS3 *":
    """itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkGrayscaleGeodesicDilateImageFilterIUS3IUS3"""
    return _itkGrayscaleGeodesicDilateImageFilterPython.itkGrayscaleGeodesicDilateImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def grayscale_geodesic_dilate_image_filter(*args, **kwargs):
    """Procedural interface for GrayscaleGeodesicDilateImageFilter"""
    import itk
    instance = itk.GrayscaleGeodesicDilateImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def grayscale_geodesic_dilate_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GrayscaleGeodesicDilateImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GrayscaleGeodesicDilateImageFilter.values()[0]
    else:
        filter_object = itk.GrayscaleGeodesicDilateImageFilter

    grayscale_geodesic_dilate_image_filter.__doc__ = filter_object.__doc__
    grayscale_geodesic_dilate_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    grayscale_geodesic_dilate_image_filter.__doc__ += "Available Keyword Arguments:\n"
    grayscale_geodesic_dilate_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



