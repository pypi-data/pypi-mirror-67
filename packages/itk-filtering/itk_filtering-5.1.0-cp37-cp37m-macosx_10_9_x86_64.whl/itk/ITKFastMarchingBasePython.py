# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ITKFastMarchingBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKFastMarchingBasePython', [dirname(__file__)])
        except ImportError:
            import _ITKFastMarchingBasePython
            return _ITKFastMarchingBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKFastMarchingBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKFastMarchingBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKFastMarchingBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkNodePairPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkFastMarchingStoppingCriterionBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkLevelSetNodePython

def itkFastMarchingBaseID3ID3_New():
  return itkFastMarchingBaseID3ID3.New()


def itkFastMarchingBaseID2ID2_New():
  return itkFastMarchingBaseID2ID2.New()


def itkFastMarchingBaseIF3IF3_New():
  return itkFastMarchingBaseIF3IF3.New()


def itkFastMarchingBaseIF2IF2_New():
  return itkFastMarchingBaseIF2IF2.New()


def itkVectorContainerULNPI3D_New():
  return itkVectorContainerULNPI3D.New()


def itkVectorContainerUILSND3_New():
  return itkVectorContainerUILSND3.New()


def itkVectorContainerULNPI3F_New():
  return itkVectorContainerULNPI3F.New()


def itkVectorContainerUILSNF3_New():
  return itkVectorContainerUILSNF3.New()


def itkVectorContainerULNPI3US_New():
  return itkVectorContainerULNPI3US.New()


def itkVectorContainerUILSNUS3_New():
  return itkVectorContainerUILSNUS3.New()


def itkVectorContainerULNPI3UC_New():
  return itkVectorContainerULNPI3UC.New()


def itkVectorContainerUILSNUC3_New():
  return itkVectorContainerUILSNUC3.New()


def itkVectorContainerULNPI3SS_New():
  return itkVectorContainerULNPI3SS.New()


def itkVectorContainerUILSNSS3_New():
  return itkVectorContainerUILSNSS3.New()


def itkVectorContainerULNPI2D_New():
  return itkVectorContainerULNPI2D.New()


def itkVectorContainerUILSND2_New():
  return itkVectorContainerUILSND2.New()


def itkVectorContainerULNPI2F_New():
  return itkVectorContainerULNPI2F.New()


def itkVectorContainerUILSNF2_New():
  return itkVectorContainerUILSNF2.New()


def itkVectorContainerULNPI2US_New():
  return itkVectorContainerULNPI2US.New()


def itkVectorContainerUILSNUS2_New():
  return itkVectorContainerUILSNUS2.New()


def itkVectorContainerULNPI2UC_New():
  return itkVectorContainerULNPI2UC.New()


def itkVectorContainerUILSNUC2_New():
  return itkVectorContainerUILSNUC2.New()


def itkVectorContainerULNPI2SS_New():
  return itkVectorContainerULNPI2SS.New()


def itkVectorContainerUILSNSS2_New():
  return itkVectorContainerUILSNSS2.New()

class itkFastMarchingBaseID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Abstract class to solve an Eikonal based-equation using Fast Marching
    Method.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one node at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper node to
    update.

    Fast Marching sweeps through N points in (N log N) steps to obtain the
    arrival time value as the front propagates through the domain.

    The initial front is specified by two containers: one containing the
    known nodes (Alive Nodes: nodes that are already part of the object),

    one containing the trial nodes (Trial Nodes: nodes that are considered
    for inclusion).  In order for the filter to evolve, at least some
    trial nodes must be specified. These can for instance be specified as
    the layer of nodes around the alive ones.

    The algorithm is terminated early by setting an appropriate stopping
    criterion, or if there are no more nodes to process.

    Parameters:
    -----------

    TTraits:  traits which includes definition such as: InputDomainType
    (itk::Image or itk::QuadEdgeMesh)

    OutputDomainType (similar to InputDomainType)

    NodeType (itk::Index if itk::Image and PointIdentifier if
    itk::QuadEdgeMesh)

    NodePairType std::pair< NodeType, OutputPixelType >

    Superclass (itk::ImageToImageFilter or
    itk::QuadEdgeMeshToQuadEdgeMeshFilter )

    Todo In the current implementation, std::priority_queue only allows
    taking nodes out from the front and putting nodes in from the back.
    Use itk::PriorityQueueContainer instead.

    Topology constraints: Additional flexibility in this class includes
    the implementation of topology constraints for image-based fast
    marching. Further details can be found in the paper  NJ Tustison, BA
    Avants, MF Siqueira, JC Gee. "Topological Well- Composedness and
    Glamorous Glue: A Digital Gluing Algorithm for Topologically
    Constrained Front Propagation, IEEE Transactions on Image Processing,
    20(6):1756-1761, June 2011.

    Essentially, one can constrain the propagating front(s) such that they
    either: don't merge (using the "Strict" option)

    don't create handles (using the "NoHandles" option)

    Whereas the majority of related work uses the digital topological
    concept of "simple points" to constrain the evolving front, this
    filter uses the concept of "well-composedness". Advantages of the
    latter over the former includes being able to use the standard
    marching cubes algorithm to produce a mesh whose genus is identical to
    that of the evolved front(s).

    See:   FastMarchingStoppingCriterionBase

    C++ includes: itkFastMarchingBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTopologyCheck(self, _arg: 'itkFastMarchingTraitsEnums::TopologyCheck const') -> "void":
        """SetTopologyCheck(itkFastMarchingBaseID2ID2 self, itkFastMarchingTraitsEnums::TopologyCheck const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetTopologyCheck(self, _arg)


    def GetTopologyCheck(self) -> "itkFastMarchingTraitsEnums::TopologyCheck const &":
        """GetTopologyCheck(itkFastMarchingBaseID2ID2 self) -> itkFastMarchingTraitsEnums::TopologyCheck const &"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTopologyCheck(self)


    def SetTrialPoints(self, _arg: 'itkVectorContainerULNPI2D') -> "void":
        """
        SetTrialPoints(itkFastMarchingBaseID2ID2 self, itkVectorContainerULNPI2D _arg)

        Set/Get TrialPoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetTrialPoints(self, _arg)


    def GetModifiableTrialPoints(self) -> "itkVectorContainerULNPI2D *":
        """GetModifiableTrialPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableTrialPoints(self)


    def GetTrialPoints(self, *args) -> "itkVectorContainerULNPI2D *":
        """
        GetTrialPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        GetTrialPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTrialPoints(self, *args)


    def SetAlivePoints(self, _arg: 'itkVectorContainerULNPI2D') -> "void":
        """
        SetAlivePoints(itkFastMarchingBaseID2ID2 self, itkVectorContainerULNPI2D _arg)

        Set/Get AlivePoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetAlivePoints(self, _arg)


    def GetModifiableAlivePoints(self) -> "itkVectorContainerULNPI2D *":
        """GetModifiableAlivePoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableAlivePoints(self)


    def GetAlivePoints(self, *args) -> "itkVectorContainerULNPI2D *":
        """
        GetAlivePoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        GetAlivePoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetAlivePoints(self, *args)


    def SetProcessedPoints(self, _arg: 'itkVectorContainerULNPI2D') -> "void":
        """
        SetProcessedPoints(itkFastMarchingBaseID2ID2 self, itkVectorContainerULNPI2D _arg)

        Set/Get
        ProcessedPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetProcessedPoints(self, _arg)


    def GetModifiableProcessedPoints(self) -> "itkVectorContainerULNPI2D *":
        """GetModifiableProcessedPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableProcessedPoints(self)


    def GetProcessedPoints(self, *args) -> "itkVectorContainerULNPI2D *":
        """
        GetProcessedPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        GetProcessedPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetProcessedPoints(self, *args)


    def SetForbiddenPoints(self, _arg: 'itkVectorContainerULNPI2D') -> "void":
        """
        SetForbiddenPoints(itkFastMarchingBaseID2ID2 self, itkVectorContainerULNPI2D _arg)

        Set/Get
        ForbiddenPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetForbiddenPoints(self, _arg)


    def GetModifiableForbiddenPoints(self) -> "itkVectorContainerULNPI2D *":
        """GetModifiableForbiddenPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableForbiddenPoints(self)


    def GetForbiddenPoints(self, *args) -> "itkVectorContainerULNPI2D *":
        """
        GetForbiddenPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        GetForbiddenPoints(itkFastMarchingBaseID2ID2 self) -> itkVectorContainerULNPI2D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetForbiddenPoints(self, *args)


    def SetStoppingCriterion(self, _arg: 'itkFastMarchingStoppingCriterionBaseID2ID2') -> "void":
        """
        SetStoppingCriterion(itkFastMarchingBaseID2ID2 self, itkFastMarchingStoppingCriterionBaseID2ID2 _arg)

        Set/Get the
        Stopping Criterion. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetStoppingCriterion(self, _arg)


    def GetModifiableStoppingCriterion(self) -> "itkFastMarchingStoppingCriterionBaseID2ID2 *":
        """GetModifiableStoppingCriterion(itkFastMarchingBaseID2ID2 self) -> itkFastMarchingStoppingCriterionBaseID2ID2"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableStoppingCriterion(self)


    def GetStoppingCriterion(self, *args) -> "itkFastMarchingStoppingCriterionBaseID2ID2 *":
        """
        GetStoppingCriterion(itkFastMarchingBaseID2ID2 self) -> itkFastMarchingStoppingCriterionBaseID2ID2
        GetStoppingCriterion(itkFastMarchingBaseID2ID2 self) -> itkFastMarchingStoppingCriterionBaseID2ID2
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetStoppingCriterion(self, *args)


    def GetSpeedConstant(self) -> "double":
        """
        GetSpeedConstant(itkFastMarchingBaseID2ID2 self) -> double

        Set/Get
        SpeedConstant. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetSpeedConstant(self)


    def SetSpeedConstant(self, _arg: 'double const') -> "void":
        """SetSpeedConstant(itkFastMarchingBaseID2ID2 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetSpeedConstant(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """
        GetNormalizationFactor(itkFastMarchingBaseID2ID2 self) -> double

        Set/Get
        NormalizationFactor. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetNormalizationFactor(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """SetNormalizationFactor(itkFastMarchingBaseID2ID2 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetNormalizationFactor(self, _arg)


    def GetTargetReachedValue(self) -> "double":
        """
        GetTargetReachedValue(itkFastMarchingBaseID2ID2 self) -> double

        Get the value
        reached by the front when it stops propagating. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTargetReachedValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingBaseID2ID2 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingBaseID2ID2 self) -> bool const &

        Get the Collect
        Points flag. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingBaseID2ID2 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingBaseID2ID2 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_CollectPointsOff(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkFastMarchingBaseID2ID2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingBaseID2ID2 *":
        """cast(itkLightObject obj) -> itkFastMarchingBaseID2ID2"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingBaseID2ID2

        Create a new object of the class itkFastMarchingBaseID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingBaseID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingBaseID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingBaseID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingBaseID2ID2.SetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetTopologyCheck, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTopologyCheck, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetTrialPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetModifiableTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableTrialPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTrialPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetAlivePoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetModifiableAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableAlivePoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetAlivePoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetProcessedPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetModifiableProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableProcessedPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetProcessedPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetForbiddenPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetModifiableForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableForbiddenPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetForbiddenPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetStoppingCriterion, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetModifiableStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetModifiableStoppingCriterion, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetStoppingCriterion, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetSpeedConstant, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetSpeedConstant, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetNormalizationFactor, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetNormalizationFactor, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetTargetReachedValue = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetTargetReachedValue, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.SetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_SetCollectPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.GetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_GetCollectPoints, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.CollectPointsOn = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_CollectPointsOn, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2.CollectPointsOff = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_CollectPointsOff, None, itkFastMarchingBaseID2ID2)
itkFastMarchingBaseID2ID2_swigregister = _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_swigregister
itkFastMarchingBaseID2ID2_swigregister(itkFastMarchingBaseID2ID2)

def itkFastMarchingBaseID2ID2_cast(obj: 'itkLightObject') -> "itkFastMarchingBaseID2ID2 *":
    """itkFastMarchingBaseID2ID2_cast(itkLightObject obj) -> itkFastMarchingBaseID2ID2"""
    return _ITKFastMarchingBasePython.itkFastMarchingBaseID2ID2_cast(obj)

class itkFastMarchingBaseID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Abstract class to solve an Eikonal based-equation using Fast Marching
    Method.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one node at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper node to
    update.

    Fast Marching sweeps through N points in (N log N) steps to obtain the
    arrival time value as the front propagates through the domain.

    The initial front is specified by two containers: one containing the
    known nodes (Alive Nodes: nodes that are already part of the object),

    one containing the trial nodes (Trial Nodes: nodes that are considered
    for inclusion).  In order for the filter to evolve, at least some
    trial nodes must be specified. These can for instance be specified as
    the layer of nodes around the alive ones.

    The algorithm is terminated early by setting an appropriate stopping
    criterion, or if there are no more nodes to process.

    Parameters:
    -----------

    TTraits:  traits which includes definition such as: InputDomainType
    (itk::Image or itk::QuadEdgeMesh)

    OutputDomainType (similar to InputDomainType)

    NodeType (itk::Index if itk::Image and PointIdentifier if
    itk::QuadEdgeMesh)

    NodePairType std::pair< NodeType, OutputPixelType >

    Superclass (itk::ImageToImageFilter or
    itk::QuadEdgeMeshToQuadEdgeMeshFilter )

    Todo In the current implementation, std::priority_queue only allows
    taking nodes out from the front and putting nodes in from the back.
    Use itk::PriorityQueueContainer instead.

    Topology constraints: Additional flexibility in this class includes
    the implementation of topology constraints for image-based fast
    marching. Further details can be found in the paper  NJ Tustison, BA
    Avants, MF Siqueira, JC Gee. "Topological Well- Composedness and
    Glamorous Glue: A Digital Gluing Algorithm for Topologically
    Constrained Front Propagation, IEEE Transactions on Image Processing,
    20(6):1756-1761, June 2011.

    Essentially, one can constrain the propagating front(s) such that they
    either: don't merge (using the "Strict" option)

    don't create handles (using the "NoHandles" option)

    Whereas the majority of related work uses the digital topological
    concept of "simple points" to constrain the evolving front, this
    filter uses the concept of "well-composedness". Advantages of the
    latter over the former includes being able to use the standard
    marching cubes algorithm to produce a mesh whose genus is identical to
    that of the evolved front(s).

    See:   FastMarchingStoppingCriterionBase

    C++ includes: itkFastMarchingBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTopologyCheck(self, _arg: 'itkFastMarchingTraitsEnums::TopologyCheck const') -> "void":
        """SetTopologyCheck(itkFastMarchingBaseID3ID3 self, itkFastMarchingTraitsEnums::TopologyCheck const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetTopologyCheck(self, _arg)


    def GetTopologyCheck(self) -> "itkFastMarchingTraitsEnums::TopologyCheck const &":
        """GetTopologyCheck(itkFastMarchingBaseID3ID3 self) -> itkFastMarchingTraitsEnums::TopologyCheck const &"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTopologyCheck(self)


    def SetTrialPoints(self, _arg: 'itkVectorContainerULNPI3D') -> "void":
        """
        SetTrialPoints(itkFastMarchingBaseID3ID3 self, itkVectorContainerULNPI3D _arg)

        Set/Get TrialPoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetTrialPoints(self, _arg)


    def GetModifiableTrialPoints(self) -> "itkVectorContainerULNPI3D *":
        """GetModifiableTrialPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableTrialPoints(self)


    def GetTrialPoints(self, *args) -> "itkVectorContainerULNPI3D *":
        """
        GetTrialPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        GetTrialPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTrialPoints(self, *args)


    def SetAlivePoints(self, _arg: 'itkVectorContainerULNPI3D') -> "void":
        """
        SetAlivePoints(itkFastMarchingBaseID3ID3 self, itkVectorContainerULNPI3D _arg)

        Set/Get AlivePoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetAlivePoints(self, _arg)


    def GetModifiableAlivePoints(self) -> "itkVectorContainerULNPI3D *":
        """GetModifiableAlivePoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableAlivePoints(self)


    def GetAlivePoints(self, *args) -> "itkVectorContainerULNPI3D *":
        """
        GetAlivePoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        GetAlivePoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetAlivePoints(self, *args)


    def SetProcessedPoints(self, _arg: 'itkVectorContainerULNPI3D') -> "void":
        """
        SetProcessedPoints(itkFastMarchingBaseID3ID3 self, itkVectorContainerULNPI3D _arg)

        Set/Get
        ProcessedPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetProcessedPoints(self, _arg)


    def GetModifiableProcessedPoints(self) -> "itkVectorContainerULNPI3D *":
        """GetModifiableProcessedPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableProcessedPoints(self)


    def GetProcessedPoints(self, *args) -> "itkVectorContainerULNPI3D *":
        """
        GetProcessedPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        GetProcessedPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetProcessedPoints(self, *args)


    def SetForbiddenPoints(self, _arg: 'itkVectorContainerULNPI3D') -> "void":
        """
        SetForbiddenPoints(itkFastMarchingBaseID3ID3 self, itkVectorContainerULNPI3D _arg)

        Set/Get
        ForbiddenPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetForbiddenPoints(self, _arg)


    def GetModifiableForbiddenPoints(self) -> "itkVectorContainerULNPI3D *":
        """GetModifiableForbiddenPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableForbiddenPoints(self)


    def GetForbiddenPoints(self, *args) -> "itkVectorContainerULNPI3D *":
        """
        GetForbiddenPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        GetForbiddenPoints(itkFastMarchingBaseID3ID3 self) -> itkVectorContainerULNPI3D
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetForbiddenPoints(self, *args)


    def SetStoppingCriterion(self, _arg: 'itkFastMarchingStoppingCriterionBaseID3ID3') -> "void":
        """
        SetStoppingCriterion(itkFastMarchingBaseID3ID3 self, itkFastMarchingStoppingCriterionBaseID3ID3 _arg)

        Set/Get the
        Stopping Criterion. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetStoppingCriterion(self, _arg)


    def GetModifiableStoppingCriterion(self) -> "itkFastMarchingStoppingCriterionBaseID3ID3 *":
        """GetModifiableStoppingCriterion(itkFastMarchingBaseID3ID3 self) -> itkFastMarchingStoppingCriterionBaseID3ID3"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableStoppingCriterion(self)


    def GetStoppingCriterion(self, *args) -> "itkFastMarchingStoppingCriterionBaseID3ID3 *":
        """
        GetStoppingCriterion(itkFastMarchingBaseID3ID3 self) -> itkFastMarchingStoppingCriterionBaseID3ID3
        GetStoppingCriterion(itkFastMarchingBaseID3ID3 self) -> itkFastMarchingStoppingCriterionBaseID3ID3
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetStoppingCriterion(self, *args)


    def GetSpeedConstant(self) -> "double":
        """
        GetSpeedConstant(itkFastMarchingBaseID3ID3 self) -> double

        Set/Get
        SpeedConstant. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetSpeedConstant(self)


    def SetSpeedConstant(self, _arg: 'double const') -> "void":
        """SetSpeedConstant(itkFastMarchingBaseID3ID3 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetSpeedConstant(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """
        GetNormalizationFactor(itkFastMarchingBaseID3ID3 self) -> double

        Set/Get
        NormalizationFactor. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetNormalizationFactor(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """SetNormalizationFactor(itkFastMarchingBaseID3ID3 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetNormalizationFactor(self, _arg)


    def GetTargetReachedValue(self) -> "double":
        """
        GetTargetReachedValue(itkFastMarchingBaseID3ID3 self) -> double

        Get the value
        reached by the front when it stops propagating. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTargetReachedValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingBaseID3ID3 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingBaseID3ID3 self) -> bool const &

        Get the Collect
        Points flag. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingBaseID3ID3 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingBaseID3ID3 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_CollectPointsOff(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkFastMarchingBaseID3ID3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingBaseID3ID3 *":
        """cast(itkLightObject obj) -> itkFastMarchingBaseID3ID3"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingBaseID3ID3

        Create a new object of the class itkFastMarchingBaseID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingBaseID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingBaseID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingBaseID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingBaseID3ID3.SetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetTopologyCheck, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTopologyCheck, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetTrialPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetModifiableTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableTrialPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTrialPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetAlivePoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetModifiableAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableAlivePoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetAlivePoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetProcessedPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetModifiableProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableProcessedPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetProcessedPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetForbiddenPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetModifiableForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableForbiddenPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetForbiddenPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetStoppingCriterion, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetModifiableStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetModifiableStoppingCriterion, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetStoppingCriterion, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetSpeedConstant, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetSpeedConstant, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetNormalizationFactor, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetNormalizationFactor, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetTargetReachedValue = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetTargetReachedValue, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.SetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_SetCollectPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.GetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_GetCollectPoints, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.CollectPointsOn = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_CollectPointsOn, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3.CollectPointsOff = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_CollectPointsOff, None, itkFastMarchingBaseID3ID3)
itkFastMarchingBaseID3ID3_swigregister = _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_swigregister
itkFastMarchingBaseID3ID3_swigregister(itkFastMarchingBaseID3ID3)

def itkFastMarchingBaseID3ID3_cast(obj: 'itkLightObject') -> "itkFastMarchingBaseID3ID3 *":
    """itkFastMarchingBaseID3ID3_cast(itkLightObject obj) -> itkFastMarchingBaseID3ID3"""
    return _ITKFastMarchingBasePython.itkFastMarchingBaseID3ID3_cast(obj)

class itkFastMarchingBaseIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Abstract class to solve an Eikonal based-equation using Fast Marching
    Method.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one node at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper node to
    update.

    Fast Marching sweeps through N points in (N log N) steps to obtain the
    arrival time value as the front propagates through the domain.

    The initial front is specified by two containers: one containing the
    known nodes (Alive Nodes: nodes that are already part of the object),

    one containing the trial nodes (Trial Nodes: nodes that are considered
    for inclusion).  In order for the filter to evolve, at least some
    trial nodes must be specified. These can for instance be specified as
    the layer of nodes around the alive ones.

    The algorithm is terminated early by setting an appropriate stopping
    criterion, or if there are no more nodes to process.

    Parameters:
    -----------

    TTraits:  traits which includes definition such as: InputDomainType
    (itk::Image or itk::QuadEdgeMesh)

    OutputDomainType (similar to InputDomainType)

    NodeType (itk::Index if itk::Image and PointIdentifier if
    itk::QuadEdgeMesh)

    NodePairType std::pair< NodeType, OutputPixelType >

    Superclass (itk::ImageToImageFilter or
    itk::QuadEdgeMeshToQuadEdgeMeshFilter )

    Todo In the current implementation, std::priority_queue only allows
    taking nodes out from the front and putting nodes in from the back.
    Use itk::PriorityQueueContainer instead.

    Topology constraints: Additional flexibility in this class includes
    the implementation of topology constraints for image-based fast
    marching. Further details can be found in the paper  NJ Tustison, BA
    Avants, MF Siqueira, JC Gee. "Topological Well- Composedness and
    Glamorous Glue: A Digital Gluing Algorithm for Topologically
    Constrained Front Propagation, IEEE Transactions on Image Processing,
    20(6):1756-1761, June 2011.

    Essentially, one can constrain the propagating front(s) such that they
    either: don't merge (using the "Strict" option)

    don't create handles (using the "NoHandles" option)

    Whereas the majority of related work uses the digital topological
    concept of "simple points" to constrain the evolving front, this
    filter uses the concept of "well-composedness". Advantages of the
    latter over the former includes being able to use the standard
    marching cubes algorithm to produce a mesh whose genus is identical to
    that of the evolved front(s).

    See:   FastMarchingStoppingCriterionBase

    C++ includes: itkFastMarchingBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTopologyCheck(self, _arg: 'itkFastMarchingTraitsEnums::TopologyCheck const') -> "void":
        """SetTopologyCheck(itkFastMarchingBaseIF2IF2 self, itkFastMarchingTraitsEnums::TopologyCheck const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetTopologyCheck(self, _arg)


    def GetTopologyCheck(self) -> "itkFastMarchingTraitsEnums::TopologyCheck const &":
        """GetTopologyCheck(itkFastMarchingBaseIF2IF2 self) -> itkFastMarchingTraitsEnums::TopologyCheck const &"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTopologyCheck(self)


    def SetTrialPoints(self, _arg: 'itkVectorContainerULNPI2F') -> "void":
        """
        SetTrialPoints(itkFastMarchingBaseIF2IF2 self, itkVectorContainerULNPI2F _arg)

        Set/Get TrialPoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetTrialPoints(self, _arg)


    def GetModifiableTrialPoints(self) -> "itkVectorContainerULNPI2F *":
        """GetModifiableTrialPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableTrialPoints(self)


    def GetTrialPoints(self, *args) -> "itkVectorContainerULNPI2F *":
        """
        GetTrialPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        GetTrialPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTrialPoints(self, *args)


    def SetAlivePoints(self, _arg: 'itkVectorContainerULNPI2F') -> "void":
        """
        SetAlivePoints(itkFastMarchingBaseIF2IF2 self, itkVectorContainerULNPI2F _arg)

        Set/Get AlivePoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetAlivePoints(self, _arg)


    def GetModifiableAlivePoints(self) -> "itkVectorContainerULNPI2F *":
        """GetModifiableAlivePoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableAlivePoints(self)


    def GetAlivePoints(self, *args) -> "itkVectorContainerULNPI2F *":
        """
        GetAlivePoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        GetAlivePoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetAlivePoints(self, *args)


    def SetProcessedPoints(self, _arg: 'itkVectorContainerULNPI2F') -> "void":
        """
        SetProcessedPoints(itkFastMarchingBaseIF2IF2 self, itkVectorContainerULNPI2F _arg)

        Set/Get
        ProcessedPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetProcessedPoints(self, _arg)


    def GetModifiableProcessedPoints(self) -> "itkVectorContainerULNPI2F *":
        """GetModifiableProcessedPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableProcessedPoints(self)


    def GetProcessedPoints(self, *args) -> "itkVectorContainerULNPI2F *":
        """
        GetProcessedPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        GetProcessedPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetProcessedPoints(self, *args)


    def SetForbiddenPoints(self, _arg: 'itkVectorContainerULNPI2F') -> "void":
        """
        SetForbiddenPoints(itkFastMarchingBaseIF2IF2 self, itkVectorContainerULNPI2F _arg)

        Set/Get
        ForbiddenPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetForbiddenPoints(self, _arg)


    def GetModifiableForbiddenPoints(self) -> "itkVectorContainerULNPI2F *":
        """GetModifiableForbiddenPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableForbiddenPoints(self)


    def GetForbiddenPoints(self, *args) -> "itkVectorContainerULNPI2F *":
        """
        GetForbiddenPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        GetForbiddenPoints(itkFastMarchingBaseIF2IF2 self) -> itkVectorContainerULNPI2F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetForbiddenPoints(self, *args)


    def SetStoppingCriterion(self, _arg: 'itkFastMarchingStoppingCriterionBaseIF2IF2') -> "void":
        """
        SetStoppingCriterion(itkFastMarchingBaseIF2IF2 self, itkFastMarchingStoppingCriterionBaseIF2IF2 _arg)

        Set/Get the
        Stopping Criterion. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetStoppingCriterion(self, _arg)


    def GetModifiableStoppingCriterion(self) -> "itkFastMarchingStoppingCriterionBaseIF2IF2 *":
        """GetModifiableStoppingCriterion(itkFastMarchingBaseIF2IF2 self) -> itkFastMarchingStoppingCriterionBaseIF2IF2"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableStoppingCriterion(self)


    def GetStoppingCriterion(self, *args) -> "itkFastMarchingStoppingCriterionBaseIF2IF2 *":
        """
        GetStoppingCriterion(itkFastMarchingBaseIF2IF2 self) -> itkFastMarchingStoppingCriterionBaseIF2IF2
        GetStoppingCriterion(itkFastMarchingBaseIF2IF2 self) -> itkFastMarchingStoppingCriterionBaseIF2IF2
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetStoppingCriterion(self, *args)


    def GetSpeedConstant(self) -> "double":
        """
        GetSpeedConstant(itkFastMarchingBaseIF2IF2 self) -> double

        Set/Get
        SpeedConstant. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetSpeedConstant(self)


    def SetSpeedConstant(self, _arg: 'double const') -> "void":
        """SetSpeedConstant(itkFastMarchingBaseIF2IF2 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetSpeedConstant(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """
        GetNormalizationFactor(itkFastMarchingBaseIF2IF2 self) -> double

        Set/Get
        NormalizationFactor. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetNormalizationFactor(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """SetNormalizationFactor(itkFastMarchingBaseIF2IF2 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetNormalizationFactor(self, _arg)


    def GetTargetReachedValue(self) -> "float":
        """
        GetTargetReachedValue(itkFastMarchingBaseIF2IF2 self) -> float

        Get the value
        reached by the front when it stops propagating. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTargetReachedValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingBaseIF2IF2 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingBaseIF2IF2 self) -> bool const &

        Get the Collect
        Points flag. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingBaseIF2IF2 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingBaseIF2IF2 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_CollectPointsOff(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkFastMarchingBaseIF2IF2

    def cast(obj: 'itkLightObject') -> "itkFastMarchingBaseIF2IF2 *":
        """cast(itkLightObject obj) -> itkFastMarchingBaseIF2IF2"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingBaseIF2IF2

        Create a new object of the class itkFastMarchingBaseIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingBaseIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingBaseIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingBaseIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingBaseIF2IF2.SetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetTopologyCheck, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTopologyCheck, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetTrialPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetModifiableTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableTrialPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTrialPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetAlivePoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetModifiableAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableAlivePoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetAlivePoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetProcessedPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetModifiableProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableProcessedPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetProcessedPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetForbiddenPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetModifiableForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableForbiddenPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetForbiddenPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetStoppingCriterion, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetModifiableStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetModifiableStoppingCriterion, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetStoppingCriterion, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetSpeedConstant, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetSpeedConstant, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetNormalizationFactor, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetNormalizationFactor, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetTargetReachedValue = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetTargetReachedValue, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.SetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_SetCollectPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.GetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_GetCollectPoints, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.CollectPointsOn = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_CollectPointsOn, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2.CollectPointsOff = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_CollectPointsOff, None, itkFastMarchingBaseIF2IF2)
itkFastMarchingBaseIF2IF2_swigregister = _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_swigregister
itkFastMarchingBaseIF2IF2_swigregister(itkFastMarchingBaseIF2IF2)

def itkFastMarchingBaseIF2IF2_cast(obj: 'itkLightObject') -> "itkFastMarchingBaseIF2IF2 *":
    """itkFastMarchingBaseIF2IF2_cast(itkLightObject obj) -> itkFastMarchingBaseIF2IF2"""
    return _ITKFastMarchingBasePython.itkFastMarchingBaseIF2IF2_cast(obj)

class itkFastMarchingBaseIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Abstract class to solve an Eikonal based-equation using Fast Marching
    Method.

    Fast marching solves an Eikonal equation where the speed is always
    non-negative and depends on the position only. Starting from an
    initial position on the front, fast marching systematically moves the
    front forward one node at a time.

    Updates are performed using an entropy satisfy scheme where only
    "upwind" neighborhoods are used. This implementation of Fast
    Marching uses a std::priority_queue to locate the next proper node to
    update.

    Fast Marching sweeps through N points in (N log N) steps to obtain the
    arrival time value as the front propagates through the domain.

    The initial front is specified by two containers: one containing the
    known nodes (Alive Nodes: nodes that are already part of the object),

    one containing the trial nodes (Trial Nodes: nodes that are considered
    for inclusion).  In order for the filter to evolve, at least some
    trial nodes must be specified. These can for instance be specified as
    the layer of nodes around the alive ones.

    The algorithm is terminated early by setting an appropriate stopping
    criterion, or if there are no more nodes to process.

    Parameters:
    -----------

    TTraits:  traits which includes definition such as: InputDomainType
    (itk::Image or itk::QuadEdgeMesh)

    OutputDomainType (similar to InputDomainType)

    NodeType (itk::Index if itk::Image and PointIdentifier if
    itk::QuadEdgeMesh)

    NodePairType std::pair< NodeType, OutputPixelType >

    Superclass (itk::ImageToImageFilter or
    itk::QuadEdgeMeshToQuadEdgeMeshFilter )

    Todo In the current implementation, std::priority_queue only allows
    taking nodes out from the front and putting nodes in from the back.
    Use itk::PriorityQueueContainer instead.

    Topology constraints: Additional flexibility in this class includes
    the implementation of topology constraints for image-based fast
    marching. Further details can be found in the paper  NJ Tustison, BA
    Avants, MF Siqueira, JC Gee. "Topological Well- Composedness and
    Glamorous Glue: A Digital Gluing Algorithm for Topologically
    Constrained Front Propagation, IEEE Transactions on Image Processing,
    20(6):1756-1761, June 2011.

    Essentially, one can constrain the propagating front(s) such that they
    either: don't merge (using the "Strict" option)

    don't create handles (using the "NoHandles" option)

    Whereas the majority of related work uses the digital topological
    concept of "simple points" to constrain the evolving front, this
    filter uses the concept of "well-composedness". Advantages of the
    latter over the former includes being able to use the standard
    marching cubes algorithm to produce a mesh whose genus is identical to
    that of the evolved front(s).

    See:   FastMarchingStoppingCriterionBase

    C++ includes: itkFastMarchingBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTopologyCheck(self, _arg: 'itkFastMarchingTraitsEnums::TopologyCheck const') -> "void":
        """SetTopologyCheck(itkFastMarchingBaseIF3IF3 self, itkFastMarchingTraitsEnums::TopologyCheck const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetTopologyCheck(self, _arg)


    def GetTopologyCheck(self) -> "itkFastMarchingTraitsEnums::TopologyCheck const &":
        """GetTopologyCheck(itkFastMarchingBaseIF3IF3 self) -> itkFastMarchingTraitsEnums::TopologyCheck const &"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTopologyCheck(self)


    def SetTrialPoints(self, _arg: 'itkVectorContainerULNPI3F') -> "void":
        """
        SetTrialPoints(itkFastMarchingBaseIF3IF3 self, itkVectorContainerULNPI3F _arg)

        Set/Get TrialPoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetTrialPoints(self, _arg)


    def GetModifiableTrialPoints(self) -> "itkVectorContainerULNPI3F *":
        """GetModifiableTrialPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableTrialPoints(self)


    def GetTrialPoints(self, *args) -> "itkVectorContainerULNPI3F *":
        """
        GetTrialPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        GetTrialPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTrialPoints(self, *args)


    def SetAlivePoints(self, _arg: 'itkVectorContainerULNPI3F') -> "void":
        """
        SetAlivePoints(itkFastMarchingBaseIF3IF3 self, itkVectorContainerULNPI3F _arg)

        Set/Get AlivePoints

        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetAlivePoints(self, _arg)


    def GetModifiableAlivePoints(self) -> "itkVectorContainerULNPI3F *":
        """GetModifiableAlivePoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableAlivePoints(self)


    def GetAlivePoints(self, *args) -> "itkVectorContainerULNPI3F *":
        """
        GetAlivePoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        GetAlivePoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetAlivePoints(self, *args)


    def SetProcessedPoints(self, _arg: 'itkVectorContainerULNPI3F') -> "void":
        """
        SetProcessedPoints(itkFastMarchingBaseIF3IF3 self, itkVectorContainerULNPI3F _arg)

        Set/Get
        ProcessedPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetProcessedPoints(self, _arg)


    def GetModifiableProcessedPoints(self) -> "itkVectorContainerULNPI3F *":
        """GetModifiableProcessedPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableProcessedPoints(self)


    def GetProcessedPoints(self, *args) -> "itkVectorContainerULNPI3F *":
        """
        GetProcessedPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        GetProcessedPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetProcessedPoints(self, *args)


    def SetForbiddenPoints(self, _arg: 'itkVectorContainerULNPI3F') -> "void":
        """
        SetForbiddenPoints(itkFastMarchingBaseIF3IF3 self, itkVectorContainerULNPI3F _arg)

        Set/Get
        ForbiddenPoints 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetForbiddenPoints(self, _arg)


    def GetModifiableForbiddenPoints(self) -> "itkVectorContainerULNPI3F *":
        """GetModifiableForbiddenPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableForbiddenPoints(self)


    def GetForbiddenPoints(self, *args) -> "itkVectorContainerULNPI3F *":
        """
        GetForbiddenPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        GetForbiddenPoints(itkFastMarchingBaseIF3IF3 self) -> itkVectorContainerULNPI3F
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetForbiddenPoints(self, *args)


    def SetStoppingCriterion(self, _arg: 'itkFastMarchingStoppingCriterionBaseIF3IF3') -> "void":
        """
        SetStoppingCriterion(itkFastMarchingBaseIF3IF3 self, itkFastMarchingStoppingCriterionBaseIF3IF3 _arg)

        Set/Get the
        Stopping Criterion. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetStoppingCriterion(self, _arg)


    def GetModifiableStoppingCriterion(self) -> "itkFastMarchingStoppingCriterionBaseIF3IF3 *":
        """GetModifiableStoppingCriterion(itkFastMarchingBaseIF3IF3 self) -> itkFastMarchingStoppingCriterionBaseIF3IF3"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableStoppingCriterion(self)


    def GetStoppingCriterion(self, *args) -> "itkFastMarchingStoppingCriterionBaseIF3IF3 *":
        """
        GetStoppingCriterion(itkFastMarchingBaseIF3IF3 self) -> itkFastMarchingStoppingCriterionBaseIF3IF3
        GetStoppingCriterion(itkFastMarchingBaseIF3IF3 self) -> itkFastMarchingStoppingCriterionBaseIF3IF3
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetStoppingCriterion(self, *args)


    def GetSpeedConstant(self) -> "double":
        """
        GetSpeedConstant(itkFastMarchingBaseIF3IF3 self) -> double

        Set/Get
        SpeedConstant. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetSpeedConstant(self)


    def SetSpeedConstant(self, _arg: 'double const') -> "void":
        """SetSpeedConstant(itkFastMarchingBaseIF3IF3 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetSpeedConstant(self, _arg)


    def GetNormalizationFactor(self) -> "double":
        """
        GetNormalizationFactor(itkFastMarchingBaseIF3IF3 self) -> double

        Set/Get
        NormalizationFactor. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetNormalizationFactor(self)


    def SetNormalizationFactor(self, _arg: 'double const') -> "void":
        """SetNormalizationFactor(itkFastMarchingBaseIF3IF3 self, double const _arg)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetNormalizationFactor(self, _arg)


    def GetTargetReachedValue(self) -> "float":
        """
        GetTargetReachedValue(itkFastMarchingBaseIF3IF3 self) -> float

        Get the value
        reached by the front when it stops propagating. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTargetReachedValue(self)


    def SetCollectPoints(self, _arg: 'bool const') -> "void":
        """
        SetCollectPoints(itkFastMarchingBaseIF3IF3 self, bool const _arg)

        Set the Collect
        Points flag. Instrument the algorithm to collect a container of all
        nodes which it has visited. Useful for creating Narrowbands for level
        set algorithms that supports narrow banding. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetCollectPoints(self, _arg)


    def GetCollectPoints(self) -> "bool const &":
        """
        GetCollectPoints(itkFastMarchingBaseIF3IF3 self) -> bool const &

        Get the Collect
        Points flag. 
        """
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetCollectPoints(self)


    def CollectPointsOn(self) -> "void":
        """CollectPointsOn(itkFastMarchingBaseIF3IF3 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_CollectPointsOn(self)


    def CollectPointsOff(self) -> "void":
        """CollectPointsOff(itkFastMarchingBaseIF3IF3 self)"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_CollectPointsOff(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkFastMarchingBaseIF3IF3

    def cast(obj: 'itkLightObject') -> "itkFastMarchingBaseIF3IF3 *":
        """cast(itkLightObject obj) -> itkFastMarchingBaseIF3IF3"""
        return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingBaseIF3IF3

        Create a new object of the class itkFastMarchingBaseIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingBaseIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkFastMarchingBaseIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFastMarchingBaseIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFastMarchingBaseIF3IF3.SetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetTopologyCheck, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetTopologyCheck = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTopologyCheck, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetTrialPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetModifiableTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableTrialPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetTrialPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTrialPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetAlivePoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetModifiableAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableAlivePoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetAlivePoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetAlivePoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetProcessedPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetModifiableProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableProcessedPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetProcessedPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetProcessedPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetForbiddenPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetModifiableForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableForbiddenPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetForbiddenPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetForbiddenPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetStoppingCriterion, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetModifiableStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetModifiableStoppingCriterion, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetStoppingCriterion = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetStoppingCriterion, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetSpeedConstant, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetSpeedConstant = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetSpeedConstant, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetNormalizationFactor, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetNormalizationFactor = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetNormalizationFactor, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetTargetReachedValue = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetTargetReachedValue, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.SetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_SetCollectPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.GetCollectPoints = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_GetCollectPoints, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.CollectPointsOn = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_CollectPointsOn, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3.CollectPointsOff = new_instancemethod(_ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_CollectPointsOff, None, itkFastMarchingBaseIF3IF3)
itkFastMarchingBaseIF3IF3_swigregister = _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_swigregister
itkFastMarchingBaseIF3IF3_swigregister(itkFastMarchingBaseIF3IF3)

def itkFastMarchingBaseIF3IF3_cast(obj: 'itkLightObject') -> "itkFastMarchingBaseIF3IF3 *":
    """itkFastMarchingBaseIF3IF3_cast(itkLightObject obj) -> itkFastMarchingBaseIF3IF3"""
    return _ITKFastMarchingBasePython.itkFastMarchingBaseIF3IF3_cast(obj)

class itkFastMarchingTraitsEnums(object):
    """Proxy of C++ itkFastMarchingTraitsEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TopologyCheck_Nothing = _ITKFastMarchingBasePython.itkFastMarchingTraitsEnums_TopologyCheck_Nothing
    TopologyCheck_NoHandles = _ITKFastMarchingBasePython.itkFastMarchingTraitsEnums_TopologyCheck_NoHandles
    TopologyCheck_Strict = _ITKFastMarchingBasePython.itkFastMarchingTraitsEnums_TopologyCheck_Strict

    def __init__(self, *args):
        """
        __init__(itkFastMarchingTraitsEnums self) -> itkFastMarchingTraitsEnums
        __init__(itkFastMarchingTraitsEnums self, itkFastMarchingTraitsEnums arg0) -> itkFastMarchingTraitsEnums
        """
        _ITKFastMarchingBasePython.itkFastMarchingTraitsEnums_swiginit(self, _ITKFastMarchingBasePython.new_itkFastMarchingTraitsEnums(*args))
    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkFastMarchingTraitsEnums
itkFastMarchingTraitsEnums_swigregister = _ITKFastMarchingBasePython.itkFastMarchingTraitsEnums_swigregister
itkFastMarchingTraitsEnums_swigregister(itkFastMarchingTraitsEnums)

class itkVectorContainerUILSND2(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSND2_Pointer":
        """__New_orig__() -> itkVectorContainerUILSND2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSND2_Pointer":
        """Clone(itkVectorContainerUILSND2 self) -> itkVectorContainerUILSND2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeD2,std::allocator< itkLevelSetNodeD2 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSND2 self) -> std::vector< itkLevelSetNodeD2,std::allocator< itkLevelSetNodeD2 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeD2,std::allocator< itkLevelSetNodeD2 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSND2 self) -> std::vector< itkLevelSetNodeD2,std::allocator< itkLevelSetNodeD2 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeD2 const &":
        """
        ElementAt(itkVectorContainerUILSND2 self, unsigned int arg0) -> itkLevelSetNodeD2
        ElementAt(itkVectorContainerUILSND2 self, unsigned int arg0) -> itkLevelSetNodeD2

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeD2 &":
        """
        CreateElementAt(itkVectorContainerUILSND2 self, unsigned int arg0) -> itkLevelSetNodeD2

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeD2":
        """
        GetElement(itkVectorContainerUILSND2 self, unsigned int arg0) -> itkLevelSetNodeD2

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD2') -> "void":
        """
        SetElement(itkVectorContainerUILSND2 self, unsigned int arg0, itkLevelSetNodeD2 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD2') -> "void":
        """
        InsertElement(itkVectorContainerUILSND2 self, unsigned int arg0, itkLevelSetNodeD2 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSND2 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD2') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSND2 self, unsigned int arg0, itkLevelSetNodeD2 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSND2 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSND2 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSND2 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSND2 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSND2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSND2 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSND2

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSND2 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSND2"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSND2

        Create a new object of the class itkVectorContainerUILSND2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSND2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSND2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSND2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSND2.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_Clone, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_CastToSTLContainer, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_CastToSTLConstContainer, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_ElementAt, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_CreateElementAt, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_GetElement, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_SetElement, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_InsertElement, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_IndexExists, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_GetElementIfIndexExists, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_CreateIndex, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_DeleteIndex, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_Size, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_Reserve, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_Squeeze, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND2_Initialize, None, itkVectorContainerUILSND2)
itkVectorContainerUILSND2_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSND2_swigregister
itkVectorContainerUILSND2_swigregister(itkVectorContainerUILSND2)

def itkVectorContainerUILSND2___New_orig__() -> "itkVectorContainerUILSND2_Pointer":
    """itkVectorContainerUILSND2___New_orig__() -> itkVectorContainerUILSND2_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSND2___New_orig__()

def itkVectorContainerUILSND2_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSND2 *":
    """itkVectorContainerUILSND2_cast(itkLightObject obj) -> itkVectorContainerUILSND2"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSND2_cast(obj)

class itkVectorContainerUILSND3(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSND3_Pointer":
        """__New_orig__() -> itkVectorContainerUILSND3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSND3_Pointer":
        """Clone(itkVectorContainerUILSND3 self) -> itkVectorContainerUILSND3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeD3,std::allocator< itkLevelSetNodeD3 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSND3 self) -> std::vector< itkLevelSetNodeD3,std::allocator< itkLevelSetNodeD3 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeD3,std::allocator< itkLevelSetNodeD3 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSND3 self) -> std::vector< itkLevelSetNodeD3,std::allocator< itkLevelSetNodeD3 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeD3 const &":
        """
        ElementAt(itkVectorContainerUILSND3 self, unsigned int arg0) -> itkLevelSetNodeD3
        ElementAt(itkVectorContainerUILSND3 self, unsigned int arg0) -> itkLevelSetNodeD3

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeD3 &":
        """
        CreateElementAt(itkVectorContainerUILSND3 self, unsigned int arg0) -> itkLevelSetNodeD3

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeD3":
        """
        GetElement(itkVectorContainerUILSND3 self, unsigned int arg0) -> itkLevelSetNodeD3

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD3') -> "void":
        """
        SetElement(itkVectorContainerUILSND3 self, unsigned int arg0, itkLevelSetNodeD3 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD3') -> "void":
        """
        InsertElement(itkVectorContainerUILSND3 self, unsigned int arg0, itkLevelSetNodeD3 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSND3 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeD3') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSND3 self, unsigned int arg0, itkLevelSetNodeD3 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSND3 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSND3 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSND3 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSND3 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSND3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSND3 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSND3

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSND3 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSND3"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSND3

        Create a new object of the class itkVectorContainerUILSND3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSND3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSND3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSND3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSND3.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_Clone, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_CastToSTLContainer, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_CastToSTLConstContainer, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_ElementAt, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_CreateElementAt, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_GetElement, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_SetElement, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_InsertElement, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_IndexExists, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_GetElementIfIndexExists, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_CreateIndex, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_DeleteIndex, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_Size, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_Reserve, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_Squeeze, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSND3_Initialize, None, itkVectorContainerUILSND3)
itkVectorContainerUILSND3_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSND3_swigregister
itkVectorContainerUILSND3_swigregister(itkVectorContainerUILSND3)

def itkVectorContainerUILSND3___New_orig__() -> "itkVectorContainerUILSND3_Pointer":
    """itkVectorContainerUILSND3___New_orig__() -> itkVectorContainerUILSND3_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSND3___New_orig__()

def itkVectorContainerUILSND3_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSND3 *":
    """itkVectorContainerUILSND3_cast(itkLightObject obj) -> itkVectorContainerUILSND3"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSND3_cast(obj)

class itkVectorContainerUILSNF2(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNF2_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNF2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNF2_Pointer":
        """Clone(itkVectorContainerUILSNF2 self) -> itkVectorContainerUILSNF2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeF2,std::allocator< itkLevelSetNodeF2 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNF2 self) -> std::vector< itkLevelSetNodeF2,std::allocator< itkLevelSetNodeF2 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeF2,std::allocator< itkLevelSetNodeF2 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNF2 self) -> std::vector< itkLevelSetNodeF2,std::allocator< itkLevelSetNodeF2 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeF2 const &":
        """
        ElementAt(itkVectorContainerUILSNF2 self, unsigned int arg0) -> itkLevelSetNodeF2
        ElementAt(itkVectorContainerUILSNF2 self, unsigned int arg0) -> itkLevelSetNodeF2

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeF2 &":
        """
        CreateElementAt(itkVectorContainerUILSNF2 self, unsigned int arg0) -> itkLevelSetNodeF2

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeF2":
        """
        GetElement(itkVectorContainerUILSNF2 self, unsigned int arg0) -> itkLevelSetNodeF2

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF2') -> "void":
        """
        SetElement(itkVectorContainerUILSNF2 self, unsigned int arg0, itkLevelSetNodeF2 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF2') -> "void":
        """
        InsertElement(itkVectorContainerUILSNF2 self, unsigned int arg0, itkLevelSetNodeF2 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNF2 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF2') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNF2 self, unsigned int arg0, itkLevelSetNodeF2 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNF2 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNF2 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNF2 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNF2 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNF2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNF2 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNF2

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNF2 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNF2"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNF2

        Create a new object of the class itkVectorContainerUILSNF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNF2.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Clone, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CastToSTLContainer, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CastToSTLConstContainer, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_ElementAt, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CreateElementAt, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_GetElement, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_SetElement, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_InsertElement, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_IndexExists, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_GetElementIfIndexExists, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_CreateIndex, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_DeleteIndex, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Size, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Reserve, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Squeeze, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF2_Initialize, None, itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_swigregister
itkVectorContainerUILSNF2_swigregister(itkVectorContainerUILSNF2)

def itkVectorContainerUILSNF2___New_orig__() -> "itkVectorContainerUILSNF2_Pointer":
    """itkVectorContainerUILSNF2___New_orig__() -> itkVectorContainerUILSNF2_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2___New_orig__()

def itkVectorContainerUILSNF2_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNF2 *":
    """itkVectorContainerUILSNF2_cast(itkLightObject obj) -> itkVectorContainerUILSNF2"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNF2_cast(obj)

class itkVectorContainerUILSNF3(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNF3_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNF3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNF3_Pointer":
        """Clone(itkVectorContainerUILSNF3 self) -> itkVectorContainerUILSNF3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeF3,std::allocator< itkLevelSetNodeF3 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNF3 self) -> std::vector< itkLevelSetNodeF3,std::allocator< itkLevelSetNodeF3 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeF3,std::allocator< itkLevelSetNodeF3 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNF3 self) -> std::vector< itkLevelSetNodeF3,std::allocator< itkLevelSetNodeF3 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeF3 const &":
        """
        ElementAt(itkVectorContainerUILSNF3 self, unsigned int arg0) -> itkLevelSetNodeF3
        ElementAt(itkVectorContainerUILSNF3 self, unsigned int arg0) -> itkLevelSetNodeF3

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeF3 &":
        """
        CreateElementAt(itkVectorContainerUILSNF3 self, unsigned int arg0) -> itkLevelSetNodeF3

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeF3":
        """
        GetElement(itkVectorContainerUILSNF3 self, unsigned int arg0) -> itkLevelSetNodeF3

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF3') -> "void":
        """
        SetElement(itkVectorContainerUILSNF3 self, unsigned int arg0, itkLevelSetNodeF3 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF3') -> "void":
        """
        InsertElement(itkVectorContainerUILSNF3 self, unsigned int arg0, itkLevelSetNodeF3 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNF3 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeF3') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNF3 self, unsigned int arg0, itkLevelSetNodeF3 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNF3 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNF3 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNF3 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNF3 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNF3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNF3 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNF3

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNF3 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNF3"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNF3

        Create a new object of the class itkVectorContainerUILSNF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNF3.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Clone, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CastToSTLContainer, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CastToSTLConstContainer, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_ElementAt, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CreateElementAt, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_GetElement, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_SetElement, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_InsertElement, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_IndexExists, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_GetElementIfIndexExists, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_CreateIndex, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_DeleteIndex, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Size, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Reserve, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Squeeze, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNF3_Initialize, None, itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_swigregister
itkVectorContainerUILSNF3_swigregister(itkVectorContainerUILSNF3)

def itkVectorContainerUILSNF3___New_orig__() -> "itkVectorContainerUILSNF3_Pointer":
    """itkVectorContainerUILSNF3___New_orig__() -> itkVectorContainerUILSNF3_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3___New_orig__()

def itkVectorContainerUILSNF3_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNF3 *":
    """itkVectorContainerUILSNF3_cast(itkLightObject obj) -> itkVectorContainerUILSNF3"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNF3_cast(obj)

class itkVectorContainerUILSNSS2(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNSS2_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNSS2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNSS2_Pointer":
        """Clone(itkVectorContainerUILSNSS2 self) -> itkVectorContainerUILSNSS2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeSS2,std::allocator< itkLevelSetNodeSS2 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNSS2 self) -> std::vector< itkLevelSetNodeSS2,std::allocator< itkLevelSetNodeSS2 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeSS2,std::allocator< itkLevelSetNodeSS2 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNSS2 self) -> std::vector< itkLevelSetNodeSS2,std::allocator< itkLevelSetNodeSS2 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeSS2 const &":
        """
        ElementAt(itkVectorContainerUILSNSS2 self, unsigned int arg0) -> itkLevelSetNodeSS2
        ElementAt(itkVectorContainerUILSNSS2 self, unsigned int arg0) -> itkLevelSetNodeSS2

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeSS2 &":
        """
        CreateElementAt(itkVectorContainerUILSNSS2 self, unsigned int arg0) -> itkLevelSetNodeSS2

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeSS2":
        """
        GetElement(itkVectorContainerUILSNSS2 self, unsigned int arg0) -> itkLevelSetNodeSS2

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS2') -> "void":
        """
        SetElement(itkVectorContainerUILSNSS2 self, unsigned int arg0, itkLevelSetNodeSS2 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS2') -> "void":
        """
        InsertElement(itkVectorContainerUILSNSS2 self, unsigned int arg0, itkLevelSetNodeSS2 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNSS2 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS2') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNSS2 self, unsigned int arg0, itkLevelSetNodeSS2 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNSS2 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNSS2 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNSS2 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNSS2 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNSS2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNSS2 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNSS2

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNSS2 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNSS2"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNSS2

        Create a new object of the class itkVectorContainerUILSNSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNSS2.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Clone, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CastToSTLContainer, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CastToSTLConstContainer, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_ElementAt, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CreateElementAt, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_GetElement, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_SetElement, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_InsertElement, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_IndexExists, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_GetElementIfIndexExists, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_CreateIndex, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_DeleteIndex, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Size, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Reserve, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Squeeze, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_Initialize, None, itkVectorContainerUILSNSS2)
itkVectorContainerUILSNSS2_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_swigregister
itkVectorContainerUILSNSS2_swigregister(itkVectorContainerUILSNSS2)

def itkVectorContainerUILSNSS2___New_orig__() -> "itkVectorContainerUILSNSS2_Pointer":
    """itkVectorContainerUILSNSS2___New_orig__() -> itkVectorContainerUILSNSS2_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2___New_orig__()

def itkVectorContainerUILSNSS2_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNSS2 *":
    """itkVectorContainerUILSNSS2_cast(itkLightObject obj) -> itkVectorContainerUILSNSS2"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS2_cast(obj)

class itkVectorContainerUILSNSS3(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNSS3_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNSS3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNSS3_Pointer":
        """Clone(itkVectorContainerUILSNSS3 self) -> itkVectorContainerUILSNSS3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeSS3,std::allocator< itkLevelSetNodeSS3 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNSS3 self) -> std::vector< itkLevelSetNodeSS3,std::allocator< itkLevelSetNodeSS3 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeSS3,std::allocator< itkLevelSetNodeSS3 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNSS3 self) -> std::vector< itkLevelSetNodeSS3,std::allocator< itkLevelSetNodeSS3 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeSS3 const &":
        """
        ElementAt(itkVectorContainerUILSNSS3 self, unsigned int arg0) -> itkLevelSetNodeSS3
        ElementAt(itkVectorContainerUILSNSS3 self, unsigned int arg0) -> itkLevelSetNodeSS3

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeSS3 &":
        """
        CreateElementAt(itkVectorContainerUILSNSS3 self, unsigned int arg0) -> itkLevelSetNodeSS3

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeSS3":
        """
        GetElement(itkVectorContainerUILSNSS3 self, unsigned int arg0) -> itkLevelSetNodeSS3

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS3') -> "void":
        """
        SetElement(itkVectorContainerUILSNSS3 self, unsigned int arg0, itkLevelSetNodeSS3 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS3') -> "void":
        """
        InsertElement(itkVectorContainerUILSNSS3 self, unsigned int arg0, itkLevelSetNodeSS3 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNSS3 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeSS3') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNSS3 self, unsigned int arg0, itkLevelSetNodeSS3 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNSS3 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNSS3 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNSS3 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNSS3 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNSS3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNSS3 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNSS3

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNSS3 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNSS3"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNSS3

        Create a new object of the class itkVectorContainerUILSNSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNSS3.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Clone, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CastToSTLContainer, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CastToSTLConstContainer, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_ElementAt, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CreateElementAt, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_GetElement, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_SetElement, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_InsertElement, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_IndexExists, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_GetElementIfIndexExists, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_CreateIndex, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_DeleteIndex, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Size, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Reserve, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Squeeze, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_Initialize, None, itkVectorContainerUILSNSS3)
itkVectorContainerUILSNSS3_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_swigregister
itkVectorContainerUILSNSS3_swigregister(itkVectorContainerUILSNSS3)

def itkVectorContainerUILSNSS3___New_orig__() -> "itkVectorContainerUILSNSS3_Pointer":
    """itkVectorContainerUILSNSS3___New_orig__() -> itkVectorContainerUILSNSS3_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3___New_orig__()

def itkVectorContainerUILSNSS3_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNSS3 *":
    """itkVectorContainerUILSNSS3_cast(itkLightObject obj) -> itkVectorContainerUILSNSS3"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNSS3_cast(obj)

class itkVectorContainerUILSNUC2(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNUC2_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNUC2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNUC2_Pointer":
        """Clone(itkVectorContainerUILSNUC2 self) -> itkVectorContainerUILSNUC2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeUC2,std::allocator< itkLevelSetNodeUC2 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNUC2 self) -> std::vector< itkLevelSetNodeUC2,std::allocator< itkLevelSetNodeUC2 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeUC2,std::allocator< itkLevelSetNodeUC2 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNUC2 self) -> std::vector< itkLevelSetNodeUC2,std::allocator< itkLevelSetNodeUC2 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeUC2 const &":
        """
        ElementAt(itkVectorContainerUILSNUC2 self, unsigned int arg0) -> itkLevelSetNodeUC2
        ElementAt(itkVectorContainerUILSNUC2 self, unsigned int arg0) -> itkLevelSetNodeUC2

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeUC2 &":
        """
        CreateElementAt(itkVectorContainerUILSNUC2 self, unsigned int arg0) -> itkLevelSetNodeUC2

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeUC2":
        """
        GetElement(itkVectorContainerUILSNUC2 self, unsigned int arg0) -> itkLevelSetNodeUC2

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC2') -> "void":
        """
        SetElement(itkVectorContainerUILSNUC2 self, unsigned int arg0, itkLevelSetNodeUC2 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC2') -> "void":
        """
        InsertElement(itkVectorContainerUILSNUC2 self, unsigned int arg0, itkLevelSetNodeUC2 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNUC2 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC2') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNUC2 self, unsigned int arg0, itkLevelSetNodeUC2 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNUC2 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNUC2 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNUC2 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNUC2 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNUC2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNUC2 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNUC2

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUC2 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUC2"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUC2

        Create a new object of the class itkVectorContainerUILSNUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUC2.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Clone, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CastToSTLContainer, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CastToSTLConstContainer, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_ElementAt, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CreateElementAt, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_GetElement, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_SetElement, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_InsertElement, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_IndexExists, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_GetElementIfIndexExists, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_CreateIndex, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_DeleteIndex, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Size, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Reserve, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Squeeze, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_Initialize, None, itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_swigregister
itkVectorContainerUILSNUC2_swigregister(itkVectorContainerUILSNUC2)

def itkVectorContainerUILSNUC2___New_orig__() -> "itkVectorContainerUILSNUC2_Pointer":
    """itkVectorContainerUILSNUC2___New_orig__() -> itkVectorContainerUILSNUC2_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2___New_orig__()

def itkVectorContainerUILSNUC2_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUC2 *":
    """itkVectorContainerUILSNUC2_cast(itkLightObject obj) -> itkVectorContainerUILSNUC2"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC2_cast(obj)

class itkVectorContainerUILSNUC3(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNUC3_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNUC3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNUC3_Pointer":
        """Clone(itkVectorContainerUILSNUC3 self) -> itkVectorContainerUILSNUC3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeUC3,std::allocator< itkLevelSetNodeUC3 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNUC3 self) -> std::vector< itkLevelSetNodeUC3,std::allocator< itkLevelSetNodeUC3 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeUC3,std::allocator< itkLevelSetNodeUC3 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNUC3 self) -> std::vector< itkLevelSetNodeUC3,std::allocator< itkLevelSetNodeUC3 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeUC3 const &":
        """
        ElementAt(itkVectorContainerUILSNUC3 self, unsigned int arg0) -> itkLevelSetNodeUC3
        ElementAt(itkVectorContainerUILSNUC3 self, unsigned int arg0) -> itkLevelSetNodeUC3

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeUC3 &":
        """
        CreateElementAt(itkVectorContainerUILSNUC3 self, unsigned int arg0) -> itkLevelSetNodeUC3

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeUC3":
        """
        GetElement(itkVectorContainerUILSNUC3 self, unsigned int arg0) -> itkLevelSetNodeUC3

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC3') -> "void":
        """
        SetElement(itkVectorContainerUILSNUC3 self, unsigned int arg0, itkLevelSetNodeUC3 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC3') -> "void":
        """
        InsertElement(itkVectorContainerUILSNUC3 self, unsigned int arg0, itkLevelSetNodeUC3 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNUC3 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUC3') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNUC3 self, unsigned int arg0, itkLevelSetNodeUC3 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNUC3 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNUC3 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNUC3 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNUC3 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNUC3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNUC3 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNUC3

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUC3 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUC3"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUC3

        Create a new object of the class itkVectorContainerUILSNUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUC3.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Clone, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CastToSTLContainer, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CastToSTLConstContainer, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_ElementAt, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CreateElementAt, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_GetElement, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_SetElement, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_InsertElement, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_IndexExists, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_GetElementIfIndexExists, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_CreateIndex, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_DeleteIndex, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Size, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Reserve, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Squeeze, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_Initialize, None, itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_swigregister
itkVectorContainerUILSNUC3_swigregister(itkVectorContainerUILSNUC3)

def itkVectorContainerUILSNUC3___New_orig__() -> "itkVectorContainerUILSNUC3_Pointer":
    """itkVectorContainerUILSNUC3___New_orig__() -> itkVectorContainerUILSNUC3_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3___New_orig__()

def itkVectorContainerUILSNUC3_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUC3 *":
    """itkVectorContainerUILSNUC3_cast(itkLightObject obj) -> itkVectorContainerUILSNUC3"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUC3_cast(obj)

class itkVectorContainerUILSNUS2(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNUS2_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNUS2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNUS2_Pointer":
        """Clone(itkVectorContainerUILSNUS2 self) -> itkVectorContainerUILSNUS2_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeUS2,std::allocator< itkLevelSetNodeUS2 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNUS2 self) -> std::vector< itkLevelSetNodeUS2,std::allocator< itkLevelSetNodeUS2 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeUS2,std::allocator< itkLevelSetNodeUS2 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNUS2 self) -> std::vector< itkLevelSetNodeUS2,std::allocator< itkLevelSetNodeUS2 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeUS2 const &":
        """
        ElementAt(itkVectorContainerUILSNUS2 self, unsigned int arg0) -> itkLevelSetNodeUS2
        ElementAt(itkVectorContainerUILSNUS2 self, unsigned int arg0) -> itkLevelSetNodeUS2

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeUS2 &":
        """
        CreateElementAt(itkVectorContainerUILSNUS2 self, unsigned int arg0) -> itkLevelSetNodeUS2

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeUS2":
        """
        GetElement(itkVectorContainerUILSNUS2 self, unsigned int arg0) -> itkLevelSetNodeUS2

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS2') -> "void":
        """
        SetElement(itkVectorContainerUILSNUS2 self, unsigned int arg0, itkLevelSetNodeUS2 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS2') -> "void":
        """
        InsertElement(itkVectorContainerUILSNUS2 self, unsigned int arg0, itkLevelSetNodeUS2 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNUS2 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS2') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNUS2 self, unsigned int arg0, itkLevelSetNodeUS2 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNUS2 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNUS2 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNUS2 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNUS2 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNUS2 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNUS2 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNUS2

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUS2 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUS2"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUS2

        Create a new object of the class itkVectorContainerUILSNUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUS2.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Clone, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CastToSTLContainer, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CastToSTLConstContainer, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_ElementAt, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CreateElementAt, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_GetElement, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_SetElement, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_InsertElement, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_IndexExists, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_GetElementIfIndexExists, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_CreateIndex, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_DeleteIndex, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Size, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Reserve, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Squeeze, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_Initialize, None, itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_swigregister
itkVectorContainerUILSNUS2_swigregister(itkVectorContainerUILSNUS2)

def itkVectorContainerUILSNUS2___New_orig__() -> "itkVectorContainerUILSNUS2_Pointer":
    """itkVectorContainerUILSNUS2___New_orig__() -> itkVectorContainerUILSNUS2_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2___New_orig__()

def itkVectorContainerUILSNUS2_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUS2 *":
    """itkVectorContainerUILSNUS2_cast(itkLightObject obj) -> itkVectorContainerUILSNUS2"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS2_cast(obj)

class itkVectorContainerUILSNUS3(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerUILSNUS3_Pointer":
        """__New_orig__() -> itkVectorContainerUILSNUS3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerUILSNUS3_Pointer":
        """Clone(itkVectorContainerUILSNUS3 self) -> itkVectorContainerUILSNUS3_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkLevelSetNodeUS3,std::allocator< itkLevelSetNodeUS3 > > &":
        """
        CastToSTLContainer(itkVectorContainerUILSNUS3 self) -> std::vector< itkLevelSetNodeUS3,std::allocator< itkLevelSetNodeUS3 > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkLevelSetNodeUS3,std::allocator< itkLevelSetNodeUS3 > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerUILSNUS3 self) -> std::vector< itkLevelSetNodeUS3,std::allocator< itkLevelSetNodeUS3 > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkLevelSetNodeUS3 const &":
        """
        ElementAt(itkVectorContainerUILSNUS3 self, unsigned int arg0) -> itkLevelSetNodeUS3
        ElementAt(itkVectorContainerUILSNUS3 self, unsigned int arg0) -> itkLevelSetNodeUS3

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned int') -> "itkLevelSetNodeUS3 &":
        """
        CreateElementAt(itkVectorContainerUILSNUS3 self, unsigned int arg0) -> itkLevelSetNodeUS3

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned int') -> "itkLevelSetNodeUS3":
        """
        GetElement(itkVectorContainerUILSNUS3 self, unsigned int arg0) -> itkLevelSetNodeUS3

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS3') -> "void":
        """
        SetElement(itkVectorContainerUILSNUS3 self, unsigned int arg0, itkLevelSetNodeUS3 arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS3') -> "void":
        """
        InsertElement(itkVectorContainerUILSNUS3 self, unsigned int arg0, itkLevelSetNodeUS3 arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned int') -> "bool":
        """
        IndexExists(itkVectorContainerUILSNUS3 self, unsigned int arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned int', arg1: 'itkLevelSetNodeUS3') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerUILSNUS3 self, unsigned int arg0, itkLevelSetNodeUS3 arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned int') -> "void":
        """
        CreateIndex(itkVectorContainerUILSNUS3 self, unsigned int arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned int') -> "void":
        """
        DeleteIndex(itkVectorContainerUILSNUS3 self, unsigned int arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned int":
        """
        Size(itkVectorContainerUILSNUS3 self) -> unsigned int

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Size(self)


    def Reserve(self, arg0: 'unsigned int') -> "void":
        """
        Reserve(itkVectorContainerUILSNUS3 self, unsigned int arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerUILSNUS3 self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerUILSNUS3 self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerUILSNUS3

    def cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUS3 *":
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUS3"""
        return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUS3

        Create a new object of the class itkVectorContainerUILSNUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerUILSNUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerUILSNUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUS3.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Clone, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CastToSTLContainer, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CastToSTLConstContainer, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_ElementAt, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CreateElementAt, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_GetElement, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_SetElement, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_InsertElement, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_IndexExists, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_GetElementIfIndexExists, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_CreateIndex, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_DeleteIndex, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Size, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Reserve, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Squeeze, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_Initialize, None, itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3_swigregister = _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_swigregister
itkVectorContainerUILSNUS3_swigregister(itkVectorContainerUILSNUS3)

def itkVectorContainerUILSNUS3___New_orig__() -> "itkVectorContainerUILSNUS3_Pointer":
    """itkVectorContainerUILSNUS3___New_orig__() -> itkVectorContainerUILSNUS3_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3___New_orig__()

def itkVectorContainerUILSNUS3_cast(obj: 'itkLightObject') -> "itkVectorContainerUILSNUS3 *":
    """itkVectorContainerUILSNUS3_cast(itkLightObject obj) -> itkVectorContainerUILSNUS3"""
    return _ITKFastMarchingBasePython.itkVectorContainerUILSNUS3_cast(obj)

class itkVectorContainerULNPI2D(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI2D_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI2D_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI2D_Pointer":
        """Clone(itkVectorContainerULNPI2D self) -> itkVectorContainerULNPI2D_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI2D,std::allocator< itkNodePairI2D > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI2D self) -> std::vector< itkNodePairI2D,std::allocator< itkNodePairI2D > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI2D,std::allocator< itkNodePairI2D > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI2D self) -> std::vector< itkNodePairI2D,std::allocator< itkNodePairI2D > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI2D const &":
        """
        ElementAt(itkVectorContainerULNPI2D self, unsigned long arg0) -> itkNodePairI2D
        ElementAt(itkVectorContainerULNPI2D self, unsigned long arg0) -> itkNodePairI2D

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI2D &":
        """
        CreateElementAt(itkVectorContainerULNPI2D self, unsigned long arg0) -> itkNodePairI2D

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI2D":
        """
        GetElement(itkVectorContainerULNPI2D self, unsigned long arg0) -> itkNodePairI2D

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2D') -> "void":
        """
        SetElement(itkVectorContainerULNPI2D self, unsigned long arg0, itkNodePairI2D arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2D') -> "void":
        """
        InsertElement(itkVectorContainerULNPI2D self, unsigned long arg0, itkNodePairI2D arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI2D self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI2D') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI2D self, unsigned long arg0, itkNodePairI2D arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI2D self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI2D self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI2D self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI2D self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI2D self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI2D self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI2D

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2D *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI2D"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI2D

        Create a new object of the class itkVectorContainerULNPI2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI2D.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Clone, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CastToSTLContainer, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CastToSTLConstContainer, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_ElementAt, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CreateElementAt, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_GetElement, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_SetElement, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_InsertElement, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_IndexExists, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_GetElementIfIndexExists, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_CreateIndex, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_DeleteIndex, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Size, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Reserve, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Squeeze, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2D_Initialize, None, itkVectorContainerULNPI2D)
itkVectorContainerULNPI2D_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_swigregister
itkVectorContainerULNPI2D_swigregister(itkVectorContainerULNPI2D)

def itkVectorContainerULNPI2D___New_orig__() -> "itkVectorContainerULNPI2D_Pointer":
    """itkVectorContainerULNPI2D___New_orig__() -> itkVectorContainerULNPI2D_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D___New_orig__()

def itkVectorContainerULNPI2D_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2D *":
    """itkVectorContainerULNPI2D_cast(itkLightObject obj) -> itkVectorContainerULNPI2D"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2D_cast(obj)

class itkVectorContainerULNPI2F(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI2F_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI2F_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI2F_Pointer":
        """Clone(itkVectorContainerULNPI2F self) -> itkVectorContainerULNPI2F_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI2F,std::allocator< itkNodePairI2F > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI2F self) -> std::vector< itkNodePairI2F,std::allocator< itkNodePairI2F > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI2F,std::allocator< itkNodePairI2F > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI2F self) -> std::vector< itkNodePairI2F,std::allocator< itkNodePairI2F > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI2F const &":
        """
        ElementAt(itkVectorContainerULNPI2F self, unsigned long arg0) -> itkNodePairI2F
        ElementAt(itkVectorContainerULNPI2F self, unsigned long arg0) -> itkNodePairI2F

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI2F &":
        """
        CreateElementAt(itkVectorContainerULNPI2F self, unsigned long arg0) -> itkNodePairI2F

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI2F":
        """
        GetElement(itkVectorContainerULNPI2F self, unsigned long arg0) -> itkNodePairI2F

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2F') -> "void":
        """
        SetElement(itkVectorContainerULNPI2F self, unsigned long arg0, itkNodePairI2F arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2F') -> "void":
        """
        InsertElement(itkVectorContainerULNPI2F self, unsigned long arg0, itkNodePairI2F arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI2F self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI2F') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI2F self, unsigned long arg0, itkNodePairI2F arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI2F self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI2F self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI2F self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI2F self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI2F self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI2F self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI2F

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2F *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI2F"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI2F

        Create a new object of the class itkVectorContainerULNPI2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI2F.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Clone, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CastToSTLContainer, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CastToSTLConstContainer, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_ElementAt, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CreateElementAt, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_GetElement, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_SetElement, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_InsertElement, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_IndexExists, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_GetElementIfIndexExists, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_CreateIndex, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_DeleteIndex, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Size, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Reserve, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Squeeze, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2F_Initialize, None, itkVectorContainerULNPI2F)
itkVectorContainerULNPI2F_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_swigregister
itkVectorContainerULNPI2F_swigregister(itkVectorContainerULNPI2F)

def itkVectorContainerULNPI2F___New_orig__() -> "itkVectorContainerULNPI2F_Pointer":
    """itkVectorContainerULNPI2F___New_orig__() -> itkVectorContainerULNPI2F_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F___New_orig__()

def itkVectorContainerULNPI2F_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2F *":
    """itkVectorContainerULNPI2F_cast(itkLightObject obj) -> itkVectorContainerULNPI2F"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2F_cast(obj)

class itkVectorContainerULNPI2SS(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI2SS_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI2SS_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI2SS_Pointer":
        """Clone(itkVectorContainerULNPI2SS self) -> itkVectorContainerULNPI2SS_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI2SS,std::allocator< itkNodePairI2SS > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI2SS self) -> std::vector< itkNodePairI2SS,std::allocator< itkNodePairI2SS > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI2SS,std::allocator< itkNodePairI2SS > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI2SS self) -> std::vector< itkNodePairI2SS,std::allocator< itkNodePairI2SS > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI2SS const &":
        """
        ElementAt(itkVectorContainerULNPI2SS self, unsigned long arg0) -> itkNodePairI2SS
        ElementAt(itkVectorContainerULNPI2SS self, unsigned long arg0) -> itkNodePairI2SS

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI2SS &":
        """
        CreateElementAt(itkVectorContainerULNPI2SS self, unsigned long arg0) -> itkNodePairI2SS

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI2SS":
        """
        GetElement(itkVectorContainerULNPI2SS self, unsigned long arg0) -> itkNodePairI2SS

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2SS') -> "void":
        """
        SetElement(itkVectorContainerULNPI2SS self, unsigned long arg0, itkNodePairI2SS arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2SS') -> "void":
        """
        InsertElement(itkVectorContainerULNPI2SS self, unsigned long arg0, itkNodePairI2SS arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI2SS self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI2SS') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI2SS self, unsigned long arg0, itkNodePairI2SS arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI2SS self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI2SS self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI2SS self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI2SS self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI2SS self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI2SS self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI2SS

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2SS *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI2SS"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI2SS

        Create a new object of the class itkVectorContainerULNPI2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI2SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI2SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI2SS.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Clone, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CastToSTLContainer, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CastToSTLConstContainer, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_ElementAt, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CreateElementAt, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_GetElement, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_SetElement, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_InsertElement, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_IndexExists, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_GetElementIfIndexExists, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_CreateIndex, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_DeleteIndex, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Size, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Reserve, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Squeeze, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_Initialize, None, itkVectorContainerULNPI2SS)
itkVectorContainerULNPI2SS_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_swigregister
itkVectorContainerULNPI2SS_swigregister(itkVectorContainerULNPI2SS)

def itkVectorContainerULNPI2SS___New_orig__() -> "itkVectorContainerULNPI2SS_Pointer":
    """itkVectorContainerULNPI2SS___New_orig__() -> itkVectorContainerULNPI2SS_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS___New_orig__()

def itkVectorContainerULNPI2SS_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2SS *":
    """itkVectorContainerULNPI2SS_cast(itkLightObject obj) -> itkVectorContainerULNPI2SS"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2SS_cast(obj)

class itkVectorContainerULNPI2UC(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI2UC_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI2UC_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI2UC_Pointer":
        """Clone(itkVectorContainerULNPI2UC self) -> itkVectorContainerULNPI2UC_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI2UC,std::allocator< itkNodePairI2UC > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI2UC self) -> std::vector< itkNodePairI2UC,std::allocator< itkNodePairI2UC > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI2UC,std::allocator< itkNodePairI2UC > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI2UC self) -> std::vector< itkNodePairI2UC,std::allocator< itkNodePairI2UC > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI2UC const &":
        """
        ElementAt(itkVectorContainerULNPI2UC self, unsigned long arg0) -> itkNodePairI2UC
        ElementAt(itkVectorContainerULNPI2UC self, unsigned long arg0) -> itkNodePairI2UC

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI2UC &":
        """
        CreateElementAt(itkVectorContainerULNPI2UC self, unsigned long arg0) -> itkNodePairI2UC

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI2UC":
        """
        GetElement(itkVectorContainerULNPI2UC self, unsigned long arg0) -> itkNodePairI2UC

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2UC') -> "void":
        """
        SetElement(itkVectorContainerULNPI2UC self, unsigned long arg0, itkNodePairI2UC arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2UC') -> "void":
        """
        InsertElement(itkVectorContainerULNPI2UC self, unsigned long arg0, itkNodePairI2UC arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI2UC self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI2UC') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI2UC self, unsigned long arg0, itkNodePairI2UC arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI2UC self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI2UC self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI2UC self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI2UC self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI2UC self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI2UC self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI2UC

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2UC *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI2UC"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI2UC

        Create a new object of the class itkVectorContainerULNPI2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI2UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI2UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI2UC.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Clone, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CastToSTLContainer, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CastToSTLConstContainer, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_ElementAt, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CreateElementAt, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_GetElement, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_SetElement, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_InsertElement, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_IndexExists, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_GetElementIfIndexExists, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_CreateIndex, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_DeleteIndex, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Size, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Reserve, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Squeeze, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_Initialize, None, itkVectorContainerULNPI2UC)
itkVectorContainerULNPI2UC_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_swigregister
itkVectorContainerULNPI2UC_swigregister(itkVectorContainerULNPI2UC)

def itkVectorContainerULNPI2UC___New_orig__() -> "itkVectorContainerULNPI2UC_Pointer":
    """itkVectorContainerULNPI2UC___New_orig__() -> itkVectorContainerULNPI2UC_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC___New_orig__()

def itkVectorContainerULNPI2UC_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2UC *":
    """itkVectorContainerULNPI2UC_cast(itkLightObject obj) -> itkVectorContainerULNPI2UC"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2UC_cast(obj)

class itkVectorContainerULNPI2US(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI2US_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI2US_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI2US_Pointer":
        """Clone(itkVectorContainerULNPI2US self) -> itkVectorContainerULNPI2US_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI2US,std::allocator< itkNodePairI2US > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI2US self) -> std::vector< itkNodePairI2US,std::allocator< itkNodePairI2US > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI2US,std::allocator< itkNodePairI2US > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI2US self) -> std::vector< itkNodePairI2US,std::allocator< itkNodePairI2US > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI2US const &":
        """
        ElementAt(itkVectorContainerULNPI2US self, unsigned long arg0) -> itkNodePairI2US
        ElementAt(itkVectorContainerULNPI2US self, unsigned long arg0) -> itkNodePairI2US

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI2US &":
        """
        CreateElementAt(itkVectorContainerULNPI2US self, unsigned long arg0) -> itkNodePairI2US

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI2US":
        """
        GetElement(itkVectorContainerULNPI2US self, unsigned long arg0) -> itkNodePairI2US

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2US') -> "void":
        """
        SetElement(itkVectorContainerULNPI2US self, unsigned long arg0, itkNodePairI2US arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI2US') -> "void":
        """
        InsertElement(itkVectorContainerULNPI2US self, unsigned long arg0, itkNodePairI2US arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI2US self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI2US') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI2US self, unsigned long arg0, itkNodePairI2US arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI2US self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI2US self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI2US self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI2US self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI2US self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI2US self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI2US

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2US *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI2US"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI2US

        Create a new object of the class itkVectorContainerULNPI2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI2US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI2US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI2US.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Clone, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CastToSTLContainer, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CastToSTLConstContainer, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_ElementAt, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CreateElementAt, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_GetElement, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_SetElement, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_InsertElement, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_IndexExists, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_GetElementIfIndexExists, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_CreateIndex, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_DeleteIndex, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Size, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Reserve, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Squeeze, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI2US_Initialize, None, itkVectorContainerULNPI2US)
itkVectorContainerULNPI2US_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_swigregister
itkVectorContainerULNPI2US_swigregister(itkVectorContainerULNPI2US)

def itkVectorContainerULNPI2US___New_orig__() -> "itkVectorContainerULNPI2US_Pointer":
    """itkVectorContainerULNPI2US___New_orig__() -> itkVectorContainerULNPI2US_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US___New_orig__()

def itkVectorContainerULNPI2US_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI2US *":
    """itkVectorContainerULNPI2US_cast(itkLightObject obj) -> itkVectorContainerULNPI2US"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI2US_cast(obj)

class itkVectorContainerULNPI3D(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI3D_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI3D_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI3D_Pointer":
        """Clone(itkVectorContainerULNPI3D self) -> itkVectorContainerULNPI3D_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI3D,std::allocator< itkNodePairI3D > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI3D self) -> std::vector< itkNodePairI3D,std::allocator< itkNodePairI3D > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI3D,std::allocator< itkNodePairI3D > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI3D self) -> std::vector< itkNodePairI3D,std::allocator< itkNodePairI3D > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI3D const &":
        """
        ElementAt(itkVectorContainerULNPI3D self, unsigned long arg0) -> itkNodePairI3D
        ElementAt(itkVectorContainerULNPI3D self, unsigned long arg0) -> itkNodePairI3D

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI3D &":
        """
        CreateElementAt(itkVectorContainerULNPI3D self, unsigned long arg0) -> itkNodePairI3D

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI3D":
        """
        GetElement(itkVectorContainerULNPI3D self, unsigned long arg0) -> itkNodePairI3D

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3D') -> "void":
        """
        SetElement(itkVectorContainerULNPI3D self, unsigned long arg0, itkNodePairI3D arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3D') -> "void":
        """
        InsertElement(itkVectorContainerULNPI3D self, unsigned long arg0, itkNodePairI3D arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI3D self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI3D') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI3D self, unsigned long arg0, itkNodePairI3D arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI3D self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI3D self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI3D self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI3D self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI3D self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI3D self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI3D

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3D *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI3D"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI3D

        Create a new object of the class itkVectorContainerULNPI3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI3D.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Clone, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CastToSTLContainer, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CastToSTLConstContainer, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_ElementAt, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CreateElementAt, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_GetElement, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_SetElement, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_InsertElement, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_IndexExists, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_GetElementIfIndexExists, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_CreateIndex, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_DeleteIndex, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Size, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Reserve, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Squeeze, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3D_Initialize, None, itkVectorContainerULNPI3D)
itkVectorContainerULNPI3D_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_swigregister
itkVectorContainerULNPI3D_swigregister(itkVectorContainerULNPI3D)

def itkVectorContainerULNPI3D___New_orig__() -> "itkVectorContainerULNPI3D_Pointer":
    """itkVectorContainerULNPI3D___New_orig__() -> itkVectorContainerULNPI3D_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D___New_orig__()

def itkVectorContainerULNPI3D_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3D *":
    """itkVectorContainerULNPI3D_cast(itkLightObject obj) -> itkVectorContainerULNPI3D"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3D_cast(obj)

class itkVectorContainerULNPI3F(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI3F_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI3F_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI3F_Pointer":
        """Clone(itkVectorContainerULNPI3F self) -> itkVectorContainerULNPI3F_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI3F,std::allocator< itkNodePairI3F > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI3F self) -> std::vector< itkNodePairI3F,std::allocator< itkNodePairI3F > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI3F,std::allocator< itkNodePairI3F > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI3F self) -> std::vector< itkNodePairI3F,std::allocator< itkNodePairI3F > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI3F const &":
        """
        ElementAt(itkVectorContainerULNPI3F self, unsigned long arg0) -> itkNodePairI3F
        ElementAt(itkVectorContainerULNPI3F self, unsigned long arg0) -> itkNodePairI3F

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI3F &":
        """
        CreateElementAt(itkVectorContainerULNPI3F self, unsigned long arg0) -> itkNodePairI3F

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI3F":
        """
        GetElement(itkVectorContainerULNPI3F self, unsigned long arg0) -> itkNodePairI3F

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3F') -> "void":
        """
        SetElement(itkVectorContainerULNPI3F self, unsigned long arg0, itkNodePairI3F arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3F') -> "void":
        """
        InsertElement(itkVectorContainerULNPI3F self, unsigned long arg0, itkNodePairI3F arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI3F self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI3F') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI3F self, unsigned long arg0, itkNodePairI3F arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI3F self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI3F self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI3F self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI3F self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI3F self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI3F self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI3F

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3F *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI3F"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI3F

        Create a new object of the class itkVectorContainerULNPI3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI3F.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Clone, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CastToSTLContainer, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CastToSTLConstContainer, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_ElementAt, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CreateElementAt, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_GetElement, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_SetElement, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_InsertElement, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_IndexExists, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_GetElementIfIndexExists, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_CreateIndex, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_DeleteIndex, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Size, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Reserve, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Squeeze, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3F_Initialize, None, itkVectorContainerULNPI3F)
itkVectorContainerULNPI3F_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_swigregister
itkVectorContainerULNPI3F_swigregister(itkVectorContainerULNPI3F)

def itkVectorContainerULNPI3F___New_orig__() -> "itkVectorContainerULNPI3F_Pointer":
    """itkVectorContainerULNPI3F___New_orig__() -> itkVectorContainerULNPI3F_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F___New_orig__()

def itkVectorContainerULNPI3F_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3F *":
    """itkVectorContainerULNPI3F_cast(itkLightObject obj) -> itkVectorContainerULNPI3F"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3F_cast(obj)

class itkVectorContainerULNPI3SS(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI3SS_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI3SS_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI3SS_Pointer":
        """Clone(itkVectorContainerULNPI3SS self) -> itkVectorContainerULNPI3SS_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI3SS,std::allocator< itkNodePairI3SS > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI3SS self) -> std::vector< itkNodePairI3SS,std::allocator< itkNodePairI3SS > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI3SS,std::allocator< itkNodePairI3SS > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI3SS self) -> std::vector< itkNodePairI3SS,std::allocator< itkNodePairI3SS > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI3SS const &":
        """
        ElementAt(itkVectorContainerULNPI3SS self, unsigned long arg0) -> itkNodePairI3SS
        ElementAt(itkVectorContainerULNPI3SS self, unsigned long arg0) -> itkNodePairI3SS

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI3SS &":
        """
        CreateElementAt(itkVectorContainerULNPI3SS self, unsigned long arg0) -> itkNodePairI3SS

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI3SS":
        """
        GetElement(itkVectorContainerULNPI3SS self, unsigned long arg0) -> itkNodePairI3SS

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3SS') -> "void":
        """
        SetElement(itkVectorContainerULNPI3SS self, unsigned long arg0, itkNodePairI3SS arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3SS') -> "void":
        """
        InsertElement(itkVectorContainerULNPI3SS self, unsigned long arg0, itkNodePairI3SS arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI3SS self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI3SS') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI3SS self, unsigned long arg0, itkNodePairI3SS arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI3SS self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI3SS self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI3SS self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI3SS self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI3SS self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI3SS self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI3SS

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3SS *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI3SS"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI3SS

        Create a new object of the class itkVectorContainerULNPI3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI3SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI3SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI3SS.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Clone, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CastToSTLContainer, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CastToSTLConstContainer, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_ElementAt, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CreateElementAt, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_GetElement, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_SetElement, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_InsertElement, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_IndexExists, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_GetElementIfIndexExists, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_CreateIndex, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_DeleteIndex, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Size, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Reserve, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Squeeze, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_Initialize, None, itkVectorContainerULNPI3SS)
itkVectorContainerULNPI3SS_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_swigregister
itkVectorContainerULNPI3SS_swigregister(itkVectorContainerULNPI3SS)

def itkVectorContainerULNPI3SS___New_orig__() -> "itkVectorContainerULNPI3SS_Pointer":
    """itkVectorContainerULNPI3SS___New_orig__() -> itkVectorContainerULNPI3SS_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS___New_orig__()

def itkVectorContainerULNPI3SS_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3SS *":
    """itkVectorContainerULNPI3SS_cast(itkLightObject obj) -> itkVectorContainerULNPI3SS"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3SS_cast(obj)

class itkVectorContainerULNPI3UC(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI3UC_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI3UC_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI3UC_Pointer":
        """Clone(itkVectorContainerULNPI3UC self) -> itkVectorContainerULNPI3UC_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI3UC,std::allocator< itkNodePairI3UC > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI3UC self) -> std::vector< itkNodePairI3UC,std::allocator< itkNodePairI3UC > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI3UC,std::allocator< itkNodePairI3UC > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI3UC self) -> std::vector< itkNodePairI3UC,std::allocator< itkNodePairI3UC > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI3UC const &":
        """
        ElementAt(itkVectorContainerULNPI3UC self, unsigned long arg0) -> itkNodePairI3UC
        ElementAt(itkVectorContainerULNPI3UC self, unsigned long arg0) -> itkNodePairI3UC

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI3UC &":
        """
        CreateElementAt(itkVectorContainerULNPI3UC self, unsigned long arg0) -> itkNodePairI3UC

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI3UC":
        """
        GetElement(itkVectorContainerULNPI3UC self, unsigned long arg0) -> itkNodePairI3UC

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3UC') -> "void":
        """
        SetElement(itkVectorContainerULNPI3UC self, unsigned long arg0, itkNodePairI3UC arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3UC') -> "void":
        """
        InsertElement(itkVectorContainerULNPI3UC self, unsigned long arg0, itkNodePairI3UC arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI3UC self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI3UC') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI3UC self, unsigned long arg0, itkNodePairI3UC arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI3UC self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI3UC self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI3UC self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI3UC self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI3UC self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI3UC self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI3UC

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3UC *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI3UC"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI3UC

        Create a new object of the class itkVectorContainerULNPI3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI3UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI3UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI3UC.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Clone, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CastToSTLContainer, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CastToSTLConstContainer, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_ElementAt, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CreateElementAt, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_GetElement, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_SetElement, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_InsertElement, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_IndexExists, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_GetElementIfIndexExists, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_CreateIndex, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_DeleteIndex, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Size, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Reserve, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Squeeze, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_Initialize, None, itkVectorContainerULNPI3UC)
itkVectorContainerULNPI3UC_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_swigregister
itkVectorContainerULNPI3UC_swigregister(itkVectorContainerULNPI3UC)

def itkVectorContainerULNPI3UC___New_orig__() -> "itkVectorContainerULNPI3UC_Pointer":
    """itkVectorContainerULNPI3UC___New_orig__() -> itkVectorContainerULNPI3UC_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC___New_orig__()

def itkVectorContainerULNPI3UC_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3UC *":
    """itkVectorContainerULNPI3UC_cast(itkLightObject obj) -> itkVectorContainerULNPI3UC"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3UC_cast(obj)

class itkVectorContainerULNPI3US(ITKCommonBasePython.itkObject):
    """


    Define a front-end to the STL "vector" container that conforms to
    the IndexedContainerInterface.

    This is a full-fleged Object, so there is modification time, debug,
    and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  An INTEGRAL type for use in indexing the vector.

    TElement:  The element type stored in the container.

    \\sphinx
    \\sphinxexample{Core/Common/IterateOnAVectorContainer,Iterate On A
    Vector Container} \\endsphinx

    C++ includes: itkVectorContainer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkVectorContainerULNPI3US_Pointer":
        """__New_orig__() -> itkVectorContainerULNPI3US_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkVectorContainerULNPI3US_Pointer":
        """Clone(itkVectorContainerULNPI3US self) -> itkVectorContainerULNPI3US_Pointer"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Clone(self)


    def CastToSTLContainer(self) -> "std::vector< itkNodePairI3US,std::allocator< itkNodePairI3US > > &":
        """
        CastToSTLContainer(itkVectorContainerULNPI3US self) -> std::vector< itkNodePairI3US,std::allocator< itkNodePairI3US > > &

        Cast the
        container to a STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CastToSTLContainer(self)


    def CastToSTLConstContainer(self) -> "std::vector< itkNodePairI3US,std::allocator< itkNodePairI3US > > const &":
        """
        CastToSTLConstContainer(itkVectorContainerULNPI3US self) -> std::vector< itkNodePairI3US,std::allocator< itkNodePairI3US > > const &

        Cast the
        container to a const STL container type 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CastToSTLConstContainer(self)


    def ElementAt(self, *args) -> "itkNodePairI3US const &":
        """
        ElementAt(itkVectorContainerULNPI3US self, unsigned long arg0) -> itkNodePairI3US
        ElementAt(itkVectorContainerULNPI3US self, unsigned long arg0) -> itkNodePairI3US

        Get a reference to the
        element at the given index. It is assumed that the index exists, and
        it will not automatically be created. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_ElementAt(self, *args)


    def CreateElementAt(self, arg0: 'unsigned long') -> "itkNodePairI3US &":
        """
        CreateElementAt(itkVectorContainerULNPI3US self, unsigned long arg0) -> itkNodePairI3US

        Get a reference to
        the element at the given index. If the element location does not
        exist, it will be created with a default element value.

        It is assumed that the value of the element is modified through the
        reference. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CreateElementAt(self, arg0)


    def GetElement(self, arg0: 'unsigned long') -> "itkNodePairI3US":
        """
        GetElement(itkVectorContainerULNPI3US self, unsigned long arg0) -> itkNodePairI3US

        Read the element from
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_GetElement(self, arg0)


    def SetElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3US') -> "void":
        """
        SetElement(itkVectorContainerULNPI3US self, unsigned long arg0, itkNodePairI3US arg1)

        Set the element value at
        the given index. It is assumed that the index exists. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_SetElement(self, arg0, arg1)


    def InsertElement(self, arg0: 'unsigned long', arg1: 'itkNodePairI3US') -> "void":
        """
        InsertElement(itkVectorContainerULNPI3US self, unsigned long arg0, itkNodePairI3US arg1)

        Set the element value
        at the given index. If the element location does not exist, it will be
        created with a default element value. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_InsertElement(self, arg0, arg1)


    def IndexExists(self, arg0: 'unsigned long') -> "bool":
        """
        IndexExists(itkVectorContainerULNPI3US self, unsigned long arg0) -> bool

        Check if the index
        range of the vector is large enough to allow the given index without
        expansion. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_IndexExists(self, arg0)


    def GetElementIfIndexExists(self, arg0: 'unsigned long', arg1: 'itkNodePairI3US') -> "bool":
        """
        GetElementIfIndexExists(itkVectorContainerULNPI3US self, unsigned long arg0, itkNodePairI3US arg1) -> bool

        Check if
        the given index is in range of the vector. If it is not, return false.
        Otherwise, set the element through the pointer (if it isn't nullptr),
        and return true. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_GetElementIfIndexExists(self, arg0, arg1)


    def CreateIndex(self, arg0: 'unsigned long') -> "void":
        """
        CreateIndex(itkVectorContainerULNPI3US self, unsigned long arg0)

        Make sure that the
        index range of the vector is large enough to allow the given index,
        expanding it if necessary. The index will contain the default element
        regardless of whether expansion occurred. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CreateIndex(self, arg0)


    def DeleteIndex(self, arg0: 'unsigned long') -> "void":
        """
        DeleteIndex(itkVectorContainerULNPI3US self, unsigned long arg0)

        Delete the element
        defined by the index identifier. In practice, it doesn't make sense to
        delete a vector index. Instead, this method just overwrite the index
        with the default element. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_DeleteIndex(self, arg0)


    def Size(self) -> "unsigned long":
        """
        Size(itkVectorContainerULNPI3US self) -> unsigned long

        Get the number of elements
        currently stored in the vector. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Size(self)


    def Reserve(self, arg0: 'unsigned long') -> "void":
        """
        Reserve(itkVectorContainerULNPI3US self, unsigned long arg0)

        Tell the container to
        allocate enough memory to allow at least as many elements as the size
        given to be stored. In the generic case of ITK containers this is NOT
        guaranteed to actually allocate any memory, but it is useful if the
        implementation of the container allocates contiguous storage. In the
        particular implementation of this VectorContainer the call to this
        method actually allocates memory for the number of elements defined by
        ElementIdentifier. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Reserve(self, arg0)


    def Squeeze(self) -> "void":
        """
        Squeeze(itkVectorContainerULNPI3US self)

        Tell the container to try
        to minimize its memory usage for storage of the current number of
        elements. This is NOT guaranteed to decrease memory usage. This method
        is included here mainly for providing a unified API with other
        containers in the toolkit. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Squeeze(self)


    def Initialize(self) -> "void":
        """
        Initialize(itkVectorContainerULNPI3US self)

        Clear the elements. The
        final size will be zero. 
        """
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Initialize(self)

    __swig_destroy__ = _ITKFastMarchingBasePython.delete_itkVectorContainerULNPI3US

    def cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3US *":
        """cast(itkLightObject obj) -> itkVectorContainerULNPI3US"""
        return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULNPI3US

        Create a new object of the class itkVectorContainerULNPI3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorContainerULNPI3US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkVectorContainerULNPI3US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULNPI3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULNPI3US.Clone = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Clone, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.CastToSTLContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CastToSTLContainer, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.CastToSTLConstContainer = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CastToSTLConstContainer, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.ElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_ElementAt, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.CreateElementAt = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CreateElementAt, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.GetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_GetElement, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.SetElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_SetElement, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.InsertElement = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_InsertElement, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.IndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_IndexExists, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.GetElementIfIndexExists = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_GetElementIfIndexExists, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.CreateIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_CreateIndex, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.DeleteIndex = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_DeleteIndex, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.Size = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Size, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.Reserve = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Reserve, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.Squeeze = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Squeeze, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US.Initialize = new_instancemethod(_ITKFastMarchingBasePython.itkVectorContainerULNPI3US_Initialize, None, itkVectorContainerULNPI3US)
itkVectorContainerULNPI3US_swigregister = _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_swigregister
itkVectorContainerULNPI3US_swigregister(itkVectorContainerULNPI3US)

def itkVectorContainerULNPI3US___New_orig__() -> "itkVectorContainerULNPI3US_Pointer":
    """itkVectorContainerULNPI3US___New_orig__() -> itkVectorContainerULNPI3US_Pointer"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US___New_orig__()

def itkVectorContainerULNPI3US_cast(obj: 'itkLightObject') -> "itkVectorContainerULNPI3US *":
    """itkVectorContainerULNPI3US_cast(itkLightObject obj) -> itkVectorContainerULNPI3US"""
    return _ITKFastMarchingBasePython.itkVectorContainerULNPI3US_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fast_marching_base(*args, **kwargs):
    """Procedural interface for FastMarchingBase"""
    import itk
    instance = itk.FastMarchingBase.New(*args, **kwargs)
    return instance.__internal_call__()

def fast_marching_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FastMarchingBase, itkTemplate.itkTemplate):
        filter_object = itk.FastMarchingBase.values()[0]
    else:
        filter_object = itk.FastMarchingBase

    fast_marching_base.__doc__ = filter_object.__doc__
    fast_marching_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    fast_marching_base.__doc__ += "Available Keyword Arguments:\n"
    fast_marching_base.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



