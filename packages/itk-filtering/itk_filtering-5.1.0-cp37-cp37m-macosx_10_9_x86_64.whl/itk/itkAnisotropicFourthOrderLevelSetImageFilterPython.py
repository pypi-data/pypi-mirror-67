# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkAnisotropicFourthOrderLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAnisotropicFourthOrderLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAnisotropicFourthOrderLevelSetImageFilterPython
            return _itkAnisotropicFourthOrderLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAnisotropicFourthOrderLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAnisotropicFourthOrderLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAnisotropicFourthOrderLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSparseFieldFourthOrderLevelSetImageFilterPython
import itkVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkSparseFieldLevelSetImageFilterPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython
import itkFiniteDifferenceFunctionPython
import itkLevelSetFunctionPython

def itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_New():
  return itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New()


def itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_New():
  return itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New()


def itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_New():
  return itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New()


def itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_New():
  return itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New()

class itkAnisotropicFourthOrderLevelSetImageFilterID2ID2(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2):
    """


    This class implements the 4th-order level set anisotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    anisotropic surface smoothing algorithm. This is a feature preserving
    surface processing algorithm that smoothes surfaces but will preserve
    certain features (creases, edges, other sharp features) depending on
    the NormalProcessConductanceParameter. PARAMETERS As mentioned before,
    the IsoSurfaceValue parameter chooses which isosurface of the input to
    process. The MaxFilterIterations parameter determine the number of
    iterations for which this filter will run. The more iterations, the
    more smoothing. NormalProcessConductanceParameter controls the amount
    of feature preservation. Its units are in curvature. Reasonable values
    for almost all surface are in the range 0.1-0.25 . The shape of the
    surface where the total curvature is above the value of this parameter
    will tend to stay the same (be preserved) or even be sharpened. The
    lower the value, the more feature preservation. Notice the difference
    between the number of iterations parameter and the conductance
    parameter: for a given conductance parameter, surface features with
    high enough curvature will be preserved even if the number of
    iterations is set to be extremely large.

    C++ includes: itkAnisotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
        """Clone(itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 self) -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.Clone = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Clone, None, itkAnisotropicFourthOrderLevelSetImageFilterID2ID2)
itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.GetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_GetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterID2ID2)
itkAnisotropicFourthOrderLevelSetImageFilterID2ID2.SetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_SetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterID2ID2)
itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_swigregister = _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_swigregister
itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterID2ID2)

def itkAnisotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer":
    """itkAnisotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_Pointer"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2___New_orig__()

def itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterID2ID2 *":
    """itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID2ID2"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID2ID2_cast(obj)

class itkAnisotropicFourthOrderLevelSetImageFilterID3ID3(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3):
    """


    This class implements the 4th-order level set anisotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    anisotropic surface smoothing algorithm. This is a feature preserving
    surface processing algorithm that smoothes surfaces but will preserve
    certain features (creases, edges, other sharp features) depending on
    the NormalProcessConductanceParameter. PARAMETERS As mentioned before,
    the IsoSurfaceValue parameter chooses which isosurface of the input to
    process. The MaxFilterIterations parameter determine the number of
    iterations for which this filter will run. The more iterations, the
    more smoothing. NormalProcessConductanceParameter controls the amount
    of feature preservation. Its units are in curvature. Reasonable values
    for almost all surface are in the range 0.1-0.25 . The shape of the
    surface where the total curvature is above the value of this parameter
    will tend to stay the same (be preserved) or even be sharpened. The
    lower the value, the more feature preservation. Notice the difference
    between the number of iterations parameter and the conductance
    parameter: for a given conductance parameter, surface features with
    high enough curvature will be preserved even if the number of
    iterations is set to be extremely large.

    C++ includes: itkAnisotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
        """Clone(itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 self) -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.Clone = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Clone, None, itkAnisotropicFourthOrderLevelSetImageFilterID3ID3)
itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.GetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_GetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterID3ID3)
itkAnisotropicFourthOrderLevelSetImageFilterID3ID3.SetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_SetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterID3ID3)
itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_swigregister = _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_swigregister
itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterID3ID3)

def itkAnisotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer":
    """itkAnisotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_Pointer"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3___New_orig__()

def itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterID3ID3 *":
    """itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterID3ID3"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterID3ID3_cast(obj)

class itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2):
    """


    This class implements the 4th-order level set anisotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    anisotropic surface smoothing algorithm. This is a feature preserving
    surface processing algorithm that smoothes surfaces but will preserve
    certain features (creases, edges, other sharp features) depending on
    the NormalProcessConductanceParameter. PARAMETERS As mentioned before,
    the IsoSurfaceValue parameter chooses which isosurface of the input to
    process. The MaxFilterIterations parameter determine the number of
    iterations for which this filter will run. The more iterations, the
    more smoothing. NormalProcessConductanceParameter controls the amount
    of feature preservation. Its units are in curvature. Reasonable values
    for almost all surface are in the range 0.1-0.25 . The shape of the
    surface where the total curvature is above the value of this parameter
    will tend to stay the same (be preserved) or even be sharpened. The
    lower the value, the more feature preservation. Notice the difference
    between the number of iterations parameter and the conductance
    parameter: for a given conductance parameter, surface features with
    high enough curvature will be preserved even if the number of
    iterations is set to be extremely large.

    C++ includes: itkAnisotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
        """Clone(itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 self) -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.Clone = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Clone, None, itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2)
itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.GetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_GetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2)
itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2.SetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_SetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2)
itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister = _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister
itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2)

def itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer":
    """itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_Pointer"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2___New_orig__()

def itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2 *":
    """itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

class itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3(itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3):
    """


    This class implements the 4th-order level set anisotropic diffusion
    (smoothing) PDE.

    INPUT and OUTPUT This is a volume to volume filter; however, it is
    meant to process (smooth) surfaces. The input surface is an isosurface
    of the input volume. The isosurface value to be processed can be set
    by calling SetIsoSurfaceValue (default is 0). The output surface is
    the 0-isosurface of the output volume, regardless of the input
    isosurface value. To visualize the input/output surfaces to this
    filter a mesh extraction method such as marching cubes can be used.

    The 4th-order level set PDE framework is proposed as an alternative to
    2nd order PDEs. By order we mean the order of differentiation of the
    level set image function required to compute derivatives for updating
    the image. For instance, the popular curvature flow uses 2nd-order
    derivatives of the level set image; hence, it is a 2nd order PDE.

    2nd-order curvature flow can be used by itself to smooth surfaces as a
    post-processing filter or it can be used with other PDE terms such as
    a Canny edge term that attracts the surface to strong edges in a data
    image. Curvature flow smoothes surfaces by making the surface move in
    the direction that will decrease surface area.

    The 4th-order PDE framework provides an improvement over curvature
    flow. Instead of making the surface move to decrease surface area it
    makes the surface move to decrease total curvature. Similar to
    curvature flow, these PDEs can be used alone or in conjunction with
    data terms. The 4th-order PDE framework is implemented in
    SparseFieldFourthOrderLevelSetImageFilter. This filter class, which is
    derived from that, uses the 4th-order PDE by itself to implement an
    anisotropic surface smoothing algorithm. This is a feature preserving
    surface processing algorithm that smoothes surfaces but will preserve
    certain features (creases, edges, other sharp features) depending on
    the NormalProcessConductanceParameter. PARAMETERS As mentioned before,
    the IsoSurfaceValue parameter chooses which isosurface of the input to
    process. The MaxFilterIterations parameter determine the number of
    iterations for which this filter will run. The more iterations, the
    more smoothing. NormalProcessConductanceParameter controls the amount
    of feature preservation. Its units are in curvature. Reasonable values
    for almost all surface are in the range 0.1-0.25 . The shape of the
    surface where the total curvature is above the value of this parameter
    will tend to stay the same (be preserved) or even be sharpened. The
    lower the value, the more feature preservation. Notice the difference
    between the number of iterations parameter and the conductance
    parameter: for a given conductance parameter, surface features with
    high enough curvature will be preserved even if the number of
    iterations is set to be extremely large.

    C++ includes: itkAnisotropicFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
        """Clone(itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 self) -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Clone(self)


    def GetMaxFilterIteration(self) -> "unsigned int":
        """GetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 self) -> unsigned int"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_GetMaxFilterIteration(self)


    def SetMaxFilterIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxFilterIteration(itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_SetMaxFilterIteration(self, _arg)

    __swig_destroy__ = _itkAnisotropicFourthOrderLevelSetImageFilterPython.delete_itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3"""
        return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3

        Create a new object of the class itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.Clone = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Clone, None, itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3)
itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.GetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_GetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3)
itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3.SetMaxFilterIteration = new_instancemethod(_itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_SetMaxFilterIteration, None, itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3)
itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister = _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister
itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_swigregister(itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3)

def itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__() -> "itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer":
    """itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__() -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_Pointer"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3___New_orig__()

def itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3 *":
    """itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_cast(itkLightObject obj) -> itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3"""
    return _itkAnisotropicFourthOrderLevelSetImageFilterPython.itkAnisotropicFourthOrderLevelSetImageFilterIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anisotropic_fourth_order_level_set_image_filter(*args, **kwargs):
    """Procedural interface for AnisotropicFourthOrderLevelSetImageFilter"""
    import itk
    instance = itk.AnisotropicFourthOrderLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anisotropic_fourth_order_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AnisotropicFourthOrderLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AnisotropicFourthOrderLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.AnisotropicFourthOrderLevelSetImageFilter

    anisotropic_fourth_order_level_set_image_filter.__doc__ = filter_object.__doc__
    anisotropic_fourth_order_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anisotropic_fourth_order_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    anisotropic_fourth_order_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



