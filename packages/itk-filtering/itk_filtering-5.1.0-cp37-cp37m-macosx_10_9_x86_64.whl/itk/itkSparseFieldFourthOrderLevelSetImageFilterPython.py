# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSparseFieldFourthOrderLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSparseFieldFourthOrderLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSparseFieldFourthOrderLevelSetImageFilterPython
            return _itkSparseFieldFourthOrderLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSparseFieldFourthOrderLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSparseFieldFourthOrderLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSparseFieldFourthOrderLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkVectorPython
import itkFixedArrayPython
import pyBasePython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkSparseFieldLevelSetImageFilterPython
import ITKCommonBasePython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkPointPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython
import itkFiniteDifferenceFunctionPython
import itkLevelSetFunctionPython

def itkSparseFieldLayerNBNID3_New():
  return itkSparseFieldLayerNBNID3.New()


def itkSparseFieldLayerNBNIF3_New():
  return itkSparseFieldLayerNBNIF3.New()


def itkSparseFieldLayerNBNID2_New():
  return itkSparseFieldLayerNBNID2.New()


def itkSparseFieldLayerNBNIF2_New():
  return itkSparseFieldLayerNBNIF2.New()


def itkLevelSetFunctionWithRefitTermID3SINBNID33_New():
  return itkLevelSetFunctionWithRefitTermID3SINBNID33.New()


def itkLevelSetFunctionWithRefitTermIF3SINBNIF33_New():
  return itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New()


def itkLevelSetFunctionWithRefitTermID2SINBNID22_New():
  return itkLevelSetFunctionWithRefitTermID2SINBNID22.New()


def itkLevelSetFunctionWithRefitTermIF2SINBNIF22_New():
  return itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New()


def itkSparseImageNBNID33_New():
  return itkSparseImageNBNID33.New()


def itkSparseImageNBNIF33_New():
  return itkSparseImageNBNIF33.New()


def itkSparseImageNBNID22_New():
  return itkSparseImageNBNID22.New()


def itkSparseImageNBNIF22_New():
  return itkSparseImageNBNIF22.New()


def itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_New():
  return itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.New()


def itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_New():
  return itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.New()


def itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_New():
  return itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.New()


def itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_New():
  return itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.New()


def itkImageNBNID33_New():
  return itkImageNBNID33.New()


def itkImageNBNIF33_New():
  return itkImageNBNIF33.New()


def itkImageNBNID22_New():
  return itkImageNBNID22.New()


def itkImageNBNIF22_New():
  return itkImageNBNIF22.New()

class vectoritkImageNBNIF22(object):
    """Proxy of C++ std::vector<(itkImageNBNIF22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageNBNIF22 self) -> SwigPyIterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageNBNIF22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageNBNIF22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___bool__(self)


    def __len__(self) -> "std::vector< itkImageNBNIF22_Pointer >::size_type":
        """__len__(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageNBNIF22_Pointer >::difference_type', j: 'std::vector< itkImageNBNIF22_Pointer >::difference_type') -> "std::vector< itkImageNBNIF22_Pointer,std::allocator< itkImageNBNIF22_Pointer > > *":
        """__getslice__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i, std::vector< itkImageNBNIF22_Pointer >::difference_type j) -> vectoritkImageNBNIF22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i, std::vector< itkImageNBNIF22_Pointer >::difference_type j)
        __setslice__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i, std::vector< itkImageNBNIF22_Pointer >::difference_type j, vectoritkImageNBNIF22 v)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageNBNIF22_Pointer >::difference_type', j: 'std::vector< itkImageNBNIF22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i, std::vector< itkImageNBNIF22_Pointer >::difference_type j)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i)
        __delitem__(vectoritkImageNBNIF22 self, PySliceObject * slice)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageNBNIF22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageNBNIF22 self, PySliceObject * slice) -> vectoritkImageNBNIF22
        __getitem__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i) -> std::vector< itkImageNBNIF22_Pointer >::value_type const &
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageNBNIF22 self, PySliceObject * slice, vectoritkImageNBNIF22 v)
        __setitem__(vectoritkImageNBNIF22 self, PySliceObject * slice)
        __setitem__(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::difference_type i, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageNBNIF22_Pointer >::value_type":
        """pop(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::value_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop(self)


    def append(self, x: 'std::vector< itkImageNBNIF22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageNBNIF22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_empty(self)


    def size(self) -> "std::vector< itkImageNBNIF22_Pointer >::size_type":
        """size(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_size(self)


    def swap(self, v: 'vectoritkImageNBNIF22') -> "void":
        """swap(vectoritkImageNBNIF22 self, vectoritkImageNBNIF22 v)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swap(self, v)


    def begin(self) -> "std::vector< itkImageNBNIF22_Pointer >::iterator":
        """begin(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_begin(self)


    def end(self) -> "std::vector< itkImageNBNIF22_Pointer >::iterator":
        """end(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_end(self)


    def rbegin(self) -> "std::vector< itkImageNBNIF22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rbegin(self)


    def rend(self) -> "std::vector< itkImageNBNIF22_Pointer >::reverse_iterator":
        """rend(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageNBNIF22 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageNBNIF22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::allocator_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageNBNIF22 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageNBNIF22_Pointer >::iterator":
        """
        erase(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::iterator pos) -> std::vector< itkImageNBNIF22_Pointer >::iterator
        erase(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::iterator first, std::vector< itkImageNBNIF22_Pointer >::iterator last) -> std::vector< itkImageNBNIF22_Pointer >::iterator
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageNBNIF22_Pointer)> self) -> vectoritkImageNBNIF22
        __init__(std::vector<(itkImageNBNIF22_Pointer)> self, vectoritkImageNBNIF22 arg2) -> vectoritkImageNBNIF22
        __init__(std::vector<(itkImageNBNIF22_Pointer)> self, std::vector< itkImageNBNIF22_Pointer >::size_type size) -> vectoritkImageNBNIF22
        __init__(std::vector<(itkImageNBNIF22_Pointer)> self, std::vector< itkImageNBNIF22_Pointer >::size_type size, std::vector< itkImageNBNIF22_Pointer >::value_type const & value) -> vectoritkImageNBNIF22
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNIF22(*args))

    def push_back(self, x: 'std::vector< itkImageNBNIF22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_push_back(self, x)


    def front(self) -> "std::vector< itkImageNBNIF22_Pointer >::value_type const &":
        """front(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_front(self)


    def back(self) -> "std::vector< itkImageNBNIF22_Pointer >::value_type const &":
        """back(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_back(self)


    def assign(self, n: 'std::vector< itkImageNBNIF22_Pointer >::size_type', x: 'std::vector< itkImageNBNIF22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type n, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type new_size)
        resize(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type new_size, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::iterator pos, std::vector< itkImageNBNIF22_Pointer >::value_type const & x) -> std::vector< itkImageNBNIF22_Pointer >::iterator
        insert(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::iterator pos, std::vector< itkImageNBNIF22_Pointer >::size_type n, std::vector< itkImageNBNIF22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageNBNIF22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageNBNIF22 self, std::vector< itkImageNBNIF22_Pointer >::size_type n)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageNBNIF22_Pointer >::size_type":
        """capacity(vectoritkImageNBNIF22 self) -> std::vector< itkImageNBNIF22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_capacity(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNIF22
vectoritkImageNBNIF22.iterator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_iterator, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__nonzero__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___nonzero__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__bool__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___bool__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__len__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___len__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__getslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getslice__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__setslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setslice__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__delslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delslice__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__delitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___delitem__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__getitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___getitem__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.__setitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22___setitem__, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.pop = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.append = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_append, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_empty, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_size, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.swap = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swap, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.begin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_begin, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.end = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_end, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.rbegin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rbegin, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.rend = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_rend, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.clear = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_clear, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.get_allocator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_get_allocator, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.pop_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_pop_back, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.erase = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_erase, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.push_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_push_back, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_front, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_back, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.assign = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_assign, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.resize = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_resize, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.insert = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_insert, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.reserve = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_reserve, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22.capacity = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_capacity, None, vectoritkImageNBNIF22)
vectoritkImageNBNIF22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF22_swigregister
vectoritkImageNBNIF22_swigregister(vectoritkImageNBNIF22)

class vectoritkImageNBNID22(object):
    """Proxy of C++ std::vector<(itkImageNBNID22_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageNBNID22 self) -> SwigPyIterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageNBNID22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageNBNID22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___bool__(self)


    def __len__(self) -> "std::vector< itkImageNBNID22_Pointer >::size_type":
        """__len__(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageNBNID22_Pointer >::difference_type', j: 'std::vector< itkImageNBNID22_Pointer >::difference_type') -> "std::vector< itkImageNBNID22_Pointer,std::allocator< itkImageNBNID22_Pointer > > *":
        """__getslice__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i, std::vector< itkImageNBNID22_Pointer >::difference_type j) -> vectoritkImageNBNID22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i, std::vector< itkImageNBNID22_Pointer >::difference_type j)
        __setslice__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i, std::vector< itkImageNBNID22_Pointer >::difference_type j, vectoritkImageNBNID22 v)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageNBNID22_Pointer >::difference_type', j: 'std::vector< itkImageNBNID22_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i, std::vector< itkImageNBNID22_Pointer >::difference_type j)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i)
        __delitem__(vectoritkImageNBNID22 self, PySliceObject * slice)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageNBNID22_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageNBNID22 self, PySliceObject * slice) -> vectoritkImageNBNID22
        __getitem__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i) -> std::vector< itkImageNBNID22_Pointer >::value_type const &
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageNBNID22 self, PySliceObject * slice, vectoritkImageNBNID22 v)
        __setitem__(vectoritkImageNBNID22 self, PySliceObject * slice)
        __setitem__(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::difference_type i, std::vector< itkImageNBNID22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageNBNID22_Pointer >::value_type":
        """pop(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::value_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop(self)


    def append(self, x: 'std::vector< itkImageNBNID22_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageNBNID22 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_empty(self)


    def size(self) -> "std::vector< itkImageNBNID22_Pointer >::size_type":
        """size(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_size(self)


    def swap(self, v: 'vectoritkImageNBNID22') -> "void":
        """swap(vectoritkImageNBNID22 self, vectoritkImageNBNID22 v)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swap(self, v)


    def begin(self) -> "std::vector< itkImageNBNID22_Pointer >::iterator":
        """begin(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_begin(self)


    def end(self) -> "std::vector< itkImageNBNID22_Pointer >::iterator":
        """end(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_end(self)


    def rbegin(self) -> "std::vector< itkImageNBNID22_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rbegin(self)


    def rend(self) -> "std::vector< itkImageNBNID22_Pointer >::reverse_iterator":
        """rend(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageNBNID22 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_clear(self)


    def get_allocator(self) -> "std::vector< itkImageNBNID22_Pointer >::allocator_type":
        """get_allocator(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::allocator_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageNBNID22 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageNBNID22_Pointer >::iterator":
        """
        erase(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::iterator pos) -> std::vector< itkImageNBNID22_Pointer >::iterator
        erase(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::iterator first, std::vector< itkImageNBNID22_Pointer >::iterator last) -> std::vector< itkImageNBNID22_Pointer >::iterator
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageNBNID22_Pointer)> self) -> vectoritkImageNBNID22
        __init__(std::vector<(itkImageNBNID22_Pointer)> self, vectoritkImageNBNID22 arg2) -> vectoritkImageNBNID22
        __init__(std::vector<(itkImageNBNID22_Pointer)> self, std::vector< itkImageNBNID22_Pointer >::size_type size) -> vectoritkImageNBNID22
        __init__(std::vector<(itkImageNBNID22_Pointer)> self, std::vector< itkImageNBNID22_Pointer >::size_type size, std::vector< itkImageNBNID22_Pointer >::value_type const & value) -> vectoritkImageNBNID22
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNID22(*args))

    def push_back(self, x: 'std::vector< itkImageNBNID22_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_push_back(self, x)


    def front(self) -> "std::vector< itkImageNBNID22_Pointer >::value_type const &":
        """front(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_front(self)


    def back(self) -> "std::vector< itkImageNBNID22_Pointer >::value_type const &":
        """back(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_back(self)


    def assign(self, n: 'std::vector< itkImageNBNID22_Pointer >::size_type', x: 'std::vector< itkImageNBNID22_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type n, std::vector< itkImageNBNID22_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type new_size)
        resize(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type new_size, std::vector< itkImageNBNID22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::iterator pos, std::vector< itkImageNBNID22_Pointer >::value_type const & x) -> std::vector< itkImageNBNID22_Pointer >::iterator
        insert(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::iterator pos, std::vector< itkImageNBNID22_Pointer >::size_type n, std::vector< itkImageNBNID22_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageNBNID22_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageNBNID22 self, std::vector< itkImageNBNID22_Pointer >::size_type n)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageNBNID22_Pointer >::size_type":
        """capacity(vectoritkImageNBNID22 self) -> std::vector< itkImageNBNID22_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_capacity(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNID22
vectoritkImageNBNID22.iterator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_iterator, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__nonzero__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___nonzero__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__bool__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___bool__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__len__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___len__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__getslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getslice__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__setslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setslice__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__delslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delslice__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__delitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___delitem__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__getitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___getitem__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.__setitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22___setitem__, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.pop = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.append = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_append, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_empty, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_size, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.swap = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swap, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.begin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_begin, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.end = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_end, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.rbegin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rbegin, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.rend = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_rend, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.clear = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_clear, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.get_allocator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_get_allocator, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.pop_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_pop_back, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.erase = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_erase, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.push_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_push_back, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_front, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_back, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.assign = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_assign, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.resize = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_resize, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.insert = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_insert, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.reserve = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_reserve, None, vectoritkImageNBNID22)
vectoritkImageNBNID22.capacity = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_capacity, None, vectoritkImageNBNID22)
vectoritkImageNBNID22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID22_swigregister
vectoritkImageNBNID22_swigregister(vectoritkImageNBNID22)

class vectoritkImageNBNIF33(object):
    """Proxy of C++ std::vector<(itkImageNBNIF33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageNBNIF33 self) -> SwigPyIterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageNBNIF33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageNBNIF33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___bool__(self)


    def __len__(self) -> "std::vector< itkImageNBNIF33_Pointer >::size_type":
        """__len__(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageNBNIF33_Pointer >::difference_type', j: 'std::vector< itkImageNBNIF33_Pointer >::difference_type') -> "std::vector< itkImageNBNIF33_Pointer,std::allocator< itkImageNBNIF33_Pointer > > *":
        """__getslice__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i, std::vector< itkImageNBNIF33_Pointer >::difference_type j) -> vectoritkImageNBNIF33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i, std::vector< itkImageNBNIF33_Pointer >::difference_type j)
        __setslice__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i, std::vector< itkImageNBNIF33_Pointer >::difference_type j, vectoritkImageNBNIF33 v)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageNBNIF33_Pointer >::difference_type', j: 'std::vector< itkImageNBNIF33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i, std::vector< itkImageNBNIF33_Pointer >::difference_type j)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i)
        __delitem__(vectoritkImageNBNIF33 self, PySliceObject * slice)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageNBNIF33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageNBNIF33 self, PySliceObject * slice) -> vectoritkImageNBNIF33
        __getitem__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i) -> std::vector< itkImageNBNIF33_Pointer >::value_type const &
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageNBNIF33 self, PySliceObject * slice, vectoritkImageNBNIF33 v)
        __setitem__(vectoritkImageNBNIF33 self, PySliceObject * slice)
        __setitem__(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::difference_type i, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageNBNIF33_Pointer >::value_type":
        """pop(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::value_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop(self)


    def append(self, x: 'std::vector< itkImageNBNIF33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageNBNIF33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_empty(self)


    def size(self) -> "std::vector< itkImageNBNIF33_Pointer >::size_type":
        """size(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_size(self)


    def swap(self, v: 'vectoritkImageNBNIF33') -> "void":
        """swap(vectoritkImageNBNIF33 self, vectoritkImageNBNIF33 v)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swap(self, v)


    def begin(self) -> "std::vector< itkImageNBNIF33_Pointer >::iterator":
        """begin(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_begin(self)


    def end(self) -> "std::vector< itkImageNBNIF33_Pointer >::iterator":
        """end(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_end(self)


    def rbegin(self) -> "std::vector< itkImageNBNIF33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rbegin(self)


    def rend(self) -> "std::vector< itkImageNBNIF33_Pointer >::reverse_iterator":
        """rend(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageNBNIF33 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageNBNIF33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::allocator_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageNBNIF33 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageNBNIF33_Pointer >::iterator":
        """
        erase(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::iterator pos) -> std::vector< itkImageNBNIF33_Pointer >::iterator
        erase(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::iterator first, std::vector< itkImageNBNIF33_Pointer >::iterator last) -> std::vector< itkImageNBNIF33_Pointer >::iterator
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageNBNIF33_Pointer)> self) -> vectoritkImageNBNIF33
        __init__(std::vector<(itkImageNBNIF33_Pointer)> self, vectoritkImageNBNIF33 arg2) -> vectoritkImageNBNIF33
        __init__(std::vector<(itkImageNBNIF33_Pointer)> self, std::vector< itkImageNBNIF33_Pointer >::size_type size) -> vectoritkImageNBNIF33
        __init__(std::vector<(itkImageNBNIF33_Pointer)> self, std::vector< itkImageNBNIF33_Pointer >::size_type size, std::vector< itkImageNBNIF33_Pointer >::value_type const & value) -> vectoritkImageNBNIF33
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNIF33(*args))

    def push_back(self, x: 'std::vector< itkImageNBNIF33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_push_back(self, x)


    def front(self) -> "std::vector< itkImageNBNIF33_Pointer >::value_type const &":
        """front(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_front(self)


    def back(self) -> "std::vector< itkImageNBNIF33_Pointer >::value_type const &":
        """back(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_back(self)


    def assign(self, n: 'std::vector< itkImageNBNIF33_Pointer >::size_type', x: 'std::vector< itkImageNBNIF33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type n, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type new_size)
        resize(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type new_size, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::iterator pos, std::vector< itkImageNBNIF33_Pointer >::value_type const & x) -> std::vector< itkImageNBNIF33_Pointer >::iterator
        insert(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::iterator pos, std::vector< itkImageNBNIF33_Pointer >::size_type n, std::vector< itkImageNBNIF33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageNBNIF33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageNBNIF33 self, std::vector< itkImageNBNIF33_Pointer >::size_type n)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageNBNIF33_Pointer >::size_type":
        """capacity(vectoritkImageNBNIF33 self) -> std::vector< itkImageNBNIF33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_capacity(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNIF33
vectoritkImageNBNIF33.iterator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_iterator, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__nonzero__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___nonzero__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__bool__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___bool__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__len__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___len__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__getslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getslice__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__setslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setslice__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__delslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delslice__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__delitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___delitem__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__getitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___getitem__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.__setitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33___setitem__, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.pop = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.append = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_append, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_empty, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_size, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.swap = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swap, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.begin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_begin, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.end = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_end, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.rbegin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rbegin, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.rend = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_rend, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.clear = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_clear, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.get_allocator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_get_allocator, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.pop_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_pop_back, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.erase = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_erase, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.push_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_push_back, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_front, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_back, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.assign = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_assign, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.resize = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_resize, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.insert = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_insert, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.reserve = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_reserve, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33.capacity = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_capacity, None, vectoritkImageNBNIF33)
vectoritkImageNBNIF33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNIF33_swigregister
vectoritkImageNBNIF33_swigregister(vectoritkImageNBNIF33)

class vectoritkImageNBNID33(object):
    """Proxy of C++ std::vector<(itkImageNBNID33_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(vectoritkImageNBNID33 self) -> SwigPyIterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(vectoritkImageNBNID33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(vectoritkImageNBNID33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___bool__(self)


    def __len__(self) -> "std::vector< itkImageNBNID33_Pointer >::size_type":
        """__len__(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___len__(self)


    def __getslice__(self, i: 'std::vector< itkImageNBNID33_Pointer >::difference_type', j: 'std::vector< itkImageNBNID33_Pointer >::difference_type') -> "std::vector< itkImageNBNID33_Pointer,std::allocator< itkImageNBNID33_Pointer > > *":
        """__getslice__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i, std::vector< itkImageNBNID33_Pointer >::difference_type j) -> vectoritkImageNBNID33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i, std::vector< itkImageNBNID33_Pointer >::difference_type j)
        __setslice__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i, std::vector< itkImageNBNID33_Pointer >::difference_type j, vectoritkImageNBNID33 v)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< itkImageNBNID33_Pointer >::difference_type', j: 'std::vector< itkImageNBNID33_Pointer >::difference_type') -> "void":
        """__delslice__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i, std::vector< itkImageNBNID33_Pointer >::difference_type j)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i)
        __delitem__(vectoritkImageNBNID33 self, PySliceObject * slice)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< itkImageNBNID33_Pointer >::value_type const &":
        """
        __getitem__(vectoritkImageNBNID33 self, PySliceObject * slice) -> vectoritkImageNBNID33
        __getitem__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i) -> std::vector< itkImageNBNID33_Pointer >::value_type const &
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(vectoritkImageNBNID33 self, PySliceObject * slice, vectoritkImageNBNID33 v)
        __setitem__(vectoritkImageNBNID33 self, PySliceObject * slice)
        __setitem__(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::difference_type i, std::vector< itkImageNBNID33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setitem__(self, *args)


    def pop(self) -> "std::vector< itkImageNBNID33_Pointer >::value_type":
        """pop(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::value_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop(self)


    def append(self, x: 'std::vector< itkImageNBNID33_Pointer >::value_type const &') -> "void":
        """append(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_append(self, x)


    def empty(self) -> "bool":
        """empty(vectoritkImageNBNID33 self) -> bool"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_empty(self)


    def size(self) -> "std::vector< itkImageNBNID33_Pointer >::size_type":
        """size(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_size(self)


    def swap(self, v: 'vectoritkImageNBNID33') -> "void":
        """swap(vectoritkImageNBNID33 self, vectoritkImageNBNID33 v)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swap(self, v)


    def begin(self) -> "std::vector< itkImageNBNID33_Pointer >::iterator":
        """begin(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_begin(self)


    def end(self) -> "std::vector< itkImageNBNID33_Pointer >::iterator":
        """end(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_end(self)


    def rbegin(self) -> "std::vector< itkImageNBNID33_Pointer >::reverse_iterator":
        """rbegin(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rbegin(self)


    def rend(self) -> "std::vector< itkImageNBNID33_Pointer >::reverse_iterator":
        """rend(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::reverse_iterator"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rend(self)


    def clear(self) -> "void":
        """clear(vectoritkImageNBNID33 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_clear(self)


    def get_allocator(self) -> "std::vector< itkImageNBNID33_Pointer >::allocator_type":
        """get_allocator(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::allocator_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(vectoritkImageNBNID33 self)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop_back(self)


    def erase(self, *args) -> "std::vector< itkImageNBNID33_Pointer >::iterator":
        """
        erase(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::iterator pos) -> std::vector< itkImageNBNID33_Pointer >::iterator
        erase(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::iterator first, std::vector< itkImageNBNID33_Pointer >::iterator last) -> std::vector< itkImageNBNID33_Pointer >::iterator
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageNBNID33_Pointer)> self) -> vectoritkImageNBNID33
        __init__(std::vector<(itkImageNBNID33_Pointer)> self, vectoritkImageNBNID33 arg2) -> vectoritkImageNBNID33
        __init__(std::vector<(itkImageNBNID33_Pointer)> self, std::vector< itkImageNBNID33_Pointer >::size_type size) -> vectoritkImageNBNID33
        __init__(std::vector<(itkImageNBNID33_Pointer)> self, std::vector< itkImageNBNID33_Pointer >::size_type size, std::vector< itkImageNBNID33_Pointer >::value_type const & value) -> vectoritkImageNBNID33
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_vectoritkImageNBNID33(*args))

    def push_back(self, x: 'std::vector< itkImageNBNID33_Pointer >::value_type const &') -> "void":
        """push_back(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_push_back(self, x)


    def front(self) -> "std::vector< itkImageNBNID33_Pointer >::value_type const &":
        """front(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_front(self)


    def back(self) -> "std::vector< itkImageNBNID33_Pointer >::value_type const &":
        """back(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::value_type const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_back(self)


    def assign(self, n: 'std::vector< itkImageNBNID33_Pointer >::size_type', x: 'std::vector< itkImageNBNID33_Pointer >::value_type const &') -> "void":
        """assign(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type n, std::vector< itkImageNBNID33_Pointer >::value_type const & x)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type new_size)
        resize(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type new_size, std::vector< itkImageNBNID33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::iterator pos, std::vector< itkImageNBNID33_Pointer >::value_type const & x) -> std::vector< itkImageNBNID33_Pointer >::iterator
        insert(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::iterator pos, std::vector< itkImageNBNID33_Pointer >::size_type n, std::vector< itkImageNBNID33_Pointer >::value_type const & x)
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_insert(self, *args)


    def reserve(self, n: 'std::vector< itkImageNBNID33_Pointer >::size_type') -> "void":
        """reserve(vectoritkImageNBNID33 self, std::vector< itkImageNBNID33_Pointer >::size_type n)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_reserve(self, n)


    def capacity(self) -> "std::vector< itkImageNBNID33_Pointer >::size_type":
        """capacity(vectoritkImageNBNID33 self) -> std::vector< itkImageNBNID33_Pointer >::size_type"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_capacity(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_vectoritkImageNBNID33
vectoritkImageNBNID33.iterator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_iterator, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__nonzero__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___nonzero__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__bool__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___bool__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__len__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___len__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__getslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getslice__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__setslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setslice__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__delslice__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delslice__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__delitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___delitem__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__getitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___getitem__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.__setitem__ = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33___setitem__, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.pop = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.append = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_append, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_empty, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_size, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.swap = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swap, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.begin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_begin, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.end = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_end, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.rbegin = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rbegin, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.rend = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_rend, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.clear = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_clear, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.get_allocator = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_get_allocator, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.pop_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_pop_back, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.erase = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_erase, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.push_back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_push_back, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_front, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.back = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_back, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.assign = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_assign, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.resize = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_resize, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.insert = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_insert, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.reserve = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_reserve, None, vectoritkImageNBNID33)
vectoritkImageNBNID33.capacity = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_capacity, None, vectoritkImageNBNID33)
vectoritkImageNBNID33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.vectoritkImageNBNID33_swigregister
vectoritkImageNBNID33_swigregister(vectoritkImageNBNID33)

class itkImageNBNID22(itkImagePython.itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface  \\sphinx
    \\sphinxexample{Core/Common/SetPixelValueInOneImage,Set Pixel Value
    In One Image} \\sphinxexample{Core/Common/GetImageSize,Get Image
    Size} \\sphinxexample{Core/Common/SortITKIndex,Sort ITK Index}
    \\sphinxexample{Core/Common/ReturnObjectFromFunction,Return Object
    From Function}
    \\sphinxexample{Core/Common/CreateAnotherInstanceOfAnImage,Create
    Another Instance Of An Image}
    \\sphinxexample{Core/Common/PassImageToFunction,Pass Image To
    Function} \\sphinxexample{Core/Common/DeepCopyImage,Deep Copy Image}
    \\sphinxexample{Core/Common/ThrowException,Throw Exception}
    \\sphinxexample{Core/Common/GetOrSetMemberVariableOfITKClass,Get Or
    Set Member Variable Of ITK Class}
    \\sphinxexample{Core/Common/MiniPipeline,Mini Pipeline}
    \\sphinxexample{Core/Common/CheckIfModuleIsPresent,Check If Module
    Is Present} \\sphinxexample{Core/Common/DisplayImage,Display Image}
    \\endsphinx

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageNBNID22_Pointer":
        """__New_orig__() -> itkImageNBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageNBNID22_Pointer":
        """Clone(itkImageNBNID22 self) -> itkImageNBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageNBNID22 self, bool initializePixels=False)
        Allocate(itkImageNBNID22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkNormalBandNodeID2') -> "void":
        """
        FillBuffer(itkImageNBNID22 self, itkNormalBandNodeID2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkNormalBandNodeID2') -> "void":
        """
        SetPixel(itkImageNBNID22 self, itkIndex2 index, itkNormalBandNodeID2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkNormalBandNodeID2 *&":
        """
        GetPixel(itkImageNBNID22 self, itkIndex2 index) -> itkNormalBandNodeID2
        GetPixel(itkImageNBNID22 self, itkIndex2 index) -> itkNormalBandNodeID2 *&

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkNormalBandNodeID2 *const *":
        """
        GetBufferPointer(itkImageNBNID22 self) -> itkNormalBandNodeID2
        GetBufferPointer(itkImageNBNID22 self) -> itkNormalBandNodeID2 *const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,2 > > * > const *":
        """
        GetPixelContainer(itkImageNBNID22 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,2 > > * >
        GetPixelContainer(itkImageNBNID22 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,2 > > * > const *

        Return a pointer
        to the container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,2 > > * > *') -> "void":
        """
        SetPixelContainer(itkImageNBNID22 self, itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,2 > > * > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageNBNID22') -> "void":
        """
        Graft(itkImageNBNID22 self, itkImageNBNID22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,2 > > * > const":
        """
        GetPixelAccessor(itkImageNBNID22 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,2 > > * >
        GetPixelAccessor(itkImageNBNID22 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,2 > > * > const

        Return the Pixel
        Accesor object 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,2 > > *,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageNBNID22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,2 > > *,2 > >
        GetNeighborhoodAccessor(itkImageNBNID22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,2 > > *,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNID22

    def cast(obj: 'itkLightObject') -> "itkImageNBNID22 *":
        """cast(itkLightObject obj) -> itkImageNBNID22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageNBNID22

        Create a new object of the class itkImageNBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNID22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageNBNID22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageNBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

itkImageNBNID22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Clone, None, itkImageNBNID22)
itkImageNBNID22.Allocate = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Allocate, None, itkImageNBNID22)
itkImageNBNID22.FillBuffer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_FillBuffer, None, itkImageNBNID22)
itkImageNBNID22.SetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixel, None, itkImageNBNID22)
itkImageNBNID22.GetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixel, None, itkImageNBNID22)
itkImageNBNID22.GetBufferPointer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetBufferPointer, None, itkImageNBNID22)
itkImageNBNID22.GetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelContainer, None, itkImageNBNID22)
itkImageNBNID22.SetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_SetPixelContainer, None, itkImageNBNID22)
itkImageNBNID22.Graft = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_Graft, None, itkImageNBNID22)
itkImageNBNID22.GetPixelAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetPixelAccessor, None, itkImageNBNID22)
itkImageNBNID22.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_GetNeighborhoodAccessor, None, itkImageNBNID22)
itkImageNBNID22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_swigregister
itkImageNBNID22_swigregister(itkImageNBNID22)

def itkImageNBNID22___New_orig__() -> "itkImageNBNID22_Pointer":
    """itkImageNBNID22___New_orig__() -> itkImageNBNID22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22___New_orig__()

def itkImageNBNID22_cast(obj: 'itkLightObject') -> "itkImageNBNID22 *":
    """itkImageNBNID22_cast(itkLightObject obj) -> itkImageNBNID22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID22_cast(obj)

class itkImageNBNID33(itkImagePython.itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface  \\sphinx
    \\sphinxexample{Core/Common/SetPixelValueInOneImage,Set Pixel Value
    In One Image} \\sphinxexample{Core/Common/GetImageSize,Get Image
    Size} \\sphinxexample{Core/Common/SortITKIndex,Sort ITK Index}
    \\sphinxexample{Core/Common/ReturnObjectFromFunction,Return Object
    From Function}
    \\sphinxexample{Core/Common/CreateAnotherInstanceOfAnImage,Create
    Another Instance Of An Image}
    \\sphinxexample{Core/Common/PassImageToFunction,Pass Image To
    Function} \\sphinxexample{Core/Common/DeepCopyImage,Deep Copy Image}
    \\sphinxexample{Core/Common/ThrowException,Throw Exception}
    \\sphinxexample{Core/Common/GetOrSetMemberVariableOfITKClass,Get Or
    Set Member Variable Of ITK Class}
    \\sphinxexample{Core/Common/MiniPipeline,Mini Pipeline}
    \\sphinxexample{Core/Common/CheckIfModuleIsPresent,Check If Module
    Is Present} \\sphinxexample{Core/Common/DisplayImage,Display Image}
    \\endsphinx

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageNBNID33_Pointer":
        """__New_orig__() -> itkImageNBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageNBNID33_Pointer":
        """Clone(itkImageNBNID33 self) -> itkImageNBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageNBNID33 self, bool initializePixels=False)
        Allocate(itkImageNBNID33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkNormalBandNodeID3') -> "void":
        """
        FillBuffer(itkImageNBNID33 self, itkNormalBandNodeID3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkNormalBandNodeID3') -> "void":
        """
        SetPixel(itkImageNBNID33 self, itkIndex3 index, itkNormalBandNodeID3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkNormalBandNodeID3 *&":
        """
        GetPixel(itkImageNBNID33 self, itkIndex3 index) -> itkNormalBandNodeID3
        GetPixel(itkImageNBNID33 self, itkIndex3 index) -> itkNormalBandNodeID3 *&

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkNormalBandNodeID3 *const *":
        """
        GetBufferPointer(itkImageNBNID33 self) -> itkNormalBandNodeID3
        GetBufferPointer(itkImageNBNID33 self) -> itkNormalBandNodeID3 *const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,3 > > * > const *":
        """
        GetPixelContainer(itkImageNBNID33 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,3 > > * >
        GetPixelContainer(itkImageNBNID33 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,3 > > * > const *

        Return a pointer
        to the container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,3 > > * > *') -> "void":
        """
        SetPixelContainer(itkImageNBNID33 self, itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< double,3 > > * > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageNBNID33') -> "void":
        """
        Graft(itkImageNBNID33 self, itkImageNBNID33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,3 > > * > const":
        """
        GetPixelAccessor(itkImageNBNID33 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,3 > > * >
        GetPixelAccessor(itkImageNBNID33 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< double,3 > > * > const

        Return the Pixel
        Accesor object 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,3 > > *,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageNBNID33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,3 > > *,3 > >
        GetNeighborhoodAccessor(itkImageNBNID33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< double,3 > > *,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNID33

    def cast(obj: 'itkLightObject') -> "itkImageNBNID33 *":
        """cast(itkLightObject obj) -> itkImageNBNID33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageNBNID33

        Create a new object of the class itkImageNBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNID33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageNBNID33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageNBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

itkImageNBNID33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Clone, None, itkImageNBNID33)
itkImageNBNID33.Allocate = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Allocate, None, itkImageNBNID33)
itkImageNBNID33.FillBuffer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_FillBuffer, None, itkImageNBNID33)
itkImageNBNID33.SetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixel, None, itkImageNBNID33)
itkImageNBNID33.GetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixel, None, itkImageNBNID33)
itkImageNBNID33.GetBufferPointer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetBufferPointer, None, itkImageNBNID33)
itkImageNBNID33.GetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelContainer, None, itkImageNBNID33)
itkImageNBNID33.SetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_SetPixelContainer, None, itkImageNBNID33)
itkImageNBNID33.Graft = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_Graft, None, itkImageNBNID33)
itkImageNBNID33.GetPixelAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetPixelAccessor, None, itkImageNBNID33)
itkImageNBNID33.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_GetNeighborhoodAccessor, None, itkImageNBNID33)
itkImageNBNID33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_swigregister
itkImageNBNID33_swigregister(itkImageNBNID33)

def itkImageNBNID33___New_orig__() -> "itkImageNBNID33_Pointer":
    """itkImageNBNID33___New_orig__() -> itkImageNBNID33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33___New_orig__()

def itkImageNBNID33_cast(obj: 'itkLightObject') -> "itkImageNBNID33 *":
    """itkImageNBNID33_cast(itkLightObject obj) -> itkImageNBNID33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNID33_cast(obj)

class itkImageNBNIF22(itkImagePython.itkImageBase2):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface  \\sphinx
    \\sphinxexample{Core/Common/SetPixelValueInOneImage,Set Pixel Value
    In One Image} \\sphinxexample{Core/Common/GetImageSize,Get Image
    Size} \\sphinxexample{Core/Common/SortITKIndex,Sort ITK Index}
    \\sphinxexample{Core/Common/ReturnObjectFromFunction,Return Object
    From Function}
    \\sphinxexample{Core/Common/CreateAnotherInstanceOfAnImage,Create
    Another Instance Of An Image}
    \\sphinxexample{Core/Common/PassImageToFunction,Pass Image To
    Function} \\sphinxexample{Core/Common/DeepCopyImage,Deep Copy Image}
    \\sphinxexample{Core/Common/ThrowException,Throw Exception}
    \\sphinxexample{Core/Common/GetOrSetMemberVariableOfITKClass,Get Or
    Set Member Variable Of ITK Class}
    \\sphinxexample{Core/Common/MiniPipeline,Mini Pipeline}
    \\sphinxexample{Core/Common/CheckIfModuleIsPresent,Check If Module
    Is Present} \\sphinxexample{Core/Common/DisplayImage,Display Image}
    \\endsphinx

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageNBNIF22_Pointer":
        """__New_orig__() -> itkImageNBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageNBNIF22_Pointer":
        """Clone(itkImageNBNIF22 self) -> itkImageNBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageNBNIF22 self, bool initializePixels=False)
        Allocate(itkImageNBNIF22 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkNormalBandNodeIF2') -> "void":
        """
        FillBuffer(itkImageNBNIF22 self, itkNormalBandNodeIF2 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex2', value: 'itkNormalBandNodeIF2') -> "void":
        """
        SetPixel(itkImageNBNIF22 self, itkIndex2 index, itkNormalBandNodeIF2 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkNormalBandNodeIF2 *&":
        """
        GetPixel(itkImageNBNIF22 self, itkIndex2 index) -> itkNormalBandNodeIF2
        GetPixel(itkImageNBNIF22 self, itkIndex2 index) -> itkNormalBandNodeIF2 *&

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkNormalBandNodeIF2 *const *":
        """
        GetBufferPointer(itkImageNBNIF22 self) -> itkNormalBandNodeIF2
        GetBufferPointer(itkImageNBNIF22 self) -> itkNormalBandNodeIF2 *const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,2 > > * > const *":
        """
        GetPixelContainer(itkImageNBNIF22 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,2 > > * >
        GetPixelContainer(itkImageNBNIF22 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,2 > > * > const *

        Return a pointer
        to the container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,2 > > * > *') -> "void":
        """
        SetPixelContainer(itkImageNBNIF22 self, itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,2 > > * > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageNBNIF22') -> "void":
        """
        Graft(itkImageNBNIF22 self, itkImageNBNIF22 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,2 > > * > const":
        """
        GetPixelAccessor(itkImageNBNIF22 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,2 > > * >
        GetPixelAccessor(itkImageNBNIF22 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,2 > > * > const

        Return the Pixel
        Accesor object 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,2 > > *,2 > > const":
        """
        GetNeighborhoodAccessor(itkImageNBNIF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,2 > > *,2 > >
        GetNeighborhoodAccessor(itkImageNBNIF22 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,2 > > *,2 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNIF22

    def cast(obj: 'itkLightObject') -> "itkImageNBNIF22 *":
        """cast(itkLightObject obj) -> itkImageNBNIF22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageNBNIF22

        Create a new object of the class itkImageNBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNIF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageNBNIF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageNBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

itkImageNBNIF22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Clone, None, itkImageNBNIF22)
itkImageNBNIF22.Allocate = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Allocate, None, itkImageNBNIF22)
itkImageNBNIF22.FillBuffer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_FillBuffer, None, itkImageNBNIF22)
itkImageNBNIF22.SetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixel, None, itkImageNBNIF22)
itkImageNBNIF22.GetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixel, None, itkImageNBNIF22)
itkImageNBNIF22.GetBufferPointer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetBufferPointer, None, itkImageNBNIF22)
itkImageNBNIF22.GetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelContainer, None, itkImageNBNIF22)
itkImageNBNIF22.SetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_SetPixelContainer, None, itkImageNBNIF22)
itkImageNBNIF22.Graft = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_Graft, None, itkImageNBNIF22)
itkImageNBNIF22.GetPixelAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetPixelAccessor, None, itkImageNBNIF22)
itkImageNBNIF22.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_GetNeighborhoodAccessor, None, itkImageNBNIF22)
itkImageNBNIF22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_swigregister
itkImageNBNIF22_swigregister(itkImageNBNIF22)

def itkImageNBNIF22___New_orig__() -> "itkImageNBNIF22_Pointer":
    """itkImageNBNIF22___New_orig__() -> itkImageNBNIF22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22___New_orig__()

def itkImageNBNIF22_cast(obj: 'itkLightObject') -> "itkImageNBNIF22 *":
    """itkImageNBNIF22_cast(itkLightObject obj) -> itkImageNBNIF22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF22_cast(obj)

class itkImageNBNIF33(itkImagePython.itkImageBase3):
    """


    Templated n-dimensional image class.

    Images are templated over a pixel type (modeling the dependent
    variables), and a dimension (number of independent variables). The
    container for the pixel data is the ImportImageContainer.

    Within the pixel container, images are modelled as arrays, defined by
    a start index and a size.

    The superclass of Image, ImageBase, defines the geometry of the image
    in terms of where the image sits in physical space, how the image is
    oriented in physical space, the size of a pixel, and the extent of the
    image itself. ImageBase provides the methods to convert between the
    index and physical space coordinate frames.

    Pixels can be accessed directly using the SetPixel() and GetPixel()
    methods or can be accessed via iterators that define the region of the
    image they traverse.

    The pixel type may be one of the native types; a Insight-defined class
    type such as Vector; or a user-defined type. Note that depending on
    the type of pixel that you use, the process objects (i.e., those
    filters processing data objects) may not operate on the image and/or
    pixel type. This becomes apparent at compile-time because operator
    overloading (for the pixel type) is not supported.

    The data in an image is arranged in a 1D array as
    [][][][slice][row][col] with the column index varying most rapidly.
    The Index type reverses the order so that with Index[0] = col,
    Index[1] = row, Index[2] = slice, ...

    See:  ImageBase

    See:  ImageContainerInterface  \\sphinx
    \\sphinxexample{Core/Common/SetPixelValueInOneImage,Set Pixel Value
    In One Image} \\sphinxexample{Core/Common/GetImageSize,Get Image
    Size} \\sphinxexample{Core/Common/SortITKIndex,Sort ITK Index}
    \\sphinxexample{Core/Common/ReturnObjectFromFunction,Return Object
    From Function}
    \\sphinxexample{Core/Common/CreateAnotherInstanceOfAnImage,Create
    Another Instance Of An Image}
    \\sphinxexample{Core/Common/PassImageToFunction,Pass Image To
    Function} \\sphinxexample{Core/Common/DeepCopyImage,Deep Copy Image}
    \\sphinxexample{Core/Common/ThrowException,Throw Exception}
    \\sphinxexample{Core/Common/GetOrSetMemberVariableOfITKClass,Get Or
    Set Member Variable Of ITK Class}
    \\sphinxexample{Core/Common/MiniPipeline,Mini Pipeline}
    \\sphinxexample{Core/Common/CheckIfModuleIsPresent,Check If Module
    Is Present} \\sphinxexample{Core/Common/DisplayImage,Display Image}
    \\endsphinx

    C++ includes: itkImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkImageNBNIF33_Pointer":
        """__New_orig__() -> itkImageNBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkImageNBNIF33_Pointer":
        """Clone(itkImageNBNIF33 self) -> itkImageNBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Clone(self)


    def Allocate(self, initializePixels: 'bool'=False) -> "void":
        """
        Allocate(itkImageNBNIF33 self, bool initializePixels=False)
        Allocate(itkImageNBNIF33 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions(). 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Allocate(self, initializePixels)


    def FillBuffer(self, value: 'itkNormalBandNodeIF3') -> "void":
        """
        FillBuffer(itkImageNBNIF33 self, itkNormalBandNodeIF3 value)

        Fill the image buffer
        with a value. Be sure to call Allocate() first. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_FillBuffer(self, value)


    def SetPixel(self, index: 'itkIndex3', value: 'itkNormalBandNodeIF3') -> "void":
        """
        SetPixel(itkImageNBNIF33 self, itkIndex3 index, itkNormalBandNodeIF3 value)

        Set a pixel value.

        Allocate() needs to have been called first for efficiency, this
        function does not check that the image has actually been allocated
        yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixel(self, index, value)


    def GetPixel(self, *args) -> "itkNormalBandNodeIF3 *&":
        """
        GetPixel(itkImageNBNIF33 self, itkIndex3 index) -> itkNormalBandNodeIF3
        GetPixel(itkImageNBNIF33 self, itkIndex3 index) -> itkNormalBandNodeIF3 *&

        Get a reference to a pixel
        (e.g. for editing).

        For efficiency, this function does not check that the image has
        actually been allocated yet. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixel(self, *args)


    def GetBufferPointer(self, *args) -> "itkNormalBandNodeIF3 *const *":
        """
        GetBufferPointer(itkImageNBNIF33 self) -> itkNormalBandNodeIF3
        GetBufferPointer(itkImageNBNIF33 self) -> itkNormalBandNodeIF3 *const *

        Return a pointer
        to the beginning of the buffer. This is used by the image iterator
        class. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args) -> "itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,3 > > * > const *":
        """
        GetPixelContainer(itkImageNBNIF33 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,3 > > * >
        GetPixelContainer(itkImageNBNIF33 self) -> itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,3 > > * > const *

        Return a pointer
        to the container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container: 'itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,3 > > * > *') -> "void":
        """
        SetPixelContainer(itkImageNBNIF33 self, itk::ImportImageContainer< unsigned long,itk::NormalBandNode< itk::Image< float,3 > > * > * container)

        Set the container
        to use. Note that this does not cause the DataObject to be modified.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixelContainer(self, container)


    def Graft(self, data: 'itkImageNBNIF33') -> "void":
        """
        Graft(itkImageNBNIF33 self, itkImageNBNIF33 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. The
        implementation here refers to the superclass' implementation and then
        copies over the pixel container. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Graft(self, data)


    def GetPixelAccessor(self, *args) -> "itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,3 > > * > const":
        """
        GetPixelAccessor(itkImageNBNIF33 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,3 > > * >
        GetPixelAccessor(itkImageNBNIF33 self) -> itk::DefaultPixelAccessor< itk::NormalBandNode< itk::Image< float,3 > > * > const

        Return the Pixel
        Accesor object 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,3 > > *,3 > > const":
        """
        GetNeighborhoodAccessor(itkImageNBNIF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,3 > > *,3 > >
        GetNeighborhoodAccessor(itkImageNBNIF33 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::NormalBandNode< itk::Image< float,3 > > *,3 > > const

        Return the
        NeighborhoodAccessor functor 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkImageNBNIF33

    def cast(obj: 'itkLightObject') -> "itkImageNBNIF33 *":
        """cast(itkLightObject obj) -> itkImageNBNIF33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageNBNIF33

        Create a new object of the class itkImageNBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageNBNIF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageNBNIF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageNBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

itkImageNBNIF33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Clone, None, itkImageNBNIF33)
itkImageNBNIF33.Allocate = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Allocate, None, itkImageNBNIF33)
itkImageNBNIF33.FillBuffer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_FillBuffer, None, itkImageNBNIF33)
itkImageNBNIF33.SetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixel, None, itkImageNBNIF33)
itkImageNBNIF33.GetPixel = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixel, None, itkImageNBNIF33)
itkImageNBNIF33.GetBufferPointer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetBufferPointer, None, itkImageNBNIF33)
itkImageNBNIF33.GetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelContainer, None, itkImageNBNIF33)
itkImageNBNIF33.SetPixelContainer = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_SetPixelContainer, None, itkImageNBNIF33)
itkImageNBNIF33.Graft = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_Graft, None, itkImageNBNIF33)
itkImageNBNIF33.GetPixelAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetPixelAccessor, None, itkImageNBNIF33)
itkImageNBNIF33.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_GetNeighborhoodAccessor, None, itkImageNBNIF33)
itkImageNBNIF33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_swigregister
itkImageNBNIF33_swigregister(itkImageNBNIF33)

def itkImageNBNIF33___New_orig__() -> "itkImageNBNIF33_Pointer":
    """itkImageNBNIF33___New_orig__() -> itkImageNBNIF33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33___New_orig__()

def itkImageNBNIF33_cast(obj: 'itkLightObject') -> "itkImageNBNIF33 *":
    """itkImageNBNIF33_cast(itkLightObject obj) -> itkImageNBNIF33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkImageNBNIF33_cast(obj)

class itkLevelSetFunctionWithRefitTermID2SINBNID22(itkLevelSetFunctionPython.itkLevelSetFunctionID2):
    """


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead.

    C++ includes: itkLevelSetFunctionWithRefitTerm.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer":
        """__New_orig__() -> itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer":
        """Clone(itkLevelSetFunctionWithRefitTermID2SINBNID22 self) -> itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_Clone(self)


    def SetRefitWeight(self, w: 'double const') -> "void":
        """
        SetRefitWeight(itkLevelSetFunctionWithRefitTermID2SINBNID22 self, double const w)

        Set the relative
        weight of the refitting term. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetRefitWeight(self, w)


    def SetOtherPropagationWeight(self, w: 'double const') -> "void":
        """
        SetOtherPropagationWeight(itkLevelSetFunctionWithRefitTermID2SINBNID22 self, double const w)

        This is
        the weight for propagation terms (other than refitting) that can be
        defined by subclasses. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetOtherPropagationWeight(self, w)


    def SetSparseTargetImage(self, im: 'itkSparseImageNBNID22') -> "void":
        """
        SetSparseTargetImage(itkLevelSetFunctionWithRefitTermID2SINBNID22 self, itkSparseImageNBNID22 im)

        Sets the
        sparse image which has nodes containing the member variable
        m_Curvature used in refitting. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetSparseTargetImage(self, im)


    def GetSparseTargetImage(self) -> "itkSparseImageNBNID22 *":
        """
        GetSparseTargetImage(itkLevelSetFunctionWithRefitTermID2SINBNID22 self) -> itkSparseImageNBNID22

        Returns the
        sparse image. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_GetSparseTargetImage(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermID2SINBNID22

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermID2SINBNID22 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermID2SINBNID22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermID2SINBNID22

        Create a new object of the class itkLevelSetFunctionWithRefitTermID2SINBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermID2SINBNID22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermID2SINBNID22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionWithRefitTermID2SINBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionWithRefitTermID2SINBNID22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_Clone, None, itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22.SetRefitWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetRefitWeight, None, itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22.SetOtherPropagationWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetOtherPropagationWeight, None, itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22.SetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_SetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22.GetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_GetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermID2SINBNID22)
itkLevelSetFunctionWithRefitTermID2SINBNID22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_swigregister
itkLevelSetFunctionWithRefitTermID2SINBNID22_swigregister(itkLevelSetFunctionWithRefitTermID2SINBNID22)

def itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__() -> "itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer":
    """itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__() -> itkLevelSetFunctionWithRefitTermID2SINBNID22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22___New_orig__()

def itkLevelSetFunctionWithRefitTermID2SINBNID22_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermID2SINBNID22 *":
    """itkLevelSetFunctionWithRefitTermID2SINBNID22_cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermID2SINBNID22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID2SINBNID22_cast(obj)

class itkLevelSetFunctionWithRefitTermID3SINBNID33(itkLevelSetFunctionPython.itkLevelSetFunctionID3):
    """


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead.

    C++ includes: itkLevelSetFunctionWithRefitTerm.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer":
        """__New_orig__() -> itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer":
        """Clone(itkLevelSetFunctionWithRefitTermID3SINBNID33 self) -> itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_Clone(self)


    def SetRefitWeight(self, w: 'double const') -> "void":
        """
        SetRefitWeight(itkLevelSetFunctionWithRefitTermID3SINBNID33 self, double const w)

        Set the relative
        weight of the refitting term. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetRefitWeight(self, w)


    def SetOtherPropagationWeight(self, w: 'double const') -> "void":
        """
        SetOtherPropagationWeight(itkLevelSetFunctionWithRefitTermID3SINBNID33 self, double const w)

        This is
        the weight for propagation terms (other than refitting) that can be
        defined by subclasses. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetOtherPropagationWeight(self, w)


    def SetSparseTargetImage(self, im: 'itkSparseImageNBNID33') -> "void":
        """
        SetSparseTargetImage(itkLevelSetFunctionWithRefitTermID3SINBNID33 self, itkSparseImageNBNID33 im)

        Sets the
        sparse image which has nodes containing the member variable
        m_Curvature used in refitting. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetSparseTargetImage(self, im)


    def GetSparseTargetImage(self) -> "itkSparseImageNBNID33 *":
        """
        GetSparseTargetImage(itkLevelSetFunctionWithRefitTermID3SINBNID33 self) -> itkSparseImageNBNID33

        Returns the
        sparse image. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_GetSparseTargetImage(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermID3SINBNID33

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermID3SINBNID33 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermID3SINBNID33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermID3SINBNID33

        Create a new object of the class itkLevelSetFunctionWithRefitTermID3SINBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermID3SINBNID33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermID3SINBNID33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionWithRefitTermID3SINBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionWithRefitTermID3SINBNID33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_Clone, None, itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33.SetRefitWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetRefitWeight, None, itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33.SetOtherPropagationWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetOtherPropagationWeight, None, itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33.SetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_SetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33.GetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_GetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermID3SINBNID33)
itkLevelSetFunctionWithRefitTermID3SINBNID33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_swigregister
itkLevelSetFunctionWithRefitTermID3SINBNID33_swigregister(itkLevelSetFunctionWithRefitTermID3SINBNID33)

def itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__() -> "itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer":
    """itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__() -> itkLevelSetFunctionWithRefitTermID3SINBNID33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33___New_orig__()

def itkLevelSetFunctionWithRefitTermID3SINBNID33_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermID3SINBNID33 *":
    """itkLevelSetFunctionWithRefitTermID3SINBNID33_cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermID3SINBNID33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermID3SINBNID33_cast(obj)

class itkLevelSetFunctionWithRefitTermIF2SINBNIF22(itkLevelSetFunctionPython.itkLevelSetFunctionIF2):
    """


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead.

    C++ includes: itkLevelSetFunctionWithRefitTerm.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer":
        """__New_orig__() -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer":
        """Clone(itkLevelSetFunctionWithRefitTermIF2SINBNIF22 self) -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Clone(self)


    def SetRefitWeight(self, w: 'float const') -> "void":
        """
        SetRefitWeight(itkLevelSetFunctionWithRefitTermIF2SINBNIF22 self, float const w)

        Set the relative
        weight of the refitting term. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetRefitWeight(self, w)


    def SetOtherPropagationWeight(self, w: 'float const') -> "void":
        """
        SetOtherPropagationWeight(itkLevelSetFunctionWithRefitTermIF2SINBNIF22 self, float const w)

        This is
        the weight for propagation terms (other than refitting) that can be
        defined by subclasses. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetOtherPropagationWeight(self, w)


    def SetSparseTargetImage(self, im: 'itkSparseImageNBNIF22') -> "void":
        """
        SetSparseTargetImage(itkLevelSetFunctionWithRefitTermIF2SINBNIF22 self, itkSparseImageNBNIF22 im)

        Sets the
        sparse image which has nodes containing the member variable
        m_Curvature used in refitting. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetSparseTargetImage(self, im)


    def GetSparseTargetImage(self) -> "itkSparseImageNBNIF22 *":
        """
        GetSparseTargetImage(itkLevelSetFunctionWithRefitTermIF2SINBNIF22 self) -> itkSparseImageNBNIF22

        Returns the
        sparse image. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_GetSparseTargetImage(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermIF2SINBNIF22

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermIF2SINBNIF22 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22

        Create a new object of the class itkLevelSetFunctionWithRefitTermIF2SINBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermIF2SINBNIF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionWithRefitTermIF2SINBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionWithRefitTermIF2SINBNIF22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Clone, None, itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22.SetRefitWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetRefitWeight, None, itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22.SetOtherPropagationWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetOtherPropagationWeight, None, itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22.SetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_SetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22.GetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_GetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermIF2SINBNIF22)
itkLevelSetFunctionWithRefitTermIF2SINBNIF22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_swigregister
itkLevelSetFunctionWithRefitTermIF2SINBNIF22_swigregister(itkLevelSetFunctionWithRefitTermIF2SINBNIF22)

def itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__() -> "itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer":
    """itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__() -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22___New_orig__()

def itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermIF2SINBNIF22 *":
    """itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermIF2SINBNIF22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF2SINBNIF22_cast(obj)

class itkLevelSetFunctionWithRefitTermIF3SINBNIF33(itkLevelSetFunctionPython.itkLevelSetFunctionIF3):
    """


    This class extends the LevelSetFunction class by adding a grow term
    based on a target curvature stored in a sparse image.

    We extend the LevelSetFunction class to add a refitting term. This
    refitting term forces the curvature of the level set interface to
    match a prescribed curvature. The prescribed curvature is provided in
    a sparse image format. The NodeType for the sparse image should
    contain the member variables m_Curvature and m_CurvatureFlag. The
    refitting term is defined as part of the propagation term of the
    original LevelSetFunction. To this purpose we defined the
    PropagationSpeed method which computes the refitting term and also
    adds to this term the value returned by the new virtual
    OtherPropagationSpeed. Therefore, classes derived from this class MUST
    NOT overwrite the PropagationSpeed method. Instead classes wishing to
    define a propagation term must define OtherPropagationSpeed. IMPORTANT
    Subclasses MUST NOT overwrite the PropagationSpeed method. Define
    OtherPropagationSpeed instead.

    C++ includes: itkLevelSetFunctionWithRefitTerm.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer":
        """__New_orig__() -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer":
        """Clone(itkLevelSetFunctionWithRefitTermIF3SINBNIF33 self) -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Clone(self)


    def SetRefitWeight(self, w: 'float const') -> "void":
        """
        SetRefitWeight(itkLevelSetFunctionWithRefitTermIF3SINBNIF33 self, float const w)

        Set the relative
        weight of the refitting term. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetRefitWeight(self, w)


    def SetOtherPropagationWeight(self, w: 'float const') -> "void":
        """
        SetOtherPropagationWeight(itkLevelSetFunctionWithRefitTermIF3SINBNIF33 self, float const w)

        This is
        the weight for propagation terms (other than refitting) that can be
        defined by subclasses. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetOtherPropagationWeight(self, w)


    def SetSparseTargetImage(self, im: 'itkSparseImageNBNIF33') -> "void":
        """
        SetSparseTargetImage(itkLevelSetFunctionWithRefitTermIF3SINBNIF33 self, itkSparseImageNBNIF33 im)

        Sets the
        sparse image which has nodes containing the member variable
        m_Curvature used in refitting. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetSparseTargetImage(self, im)


    def GetSparseTargetImage(self) -> "itkSparseImageNBNIF33 *":
        """
        GetSparseTargetImage(itkLevelSetFunctionWithRefitTermIF3SINBNIF33 self) -> itkSparseImageNBNIF33

        Returns the
        sparse image. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_GetSparseTargetImage(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkLevelSetFunctionWithRefitTermIF3SINBNIF33

    def cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermIF3SINBNIF33 *":
        """cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33

        Create a new object of the class itkLevelSetFunctionWithRefitTermIF3SINBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLevelSetFunctionWithRefitTermIF3SINBNIF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionWithRefitTermIF3SINBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionWithRefitTermIF3SINBNIF33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Clone, None, itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33.SetRefitWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetRefitWeight, None, itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33.SetOtherPropagationWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetOtherPropagationWeight, None, itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33.SetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_SetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33.GetSparseTargetImage = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_GetSparseTargetImage, None, itkLevelSetFunctionWithRefitTermIF3SINBNIF33)
itkLevelSetFunctionWithRefitTermIF3SINBNIF33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_swigregister
itkLevelSetFunctionWithRefitTermIF3SINBNIF33_swigregister(itkLevelSetFunctionWithRefitTermIF3SINBNIF33)

def itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__() -> "itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer":
    """itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__() -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33___New_orig__()

def itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast(obj: 'itkLightObject') -> "itkLevelSetFunctionWithRefitTermIF3SINBNIF33 *":
    """itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast(itkLightObject obj) -> itkLevelSetFunctionWithRefitTermIF3SINBNIF33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkLevelSetFunctionWithRefitTermIF3SINBNIF33_cast(obj)

class itkNormalBandNodeID2(object):
    """Proxy of C++ itkNormalBandNodeID2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeID2

    def __init__(self, *args):
        """
        __init__(itkNormalBandNodeID2 self, itkNormalBandNodeID2 arg0) -> itkNormalBandNodeID2
        __init__(itkNormalBandNodeID2 self) -> itkNormalBandNodeID2
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID2_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeID2(*args))
itkNormalBandNodeID2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID2_swigregister
itkNormalBandNodeID2_swigregister(itkNormalBandNodeID2)

class itkNormalBandNodeID3(object):
    """Proxy of C++ itkNormalBandNodeID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeID3

    def __init__(self, *args):
        """
        __init__(itkNormalBandNodeID3 self, itkNormalBandNodeID3 arg0) -> itkNormalBandNodeID3
        __init__(itkNormalBandNodeID3 self) -> itkNormalBandNodeID3
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID3_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeID3(*args))
itkNormalBandNodeID3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeID3_swigregister
itkNormalBandNodeID3_swigregister(itkNormalBandNodeID3)

class itkNormalBandNodeIF2(object):
    """Proxy of C++ itkNormalBandNodeIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeIF2

    def __init__(self, *args):
        """
        __init__(itkNormalBandNodeIF2 self, itkNormalBandNodeIF2 arg0) -> itkNormalBandNodeIF2
        __init__(itkNormalBandNodeIF2 self) -> itkNormalBandNodeIF2
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF2_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeIF2(*args))
itkNormalBandNodeIF2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF2_swigregister
itkNormalBandNodeIF2_swigregister(itkNormalBandNodeIF2)

class itkNormalBandNodeIF3(object):
    """Proxy of C++ itkNormalBandNodeIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkNormalBandNodeIF3

    def __init__(self, *args):
        """
        __init__(itkNormalBandNodeIF3 self, itkNormalBandNodeIF3 arg0) -> itkNormalBandNodeIF3
        __init__(itkNormalBandNodeIF3 self) -> itkNormalBandNodeIF3
        """
        _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF3_swiginit(self, _itkSparseFieldFourthOrderLevelSetImageFilterPython.new_itkNormalBandNodeIF3(*args))
itkNormalBandNodeIF3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkNormalBandNodeIF3_swigregister
itkNormalBandNodeIF3_swigregister(itkNormalBandNodeIF3)

class itkSparseFieldFourthOrderLevelSetImageFilterID2ID2(itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2):
    """


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function.

    C++ includes: itkSparseFieldFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaxRefitIteration(self) -> "unsigned int const &":
        """GetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxRefitIteration(self)


    def SetMaxRefitIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxRefitIteration(self, _arg)


    def GetMaxNormalIteration(self) -> "unsigned int const &":
        """GetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxNormalIteration(self)


    def SetMaxNormalIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxNormalIteration(self, _arg)


    def GetCurvatureBandWidth(self) -> "double const &":
        """GetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetCurvatureBandWidth(self)


    def SetCurvatureBandWidth(self, _arg: 'double const') -> "void":
        """SetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetCurvatureBandWidth(self, _arg)


    def GetRMSChangeNormalProcessTrigger(self) -> "double const &":
        """GetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetRMSChangeNormalProcessTrigger(self)


    def SetRMSChangeNormalProcessTrigger(self, _arg: 'double const') -> "void":
        """SetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetRMSChangeNormalProcessTrigger(self, _arg)


    def GetNormalProcessType(self) -> "int const &":
        """GetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessType(self)


    def SetNormalProcessType(self, _arg: 'int const') -> "void":
        """SetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessType(self, _arg)


    def GetNormalProcessConductance(self) -> "double const &":
        """GetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessConductance(self)


    def SetNormalProcessConductance(self, _arg: 'double const') -> "void":
        """SetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessConductance(self, _arg)


    def SetNormalProcessUnsharpFlag(self, _arg: 'bool const') -> "void":
        """SetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, bool const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpFlag(self, _arg)


    def GetNormalProcessUnsharpFlag(self) -> "bool const &":
        """GetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> bool const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpFlag(self)


    def SetNormalProcessUnsharpWeight(self, _arg: 'double const') -> "void":
        """SetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpWeight(self, _arg)


    def GetNormalProcessUnsharpWeight(self) -> "double const &":
        """GetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpWeight(self)


    def SetLevelSetFunction(self, lsf: 'itkLevelSetFunctionWithRefitTermID2SINBNID22') -> "void":
        """
        SetLevelSetFunction(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self, itkLevelSetFunctionWithRefitTermID2SINBNID22 lsf)

        Set the level
        set function. Must LevelSetFunctionWithRefitTerm or a subclass. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetLevelSetFunction(self, lsf)


    def GetMinimumNumberOfLayers(self) -> "unsigned int":
        """
        GetMinimumNumberOfLayers(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self) -> unsigned int

        Compute
        the number of layers that must be used in
        SparseFieldLevelSetImageFilter to accommodate the desired normal
        processing band. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMinimumNumberOfLayers(self)


    def InitializeIteration(self) -> "void":
        """
        InitializeIteration(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 self)

        This method
        first calls the Superclass InitializeIteration method. Then it
        determines whether ProcessNormals should be called. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_InitializeIteration(self)

    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterID2ID2"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldFourthOrderLevelSetImageFilterID2ID2

        Create a new object of the class itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.SetLevelSetFunction = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_SetLevelSetFunction, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.GetMinimumNumberOfLayers = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_GetMinimumNumberOfLayers, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2.InitializeIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_InitializeIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_swigregister
itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterID2ID2)

def itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterID2ID2 *":
    """itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterID2ID2"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID2ID2_cast(obj)

class itkSparseFieldFourthOrderLevelSetImageFilterID3ID3(itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3):
    """


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function.

    C++ includes: itkSparseFieldFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaxRefitIteration(self) -> "unsigned int const &":
        """GetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxRefitIteration(self)


    def SetMaxRefitIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxRefitIteration(self, _arg)


    def GetMaxNormalIteration(self) -> "unsigned int const &":
        """GetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxNormalIteration(self)


    def SetMaxNormalIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxNormalIteration(self, _arg)


    def GetCurvatureBandWidth(self) -> "double const &":
        """GetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetCurvatureBandWidth(self)


    def SetCurvatureBandWidth(self, _arg: 'double const') -> "void":
        """SetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetCurvatureBandWidth(self, _arg)


    def GetRMSChangeNormalProcessTrigger(self) -> "double const &":
        """GetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetRMSChangeNormalProcessTrigger(self)


    def SetRMSChangeNormalProcessTrigger(self, _arg: 'double const') -> "void":
        """SetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetRMSChangeNormalProcessTrigger(self, _arg)


    def GetNormalProcessType(self) -> "int const &":
        """GetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessType(self)


    def SetNormalProcessType(self, _arg: 'int const') -> "void":
        """SetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessType(self, _arg)


    def GetNormalProcessConductance(self) -> "double const &":
        """GetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessConductance(self)


    def SetNormalProcessConductance(self, _arg: 'double const') -> "void":
        """SetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessConductance(self, _arg)


    def SetNormalProcessUnsharpFlag(self, _arg: 'bool const') -> "void":
        """SetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, bool const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpFlag(self, _arg)


    def GetNormalProcessUnsharpFlag(self) -> "bool const &":
        """GetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> bool const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpFlag(self)


    def SetNormalProcessUnsharpWeight(self, _arg: 'double const') -> "void":
        """SetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, double const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpWeight(self, _arg)


    def GetNormalProcessUnsharpWeight(self) -> "double const &":
        """GetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> double const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpWeight(self)


    def SetLevelSetFunction(self, lsf: 'itkLevelSetFunctionWithRefitTermID3SINBNID33') -> "void":
        """
        SetLevelSetFunction(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self, itkLevelSetFunctionWithRefitTermID3SINBNID33 lsf)

        Set the level
        set function. Must LevelSetFunctionWithRefitTerm or a subclass. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetLevelSetFunction(self, lsf)


    def GetMinimumNumberOfLayers(self) -> "unsigned int":
        """
        GetMinimumNumberOfLayers(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self) -> unsigned int

        Compute
        the number of layers that must be used in
        SparseFieldLevelSetImageFilter to accommodate the desired normal
        processing band. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMinimumNumberOfLayers(self)


    def InitializeIteration(self) -> "void":
        """
        InitializeIteration(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 self)

        This method
        first calls the Superclass InitializeIteration method. Then it
        determines whether ProcessNormals should be called. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_InitializeIteration(self)

    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterID3ID3"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldFourthOrderLevelSetImageFilterID3ID3

        Create a new object of the class itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.SetLevelSetFunction = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_SetLevelSetFunction, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.GetMinimumNumberOfLayers = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_GetMinimumNumberOfLayers, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3.InitializeIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_InitializeIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_swigregister
itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterID3ID3)

def itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterID3ID3 *":
    """itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterID3ID3"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterID3ID3_cast(obj)

class itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2(itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2):
    """


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function.

    C++ includes: itkSparseFieldFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaxRefitIteration(self) -> "unsigned int const &":
        """GetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxRefitIteration(self)


    def SetMaxRefitIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxRefitIteration(self, _arg)


    def GetMaxNormalIteration(self) -> "unsigned int const &":
        """GetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxNormalIteration(self)


    def SetMaxNormalIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxNormalIteration(self, _arg)


    def GetCurvatureBandWidth(self) -> "float const &":
        """GetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetCurvatureBandWidth(self)


    def SetCurvatureBandWidth(self, _arg: 'float const') -> "void":
        """SetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetCurvatureBandWidth(self, _arg)


    def GetRMSChangeNormalProcessTrigger(self) -> "float const &":
        """GetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetRMSChangeNormalProcessTrigger(self)


    def SetRMSChangeNormalProcessTrigger(self, _arg: 'float const') -> "void":
        """SetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetRMSChangeNormalProcessTrigger(self, _arg)


    def GetNormalProcessType(self) -> "int const &":
        """GetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessType(self)


    def SetNormalProcessType(self, _arg: 'int const') -> "void":
        """SetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessType(self, _arg)


    def GetNormalProcessConductance(self) -> "float const &":
        """GetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessConductance(self)


    def SetNormalProcessConductance(self, _arg: 'float const') -> "void":
        """SetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessConductance(self, _arg)


    def SetNormalProcessUnsharpFlag(self, _arg: 'bool const') -> "void":
        """SetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, bool const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpFlag(self, _arg)


    def GetNormalProcessUnsharpFlag(self) -> "bool const &":
        """GetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> bool const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpFlag(self)


    def SetNormalProcessUnsharpWeight(self, _arg: 'float const') -> "void":
        """SetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpWeight(self, _arg)


    def GetNormalProcessUnsharpWeight(self) -> "float const &":
        """GetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpWeight(self)


    def SetLevelSetFunction(self, lsf: 'itkLevelSetFunctionWithRefitTermIF2SINBNIF22') -> "void":
        """
        SetLevelSetFunction(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self, itkLevelSetFunctionWithRefitTermIF2SINBNIF22 lsf)

        Set the level
        set function. Must LevelSetFunctionWithRefitTerm or a subclass. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetLevelSetFunction(self, lsf)


    def GetMinimumNumberOfLayers(self) -> "unsigned int":
        """
        GetMinimumNumberOfLayers(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self) -> unsigned int

        Compute
        the number of layers that must be used in
        SparseFieldLevelSetImageFilter to accommodate the desired normal
        processing band. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMinimumNumberOfLayers(self)


    def InitializeIteration(self) -> "void":
        """
        InitializeIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 self)

        This method
        first calls the Superclass InitializeIteration method. Then it
        determines whether ProcessNormals should be called. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_InitializeIteration(self)

    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2

        Create a new object of the class itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.SetLevelSetFunction = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_SetLevelSetFunction, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.GetMinimumNumberOfLayers = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_GetMinimumNumberOfLayers, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2.InitializeIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_InitializeIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_swigregister
itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2)

def itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2 *":
    """itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF2IF2_cast(obj)

class itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3(itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3):
    """


    This class implements the fourth order level set PDE framework.

    This class adds a ProcessNormals method to
    SparseFieldLevelSetImageFilter class. The ProcessNormals method uses
    the ImplicitManifoldNormalDiffusionFilter class to generate a
    SparseImage of filtered normal vectors. We make a copy of the current
    state of the output image (also referred to as level set image) for
    this class and pass it to ImplicitManifoldNormalDiffusionFilter. That
    class computes the normal vectors to the level set image and filters
    them. The output is in the form of a sparse image templated with the
    NormalBandNode type. We then compute curvatures from that output and
    store them in the SparseImage as well. This SparseImage is passed onto
    the LevelSetFunctionWithRefitTerm filter class to be used as a target
    in the propagation term. INPUT and OUTPUT Same as
    SparseFieldLevelSetImageFilter PARAMETERS MaxRefitIteration sets the
    maximum number of allowable iterations between calls to
    ProcessNormals. The decision of when to call the ProcessNormals method
    is made in InitializeIteration according to a few criteria one of
    which is this maximum number of iterations.

    MaxNormalIteration sets the maximum number of diffusion iterations on
    the normals to be performed by the
    ImplicitManifoldNormalDiffusionFilter class. Please read the
    documentation for that class.

    CurvatureBandWidth determines the width of the band to be processed in
    ImplicitManifoldNormalDiffusionFilter.

    RMSChangeNormalProcessTrigger provides another mechanism in
    InitializeIteration for calling the ProcessNormals method. Whenever
    the RMS change reported by SparseFieldLevelSetImageFilter falls below
    this parameter ProcessNormals is called regardless of whether
    MaxRefitIteration has been reached. This parameter could be used to
    speed up the algorithm; however, it can also effect the results. Use
    with caution. Default is 0 which does nothing. IMPORTANT Defaults for
    above parameters are set in the constructor. Users should not change
    these unless they have a good understanding of the algorithm. OTHER
    PARAMETERS NormalProcessType tells ImplicitManifoldNormalVectorFilter
    whether to use isotropic or anisotropic diffusion. A value of 0 means
    isotropic whereas a value of 1 means anisotropic diffusion. If this
    parameter is set to 1, NormalProcessConductance determines the level
    of detail preservation. Please read the documentation for
    ImplicitManifoldNormalVectorFilter and
    AnisotropicFourthOrderLevelSetImageFilter.

    NormalProcessUnsharpFlag turns unsharp masking on/off. If this
    parameter is turned on, then NormalProcessUnsharpWeight should be set.
    Please read the documentation for ImplicitManifoldNormalVectorFilter.
    IMPORTANT Users of this class must define the Halt function.

    C++ includes: itkSparseFieldFourthOrderLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetMaxRefitIteration(self) -> "unsigned int const &":
        """GetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxRefitIteration(self)


    def SetMaxRefitIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxRefitIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxRefitIteration(self, _arg)


    def GetMaxNormalIteration(self) -> "unsigned int const &":
        """GetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> unsigned int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxNormalIteration(self)


    def SetMaxNormalIteration(self, _arg: 'unsigned int const') -> "void":
        """SetMaxNormalIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxNormalIteration(self, _arg)


    def GetCurvatureBandWidth(self) -> "float const &":
        """GetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetCurvatureBandWidth(self)


    def SetCurvatureBandWidth(self, _arg: 'float const') -> "void":
        """SetCurvatureBandWidth(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetCurvatureBandWidth(self, _arg)


    def GetRMSChangeNormalProcessTrigger(self) -> "float const &":
        """GetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetRMSChangeNormalProcessTrigger(self)


    def SetRMSChangeNormalProcessTrigger(self, _arg: 'float const') -> "void":
        """SetRMSChangeNormalProcessTrigger(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetRMSChangeNormalProcessTrigger(self, _arg)


    def GetNormalProcessType(self) -> "int const &":
        """GetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> int const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessType(self)


    def SetNormalProcessType(self, _arg: 'int const') -> "void":
        """SetNormalProcessType(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, int const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessType(self, _arg)


    def GetNormalProcessConductance(self) -> "float const &":
        """GetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessConductance(self)


    def SetNormalProcessConductance(self, _arg: 'float const') -> "void":
        """SetNormalProcessConductance(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessConductance(self, _arg)


    def SetNormalProcessUnsharpFlag(self, _arg: 'bool const') -> "void":
        """SetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, bool const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpFlag(self, _arg)


    def GetNormalProcessUnsharpFlag(self) -> "bool const &":
        """GetNormalProcessUnsharpFlag(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> bool const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpFlag(self)


    def SetNormalProcessUnsharpWeight(self, _arg: 'float const') -> "void":
        """SetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, float const _arg)"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpWeight(self, _arg)


    def GetNormalProcessUnsharpWeight(self) -> "float const &":
        """GetNormalProcessUnsharpWeight(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> float const &"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpWeight(self)


    def SetLevelSetFunction(self, lsf: 'itkLevelSetFunctionWithRefitTermIF3SINBNIF33') -> "void":
        """
        SetLevelSetFunction(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self, itkLevelSetFunctionWithRefitTermIF3SINBNIF33 lsf)

        Set the level
        set function. Must LevelSetFunctionWithRefitTerm or a subclass. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetLevelSetFunction(self, lsf)


    def GetMinimumNumberOfLayers(self) -> "unsigned int":
        """
        GetMinimumNumberOfLayers(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self) -> unsigned int

        Compute
        the number of layers that must be used in
        SparseFieldLevelSetImageFilter to accommodate the desired normal
        processing band. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMinimumNumberOfLayers(self)


    def InitializeIteration(self) -> "void":
        """
        InitializeIteration(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 self)

        This method
        first calls the Superclass InitializeIteration method. Then it
        determines whether ProcessNormals should be called. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_InitializeIteration(self)

    OutputHasNumericTraitsCheck = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3

        Create a new object of the class itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetMaxRefitIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxRefitIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetMaxNormalIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetMaxNormalIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetCurvatureBandWidth = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetCurvatureBandWidth, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetRMSChangeNormalProcessTrigger = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetRMSChangeNormalProcessTrigger, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetNormalProcessType = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessType, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetNormalProcessConductance = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessConductance, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetNormalProcessUnsharpFlag = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpFlag, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetNormalProcessUnsharpWeight = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetNormalProcessUnsharpWeight, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.SetLevelSetFunction = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_SetLevelSetFunction, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.GetMinimumNumberOfLayers = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_GetMinimumNumberOfLayers, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3.InitializeIteration = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_InitializeIteration, None, itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_swigregister
itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_swigregister(itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3)

def itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3 *":
    """itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast(itkLightObject obj) -> itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldFourthOrderLevelSetImageFilterIF3IF3_cast(obj)

class itkSparseFieldLayerNBNID2(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerNBNID2_Pointer":
        """__New_orig__() -> itkSparseFieldLayerNBNID2_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerNBNID2_Pointer":
        """Clone(itkSparseFieldLayerNBNID2 self) -> itkSparseFieldLayerNBNID2_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Clone(self)


    def Front(self, *args) -> "itkNormalBandNodeID2 const *":
        """
        Front(itkSparseFieldLayerNBNID2 self) -> itkNormalBandNodeID2
        Front(itkSparseFieldLayerNBNID2 self) -> itkNormalBandNodeID2

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerNBNID2 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PopFront(self)


    def PushFront(self, n: 'itkNormalBandNodeID2') -> "void":
        """
        PushFront(itkSparseFieldLayerNBNID2 self, itkNormalBandNodeID2 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PushFront(self, n)


    def Unlink(self, n: 'itkNormalBandNodeID2') -> "void":
        """
        Unlink(itkSparseFieldLayerNBNID2 self, itkNormalBandNodeID2 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerNBNID2 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerNBNID2 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerNBNID2::RegionType,std::allocator< itkSparseFieldLayerNBNID2::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerNBNID2 self, int num) -> std::vector< itkSparseFieldLayerNBNID2::RegionType,std::allocator< itkSparseFieldLayerNBNID2::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNID2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNID2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerNBNID2"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNID2

        Create a new object of the class itkSparseFieldLayerNBNID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerNBNID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerNBNID2.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Clone, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.Front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Front, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.PopFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PopFront, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.PushFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_PushFront, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.Unlink = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Unlink, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.Empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Empty, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.Size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_Size, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2.SplitRegions = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_SplitRegions, None, itkSparseFieldLayerNBNID2)
itkSparseFieldLayerNBNID2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_swigregister
itkSparseFieldLayerNBNID2_swigregister(itkSparseFieldLayerNBNID2)

def itkSparseFieldLayerNBNID2___New_orig__() -> "itkSparseFieldLayerNBNID2_Pointer":
    """itkSparseFieldLayerNBNID2___New_orig__() -> itkSparseFieldLayerNBNID2_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2___New_orig__()

def itkSparseFieldLayerNBNID2_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNID2 *":
    """itkSparseFieldLayerNBNID2_cast(itkLightObject obj) -> itkSparseFieldLayerNBNID2"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID2_cast(obj)

class itkSparseFieldLayerNBNID3(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerNBNID3_Pointer":
        """__New_orig__() -> itkSparseFieldLayerNBNID3_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerNBNID3_Pointer":
        """Clone(itkSparseFieldLayerNBNID3 self) -> itkSparseFieldLayerNBNID3_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Clone(self)


    def Front(self, *args) -> "itkNormalBandNodeID3 const *":
        """
        Front(itkSparseFieldLayerNBNID3 self) -> itkNormalBandNodeID3
        Front(itkSparseFieldLayerNBNID3 self) -> itkNormalBandNodeID3

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerNBNID3 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PopFront(self)


    def PushFront(self, n: 'itkNormalBandNodeID3') -> "void":
        """
        PushFront(itkSparseFieldLayerNBNID3 self, itkNormalBandNodeID3 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PushFront(self, n)


    def Unlink(self, n: 'itkNormalBandNodeID3') -> "void":
        """
        Unlink(itkSparseFieldLayerNBNID3 self, itkNormalBandNodeID3 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerNBNID3 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerNBNID3 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerNBNID3::RegionType,std::allocator< itkSparseFieldLayerNBNID3::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerNBNID3 self, int num) -> std::vector< itkSparseFieldLayerNBNID3::RegionType,std::allocator< itkSparseFieldLayerNBNID3::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNID3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNID3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerNBNID3"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNID3

        Create a new object of the class itkSparseFieldLayerNBNID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerNBNID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerNBNID3.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Clone, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.Front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Front, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.PopFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PopFront, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.PushFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_PushFront, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.Unlink = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Unlink, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.Empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Empty, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.Size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_Size, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3.SplitRegions = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_SplitRegions, None, itkSparseFieldLayerNBNID3)
itkSparseFieldLayerNBNID3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_swigregister
itkSparseFieldLayerNBNID3_swigregister(itkSparseFieldLayerNBNID3)

def itkSparseFieldLayerNBNID3___New_orig__() -> "itkSparseFieldLayerNBNID3_Pointer":
    """itkSparseFieldLayerNBNID3___New_orig__() -> itkSparseFieldLayerNBNID3_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3___New_orig__()

def itkSparseFieldLayerNBNID3_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNID3 *":
    """itkSparseFieldLayerNBNID3_cast(itkLightObject obj) -> itkSparseFieldLayerNBNID3"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNID3_cast(obj)

class itkSparseFieldLayerNBNIF2(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerNBNIF2_Pointer":
        """__New_orig__() -> itkSparseFieldLayerNBNIF2_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerNBNIF2_Pointer":
        """Clone(itkSparseFieldLayerNBNIF2 self) -> itkSparseFieldLayerNBNIF2_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Clone(self)


    def Front(self, *args) -> "itkNormalBandNodeIF2 const *":
        """
        Front(itkSparseFieldLayerNBNIF2 self) -> itkNormalBandNodeIF2
        Front(itkSparseFieldLayerNBNIF2 self) -> itkNormalBandNodeIF2

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerNBNIF2 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PopFront(self)


    def PushFront(self, n: 'itkNormalBandNodeIF2') -> "void":
        """
        PushFront(itkSparseFieldLayerNBNIF2 self, itkNormalBandNodeIF2 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PushFront(self, n)


    def Unlink(self, n: 'itkNormalBandNodeIF2') -> "void":
        """
        Unlink(itkSparseFieldLayerNBNIF2 self, itkNormalBandNodeIF2 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerNBNIF2 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerNBNIF2 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerNBNIF2::RegionType,std::allocator< itkSparseFieldLayerNBNIF2::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerNBNIF2 self, int num) -> std::vector< itkSparseFieldLayerNBNIF2::RegionType,std::allocator< itkSparseFieldLayerNBNIF2::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNIF2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNIF2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerNBNIF2"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNIF2

        Create a new object of the class itkSparseFieldLayerNBNIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerNBNIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerNBNIF2.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Clone, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.Front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Front, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.PopFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PopFront, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.PushFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_PushFront, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.Unlink = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Unlink, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.Empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Empty, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.Size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_Size, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2.SplitRegions = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_SplitRegions, None, itkSparseFieldLayerNBNIF2)
itkSparseFieldLayerNBNIF2_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_swigregister
itkSparseFieldLayerNBNIF2_swigregister(itkSparseFieldLayerNBNIF2)

def itkSparseFieldLayerNBNIF2___New_orig__() -> "itkSparseFieldLayerNBNIF2_Pointer":
    """itkSparseFieldLayerNBNIF2___New_orig__() -> itkSparseFieldLayerNBNIF2_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2___New_orig__()

def itkSparseFieldLayerNBNIF2_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNIF2 *":
    """itkSparseFieldLayerNBNIF2_cast(itkLightObject obj) -> itkSparseFieldLayerNBNIF2"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF2_cast(obj)

class itkSparseFieldLayerNBNIF3(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerNBNIF3_Pointer":
        """__New_orig__() -> itkSparseFieldLayerNBNIF3_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerNBNIF3_Pointer":
        """Clone(itkSparseFieldLayerNBNIF3 self) -> itkSparseFieldLayerNBNIF3_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Clone(self)


    def Front(self, *args) -> "itkNormalBandNodeIF3 const *":
        """
        Front(itkSparseFieldLayerNBNIF3 self) -> itkNormalBandNodeIF3
        Front(itkSparseFieldLayerNBNIF3 self) -> itkNormalBandNodeIF3

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerNBNIF3 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PopFront(self)


    def PushFront(self, n: 'itkNormalBandNodeIF3') -> "void":
        """
        PushFront(itkSparseFieldLayerNBNIF3 self, itkNormalBandNodeIF3 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PushFront(self, n)


    def Unlink(self, n: 'itkNormalBandNodeIF3') -> "void":
        """
        Unlink(itkSparseFieldLayerNBNIF3 self, itkNormalBandNodeIF3 n)

        Unlinks a node from the list

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerNBNIF3 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerNBNIF3 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerNBNIF3::RegionType,std::allocator< itkSparseFieldLayerNBNIF3::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerNBNIF3 self, int num) -> std::vector< itkSparseFieldLayerNBNIF3::RegionType,std::allocator< itkSparseFieldLayerNBNIF3::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_SplitRegions(self, num)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseFieldLayerNBNIF3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNIF3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerNBNIF3"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerNBNIF3

        Create a new object of the class itkSparseFieldLayerNBNIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerNBNIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerNBNIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerNBNIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerNBNIF3.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Clone, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.Front = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Front, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.PopFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PopFront, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.PushFront = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_PushFront, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.Unlink = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Unlink, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.Empty = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Empty, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.Size = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_Size, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3.SplitRegions = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_SplitRegions, None, itkSparseFieldLayerNBNIF3)
itkSparseFieldLayerNBNIF3_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_swigregister
itkSparseFieldLayerNBNIF3_swigregister(itkSparseFieldLayerNBNIF3)

def itkSparseFieldLayerNBNIF3___New_orig__() -> "itkSparseFieldLayerNBNIF3_Pointer":
    """itkSparseFieldLayerNBNIF3___New_orig__() -> itkSparseFieldLayerNBNIF3_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3___New_orig__()

def itkSparseFieldLayerNBNIF3_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerNBNIF3 *":
    """itkSparseFieldLayerNBNIF3_cast(itkLightObject obj) -> itkSparseFieldLayerNBNIF3"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseFieldLayerNBNIF3_cast(obj)

class itkSparseImageNBNID22(itkImageNBNID22):
    """


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels.

    C++ includes: itkSparseImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseImageNBNID22_Pointer":
        """__New_orig__() -> itkSparseImageNBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseImageNBNID22_Pointer":
        """Clone(itkSparseImageNBNID22 self) -> itkSparseImageNBNID22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_Clone(self)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,2 > >,2 > > const":
        """
        GetNeighborhoodAccessor(itkSparseImageNBNID22 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,2 > >,2 > >
        GetNeighborhoodAccessor(itkSparseImageNBNID22 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,2 > >,2 > > const

        Return the
        NeighborhoodAccessor functor. This method is called by the
        neighborhood iterators. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNeighborhoodAccessor(self, *args)


    def AddNode(self, index: 'itkIndex2') -> "itkNormalBandNodeID2 *":
        """
        AddNode(itkSparseImageNBNID22 self, itkIndex2 index) -> itkNormalBandNodeID2

        This function should be
        used to allocate memory for a variable at the desired pixel location.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_AddNode(self, index)


    def GetNodeList(self) -> "itkSparseFieldLayerNBNID2 *":
        """
        GetNodeList(itkSparseImageNBNID22 self) -> itkSparseFieldLayerNBNID2

        This function returns
        the allocated node list which can be used to iterate through the valid
        nodes. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNodeList(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNID22

    def cast(obj: 'itkLightObject') -> "itkSparseImageNBNID22 *":
        """cast(itkLightObject obj) -> itkSparseImageNBNID22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNID22

        Create a new object of the class itkSparseImageNBNID22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNID22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNID22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseImageNBNID22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseImageNBNID22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_Clone, None, itkSparseImageNBNID22)
itkSparseImageNBNID22.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNeighborhoodAccessor, None, itkSparseImageNBNID22)
itkSparseImageNBNID22.AddNode = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_AddNode, None, itkSparseImageNBNID22)
itkSparseImageNBNID22.GetNodeList = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_GetNodeList, None, itkSparseImageNBNID22)
itkSparseImageNBNID22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_swigregister
itkSparseImageNBNID22_swigregister(itkSparseImageNBNID22)

def itkSparseImageNBNID22___New_orig__() -> "itkSparseImageNBNID22_Pointer":
    """itkSparseImageNBNID22___New_orig__() -> itkSparseImageNBNID22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22___New_orig__()

def itkSparseImageNBNID22_cast(obj: 'itkLightObject') -> "itkSparseImageNBNID22 *":
    """itkSparseImageNBNID22_cast(itkLightObject obj) -> itkSparseImageNBNID22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID22_cast(obj)

class itkSparseImageNBNID33(itkImageNBNID33):
    """


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels.

    C++ includes: itkSparseImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseImageNBNID33_Pointer":
        """__New_orig__() -> itkSparseImageNBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseImageNBNID33_Pointer":
        """Clone(itkSparseImageNBNID33 self) -> itkSparseImageNBNID33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_Clone(self)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,3 > >,3 > > const":
        """
        GetNeighborhoodAccessor(itkSparseImageNBNID33 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,3 > >,3 > >
        GetNeighborhoodAccessor(itkSparseImageNBNID33 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< double,3 > >,3 > > const

        Return the
        NeighborhoodAccessor functor. This method is called by the
        neighborhood iterators. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNeighborhoodAccessor(self, *args)


    def AddNode(self, index: 'itkIndex3') -> "itkNormalBandNodeID3 *":
        """
        AddNode(itkSparseImageNBNID33 self, itkIndex3 index) -> itkNormalBandNodeID3

        This function should be
        used to allocate memory for a variable at the desired pixel location.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_AddNode(self, index)


    def GetNodeList(self) -> "itkSparseFieldLayerNBNID3 *":
        """
        GetNodeList(itkSparseImageNBNID33 self) -> itkSparseFieldLayerNBNID3

        This function returns
        the allocated node list which can be used to iterate through the valid
        nodes. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNodeList(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNID33

    def cast(obj: 'itkLightObject') -> "itkSparseImageNBNID33 *":
        """cast(itkLightObject obj) -> itkSparseImageNBNID33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNID33

        Create a new object of the class itkSparseImageNBNID33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNID33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNID33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseImageNBNID33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseImageNBNID33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_Clone, None, itkSparseImageNBNID33)
itkSparseImageNBNID33.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNeighborhoodAccessor, None, itkSparseImageNBNID33)
itkSparseImageNBNID33.AddNode = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_AddNode, None, itkSparseImageNBNID33)
itkSparseImageNBNID33.GetNodeList = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_GetNodeList, None, itkSparseImageNBNID33)
itkSparseImageNBNID33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_swigregister
itkSparseImageNBNID33_swigregister(itkSparseImageNBNID33)

def itkSparseImageNBNID33___New_orig__() -> "itkSparseImageNBNID33_Pointer":
    """itkSparseImageNBNID33___New_orig__() -> itkSparseImageNBNID33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33___New_orig__()

def itkSparseImageNBNID33_cast(obj: 'itkLightObject') -> "itkSparseImageNBNID33 *":
    """itkSparseImageNBNID33_cast(itkLightObject obj) -> itkSparseImageNBNID33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNID33_cast(obj)

class itkSparseImageNBNIF22(itkImageNBNIF22):
    """


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels.

    C++ includes: itkSparseImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseImageNBNIF22_Pointer":
        """__New_orig__() -> itkSparseImageNBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseImageNBNIF22_Pointer":
        """Clone(itkSparseImageNBNIF22 self) -> itkSparseImageNBNIF22_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_Clone(self)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,2 > >,2 > > const":
        """
        GetNeighborhoodAccessor(itkSparseImageNBNIF22 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,2 > >,2 > >
        GetNeighborhoodAccessor(itkSparseImageNBNIF22 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,2 > >,2 > > const

        Return the
        NeighborhoodAccessor functor. This method is called by the
        neighborhood iterators. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNeighborhoodAccessor(self, *args)


    def AddNode(self, index: 'itkIndex2') -> "itkNormalBandNodeIF2 *":
        """
        AddNode(itkSparseImageNBNIF22 self, itkIndex2 index) -> itkNormalBandNodeIF2

        This function should be
        used to allocate memory for a variable at the desired pixel location.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_AddNode(self, index)


    def GetNodeList(self) -> "itkSparseFieldLayerNBNIF2 *":
        """
        GetNodeList(itkSparseImageNBNIF22 self) -> itkSparseFieldLayerNBNIF2

        This function returns
        the allocated node list which can be used to iterate through the valid
        nodes. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNodeList(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNIF22

    def cast(obj: 'itkLightObject') -> "itkSparseImageNBNIF22 *":
        """cast(itkLightObject obj) -> itkSparseImageNBNIF22"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNIF22

        Create a new object of the class itkSparseImageNBNIF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNIF22.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNIF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseImageNBNIF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseImageNBNIF22.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_Clone, None, itkSparseImageNBNIF22)
itkSparseImageNBNIF22.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNeighborhoodAccessor, None, itkSparseImageNBNIF22)
itkSparseImageNBNIF22.AddNode = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_AddNode, None, itkSparseImageNBNIF22)
itkSparseImageNBNIF22.GetNodeList = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_GetNodeList, None, itkSparseImageNBNIF22)
itkSparseImageNBNIF22_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_swigregister
itkSparseImageNBNIF22_swigregister(itkSparseImageNBNIF22)

def itkSparseImageNBNIF22___New_orig__() -> "itkSparseImageNBNIF22_Pointer":
    """itkSparseImageNBNIF22___New_orig__() -> itkSparseImageNBNIF22_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22___New_orig__()

def itkSparseImageNBNIF22_cast(obj: 'itkLightObject') -> "itkSparseImageNBNIF22 *":
    """itkSparseImageNBNIF22_cast(itkLightObject obj) -> itkSparseImageNBNIF22"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF22_cast(obj)

class itkSparseImageNBNIF33(itkImageNBNIF33):
    """


    A storage type for sparse image data.

    This class is derived from the Image class. It uses the base class
    image data for storing pointers to variables of type TNode. The node
    type must have a member variable m_Index. The node data is stored
    using the SparseFieldLayer and ObjectStore classes to allow sequential
    list access to the nodes. This functionality is used in filter classes
    that process the SparseImage class such as
    FiniteDifferenceSparseImageFilter. The node type must also have
    members NodeType* Next and NodeType* Previous. A minimal node class
    which could be used to create the sparse equivalent of an
    itk::Image<unsigned char, 2> is shown below:

    This class provides the method AddNode which allocates a node
    variable, associates it with the image pixel index (sets m_Index in
    the node variable) and returns the pointer to the node variable. It is
    suggested that the user call the FillBuffer method to initialize the
    image to null pointers before any calls to AddNode. This would allow
    the user later to distinguish between valid and non-valid pixels.

    C++ includes: itkSparseImage.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseImageNBNIF33_Pointer":
        """__New_orig__() -> itkSparseImageNBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseImageNBNIF33_Pointer":
        """Clone(itkSparseImageNBNIF33 self) -> itkSparseImageNBNIF33_Pointer"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_Clone(self)


    def GetNeighborhoodAccessor(self, *args) -> "itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,3 > >,3 > > const":
        """
        GetNeighborhoodAccessor(itkSparseImageNBNIF33 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,3 > >,3 > >
        GetNeighborhoodAccessor(itkSparseImageNBNIF33 self) -> itk::NeighborhoodAccessorFunctor< itk::SparseImage< itk::NormalBandNode< itk::Image< float,3 > >,3 > > const

        Return the
        NeighborhoodAccessor functor. This method is called by the
        neighborhood iterators. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNeighborhoodAccessor(self, *args)


    def AddNode(self, index: 'itkIndex3') -> "itkNormalBandNodeIF3 *":
        """
        AddNode(itkSparseImageNBNIF33 self, itkIndex3 index) -> itkNormalBandNodeIF3

        This function should be
        used to allocate memory for a variable at the desired pixel location.

        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_AddNode(self, index)


    def GetNodeList(self) -> "itkSparseFieldLayerNBNIF3 *":
        """
        GetNodeList(itkSparseImageNBNIF33 self) -> itkSparseFieldLayerNBNIF3

        This function returns
        the allocated node list which can be used to iterate through the valid
        nodes. 
        """
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNodeList(self)

    __swig_destroy__ = _itkSparseFieldFourthOrderLevelSetImageFilterPython.delete_itkSparseImageNBNIF33

    def cast(obj: 'itkLightObject') -> "itkSparseImageNBNIF33 *":
        """cast(itkLightObject obj) -> itkSparseImageNBNIF33"""
        return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseImageNBNIF33

        Create a new object of the class itkSparseImageNBNIF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseImageNBNIF33.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseImageNBNIF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseImageNBNIF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseImageNBNIF33.Clone = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_Clone, None, itkSparseImageNBNIF33)
itkSparseImageNBNIF33.GetNeighborhoodAccessor = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNeighborhoodAccessor, None, itkSparseImageNBNIF33)
itkSparseImageNBNIF33.AddNode = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_AddNode, None, itkSparseImageNBNIF33)
itkSparseImageNBNIF33.GetNodeList = new_instancemethod(_itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_GetNodeList, None, itkSparseImageNBNIF33)
itkSparseImageNBNIF33_swigregister = _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_swigregister
itkSparseImageNBNIF33_swigregister(itkSparseImageNBNIF33)

def itkSparseImageNBNIF33___New_orig__() -> "itkSparseImageNBNIF33_Pointer":
    """itkSparseImageNBNIF33___New_orig__() -> itkSparseImageNBNIF33_Pointer"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33___New_orig__()

def itkSparseImageNBNIF33_cast(obj: 'itkLightObject') -> "itkSparseImageNBNIF33 *":
    """itkSparseImageNBNIF33_cast(itkLightObject obj) -> itkSparseImageNBNIF33"""
    return _itkSparseFieldFourthOrderLevelSetImageFilterPython.itkSparseImageNBNIF33_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def sparse_field_fourth_order_level_set_image_filter(*args, **kwargs):
    """Procedural interface for SparseFieldFourthOrderLevelSetImageFilter"""
    import itk
    instance = itk.SparseFieldFourthOrderLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def sparse_field_fourth_order_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SparseFieldFourthOrderLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SparseFieldFourthOrderLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.SparseFieldFourthOrderLevelSetImageFilter

    sparse_field_fourth_order_level_set_image_filter.__doc__ = filter_object.__doc__
    sparse_field_fourth_order_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    sparse_field_fourth_order_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    sparse_field_fourth_order_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



