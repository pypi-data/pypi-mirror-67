# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkParallelSparseFieldLevelSetImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkParallelSparseFieldLevelSetImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkParallelSparseFieldLevelSetImageFilterPython
            return _itkParallelSparseFieldLevelSetImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkParallelSparseFieldLevelSetImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkParallelSparseFieldLevelSetImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkParallelSparseFieldLevelSetImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import ITKCommonBasePython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkImageToImageFilterBPython
import itkFiniteDifferenceFunctionPython

def itkSparseFieldLayerPSFLSNI3_New():
  return itkSparseFieldLayerPSFLSNI3.New()


def itkSparseFieldLayerPSFLSNI2_New():
  return itkSparseFieldLayerPSFLSNI2.New()


def itkParallelSparseFieldLevelSetImageFilterID3ID3_New():
  return itkParallelSparseFieldLevelSetImageFilterID3ID3.New()


def itkParallelSparseFieldLevelSetImageFilterID2ID2_New():
  return itkParallelSparseFieldLevelSetImageFilterID2ID2.New()


def itkParallelSparseFieldLevelSetImageFilterIF3IF3_New():
  return itkParallelSparseFieldLevelSetImageFilterIF3IF3.New()


def itkParallelSparseFieldLevelSetImageFilterIF2IF2_New():
  return itkParallelSparseFieldLevelSetImageFilterIF2IF2.New()

class itkParallelSparseFieldLevelSetImageFilterID2ID2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID2ID2):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations in three
    dimensions, for example, require 3 layers. In two dimensions, a
    minimum of 2 layers is probably required. Higher order derivatives and
    other geometrical measures may require more layers. If too few layers
    are specified, then the calculations will pull values from the
    background, which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkParallelSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer":
        """Clone(itkParallelSparseFieldLevelSetImageFilterID2ID2 self) -> itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_Clone(self)


    def SetNumberOfLayers(self, _arg: 'signed char const') -> "void":
        """
        SetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterID2ID2 self, signed char const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers + 1 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "signed char":
        """GetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterID2ID2 self) -> signed char"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterID2ID2 self, double const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterID2ID2 self) -> double"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetIsoSurfaceValue(self)


    def GetActiveListForIndex(self, index: 'itkIndex2') -> "itkSparseFieldLayerPSFLSNI2_Pointer":
        """GetActiveListForIndex(itkParallelSparseFieldLevelSetImageFilterID2ID2 self, itkIndex2 index) -> itkSparseFieldLayerPSFLSNI2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetActiveListForIndex(self, index)

    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterID2ID2"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterID2ID2

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParallelSparseFieldLevelSetImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParallelSparseFieldLevelSetImageFilterID2ID2.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_Clone, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2.SetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2.GetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2.SetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_SetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2.GetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2.GetActiveListForIndex = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_GetActiveListForIndex, None, itkParallelSparseFieldLevelSetImageFilterID2ID2)
itkParallelSparseFieldLevelSetImageFilterID2ID2_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_swigregister
itkParallelSparseFieldLevelSetImageFilterID2ID2_swigregister(itkParallelSparseFieldLevelSetImageFilterID2ID2)

def itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer":
    """itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__() -> itkParallelSparseFieldLevelSetImageFilterID2ID2_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2___New_orig__()

def itkParallelSparseFieldLevelSetImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterID2ID2 *":
    """itkParallelSparseFieldLevelSetImageFilterID2ID2_cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterID2ID2"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID2ID2_cast(obj)

class itkParallelSparseFieldLevelSetImageFilterID3ID3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterID3ID3):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations in three
    dimensions, for example, require 3 layers. In two dimensions, a
    minimum of 2 layers is probably required. Higher order derivatives and
    other geometrical measures may require more layers. If too few layers
    are specified, then the calculations will pull values from the
    background, which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkParallelSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer":
        """Clone(itkParallelSparseFieldLevelSetImageFilterID3ID3 self) -> itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_Clone(self)


    def SetNumberOfLayers(self, _arg: 'signed char const') -> "void":
        """
        SetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterID3ID3 self, signed char const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers + 1 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "signed char":
        """GetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterID3ID3 self) -> signed char"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'double const') -> "void":
        """
        SetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterID3ID3 self, double const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "double":
        """GetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterID3ID3 self) -> double"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetIsoSurfaceValue(self)


    def GetActiveListForIndex(self, index: 'itkIndex3') -> "itkSparseFieldLayerPSFLSNI3_Pointer":
        """GetActiveListForIndex(itkParallelSparseFieldLevelSetImageFilterID3ID3 self, itkIndex3 index) -> itkSparseFieldLayerPSFLSNI3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetActiveListForIndex(self, index)

    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterID3ID3"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterID3ID3

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParallelSparseFieldLevelSetImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParallelSparseFieldLevelSetImageFilterID3ID3.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_Clone, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3.SetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3.GetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3.SetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_SetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3.GetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3.GetActiveListForIndex = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_GetActiveListForIndex, None, itkParallelSparseFieldLevelSetImageFilterID3ID3)
itkParallelSparseFieldLevelSetImageFilterID3ID3_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_swigregister
itkParallelSparseFieldLevelSetImageFilterID3ID3_swigregister(itkParallelSparseFieldLevelSetImageFilterID3ID3)

def itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer":
    """itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__() -> itkParallelSparseFieldLevelSetImageFilterID3ID3_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3___New_orig__()

def itkParallelSparseFieldLevelSetImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterID3ID3 *":
    """itkParallelSparseFieldLevelSetImageFilterID3ID3_cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterID3ID3"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterID3ID3_cast(obj)

class itkParallelSparseFieldLevelSetImageFilterIF2IF2(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF2IF2):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations in three
    dimensions, for example, require 3 layers. In two dimensions, a
    minimum of 2 layers is probably required. Higher order derivatives and
    other geometrical measures may require more layers. If too few layers
    are specified, then the calculations will pull values from the
    background, which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkParallelSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer":
        """Clone(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self) -> itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_Clone(self)


    def SetNumberOfLayers(self, _arg: 'signed char const') -> "void":
        """
        SetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self, signed char const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers + 1 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "signed char":
        """GetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self) -> signed char"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self, float const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self) -> float"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetIsoSurfaceValue(self)


    def GetActiveListForIndex(self, index: 'itkIndex2') -> "itkSparseFieldLayerPSFLSNI2_Pointer":
        """GetActiveListForIndex(itkParallelSparseFieldLevelSetImageFilterIF2IF2 self, itkIndex2 index) -> itkSparseFieldLayerPSFLSNI2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetActiveListForIndex(self, index)

    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_OutputOStreamWritableCheck
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterIF2IF2"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterIF2IF2

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParallelSparseFieldLevelSetImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParallelSparseFieldLevelSetImageFilterIF2IF2.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_Clone, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2.SetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2.GetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2.SetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_SetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2.GetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2.GetActiveListForIndex = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_GetActiveListForIndex, None, itkParallelSparseFieldLevelSetImageFilterIF2IF2)
itkParallelSparseFieldLevelSetImageFilterIF2IF2_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_swigregister
itkParallelSparseFieldLevelSetImageFilterIF2IF2_swigregister(itkParallelSparseFieldLevelSetImageFilterIF2IF2)

def itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer":
    """itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__() -> itkParallelSparseFieldLevelSetImageFilterIF2IF2_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2___New_orig__()

def itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterIF2IF2 *":
    """itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterIF2IF2"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF2IF2_cast(obj)

class itkParallelSparseFieldLevelSetImageFilterIF3IF3(itkFiniteDifferenceImageFilterPython.itkFiniteDifferenceImageFilterIF3IF3):
    """


    This class implements a finite difference partial differential
    equation solver for evolving surfaces embedded in volumes as level-
    sets.

    The "sparse field" approach to the level-set model is a logical
    extension of the classical narrow band technique, which seeks to
    minimize computational effort by restricting calculations to those
    pixels in a region of interest around the moving surface (the
    $k$-level curve). The sparse field method uses a narrow band that is
    exactly the width needed to calculate changes on the level curve for
    the next time step. Because the band of grid points under
    consideration is so sparse, this approach has several advantages: the
    algorithm does exactly the number of calculations needed to determine
    the next position of the $k$-level curve, and the distance transform
    around the level curve can be recomputed at each iteration.

    The sparse field algorithm works by constructing a linked list of
    indices that are adjacent to the $k$-level set. These indices are
    called the "active set". The values at these active set indices
    define the position of the $k$-level curve. The active set indices are
    shifted to follow the distance transform embedding of the $k$-level
    curve as their values move in and out of a fixed numerical range about
    $k$. In this way, the active set is maintained as only those pixels
    adjacent to the evolving surface. Calculations are then done only at
    indices contained in the active set.

    The city-block neighborhoods of the active set indices are maintained
    as separate lists called "layers". At each iteration, the values at
    the layers are reinitialized as the distance transform from the active
    set. The number of layers can be adjusted according to the footprint
    needed for the calculations on the level curve.

    Briefly, the sparse field solver algorithm is as follows:

    For each active layer index $x_j$: Compute the change at $u_{x_j}$,
    the grid point in the embedding, based on local geometry and external
    forces and using a stable numerical scheme.

    For each active layer index $x_j$, add the change to the grid point
    value and redefine the active set indices and those of its layers
    based on any value changes which have moved outside of the numerical
    range allowed for the active set.

    Starting with the first layers adjacent to the active set and moving
    outwards, reconstruct the distance transform by setting values in the
    layers according to their neighbors. At the very outer layers, add or
    remove indices which have come into or moved out of the sparse field.

    HOW TO USE THIS CLASS Typically, this class should be subclassed with
    additional functionality for specific applications. It is possible,
    however to use this solver as a filter directly by instantiating it
    and supplying it with an appropriate LevelSetFunction object via the
    SetDifferenceFunction method. See the subclasses and their associated
    documentation for more information on using this class. Also see the
    FiniteDifferenceImageFilter documentation for a general overview of
    this class of solvers. INPUTS This filter takes an itk::Image as
    input. The appropriate type of input image is entirely determined by
    the application. As a rule, however, the input type is immediately
    converted to the output type before processing. This is because the
    input is not assumed to be a real value type and must be converted to
    signed, real values for the calculations. The input values will also
    be shifted by the $k$ isosurface value so that the algorithm only
    needs to consider the zero level set. OUTPUTS The output of the filter
    is the distance transform embedding of the isosurface as the zero
    level set. Values outside the surface will be negative and values
    inside the surface will be positive. The distance transform only holds
    for those indices in layers around the active layer. Elsewhere, the
    values are a fixed positive or negative that is one greater than the
    layer of greatest magnitude. In other words, if there are three
    layers, then inside values increase only to 4.0 and outside values
    only to -4.0. PARAMETERS The NumberOfLayers parameter controls the
    number of layers inside and outside of the active set (see description
    above). The sparse field will contain 2*NumberOfLayers+1 lists of
    indices: the active set and city block neighbors inside and outside
    the active set. It is important to specify enough layers to cover the
    footprint of your calculations. Curvature calculations in three
    dimensions, for example, require 3 layers. In two dimensions, a
    minimum of 2 layers is probably required. Higher order derivatives and
    other geometrical measures may require more layers. If too few layers
    are specified, then the calculations will pull values from the
    background, which may consist of arbitrary or random values.

    The IsoSurfaceValue indicates which value in the input represents the
    interface of interest. By default, this value is zero. When the solver
    initializes, it will subtract the IsoSurfaceValue from all values, in
    the input, shifting the isosurface of interest to zero in the output.
    IMPORTANT! Read the documentation for FiniteDifferenceImageFilter
    before attempting to use this filter. The solver requires that you
    specify a FiniteDifferenceFunction to use for calculations. This is
    set using the method SetDifferenceFunction in the parent class.
    REFERENCES Whitaker, Ross. A Level-Set Approach to 3D Reconstruction
    from Range Data. International Journal of Computer Vision. V. 29 No.
    3, 203-231. 1998.

    Sethian, J.A. Level Set Methods. Cambridge University Press. 1996.

    C++ includes: itkParallelSparseFieldLevelSetImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer":
        """Clone(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self) -> itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_Clone(self)


    def SetNumberOfLayers(self, _arg: 'signed char const') -> "void":
        """
        SetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self, signed char const _arg)

        Set/Get the
        number of layers to use in the sparse field. Argument is the number of
        layers on ONE side of the active layer, so the total layers in the
        sparse field is 2 * NumberOfLayers + 1 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetNumberOfLayers(self, _arg)


    def GetNumberOfLayers(self) -> "signed char":
        """GetNumberOfLayers(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self) -> signed char"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetNumberOfLayers(self)


    def SetIsoSurfaceValue(self, _arg: 'float const') -> "void":
        """
        SetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self, float const _arg)

        Set/Get the
        value of the isosurface to use in the input image. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetIsoSurfaceValue(self, _arg)


    def GetIsoSurfaceValue(self) -> "float":
        """GetIsoSurfaceValue(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self) -> float"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetIsoSurfaceValue(self)


    def GetActiveListForIndex(self, index: 'itkIndex3') -> "itkSparseFieldLayerPSFLSNI3_Pointer":
        """GetActiveListForIndex(itkParallelSparseFieldLevelSetImageFilterIF3IF3 self, itkIndex3 index) -> itkSparseFieldLayerPSFLSNI3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetActiveListForIndex(self, index)

    OutputEqualityComparableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_OutputEqualityComparableCheck
    DoubleConvertibleToOutputCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    OutputOStreamWritableCheck = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_OutputOStreamWritableCheck
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterIF3IF3"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkParallelSparseFieldLevelSetImageFilterIF3IF3

        Create a new object of the class itkParallelSparseFieldLevelSetImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParallelSparseFieldLevelSetImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkParallelSparseFieldLevelSetImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkParallelSparseFieldLevelSetImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkParallelSparseFieldLevelSetImageFilterIF3IF3.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_Clone, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3.SetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3.GetNumberOfLayers = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetNumberOfLayers, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3.SetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_SetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3.GetIsoSurfaceValue = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetIsoSurfaceValue, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3.GetActiveListForIndex = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_GetActiveListForIndex, None, itkParallelSparseFieldLevelSetImageFilterIF3IF3)
itkParallelSparseFieldLevelSetImageFilterIF3IF3_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_swigregister
itkParallelSparseFieldLevelSetImageFilterIF3IF3_swigregister(itkParallelSparseFieldLevelSetImageFilterIF3IF3)

def itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__() -> "itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer":
    """itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__() -> itkParallelSparseFieldLevelSetImageFilterIF3IF3_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3___New_orig__()

def itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkParallelSparseFieldLevelSetImageFilterIF3IF3 *":
    """itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast(itkLightObject obj) -> itkParallelSparseFieldLevelSetImageFilterIF3IF3"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetImageFilterIF3IF3_cast(obj)

class itkParallelSparseFieldLevelSetNodeI2(object):
    """Proxy of C++ itkParallelSparseFieldLevelSetNodeI2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkParallelSparseFieldLevelSetNodeI2 self) -> itkParallelSparseFieldLevelSetNodeI2
        __init__(itkParallelSparseFieldLevelSetNodeI2 self, itkParallelSparseFieldLevelSetNodeI2 arg0) -> itkParallelSparseFieldLevelSetNodeI2
        """
        _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI2_swiginit(self, _itkParallelSparseFieldLevelSetImageFilterPython.new_itkParallelSparseFieldLevelSetNodeI2(*args))
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetNodeI2
itkParallelSparseFieldLevelSetNodeI2_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI2_swigregister
itkParallelSparseFieldLevelSetNodeI2_swigregister(itkParallelSparseFieldLevelSetNodeI2)

class itkParallelSparseFieldLevelSetNodeI3(object):
    """Proxy of C++ itkParallelSparseFieldLevelSetNodeI3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(itkParallelSparseFieldLevelSetNodeI3 self) -> itkParallelSparseFieldLevelSetNodeI3
        __init__(itkParallelSparseFieldLevelSetNodeI3 self, itkParallelSparseFieldLevelSetNodeI3 arg0) -> itkParallelSparseFieldLevelSetNodeI3
        """
        _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI3_swiginit(self, _itkParallelSparseFieldLevelSetImageFilterPython.new_itkParallelSparseFieldLevelSetNodeI3(*args))
    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkParallelSparseFieldLevelSetNodeI3
itkParallelSparseFieldLevelSetNodeI3_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkParallelSparseFieldLevelSetNodeI3_swigregister
itkParallelSparseFieldLevelSetNodeI3_swigregister(itkParallelSparseFieldLevelSetNodeI3)

class itkSparseFieldLayerPSFLSNI2(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerPSFLSNI2_Pointer":
        """__New_orig__() -> itkSparseFieldLayerPSFLSNI2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerPSFLSNI2_Pointer":
        """Clone(itkSparseFieldLayerPSFLSNI2 self) -> itkSparseFieldLayerPSFLSNI2_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Clone(self)


    def Front(self, *args) -> "itkParallelSparseFieldLevelSetNodeI2 const *":
        """
        Front(itkSparseFieldLayerPSFLSNI2 self) -> itkParallelSparseFieldLevelSetNodeI2
        Front(itkSparseFieldLayerPSFLSNI2 self) -> itkParallelSparseFieldLevelSetNodeI2

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerPSFLSNI2 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PopFront(self)


    def PushFront(self, n: 'itkParallelSparseFieldLevelSetNodeI2') -> "void":
        """
        PushFront(itkSparseFieldLayerPSFLSNI2 self, itkParallelSparseFieldLevelSetNodeI2 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PushFront(self, n)


    def Unlink(self, n: 'itkParallelSparseFieldLevelSetNodeI2') -> "void":
        """
        Unlink(itkSparseFieldLayerPSFLSNI2 self, itkParallelSparseFieldLevelSetNodeI2 n)

        Unlinks a node from the list

        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerPSFLSNI2 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerPSFLSNI2 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerPSFLSNI2::RegionType,std::allocator< itkSparseFieldLayerPSFLSNI2::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerPSFLSNI2 self, int num) -> std::vector< itkSparseFieldLayerPSFLSNI2::RegionType,std::allocator< itkSparseFieldLayerPSFLSNI2::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_SplitRegions(self, num)

    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerPSFLSNI2

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerPSFLSNI2 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerPSFLSNI2"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerPSFLSNI2

        Create a new object of the class itkSparseFieldLayerPSFLSNI2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerPSFLSNI2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerPSFLSNI2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerPSFLSNI2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerPSFLSNI2.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Clone, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.Front = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Front, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.PopFront = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PopFront, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.PushFront = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_PushFront, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.Unlink = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Unlink, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.Empty = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Empty, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.Size = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_Size, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2.SplitRegions = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_SplitRegions, None, itkSparseFieldLayerPSFLSNI2)
itkSparseFieldLayerPSFLSNI2_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_swigregister
itkSparseFieldLayerPSFLSNI2_swigregister(itkSparseFieldLayerPSFLSNI2)

def itkSparseFieldLayerPSFLSNI2___New_orig__() -> "itkSparseFieldLayerPSFLSNI2_Pointer":
    """itkSparseFieldLayerPSFLSNI2___New_orig__() -> itkSparseFieldLayerPSFLSNI2_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2___New_orig__()

def itkSparseFieldLayerPSFLSNI2_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerPSFLSNI2 *":
    """itkSparseFieldLayerPSFLSNI2_cast(itkLightObject obj) -> itkSparseFieldLayerPSFLSNI2"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI2_cast(obj)

class itkSparseFieldLayerPSFLSNI3(ITKCommonBasePython.itkObject):
    """


    A very simple linked list that is used to manage nodes in a layer of a
    sparse field level-set solver.

    This class implements a very simple linked list that is used to manage
    nodes in a layer of a sparse field level-set solver. For more
    information on the sparse field level-set solver, see documentation
    for itk::SparseFieldLevelSetImageFilter. IMPORTANT! One important and
    distinctive feature of this list implementation (in fact, the entire
    reason for this object's existence) is that no memory
    allocation/deallocation occurs during linking or unlinking of nodes.
    The nodes themselves are expected to carry the appropriate "Next" &
    "Previous" fields used to link. Guaranteeing that no calls to new or
    delete are ever made for normal list operations allows us to safely
    use this class in a multithread environment without incurring
    penalties from heap contention among threads. Because no
    allocation/deallocation occurs, it is entirely up to the calling
    program to manage the allocating and freeing of the list nodes.

    C++ includes: itkSparseFieldLayer.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSparseFieldLayerPSFLSNI3_Pointer":
        """__New_orig__() -> itkSparseFieldLayerPSFLSNI3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSparseFieldLayerPSFLSNI3_Pointer":
        """Clone(itkSparseFieldLayerPSFLSNI3 self) -> itkSparseFieldLayerPSFLSNI3_Pointer"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Clone(self)


    def Front(self, *args) -> "itkParallelSparseFieldLevelSetNodeI3 const *":
        """
        Front(itkSparseFieldLayerPSFLSNI3 self) -> itkParallelSparseFieldLevelSetNodeI3
        Front(itkSparseFieldLayerPSFLSNI3 self) -> itkParallelSparseFieldLevelSetNodeI3

        Returns a const pointer to
        the first node in the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Front(self, *args)


    def PopFront(self) -> "void":
        """
        PopFront(itkSparseFieldLayerPSFLSNI3 self)

        Unlinks the first node
        from the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PopFront(self)


    def PushFront(self, n: 'itkParallelSparseFieldLevelSetNodeI3') -> "void":
        """
        PushFront(itkSparseFieldLayerPSFLSNI3 self, itkParallelSparseFieldLevelSetNodeI3 n)

        Links a node into the
        front of the list. Constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PushFront(self, n)


    def Unlink(self, n: 'itkParallelSparseFieldLevelSetNodeI3') -> "void":
        """
        Unlink(itkSparseFieldLayerPSFLSNI3 self, itkParallelSparseFieldLevelSetNodeI3 n)

        Unlinks a node from the list

        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Unlink(self, n)


    def Empty(self) -> "bool":
        """
        Empty(itkSparseFieldLayerPSFLSNI3 self) -> bool

        Returns TRUE if the list is
        empty, FALSE otherwise. Executes in constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Empty(self)


    def Size(self) -> "unsigned int":
        """
        Size(itkSparseFieldLayerPSFLSNI3 self) -> unsigned int

        Returns the number of elements
        in the list. Size() executes in constant time. 
        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Size(self)


    def SplitRegions(self, num: 'int') -> "std::vector< itkSparseFieldLayerPSFLSNI3::RegionType,std::allocator< itkSparseFieldLayerPSFLSNI3::RegionType > >":
        """
        SplitRegions(itkSparseFieldLayerPSFLSNI3 self, int num) -> std::vector< itkSparseFieldLayerPSFLSNI3::RegionType,std::allocator< itkSparseFieldLayerPSFLSNI3::RegionType > >

        Returns pointers to
        first and last+1 elements of num partitions of the itkSparseFieldLayer

        """
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_SplitRegions(self, num)

    __swig_destroy__ = _itkParallelSparseFieldLevelSetImageFilterPython.delete_itkSparseFieldLayerPSFLSNI3

    def cast(obj: 'itkLightObject') -> "itkSparseFieldLayerPSFLSNI3 *":
        """cast(itkLightObject obj) -> itkSparseFieldLayerPSFLSNI3"""
        return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSparseFieldLayerPSFLSNI3

        Create a new object of the class itkSparseFieldLayerPSFLSNI3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSparseFieldLayerPSFLSNI3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSparseFieldLayerPSFLSNI3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSparseFieldLayerPSFLSNI3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSparseFieldLayerPSFLSNI3.Clone = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Clone, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.Front = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Front, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.PopFront = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PopFront, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.PushFront = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_PushFront, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.Unlink = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Unlink, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.Empty = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Empty, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.Size = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_Size, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3.SplitRegions = new_instancemethod(_itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_SplitRegions, None, itkSparseFieldLayerPSFLSNI3)
itkSparseFieldLayerPSFLSNI3_swigregister = _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_swigregister
itkSparseFieldLayerPSFLSNI3_swigregister(itkSparseFieldLayerPSFLSNI3)

def itkSparseFieldLayerPSFLSNI3___New_orig__() -> "itkSparseFieldLayerPSFLSNI3_Pointer":
    """itkSparseFieldLayerPSFLSNI3___New_orig__() -> itkSparseFieldLayerPSFLSNI3_Pointer"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3___New_orig__()

def itkSparseFieldLayerPSFLSNI3_cast(obj: 'itkLightObject') -> "itkSparseFieldLayerPSFLSNI3 *":
    """itkSparseFieldLayerPSFLSNI3_cast(itkLightObject obj) -> itkSparseFieldLayerPSFLSNI3"""
    return _itkParallelSparseFieldLevelSetImageFilterPython.itkSparseFieldLayerPSFLSNI3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def parallel_sparse_field_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ParallelSparseFieldLevelSetImageFilter"""
    import itk
    instance = itk.ParallelSparseFieldLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def parallel_sparse_field_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ParallelSparseFieldLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ParallelSparseFieldLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ParallelSparseFieldLevelSetImageFilter

    parallel_sparse_field_level_set_image_filter.__doc__ = filter_object.__doc__
    parallel_sparse_field_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    parallel_sparse_field_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    parallel_sparse_field_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



