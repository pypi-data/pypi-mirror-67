# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkShapePriorMAPCostFunctionBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkShapePriorMAPCostFunctionBasePython', [dirname(__file__)])
        except ImportError:
            import _itkShapePriorMAPCostFunctionBasePython
            return _itkShapePriorMAPCostFunctionBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkShapePriorMAPCostFunctionBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkShapePriorMAPCostFunctionBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkShapePriorMAPCostFunctionBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkOptimizerParametersPython
import ITKCommonBasePython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import ITKCostFunctionsPython
import itkArray2DPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import itkCostFunctionPython
import vnl_least_squares_functionPython
import ITKFastMarchingBasePython
import itkNodePairPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkFastMarchingStoppingCriterionBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkLevelSetNodePython
import itkShapeSignedDistanceFunctionPython
import itkSpatialFunctionPython
import itkFunctionBasePython
import itkContinuousIndexPython

def itkShapePriorMAPCostFunctionBaseID3D_New():
  return itkShapePriorMAPCostFunctionBaseID3D.New()


def itkShapePriorMAPCostFunctionBaseIF3F_New():
  return itkShapePriorMAPCostFunctionBaseIF3F.New()


def itkShapePriorMAPCostFunctionBaseID2D_New():
  return itkShapePriorMAPCostFunctionBaseID2D.New()


def itkShapePriorMAPCostFunctionBaseIF2F_New():
  return itkShapePriorMAPCostFunctionBaseIF2F.New()

class itkShapePriorMAPCostFunctionBaseID2D(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Represents the base class of maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1].

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000.

    C++ includes: itkShapePriorMAPCostFunctionBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetShapeFunction(self, _arg: 'itkShapeSignedDistanceFunctionD2') -> "void":
        """
        SetShapeFunction(itkShapePriorMAPCostFunctionBaseID2D self, itkShapeSignedDistanceFunctionD2 _arg)

        Set/Get the shape
        distance function. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetShapeFunction(self, _arg)


    def GetModifiableShapeFunction(self) -> "itkShapeSignedDistanceFunctionD2 *":
        """GetModifiableShapeFunction(itkShapePriorMAPCostFunctionBaseID2D self) -> itkShapeSignedDistanceFunctionD2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetModifiableShapeFunction(self)


    def GetShapeFunction(self, *args) -> "itkShapeSignedDistanceFunctionD2 *":
        """
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseID2D self) -> itkShapeSignedDistanceFunctionD2
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseID2D self) -> itkShapeSignedDistanceFunctionD2
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetShapeFunction(self, *args)


    def SetActiveRegion(self, _arg: 'itkVectorContainerUILSND2') -> "void":
        """
        SetActiveRegion(itkShapePriorMAPCostFunctionBaseID2D self, itkVectorContainerUILSND2 _arg)

        Set/Get the active
        region. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetActiveRegion(self, _arg)


    def GetActiveRegion(self) -> "itkVectorContainerUILSND2 const *":
        """GetActiveRegion(itkShapePriorMAPCostFunctionBaseID2D self) -> itkVectorContainerUILSND2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetActiveRegion(self)


    def SetFeatureImage(self, _arg: 'itkImageD2') -> "void":
        """
        SetFeatureImage(itkShapePriorMAPCostFunctionBaseID2D self, itkImageD2 _arg)

        Set/Get the feature
        image. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetFeatureImage(self, _arg)


    def GetFeatureImage(self) -> "itkImageD2 const *":
        """GetFeatureImage(itkShapePriorMAPCostFunctionBaseID2D self) -> itkImageD2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetFeatureImage(self)


    def ComputeLogInsideTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogInsideTerm(itkShapePriorMAPCostFunctionBaseID2D self, itkOptimizerParametersD arg0) -> double

        Compute the
        inside term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogInsideTerm(self, arg0)


    def ComputeLogGradientTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogGradientTerm(itkShapePriorMAPCostFunctionBaseID2D self, itkOptimizerParametersD arg0) -> double

        Compute the
        gradient term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogGradientTerm(self, arg0)


    def ComputeLogShapePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogShapePriorTerm(itkShapePriorMAPCostFunctionBaseID2D self, itkOptimizerParametersD arg0) -> double

        Compute
        the shape prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogShapePriorTerm(self, arg0)


    def ComputeLogPosePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogPosePriorTerm(itkShapePriorMAPCostFunctionBaseID2D self, itkOptimizerParametersD arg0) -> double

        Compute the
        pose prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogPosePriorTerm(self, arg0)


    def Initialize(self) -> "void":
        """
        Initialize(itkShapePriorMAPCostFunctionBaseID2D self)

        Initialize the cost
        function by making sure that all the components are present. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_Initialize(self)

    __swig_destroy__ = _itkShapePriorMAPCostFunctionBasePython.delete_itkShapePriorMAPCostFunctionBaseID2D

    def cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseID2D *":
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID2D"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseID2D

        Create a new object of the class itkShapePriorMAPCostFunctionBaseID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionBaseID2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionBaseID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseID2D.SetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetShapeFunction, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetModifiableShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetModifiableShapeFunction, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetShapeFunction, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.SetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetActiveRegion, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetActiveRegion, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.SetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_SetFeatureImage, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_GetFeatureImage, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogInsideTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogInsideTerm, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogGradientTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogGradientTerm, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogShapePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogShapePriorTerm, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogPosePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogPosePriorTerm, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.Initialize = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_Initialize, None, itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D_swigregister = _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_swigregister
itkShapePriorMAPCostFunctionBaseID2D_swigregister(itkShapePriorMAPCostFunctionBaseID2D)

def itkShapePriorMAPCostFunctionBaseID2D_cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseID2D *":
    """itkShapePriorMAPCostFunctionBaseID2D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID2D"""
    return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID2D_cast(obj)

class itkShapePriorMAPCostFunctionBaseID3D(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Represents the base class of maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1].

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000.

    C++ includes: itkShapePriorMAPCostFunctionBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetShapeFunction(self, _arg: 'itkShapeSignedDistanceFunctionD3') -> "void":
        """
        SetShapeFunction(itkShapePriorMAPCostFunctionBaseID3D self, itkShapeSignedDistanceFunctionD3 _arg)

        Set/Get the shape
        distance function. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetShapeFunction(self, _arg)


    def GetModifiableShapeFunction(self) -> "itkShapeSignedDistanceFunctionD3 *":
        """GetModifiableShapeFunction(itkShapePriorMAPCostFunctionBaseID3D self) -> itkShapeSignedDistanceFunctionD3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetModifiableShapeFunction(self)


    def GetShapeFunction(self, *args) -> "itkShapeSignedDistanceFunctionD3 *":
        """
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseID3D self) -> itkShapeSignedDistanceFunctionD3
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseID3D self) -> itkShapeSignedDistanceFunctionD3
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetShapeFunction(self, *args)


    def SetActiveRegion(self, _arg: 'itkVectorContainerUILSND3') -> "void":
        """
        SetActiveRegion(itkShapePriorMAPCostFunctionBaseID3D self, itkVectorContainerUILSND3 _arg)

        Set/Get the active
        region. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetActiveRegion(self, _arg)


    def GetActiveRegion(self) -> "itkVectorContainerUILSND3 const *":
        """GetActiveRegion(itkShapePriorMAPCostFunctionBaseID3D self) -> itkVectorContainerUILSND3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetActiveRegion(self)


    def SetFeatureImage(self, _arg: 'itkImageD3') -> "void":
        """
        SetFeatureImage(itkShapePriorMAPCostFunctionBaseID3D self, itkImageD3 _arg)

        Set/Get the feature
        image. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetFeatureImage(self, _arg)


    def GetFeatureImage(self) -> "itkImageD3 const *":
        """GetFeatureImage(itkShapePriorMAPCostFunctionBaseID3D self) -> itkImageD3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetFeatureImage(self)


    def ComputeLogInsideTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogInsideTerm(itkShapePriorMAPCostFunctionBaseID3D self, itkOptimizerParametersD arg0) -> double

        Compute the
        inside term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogInsideTerm(self, arg0)


    def ComputeLogGradientTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogGradientTerm(itkShapePriorMAPCostFunctionBaseID3D self, itkOptimizerParametersD arg0) -> double

        Compute the
        gradient term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogGradientTerm(self, arg0)


    def ComputeLogShapePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogShapePriorTerm(itkShapePriorMAPCostFunctionBaseID3D self, itkOptimizerParametersD arg0) -> double

        Compute
        the shape prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogShapePriorTerm(self, arg0)


    def ComputeLogPosePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogPosePriorTerm(itkShapePriorMAPCostFunctionBaseID3D self, itkOptimizerParametersD arg0) -> double

        Compute the
        pose prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogPosePriorTerm(self, arg0)


    def Initialize(self) -> "void":
        """
        Initialize(itkShapePriorMAPCostFunctionBaseID3D self)

        Initialize the cost
        function by making sure that all the components are present. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_Initialize(self)

    __swig_destroy__ = _itkShapePriorMAPCostFunctionBasePython.delete_itkShapePriorMAPCostFunctionBaseID3D

    def cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseID3D *":
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID3D"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseID3D

        Create a new object of the class itkShapePriorMAPCostFunctionBaseID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionBaseID3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionBaseID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseID3D.SetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetShapeFunction, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetModifiableShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetModifiableShapeFunction, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetShapeFunction, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.SetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetActiveRegion, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetActiveRegion, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.SetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_SetFeatureImage, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_GetFeatureImage, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogInsideTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogInsideTerm, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogGradientTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogGradientTerm, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogShapePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogShapePriorTerm, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogPosePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogPosePriorTerm, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.Initialize = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_Initialize, None, itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D_swigregister = _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_swigregister
itkShapePriorMAPCostFunctionBaseID3D_swigregister(itkShapePriorMAPCostFunctionBaseID3D)

def itkShapePriorMAPCostFunctionBaseID3D_cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseID3D *":
    """itkShapePriorMAPCostFunctionBaseID3D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID3D"""
    return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseID3D_cast(obj)

class itkShapePriorMAPCostFunctionBaseIF2F(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Represents the base class of maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1].

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000.

    C++ includes: itkShapePriorMAPCostFunctionBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetShapeFunction(self, _arg: 'itkShapeSignedDistanceFunctionD2') -> "void":
        """
        SetShapeFunction(itkShapePriorMAPCostFunctionBaseIF2F self, itkShapeSignedDistanceFunctionD2 _arg)

        Set/Get the shape
        distance function. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetShapeFunction(self, _arg)


    def GetModifiableShapeFunction(self) -> "itkShapeSignedDistanceFunctionD2 *":
        """GetModifiableShapeFunction(itkShapePriorMAPCostFunctionBaseIF2F self) -> itkShapeSignedDistanceFunctionD2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetModifiableShapeFunction(self)


    def GetShapeFunction(self, *args) -> "itkShapeSignedDistanceFunctionD2 *":
        """
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseIF2F self) -> itkShapeSignedDistanceFunctionD2
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseIF2F self) -> itkShapeSignedDistanceFunctionD2
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetShapeFunction(self, *args)


    def SetActiveRegion(self, _arg: 'itkVectorContainerUILSNF2') -> "void":
        """
        SetActiveRegion(itkShapePriorMAPCostFunctionBaseIF2F self, itkVectorContainerUILSNF2 _arg)

        Set/Get the active
        region. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetActiveRegion(self, _arg)


    def GetActiveRegion(self) -> "itkVectorContainerUILSNF2 const *":
        """GetActiveRegion(itkShapePriorMAPCostFunctionBaseIF2F self) -> itkVectorContainerUILSNF2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetActiveRegion(self)


    def SetFeatureImage(self, _arg: 'itkImageF2') -> "void":
        """
        SetFeatureImage(itkShapePriorMAPCostFunctionBaseIF2F self, itkImageF2 _arg)

        Set/Get the feature
        image. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetFeatureImage(self, _arg)


    def GetFeatureImage(self) -> "itkImageF2 const *":
        """GetFeatureImage(itkShapePriorMAPCostFunctionBaseIF2F self) -> itkImageF2"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetFeatureImage(self)


    def ComputeLogInsideTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogInsideTerm(itkShapePriorMAPCostFunctionBaseIF2F self, itkOptimizerParametersD arg0) -> double

        Compute the
        inside term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogInsideTerm(self, arg0)


    def ComputeLogGradientTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogGradientTerm(itkShapePriorMAPCostFunctionBaseIF2F self, itkOptimizerParametersD arg0) -> double

        Compute the
        gradient term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogGradientTerm(self, arg0)


    def ComputeLogShapePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogShapePriorTerm(itkShapePriorMAPCostFunctionBaseIF2F self, itkOptimizerParametersD arg0) -> double

        Compute
        the shape prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogShapePriorTerm(self, arg0)


    def ComputeLogPosePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogPosePriorTerm(itkShapePriorMAPCostFunctionBaseIF2F self, itkOptimizerParametersD arg0) -> double

        Compute the
        pose prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogPosePriorTerm(self, arg0)


    def Initialize(self) -> "void":
        """
        Initialize(itkShapePriorMAPCostFunctionBaseIF2F self)

        Initialize the cost
        function by making sure that all the components are present. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_Initialize(self)

    __swig_destroy__ = _itkShapePriorMAPCostFunctionBasePython.delete_itkShapePriorMAPCostFunctionBaseIF2F

    def cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseIF2F *":
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF2F"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseIF2F

        Create a new object of the class itkShapePriorMAPCostFunctionBaseIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionBaseIF2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionBaseIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseIF2F.SetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetModifiableShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetModifiableShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.SetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetActiveRegion, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetActiveRegion, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.SetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_SetFeatureImage, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_GetFeatureImage, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogInsideTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogInsideTerm, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogGradientTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogGradientTerm, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogShapePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogShapePriorTerm, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogPosePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogPosePriorTerm, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.Initialize = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_Initialize, None, itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F_swigregister = _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_swigregister
itkShapePriorMAPCostFunctionBaseIF2F_swigregister(itkShapePriorMAPCostFunctionBaseIF2F)

def itkShapePriorMAPCostFunctionBaseIF2F_cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseIF2F *":
    """itkShapePriorMAPCostFunctionBaseIF2F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF2F"""
    return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF2F_cast(obj)

class itkShapePriorMAPCostFunctionBaseIF3F(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """


    Represents the base class of maximum aprior (MAP) cost function used
    ShapePriorSegmentationLevelSetImageFilter to estimate the shape
    parameters.

    This class follows the shape and pose parameters estimation developed
    in [1].

    This class has two template parameters, the feature image type
    representing the edge potential map and the pixel type used to
    represent the output level set in the
    ShapePriorSegmentationLevelSetImageFilter.

    See:   ShapePriorSegmentationLevelSetImageFilter REFERENCES

    [1] Leventon, M.E. et al. "Statistical Shape Influence in Geodesic
    Active Contours", CVPR 2000.

    C++ includes: itkShapePriorMAPCostFunctionBase.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetShapeFunction(self, _arg: 'itkShapeSignedDistanceFunctionD3') -> "void":
        """
        SetShapeFunction(itkShapePriorMAPCostFunctionBaseIF3F self, itkShapeSignedDistanceFunctionD3 _arg)

        Set/Get the shape
        distance function. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetShapeFunction(self, _arg)


    def GetModifiableShapeFunction(self) -> "itkShapeSignedDistanceFunctionD3 *":
        """GetModifiableShapeFunction(itkShapePriorMAPCostFunctionBaseIF3F self) -> itkShapeSignedDistanceFunctionD3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetModifiableShapeFunction(self)


    def GetShapeFunction(self, *args) -> "itkShapeSignedDistanceFunctionD3 *":
        """
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseIF3F self) -> itkShapeSignedDistanceFunctionD3
        GetShapeFunction(itkShapePriorMAPCostFunctionBaseIF3F self) -> itkShapeSignedDistanceFunctionD3
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetShapeFunction(self, *args)


    def SetActiveRegion(self, _arg: 'itkVectorContainerUILSNF3') -> "void":
        """
        SetActiveRegion(itkShapePriorMAPCostFunctionBaseIF3F self, itkVectorContainerUILSNF3 _arg)

        Set/Get the active
        region. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetActiveRegion(self, _arg)


    def GetActiveRegion(self) -> "itkVectorContainerUILSNF3 const *":
        """GetActiveRegion(itkShapePriorMAPCostFunctionBaseIF3F self) -> itkVectorContainerUILSNF3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetActiveRegion(self)


    def SetFeatureImage(self, _arg: 'itkImageF3') -> "void":
        """
        SetFeatureImage(itkShapePriorMAPCostFunctionBaseIF3F self, itkImageF3 _arg)

        Set/Get the feature
        image. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetFeatureImage(self, _arg)


    def GetFeatureImage(self) -> "itkImageF3 const *":
        """GetFeatureImage(itkShapePriorMAPCostFunctionBaseIF3F self) -> itkImageF3"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetFeatureImage(self)


    def ComputeLogInsideTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogInsideTerm(itkShapePriorMAPCostFunctionBaseIF3F self, itkOptimizerParametersD arg0) -> double

        Compute the
        inside term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogInsideTerm(self, arg0)


    def ComputeLogGradientTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogGradientTerm(itkShapePriorMAPCostFunctionBaseIF3F self, itkOptimizerParametersD arg0) -> double

        Compute the
        gradient term component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogGradientTerm(self, arg0)


    def ComputeLogShapePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogShapePriorTerm(itkShapePriorMAPCostFunctionBaseIF3F self, itkOptimizerParametersD arg0) -> double

        Compute
        the shape prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogShapePriorTerm(self, arg0)


    def ComputeLogPosePriorTerm(self, arg0: 'itkOptimizerParametersD') -> "double":
        """
        ComputeLogPosePriorTerm(itkShapePriorMAPCostFunctionBaseIF3F self, itkOptimizerParametersD arg0) -> double

        Compute the
        pose prior component of the MAP cost function. Subclasses should
        override this function 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogPosePriorTerm(self, arg0)


    def Initialize(self) -> "void":
        """
        Initialize(itkShapePriorMAPCostFunctionBaseIF3F self)

        Initialize the cost
        function by making sure that all the components are present. 
        """
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_Initialize(self)

    __swig_destroy__ = _itkShapePriorMAPCostFunctionBasePython.delete_itkShapePriorMAPCostFunctionBaseIF3F

    def cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseIF3F *":
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF3F"""
        return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseIF3F

        Create a new object of the class itkShapePriorMAPCostFunctionBaseIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapePriorMAPCostFunctionBaseIF3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkShapePriorMAPCostFunctionBaseIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseIF3F.SetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetModifiableShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetModifiableShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetShapeFunction = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetShapeFunction, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.SetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetActiveRegion, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetActiveRegion = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetActiveRegion, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.SetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_SetFeatureImage, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetFeatureImage = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_GetFeatureImage, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogInsideTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogInsideTerm, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogGradientTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogGradientTerm, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogShapePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogShapePriorTerm, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogPosePriorTerm = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogPosePriorTerm, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.Initialize = new_instancemethod(_itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_Initialize, None, itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F_swigregister = _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_swigregister
itkShapePriorMAPCostFunctionBaseIF3F_swigregister(itkShapePriorMAPCostFunctionBaseIF3F)

def itkShapePriorMAPCostFunctionBaseIF3F_cast(obj: 'itkLightObject') -> "itkShapePriorMAPCostFunctionBaseIF3F *":
    """itkShapePriorMAPCostFunctionBaseIF3F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF3F"""
    return _itkShapePriorMAPCostFunctionBasePython.itkShapePriorMAPCostFunctionBaseIF3F_cast(obj)



