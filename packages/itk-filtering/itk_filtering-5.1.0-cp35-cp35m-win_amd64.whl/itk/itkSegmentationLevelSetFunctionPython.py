# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSegmentationLevelSetFunctionPython
else:
    import _itkSegmentationLevelSetFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSegmentationLevelSetFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSegmentationLevelSetFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itkLevelSetFunctionPython
import ITKCommonBasePython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFiniteDifferenceFunctionPython
import itkSizePython
import itkCovariantVectorPython
import itkImagePython
import itkPointPython
import itkRGBAPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBPixelPython
import itkIndexPython
import itkOffsetPython
import itkImageRegionPython
import itkSymmetricSecondRankTensorPython

def itkSegmentationLevelSetFunctionID3ID3_New():
  return itkSegmentationLevelSetFunctionID3ID3.New()


def itkSegmentationLevelSetFunctionID2ID2_New():
  return itkSegmentationLevelSetFunctionID2ID2.New()


def itkSegmentationLevelSetFunctionIF3IF3_New():
  return itkSegmentationLevelSetFunctionIF3IF3.New()


def itkSegmentationLevelSetFunctionIF2IF2_New():
  return itkSegmentationLevelSetFunctionIF2IF2.New()

class itkSegmentationLevelSetFunctionID2ID2(itkLevelSetFunctionPython.itkLevelSetFunctionID2):
    r"""Proxy of C++ itkSegmentationLevelSetFunctionID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetFeatureImage)
    SetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetFeatureImage)
    GetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetSpeedImage)
    SetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_GetAdvectionImage)
    SetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_SetAdvectionImage)
    CalculateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateSpeedImage)
    CalculateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_CalculateAdvectionImage)
    AllocateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateSpeedImage)
    AllocateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_AllocateAdvectionImage)
    ReverseExpansionDirection = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_ReverseExpansionDirection)
    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionID2ID2
    cast = _swig_new_static_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionID2ID2

        Create a new object of the class itkSegmentationLevelSetFunctionID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSegmentationLevelSetFunctionID2ID2 in _itkSegmentationLevelSetFunctionPython:
_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_swigregister(itkSegmentationLevelSetFunctionID2ID2)
itkSegmentationLevelSetFunctionID2ID2_cast = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID2ID2_cast

class itkSegmentationLevelSetFunctionID3ID3(itkLevelSetFunctionPython.itkLevelSetFunctionID3):
    r"""Proxy of C++ itkSegmentationLevelSetFunctionID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetFeatureImage)
    SetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetFeatureImage)
    GetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetSpeedImage)
    SetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_GetAdvectionImage)
    SetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_SetAdvectionImage)
    CalculateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateSpeedImage)
    CalculateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_CalculateAdvectionImage)
    AllocateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateSpeedImage)
    AllocateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_AllocateAdvectionImage)
    ReverseExpansionDirection = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_ReverseExpansionDirection)
    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionID3ID3
    cast = _swig_new_static_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionID3ID3

        Create a new object of the class itkSegmentationLevelSetFunctionID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSegmentationLevelSetFunctionID3ID3 in _itkSegmentationLevelSetFunctionPython:
_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_swigregister(itkSegmentationLevelSetFunctionID3ID3)
itkSegmentationLevelSetFunctionID3ID3_cast = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionID3ID3_cast

class itkSegmentationLevelSetFunctionIF2IF2(itkLevelSetFunctionPython.itkLevelSetFunctionIF2):
    r"""Proxy of C++ itkSegmentationLevelSetFunctionIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetFeatureImage)
    SetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetFeatureImage)
    GetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetSpeedImage)
    SetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_GetAdvectionImage)
    SetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_SetAdvectionImage)
    CalculateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateSpeedImage)
    CalculateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_CalculateAdvectionImage)
    AllocateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateSpeedImage)
    AllocateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_AllocateAdvectionImage)
    ReverseExpansionDirection = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_ReverseExpansionDirection)
    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionIF2IF2
    cast = _swig_new_static_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionIF2IF2

        Create a new object of the class itkSegmentationLevelSetFunctionIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSegmentationLevelSetFunctionIF2IF2 in _itkSegmentationLevelSetFunctionPython:
_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_swigregister(itkSegmentationLevelSetFunctionIF2IF2)
itkSegmentationLevelSetFunctionIF2IF2_cast = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF2IF2_cast

class itkSegmentationLevelSetFunctionIF3IF3(itkLevelSetFunctionPython.itkLevelSetFunctionIF3):
    r"""Proxy of C++ itkSegmentationLevelSetFunctionIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    GetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetFeatureImage)
    SetFeatureImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetFeatureImage)
    GetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetSpeedImage)
    SetSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_GetAdvectionImage)
    SetAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_SetAdvectionImage)
    CalculateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateSpeedImage)
    CalculateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_CalculateAdvectionImage)
    AllocateSpeedImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateSpeedImage)
    AllocateAdvectionImage = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_AllocateAdvectionImage)
    ReverseExpansionDirection = _swig_new_instance_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_ReverseExpansionDirection)
    __swig_destroy__ = _itkSegmentationLevelSetFunctionPython.delete_itkSegmentationLevelSetFunctionIF3IF3
    cast = _swig_new_static_method(_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSegmentationLevelSetFunctionIF3IF3

        Create a new object of the class itkSegmentationLevelSetFunctionIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSegmentationLevelSetFunctionIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSegmentationLevelSetFunctionIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSegmentationLevelSetFunctionIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSegmentationLevelSetFunctionIF3IF3 in _itkSegmentationLevelSetFunctionPython:
_itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_swigregister(itkSegmentationLevelSetFunctionIF3IF3)
itkSegmentationLevelSetFunctionIF3IF3_cast = _itkSegmentationLevelSetFunctionPython.itkSegmentationLevelSetFunctionIF3IF3_cast



