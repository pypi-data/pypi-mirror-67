# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkMergeLabelMapFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMergeLabelMapFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkMergeLabelMapFilterPython
            return _itkMergeLabelMapFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMergeLabelMapFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMergeLabelMapFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMergeLabelMapFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkInPlaceLabelMapFilterPython
import ITKLabelMapBasePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import pyBasePython
import itkImageToImageFilterCommonPython
import itkImageSourceCommonPython
import ITKCommonBasePython
import itkImagePython
import itkImageRegionPython
import itkRGBPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkStatisticsLabelObjectPython
import itkAffineTransformPython
import itkTransformBasePython
import itkDiffusionTensor3DPython
import itkVariableLengthVectorPython
import itkArrayPython
import itkArray2DPython
import itkOptimizerParametersPython
import itkMatrixOffsetTransformBasePython
import itkShapeLabelObjectPython
import itkLabelObjectPython
import itkLabelObjectLinePython
import itkHistogramPython
import itkSamplePython
import itkImageSourcePython
import itkVectorImagePython
import itkLabelMapFilterPython

def itkMergeLabelMapFilterLM3_New():
  return itkMergeLabelMapFilterLM3.New()


def itkMergeLabelMapFilterLM2_New():
  return itkMergeLabelMapFilterLM2.New()

class itkMergeLabelMapFilterEnums(object):
    """Proxy of C++ itkMergeLabelMapFilterEnums class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ChoiceMethod_KEEP = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_ChoiceMethod_KEEP
    ChoiceMethod_AGGREGATE = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_ChoiceMethod_AGGREGATE
    ChoiceMethod_PACK = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_ChoiceMethod_PACK
    ChoiceMethod_STRICT = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_ChoiceMethod_STRICT

    def __init__(self, *args):
        """
        __init__(itkMergeLabelMapFilterEnums self) -> itkMergeLabelMapFilterEnums
        __init__(itkMergeLabelMapFilterEnums self, itkMergeLabelMapFilterEnums arg0) -> itkMergeLabelMapFilterEnums
        """
        _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_swiginit(self, _itkMergeLabelMapFilterPython.new_itkMergeLabelMapFilterEnums(*args))
    __swig_destroy__ = _itkMergeLabelMapFilterPython.delete_itkMergeLabelMapFilterEnums
itkMergeLabelMapFilterEnums_swigregister = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterEnums_swigregister
itkMergeLabelMapFilterEnums_swigregister(itkMergeLabelMapFilterEnums)

class itkMergeLabelMapFilterLM2(itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    """


    Merges several Label Maps.

    This filter takes one or more input Label Map and merges them.

    SetMethod() can be used to change how the filter manage the labels
    from the different label maps. KEEP (0): MergeLabelMapFilter do its
    best to keep the label unchanged, but if a label is already used in a
    previous label map, a new label is assigned. AGGREGATE (1): If the
    same label is found several times in the label maps, the label objects
    with the same label are merged. PACK (2): MergeLabelMapFilter relabel
    all the label objects by order of processing. No conflict can occur.
    STRICT (3): MergeLabelMapFilter keeps the labels unchanged and raises
    an exception if the same label is found in several images.

    This implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/584 orhttp://www.insight-
    journal.org/browse/publication/176

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ShapeLabelObject, RelabelComponentImageFilter

    C++ includes: itkMergeLabelMapFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMergeLabelMapFilterLM2_Pointer":
        """__New_orig__() -> itkMergeLabelMapFilterLM2_Pointer"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMergeLabelMapFilterLM2_Pointer":
        """Clone(itkMergeLabelMapFilterLM2 self) -> itkMergeLabelMapFilterLM2_Pointer"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_Clone(self)


    def SetMethod(self, _arg: 'itkMergeLabelMapFilterEnums::ChoiceMethod const') -> "void":
        """
        SetMethod(itkMergeLabelMapFilterLM2 self, itkMergeLabelMapFilterEnums::ChoiceMethod const _arg)

        Set/Get the method used
        to merge the label maps 
        """
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_SetMethod(self, _arg)


    def GetMethod(self) -> "itkMergeLabelMapFilterEnums::ChoiceMethod const &":
        """GetMethod(itkMergeLabelMapFilterLM2 self) -> itkMergeLabelMapFilterEnums::ChoiceMethod const &"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_GetMethod(self)

    __swig_destroy__ = _itkMergeLabelMapFilterPython.delete_itkMergeLabelMapFilterLM2

    def cast(obj: 'itkLightObject') -> "itkMergeLabelMapFilterLM2 *":
        """cast(itkLightObject obj) -> itkMergeLabelMapFilterLM2"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMergeLabelMapFilterLM2

        Create a new object of the class itkMergeLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMergeLabelMapFilterLM2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMergeLabelMapFilterLM2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMergeLabelMapFilterLM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMergeLabelMapFilterLM2.Clone = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_Clone, None, itkMergeLabelMapFilterLM2)
itkMergeLabelMapFilterLM2.SetMethod = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_SetMethod, None, itkMergeLabelMapFilterLM2)
itkMergeLabelMapFilterLM2.GetMethod = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_GetMethod, None, itkMergeLabelMapFilterLM2)
itkMergeLabelMapFilterLM2_swigregister = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_swigregister
itkMergeLabelMapFilterLM2_swigregister(itkMergeLabelMapFilterLM2)

def itkMergeLabelMapFilterLM2___New_orig__() -> "itkMergeLabelMapFilterLM2_Pointer":
    """itkMergeLabelMapFilterLM2___New_orig__() -> itkMergeLabelMapFilterLM2_Pointer"""
    return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2___New_orig__()

def itkMergeLabelMapFilterLM2_cast(obj: 'itkLightObject') -> "itkMergeLabelMapFilterLM2 *":
    """itkMergeLabelMapFilterLM2_cast(itkLightObject obj) -> itkMergeLabelMapFilterLM2"""
    return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM2_cast(obj)

class itkMergeLabelMapFilterLM3(itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    """


    Merges several Label Maps.

    This filter takes one or more input Label Map and merges them.

    SetMethod() can be used to change how the filter manage the labels
    from the different label maps. KEEP (0): MergeLabelMapFilter do its
    best to keep the label unchanged, but if a label is already used in a
    previous label map, a new label is assigned. AGGREGATE (1): If the
    same label is found several times in the label maps, the label objects
    with the same label are merged. PACK (2): MergeLabelMapFilter relabel
    all the label objects by order of processing. No conflict can occur.
    STRICT (3): MergeLabelMapFilter keeps the labels unchanged and raises
    an exception if the same label is found in several images.

    This implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/584 orhttp://www.insight-
    journal.org/browse/publication/176

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   ShapeLabelObject, RelabelComponentImageFilter

    C++ includes: itkMergeLabelMapFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkMergeLabelMapFilterLM3_Pointer":
        """__New_orig__() -> itkMergeLabelMapFilterLM3_Pointer"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkMergeLabelMapFilterLM3_Pointer":
        """Clone(itkMergeLabelMapFilterLM3 self) -> itkMergeLabelMapFilterLM3_Pointer"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_Clone(self)


    def SetMethod(self, _arg: 'itkMergeLabelMapFilterEnums::ChoiceMethod const') -> "void":
        """
        SetMethod(itkMergeLabelMapFilterLM3 self, itkMergeLabelMapFilterEnums::ChoiceMethod const _arg)

        Set/Get the method used
        to merge the label maps 
        """
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_SetMethod(self, _arg)


    def GetMethod(self) -> "itkMergeLabelMapFilterEnums::ChoiceMethod const &":
        """GetMethod(itkMergeLabelMapFilterLM3 self) -> itkMergeLabelMapFilterEnums::ChoiceMethod const &"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_GetMethod(self)

    __swig_destroy__ = _itkMergeLabelMapFilterPython.delete_itkMergeLabelMapFilterLM3

    def cast(obj: 'itkLightObject') -> "itkMergeLabelMapFilterLM3 *":
        """cast(itkLightObject obj) -> itkMergeLabelMapFilterLM3"""
        return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkMergeLabelMapFilterLM3

        Create a new object of the class itkMergeLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMergeLabelMapFilterLM3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkMergeLabelMapFilterLM3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMergeLabelMapFilterLM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMergeLabelMapFilterLM3.Clone = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_Clone, None, itkMergeLabelMapFilterLM3)
itkMergeLabelMapFilterLM3.SetMethod = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_SetMethod, None, itkMergeLabelMapFilterLM3)
itkMergeLabelMapFilterLM3.GetMethod = new_instancemethod(_itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_GetMethod, None, itkMergeLabelMapFilterLM3)
itkMergeLabelMapFilterLM3_swigregister = _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_swigregister
itkMergeLabelMapFilterLM3_swigregister(itkMergeLabelMapFilterLM3)

def itkMergeLabelMapFilterLM3___New_orig__() -> "itkMergeLabelMapFilterLM3_Pointer":
    """itkMergeLabelMapFilterLM3___New_orig__() -> itkMergeLabelMapFilterLM3_Pointer"""
    return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3___New_orig__()

def itkMergeLabelMapFilterLM3_cast(obj: 'itkLightObject') -> "itkMergeLabelMapFilterLM3 *":
    """itkMergeLabelMapFilterLM3_cast(itkLightObject obj) -> itkMergeLabelMapFilterLM3"""
    return _itkMergeLabelMapFilterPython.itkMergeLabelMapFilterLM3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def merge_label_map_filter(*args, **kwargs):
    """Procedural interface for MergeLabelMapFilter"""
    import itk
    instance = itk.MergeLabelMapFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def merge_label_map_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MergeLabelMapFilter, itkTemplate.itkTemplate):
        filter_object = itk.MergeLabelMapFilter.values()[0]
    else:
        filter_object = itk.MergeLabelMapFilter

    merge_label_map_filter.__doc__ = filter_object.__doc__
    merge_label_map_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    merge_label_map_filter.__doc__ += "Available Keyword Arguments:\n"
    merge_label_map_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



