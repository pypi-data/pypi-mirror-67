# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkBilateralImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBilateralImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBilateralImageFilterPython
            return _itkBilateralImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBilateralImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBilateralImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBilateralImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import ITKCommonBasePython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImagePython
import itkRGBPixelPython
import stdcomplexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageSourceCommonPython
import itkImageToImageFilterCommonPython

def itkBilateralImageFilterID3ID3_New():
  return itkBilateralImageFilterID3ID3.New()


def itkBilateralImageFilterID2ID2_New():
  return itkBilateralImageFilterID2ID2.New()


def itkBilateralImageFilterIF3IF3_New():
  return itkBilateralImageFilterIF3IF3.New()


def itkBilateralImageFilterIF2IF2_New():
  return itkBilateralImageFilterIF2IF2.New()


def itkBilateralImageFilterIUS3IUS3_New():
  return itkBilateralImageFilterIUS3IUS3.New()


def itkBilateralImageFilterIUS2IUS2_New():
  return itkBilateralImageFilterIUS2IUS2.New()


def itkBilateralImageFilterIUC3IUC3_New():
  return itkBilateralImageFilterIUC3IUC3.New()


def itkBilateralImageFilterIUC2IUC2_New():
  return itkBilateralImageFilterIUC2IUC2.New()


def itkBilateralImageFilterISS3ISS3_New():
  return itkBilateralImageFilterISS3ISS3.New()


def itkBilateralImageFilterISS2ISS2_New():
  return itkBilateralImageFilterISS2ISS2.New()

class itkBilateralImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterID2ID2_Pointer":
        """__New_orig__() -> itkBilateralImageFilterID2ID2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterID2ID2_Pointer":
        """Clone(itkBilateralImageFilterID2ID2 self) -> itkBilateralImageFilterID2ID2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD2 const":
        """GetDomainSigma(itkBilateralImageFilterID2ID2 self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterID2ID2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterID2ID2 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterID2ID2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterID2ID2 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterID2ID2 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterID2ID2 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterID2ID2 self, itkFixedArrayD2 _arg)
        SetDomainSigma(itkBilateralImageFilterID2ID2 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterID2ID2 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterID2ID2 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterID2ID2 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterID2ID2 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterID2ID2 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterID2ID2 self, itkSize2 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkBilateralImageFilterID2ID2 self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterID2ID2 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterID2ID2 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID2ID2

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterID2ID2 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterID2ID2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID2ID2

        Create a new object of the class itkBilateralImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID2ID2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterID2ID2.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_Clone, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainSigma, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainMu, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetDomainMu, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRangeSigma, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRangeSigma, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetFilterDimensionality, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetFilterDimensionality, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetDomainSigma, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOn, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_AutomaticKernelSizeOff, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetAutomaticKernelSize, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetAutomaticKernelSize, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetRadius, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetRadius, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterID2ID2)
itkBilateralImageFilterID2ID2_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_swigregister
itkBilateralImageFilterID2ID2_swigregister(itkBilateralImageFilterID2ID2)

def itkBilateralImageFilterID2ID2___New_orig__() -> "itkBilateralImageFilterID2ID2_Pointer":
    """itkBilateralImageFilterID2ID2___New_orig__() -> itkBilateralImageFilterID2ID2_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2___New_orig__()

def itkBilateralImageFilterID2ID2_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterID2ID2 *":
    """itkBilateralImageFilterID2ID2_cast(itkLightObject obj) -> itkBilateralImageFilterID2ID2"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterID2ID2_cast(obj)

class itkBilateralImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterID3ID3_Pointer":
        """__New_orig__() -> itkBilateralImageFilterID3ID3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterID3ID3_Pointer":
        """Clone(itkBilateralImageFilterID3ID3 self) -> itkBilateralImageFilterID3ID3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD3 const":
        """GetDomainSigma(itkBilateralImageFilterID3ID3 self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterID3ID3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterID3ID3 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterID3ID3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterID3ID3 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterID3ID3 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterID3ID3 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterID3ID3 self, itkFixedArrayD3 _arg)
        SetDomainSigma(itkBilateralImageFilterID3ID3 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterID3ID3 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterID3ID3 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterID3ID3 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterID3ID3 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterID3ID3 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterID3ID3 self, itkSize3 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkBilateralImageFilterID3ID3 self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterID3ID3 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterID3ID3 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterID3ID3

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterID3ID3 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterID3ID3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterID3ID3

        Create a new object of the class itkBilateralImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterID3ID3.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_Clone, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainSigma, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainMu, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetDomainMu, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRangeSigma, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRangeSigma, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetFilterDimensionality, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetFilterDimensionality, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetDomainSigma, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOn, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_AutomaticKernelSizeOff, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetAutomaticKernelSize, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetAutomaticKernelSize, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetRadius, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetRadius, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterID3ID3)
itkBilateralImageFilterID3ID3_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_swigregister
itkBilateralImageFilterID3ID3_swigregister(itkBilateralImageFilterID3ID3)

def itkBilateralImageFilterID3ID3___New_orig__() -> "itkBilateralImageFilterID3ID3_Pointer":
    """itkBilateralImageFilterID3ID3___New_orig__() -> itkBilateralImageFilterID3ID3_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3___New_orig__()

def itkBilateralImageFilterID3ID3_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterID3ID3 *":
    """itkBilateralImageFilterID3ID3_cast(itkLightObject obj) -> itkBilateralImageFilterID3ID3"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterID3ID3_cast(obj)

class itkBilateralImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIF2IF2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIF2IF2_Pointer":
        """Clone(itkBilateralImageFilterIF2IF2 self) -> itkBilateralImageFilterIF2IF2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD2 const":
        """GetDomainSigma(itkBilateralImageFilterIF2IF2 self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIF2IF2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIF2IF2 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIF2IF2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIF2IF2 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIF2IF2 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIF2IF2 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIF2IF2 self, itkFixedArrayD2 _arg)
        SetDomainSigma(itkBilateralImageFilterIF2IF2 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIF2IF2 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIF2IF2 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIF2IF2 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIF2IF2 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIF2IF2 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIF2IF2 self, itkSize2 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkBilateralImageFilterIF2IF2 self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIF2IF2 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIF2IF2 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIF2IF2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF2IF2

        Create a new object of the class itkBilateralImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIF2IF2.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_Clone, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainSigma, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainMu, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetDomainMu, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRangeSigma, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRangeSigma, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetFilterDimensionality, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetFilterDimensionality, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetDomainSigma, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOn, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_AutomaticKernelSizeOff, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetAutomaticKernelSize, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetAutomaticKernelSize, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetRadius, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetRadius, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIF2IF2)
itkBilateralImageFilterIF2IF2_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_swigregister
itkBilateralImageFilterIF2IF2_swigregister(itkBilateralImageFilterIF2IF2)

def itkBilateralImageFilterIF2IF2___New_orig__() -> "itkBilateralImageFilterIF2IF2_Pointer":
    """itkBilateralImageFilterIF2IF2___New_orig__() -> itkBilateralImageFilterIF2IF2_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2___New_orig__()

def itkBilateralImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIF2IF2 *":
    """itkBilateralImageFilterIF2IF2_cast(itkLightObject obj) -> itkBilateralImageFilterIF2IF2"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIF2IF2_cast(obj)

class itkBilateralImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIF3IF3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIF3IF3_Pointer":
        """Clone(itkBilateralImageFilterIF3IF3 self) -> itkBilateralImageFilterIF3IF3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD3 const":
        """GetDomainSigma(itkBilateralImageFilterIF3IF3 self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIF3IF3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIF3IF3 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIF3IF3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIF3IF3 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIF3IF3 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIF3IF3 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIF3IF3 self, itkFixedArrayD3 _arg)
        SetDomainSigma(itkBilateralImageFilterIF3IF3 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIF3IF3 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIF3IF3 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIF3IF3 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIF3IF3 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIF3IF3 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIF3IF3 self, itkSize3 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkBilateralImageFilterIF3IF3 self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIF3IF3 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIF3IF3 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIF3IF3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIF3IF3

        Create a new object of the class itkBilateralImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIF3IF3.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_Clone, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainSigma, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainMu, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetDomainMu, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRangeSigma, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRangeSigma, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetFilterDimensionality, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetFilterDimensionality, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetDomainSigma, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOn, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_AutomaticKernelSizeOff, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetAutomaticKernelSize, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetAutomaticKernelSize, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetRadius, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetRadius, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIF3IF3)
itkBilateralImageFilterIF3IF3_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_swigregister
itkBilateralImageFilterIF3IF3_swigregister(itkBilateralImageFilterIF3IF3)

def itkBilateralImageFilterIF3IF3___New_orig__() -> "itkBilateralImageFilterIF3IF3_Pointer":
    """itkBilateralImageFilterIF3IF3___New_orig__() -> itkBilateralImageFilterIF3IF3_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3___New_orig__()

def itkBilateralImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIF3IF3 *":
    """itkBilateralImageFilterIF3IF3_cast(itkLightObject obj) -> itkBilateralImageFilterIF3IF3"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIF3IF3_cast(obj)

class itkBilateralImageFilterISS2ISS2(itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterISS2ISS2_Pointer":
        """__New_orig__() -> itkBilateralImageFilterISS2ISS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterISS2ISS2_Pointer":
        """Clone(itkBilateralImageFilterISS2ISS2 self) -> itkBilateralImageFilterISS2ISS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD2 const":
        """GetDomainSigma(itkBilateralImageFilterISS2ISS2 self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterISS2ISS2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterISS2ISS2 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterISS2ISS2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterISS2ISS2 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterISS2ISS2 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterISS2ISS2 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterISS2ISS2 self, itkFixedArrayD2 _arg)
        SetDomainSigma(itkBilateralImageFilterISS2ISS2 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterISS2ISS2 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterISS2ISS2 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterISS2ISS2 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterISS2ISS2 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterISS2ISS2 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterISS2ISS2 self, itkSize2 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkBilateralImageFilterISS2ISS2 self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterISS2ISS2 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterISS2ISS2 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS2ISS2

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterISS2ISS2 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterISS2ISS2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS2ISS2

        Create a new object of the class itkBilateralImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS2ISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS2ISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterISS2ISS2.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_Clone, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainSigma, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainMu, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetDomainMu, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRangeSigma, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRangeSigma, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetFilterDimensionality, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetFilterDimensionality, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetDomainSigma, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOn, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_AutomaticKernelSizeOff, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetAutomaticKernelSize, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetAutomaticKernelSize, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetRadius, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetRadius, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterISS2ISS2)
itkBilateralImageFilterISS2ISS2_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_swigregister
itkBilateralImageFilterISS2ISS2_swigregister(itkBilateralImageFilterISS2ISS2)

def itkBilateralImageFilterISS2ISS2___New_orig__() -> "itkBilateralImageFilterISS2ISS2_Pointer":
    """itkBilateralImageFilterISS2ISS2___New_orig__() -> itkBilateralImageFilterISS2ISS2_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2___New_orig__()

def itkBilateralImageFilterISS2ISS2_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterISS2ISS2 *":
    """itkBilateralImageFilterISS2ISS2_cast(itkLightObject obj) -> itkBilateralImageFilterISS2ISS2"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterISS2ISS2_cast(obj)

class itkBilateralImageFilterISS3ISS3(itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterISS3ISS3_Pointer":
        """__New_orig__() -> itkBilateralImageFilterISS3ISS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterISS3ISS3_Pointer":
        """Clone(itkBilateralImageFilterISS3ISS3 self) -> itkBilateralImageFilterISS3ISS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD3 const":
        """GetDomainSigma(itkBilateralImageFilterISS3ISS3 self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterISS3ISS3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterISS3ISS3 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterISS3ISS3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterISS3ISS3 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterISS3ISS3 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterISS3ISS3 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterISS3ISS3 self, itkFixedArrayD3 _arg)
        SetDomainSigma(itkBilateralImageFilterISS3ISS3 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterISS3ISS3 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterISS3ISS3 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterISS3ISS3 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterISS3ISS3 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterISS3ISS3 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterISS3ISS3 self, itkSize3 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkBilateralImageFilterISS3ISS3 self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterISS3ISS3 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterISS3ISS3 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterISS3ISS3

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterISS3ISS3 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterISS3ISS3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterISS3ISS3

        Create a new object of the class itkBilateralImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterISS3ISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterISS3ISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterISS3ISS3.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_Clone, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainSigma, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainMu, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetDomainMu, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRangeSigma, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRangeSigma, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetFilterDimensionality, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetFilterDimensionality, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetDomainSigma, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOn, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_AutomaticKernelSizeOff, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetAutomaticKernelSize, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetAutomaticKernelSize, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetRadius, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetRadius, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterISS3ISS3)
itkBilateralImageFilterISS3ISS3_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_swigregister
itkBilateralImageFilterISS3ISS3_swigregister(itkBilateralImageFilterISS3ISS3)

def itkBilateralImageFilterISS3ISS3___New_orig__() -> "itkBilateralImageFilterISS3ISS3_Pointer":
    """itkBilateralImageFilterISS3ISS3___New_orig__() -> itkBilateralImageFilterISS3ISS3_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3___New_orig__()

def itkBilateralImageFilterISS3ISS3_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterISS3ISS3 *":
    """itkBilateralImageFilterISS3ISS3_cast(itkLightObject obj) -> itkBilateralImageFilterISS3ISS3"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterISS3ISS3_cast(obj)

class itkBilateralImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIUC2IUC2_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIUC2IUC2_Pointer":
        """Clone(itkBilateralImageFilterIUC2IUC2 self) -> itkBilateralImageFilterIUC2IUC2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD2 const":
        """GetDomainSigma(itkBilateralImageFilterIUC2IUC2 self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIUC2IUC2 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIUC2IUC2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIUC2IUC2 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIUC2IUC2 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIUC2IUC2 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIUC2IUC2 self, itkFixedArrayD2 _arg)
        SetDomainSigma(itkBilateralImageFilterIUC2IUC2 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIUC2IUC2 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIUC2IUC2 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIUC2IUC2 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIUC2IUC2 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIUC2IUC2 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIUC2IUC2 self, itkSize2 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkBilateralImageFilterIUC2IUC2 self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUC2IUC2 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUC2IUC2 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC2IUC2

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUC2IUC2 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIUC2IUC2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC2IUC2

        Create a new object of the class itkBilateralImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC2IUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIUC2IUC2.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_Clone, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainSigma, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainMu, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetDomainMu, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRangeSigma, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRangeSigma, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetFilterDimensionality, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetFilterDimensionality, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetDomainSigma, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOn, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_AutomaticKernelSizeOff, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetAutomaticKernelSize, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetAutomaticKernelSize, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetRadius, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetRadius, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUC2IUC2)
itkBilateralImageFilterIUC2IUC2_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_swigregister
itkBilateralImageFilterIUC2IUC2_swigregister(itkBilateralImageFilterIUC2IUC2)

def itkBilateralImageFilterIUC2IUC2___New_orig__() -> "itkBilateralImageFilterIUC2IUC2_Pointer":
    """itkBilateralImageFilterIUC2IUC2___New_orig__() -> itkBilateralImageFilterIUC2IUC2_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2___New_orig__()

def itkBilateralImageFilterIUC2IUC2_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUC2IUC2 *":
    """itkBilateralImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkBilateralImageFilterIUC2IUC2"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC2IUC2_cast(obj)

class itkBilateralImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIUC3IUC3_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIUC3IUC3_Pointer":
        """Clone(itkBilateralImageFilterIUC3IUC3 self) -> itkBilateralImageFilterIUC3IUC3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD3 const":
        """GetDomainSigma(itkBilateralImageFilterIUC3IUC3 self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIUC3IUC3 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIUC3IUC3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIUC3IUC3 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIUC3IUC3 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIUC3IUC3 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIUC3IUC3 self, itkFixedArrayD3 _arg)
        SetDomainSigma(itkBilateralImageFilterIUC3IUC3 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIUC3IUC3 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIUC3IUC3 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIUC3IUC3 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIUC3IUC3 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIUC3IUC3 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIUC3IUC3 self, itkSize3 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkBilateralImageFilterIUC3IUC3 self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUC3IUC3 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUC3IUC3 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUC3IUC3

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUC3IUC3 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIUC3IUC3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUC3IUC3

        Create a new object of the class itkBilateralImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUC3IUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIUC3IUC3.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_Clone, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainSigma, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainMu, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetDomainMu, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRangeSigma, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRangeSigma, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetFilterDimensionality, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetFilterDimensionality, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetDomainSigma, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOn, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_AutomaticKernelSizeOff, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetAutomaticKernelSize, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetAutomaticKernelSize, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetRadius, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetRadius, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUC3IUC3)
itkBilateralImageFilterIUC3IUC3_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_swigregister
itkBilateralImageFilterIUC3IUC3_swigregister(itkBilateralImageFilterIUC3IUC3)

def itkBilateralImageFilterIUC3IUC3___New_orig__() -> "itkBilateralImageFilterIUC3IUC3_Pointer":
    """itkBilateralImageFilterIUC3IUC3___New_orig__() -> itkBilateralImageFilterIUC3IUC3_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3___New_orig__()

def itkBilateralImageFilterIUC3IUC3_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUC3IUC3 *":
    """itkBilateralImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkBilateralImageFilterIUC3IUC3"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUC3IUC3_cast(obj)

class itkBilateralImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIUS2IUS2_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIUS2IUS2_Pointer":
        """Clone(itkBilateralImageFilterIUS2IUS2 self) -> itkBilateralImageFilterIUS2IUS2_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD2 const":
        """GetDomainSigma(itkBilateralImageFilterIUS2IUS2 self) -> itkFixedArrayD2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIUS2IUS2 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIUS2IUS2 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIUS2IUS2 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIUS2IUS2 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIUS2IUS2 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIUS2IUS2 self, itkFixedArrayD2 _arg)
        SetDomainSigma(itkBilateralImageFilterIUS2IUS2 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIUS2IUS2 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIUS2IUS2 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIUS2IUS2 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIUS2IUS2 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIUS2IUS2 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIUS2IUS2 self, itkSize2 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize2 const &":
        """GetRadius(itkBilateralImageFilterIUS2IUS2 self) -> itkSize2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUS2IUS2 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUS2IUS2 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS2IUS2

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUS2IUS2 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIUS2IUS2"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS2IUS2

        Create a new object of the class itkBilateralImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS2IUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIUS2IUS2.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_Clone, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainSigma, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainMu, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetDomainMu, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRangeSigma, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRangeSigma, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetFilterDimensionality, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetFilterDimensionality, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetDomainSigma, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOn, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_AutomaticKernelSizeOff, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetAutomaticKernelSize, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetAutomaticKernelSize, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetRadius, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetRadius, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUS2IUS2)
itkBilateralImageFilterIUS2IUS2_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_swigregister
itkBilateralImageFilterIUS2IUS2_swigregister(itkBilateralImageFilterIUS2IUS2)

def itkBilateralImageFilterIUS2IUS2___New_orig__() -> "itkBilateralImageFilterIUS2IUS2_Pointer":
    """itkBilateralImageFilterIUS2IUS2___New_orig__() -> itkBilateralImageFilterIUS2IUS2_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2___New_orig__()

def itkBilateralImageFilterIUS2IUS2_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUS2IUS2 *":
    """itkBilateralImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkBilateralImageFilterIUS2IUS2"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS2IUS2_cast(obj)

class itkBilateralImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """


    Blurs an image while preserving edges.

    This filter uses bilateral filtering to blur an image using both
    domain and range "neighborhoods". Pixels that are close to a pixel
    in the image domain and similar to a pixel in the image range are used
    to calculate the filtered value. Two gaussian kernels (one in the
    image domain and one in the image range) are used to smooth the image.
    The result is an image that is smoothed in homogeneous regions yet has
    edges preserved. The result is similar to anisotropic diffusion but
    the implementation in non-iterative. Another benefit to bilateral
    filtering is that any distance metric can be used for kernel smoothing
    the image range. Hence, color images can be smoothed as vector images,
    using the CIE distances between intensity values as the similarity
    metric (the Gaussian kernel for the image domain is evaluated using
    CIE distances). A separate version of this filter will be designed for
    color and vector images.

    Bilateral filtering is capable of reducing the noise in an image by an
    order of magnitude while maintaining edges.

    The bilateral operator used here was described by Tomasi and Manduchi
    (Bilateral Filtering for Gray and ColorImages. IEEE ICCV. 1998.)

    See:  GaussianOperator

    See:  RecursiveGaussianImageFilter

    See:  DiscreteGaussianImageFilter

    See:  AnisotropicDiffusionImageFilter

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator Todo Support color images

    Support vector images

    C++ includes: itkBilateralImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkBilateralImageFilterIUS3IUS3_Pointer":
        """__New_orig__() -> itkBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkBilateralImageFilterIUS3IUS3_Pointer":
        """Clone(itkBilateralImageFilterIUS3IUS3 self) -> itkBilateralImageFilterIUS3IUS3_Pointer"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_Clone(self)


    def GetDomainSigma(self) -> "itkFixedArrayD3 const":
        """GetDomainSigma(itkBilateralImageFilterIUS3IUS3 self) -> itkFixedArrayD3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainSigma(self)


    def SetDomainMu(self, _arg: 'double const') -> "void":
        """SetDomainMu(itkBilateralImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainMu(self, _arg)


    def GetDomainMu(self) -> "double const &":
        """GetDomainMu(itkBilateralImageFilterIUS3IUS3 self) -> double const &"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainMu(self)


    def SetRangeSigma(self, _arg: 'double const') -> "void":
        """SetRangeSigma(itkBilateralImageFilterIUS3IUS3 self, double const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRangeSigma(self, _arg)


    def GetRangeSigma(self) -> "double":
        """GetRangeSigma(itkBilateralImageFilterIUS3IUS3 self) -> double"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRangeSigma(self)


    def GetFilterDimensionality(self) -> "unsigned int":
        """GetFilterDimensionality(itkBilateralImageFilterIUS3IUS3 self) -> unsigned int"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetFilterDimensionality(self)


    def SetFilterDimensionality(self, _arg: 'unsigned int const') -> "void":
        """SetFilterDimensionality(itkBilateralImageFilterIUS3IUS3 self, unsigned int const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetFilterDimensionality(self, _arg)


    def SetDomainSigma(self, *args) -> "void":
        """
        SetDomainSigma(itkBilateralImageFilterIUS3IUS3 self, itkFixedArrayD3 _arg)
        SetDomainSigma(itkBilateralImageFilterIUS3IUS3 self, double const v)

        Convenience get/set
        methods for setting all domain parameters to the same values. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainSigma(self, *args)


    def AutomaticKernelSizeOn(self) -> "void":
        """
        AutomaticKernelSizeOn(itkBilateralImageFilterIUS3IUS3 self)

        Control
        automatic kernel size determination. When automatic is "on", the
        kernel size is a function of the domain sigma. When automatic is
        "off", the kernel size is whatever is specified by the user. See:
        SetRadius() 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOn(self)


    def AutomaticKernelSizeOff(self) -> "void":
        """AutomaticKernelSizeOff(itkBilateralImageFilterIUS3IUS3 self)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOff(self)


    def GetAutomaticKernelSize(self) -> "bool":
        """GetAutomaticKernelSize(itkBilateralImageFilterIUS3IUS3 self) -> bool"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetAutomaticKernelSize(self)


    def SetAutomaticKernelSize(self, _arg: 'bool const') -> "void":
        """SetAutomaticKernelSize(itkBilateralImageFilterIUS3IUS3 self, bool const _arg)"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetAutomaticKernelSize(self, _arg)


    def SetRadius(self, *args) -> "void":
        """
        SetRadius(itkBilateralImageFilterIUS3IUS3 self, unsigned long const arg0)
        SetRadius(itkBilateralImageFilterIUS3IUS3 self, itkSize3 _arg)

        Set/Get the kernel
        radius, specified in pixels. This parameter is used only when
        AutomaticNeighborhoodSize is "off". 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRadius(self, *args)


    def GetRadius(self) -> "itkSize3 const &":
        """GetRadius(itkBilateralImageFilterIUS3IUS3 self) -> itkSize3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRadius(self)


    def SetNumberOfRangeGaussianSamples(self, _arg: 'unsigned long const') -> "void":
        """
        SetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUS3IUS3 self, unsigned long const _arg)

        Set/Get the number of samples in the approximation to the Gaussian
        used for the range smoothing. Samples are only generated in the range
        of [0, 4*m_RangeSigma]. Default is 100. 
        """
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetNumberOfRangeGaussianSamples(self, _arg)


    def GetNumberOfRangeGaussianSamples(self) -> "unsigned long":
        """GetNumberOfRangeGaussianSamples(itkBilateralImageFilterIUS3IUS3 self) -> unsigned long"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetNumberOfRangeGaussianSamples(self)

    OutputHasNumericTraitsCheck = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    __swig_destroy__ = _itkBilateralImageFilterPython.delete_itkBilateralImageFilterIUS3IUS3

    def cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUS3IUS3 *":
        """cast(itkLightObject obj) -> itkBilateralImageFilterIUS3IUS3"""
        return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkBilateralImageFilterIUS3IUS3

        Create a new object of the class itkBilateralImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBilateralImageFilterIUS3IUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkBilateralImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBilateralImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBilateralImageFilterIUS3IUS3.Clone = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_Clone, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainSigma, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainMu, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetDomainMu = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetDomainMu, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRangeSigma, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetRangeSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRangeSigma, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetFilterDimensionality, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetFilterDimensionality = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetFilterDimensionality, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetDomainSigma = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetDomainSigma, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.AutomaticKernelSizeOn = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOn, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.AutomaticKernelSizeOff = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_AutomaticKernelSizeOff, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetAutomaticKernelSize, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetAutomaticKernelSize = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetAutomaticKernelSize, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetRadius, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetRadius = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetRadius, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.SetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_SetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3.GetNumberOfRangeGaussianSamples = new_instancemethod(_itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_GetNumberOfRangeGaussianSamples, None, itkBilateralImageFilterIUS3IUS3)
itkBilateralImageFilterIUS3IUS3_swigregister = _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_swigregister
itkBilateralImageFilterIUS3IUS3_swigregister(itkBilateralImageFilterIUS3IUS3)

def itkBilateralImageFilterIUS3IUS3___New_orig__() -> "itkBilateralImageFilterIUS3IUS3_Pointer":
    """itkBilateralImageFilterIUS3IUS3___New_orig__() -> itkBilateralImageFilterIUS3IUS3_Pointer"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3___New_orig__()

def itkBilateralImageFilterIUS3IUS3_cast(obj: 'itkLightObject') -> "itkBilateralImageFilterIUS3IUS3 *":
    """itkBilateralImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkBilateralImageFilterIUS3IUS3"""
    return _itkBilateralImageFilterPython.itkBilateralImageFilterIUS3IUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bilateral_image_filter(*args, **kwargs):
    """Procedural interface for BilateralImageFilter"""
    import itk
    instance = itk.BilateralImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def bilateral_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BilateralImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BilateralImageFilter.values()[0]
    else:
        filter_object = itk.BilateralImageFilter

    bilateral_image_filter.__doc__ = filter_object.__doc__
    bilateral_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    bilateral_image_filter.__doc__ += "Available Keyword Arguments:\n"
    bilateral_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



