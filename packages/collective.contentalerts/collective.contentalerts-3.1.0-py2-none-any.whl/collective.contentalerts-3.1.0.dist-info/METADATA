Metadata-Version: 2.1
Name: collective.contentalerts
Version: 3.1.0
Summary: An add-on for Plone to get alerts about content
Home-page: https://github.com/collective/collective.contentalerts
Author: Gil Forcada
Author-email: gilforcada@gmail.com
License: GPL version 2
Keywords: Python Plone
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Framework :: Plone
Classifier: Framework :: Plone :: 5.2
Classifier: Framework :: Plone :: Addon
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: GNU General Public License v2 (GPLv2)
Requires-Dist: plone.api (>=1.4.11)
Requires-Dist: plone.app.contentrules
Requires-Dist: plone.app.contenttypes
Requires-Dist: plone.app.discussion
Requires-Dist: plone.app.registry
Requires-Dist: plone.app.textfield
Requires-Dist: plone.app.z3cform
Requires-Dist: plone.contentrules
Requires-Dist: plone.registry
Requires-Dist: plone.stringinterp
Requires-Dist: Products.CMFCore
Requires-Dist: Products.CMFPlone
Requires-Dist: Products.GenericSetup
Requires-Dist: setuptools
Requires-Dist: z3c.form
Requires-Dist: Zope2
Requires-Dist: zope.component
Requires-Dist: zope.i18nmessageid
Requires-Dist: zope.interface
Requires-Dist: zope.publisher
Requires-Dist: zope.schema
Provides-Extra: async
Requires-Dist: collective.taskqueue ; extra == 'async'
Provides-Extra: test
Requires-Dist: Acquisition ; extra == 'test'
Requires-Dist: plone.app.discussion ; extra == 'test'
Requires-Dist: plone.app.testing ; extra == 'test'
Requires-Dist: plone.browserlayer ; extra == 'test'
Requires-Dist: plone.registry ; extra == 'test'
Requires-Dist: plone.testing ; extra == 'test'
Requires-Dist: Products.CMFPlone ; extra == 'test'
Requires-Dist: Products.MailHost ; extra == 'test'
Requires-Dist: Products.statusmessages ; extra == 'test'
Requires-Dist: transaction ; extra == 'test'

.. This README is meant for consumption by humans and pypi. Pypi can render rst files so please do not use Sphinx features.
   If you want to learn more about writing documentation, please check out: http://docs.plone.org/about/documentation_styleguide_addons.html
   This text does not appear on pypi or github. It is a comment.

.. image:: https://secure.travis-ci.org/collective/collective.contentalerts.png?branch=master
    :target: http://travis-ci.org/collective/collective.contentalerts
    :alt: Travis

.. image:: https://coveralls.io/repos/collective/collective.contentalerts/badge.svg?branch=master&service=github
    :target: https://coveralls.io/github/collective/collective.contentalerts?branch=master
    :alt: Coveralls

========================
collective.contentalerts
========================
Get alerts whenever a (two custom lists of) word is found on a content object,
be that object of any content type (Dexterity or comments).

Can be used to:

- moderate: used as a blacklist.
- highlight: used as a whitelist.

The main idea is to use the power of `plone.app.contentrules`_ to inspect content being generated by users for certain words.

Upon that, regular `plone.app.contentrules`_ actions can be triggered:
send an email, notify the user, apply a workflow transition...

The secondary idea is to be able to do different actions on the content depending on if the words where found on one or the other list.

Features
========
- manage two lists of words that will be used to search (blacklist/whitelist)

  - named ``forbidden_words`` and ``inadequate_words``

- integration with  `plone.app.contentrules`_:

  - conditions to look for stop words (either from any list or from a specific one)
  - string substitutions to add on emails the snippets where the stop words where found
    (one for documents and one for comments)

- standalone utility

  - with methods to either look for words on both lists or only on one of them

- provide different word lists if you need them,
  either two general ones (plone.registry based) or on a per contentrule basis
- look for stop words on comments and dexterity content types
- apply a marker interface to objects that are found to have stop words
- mark objects as reviewed
- monitor the list of words for changes and search for the new stop words on already reviewed objects

  - if ``[async]`` extra is enable this review will be done via an asynchronous job (via `collective.taskqueue`_)

Where it searches on
====================
collective.contentalerts searches either on the comments' text or on ``text`` (for Dexterity based content types).

Standalone usage
================
While the main integration within Plone is via a plone.app.contentrules condition,
``collective.contentalerts`` can also be used as a standalone utility.

Use the provided utility (``collective.contentalerts.interfaces.IAlert``).

Documentation
=============
Full documentation for end users can be found in the "docs" folder.

Installation
============
Install collective.contentalerts by adding it to your buildout::

   [buildout]

    ...

    eggs =
        collective.contentalerts


and then running "bin/buildout"

Upgrade notes
=============

Version 3.0
-----------
This version is meant to be compatible with Plone 5.2 (still on python 2.7).

Version 2.0
-----------
This version only supports Plone 5 and Dexterity,
if you are using Archetypes or Plone 4.3.x stick with version 1.x.

So far only the migration to Plone 5 differs from the last 1.x release.

Keep an eye on `CHANGES.rst <https://github.com/collective/collective.contentalerts/blob/master/CHANGES.rst>`_.

Version 1.0 and below
---------------------
If you are upgrading from 0.7 to any later version there's one manual step that needs to be done.

On version 1.0 the single list of stop words was split into ``inadequate_words`` and ``forbidden_words``.

As it can not be guessed which list the former list is supposed to map,
no automatic migration is provided.

An `upgrade step <http://docs.plone.org/develop/addons/components/genericsetup.html#upgrade-steps>`_ needs to be written then.

See below an example on how to migrate the former list to the new ``forbidden_words`` list::

    from plone import api
    from plone.registry.interfaces import IRegistry
    from zope.component import getUtility

    # safe the stop words on the old location
    old_setting = 'collective.contentalerts.interfaces.IStopWords.stop_words'
    current_forbidden_words = api.portal.get_registry_record(name=old_setting)

    # update registry
    setup = api.portal.get_tool('portal_setup')
    setup.runImportStepFromProfile(
        'profile-collective.contentalerts:default',
        'plone.app.registry'
    )

    # set the stop words on the new field
    api.portal.set_registry_record(
        name='collective.contentalerts.interfaces.IStopWords.forbidden_words',
        value=current_forbidden_words
    )

    # remove the old setting
    registry = getUtility(IRegistry)
    del registry.records[old_setting]


Contribute
==========
- Issue Tracker: https://github.com/collective/collective.contentalerts/issues
- Source Code: https://github.com/collective/collective.contentalerts

License
=======
The project is licensed under the GPLv2.

Credits
=======

`der Freitag`_ sponsored the creation of this add-on.


.. _plone.app.contentrules:  https://pypi.python.org/pypi/plone.app.contentrules
.. _der Freitag:  https://www.freitag.de
.. _collective.taskqueue:  https://pypi.python.org/pypi/collective.taskqueue

Contributors
============

- Gil Forcada, gilforcada@gmail.com

Changelog
=========

3.1.0 (2020-05-07)
------------------

- Make text normalization more thorough (#14).
  [staeff]


3.0.0 (2020-02-11)
------------------

- Nothing changed yet.


3.0.0a0 (2020-02-10)
--------------------

- Add uninstall profile.
  [gforcada]

- Adapt code and tests to Plone 5.2.
  [gforcada]

2.0.0 (2019-02-11)
------------------

- Test against Plone 4.3, 5.0, 5.1 and (experimental) 5.2.


2.0a1 (2016-07-28)
------------------

- Make collective.contentalerts work with Plone 5
  Following adaptions were needed: Remove session_data_manager, use z3c.form instead of
  formlib, access text via IRichText object, several changes in tests.
  [staeff]

1.1 (2016-03-29)
----------------

- Be sure to remove the marker interface only when its needed.
  [gforcada]

1.0.post0 (2016-03-12)
----------------------
- Update German translation.
  [staeff]

1.0 (2016-03-11)
----------------
- **Renamed the registry setting**,
  now two lists are used: ``forbidden_words`` and ``inadequate_words``.
  See the ``README.rst`` for instructions on how to create an upgrade step to migrate them.
  [gforcada]

- Updated ``IAlert`` utility to use either both stop words list,
  or just one if told so (passed as an argument).
  [gforcada]

- Add a ``has_forbidden_words`` method to ``IAlert`` utility.
  It allows to check only for forbidden stop words only.
  [gforcada]

- Make ``@@review-objects`` view more generic by allowing a marker interface and review states to be passed.
  This allows filtering which elements will be checked for stop words.
  [gforcada]

- Triple the content rules so one can decide to monitor for any kind of word,
  only forbidden words or only inadequate ones.
  [gforcada]

0.7 (2016-01-22)
----------------
- Monitor registry setting (stop words) for changes.
  If changes are found, verify if reviewed objects have those new stop words.
  [gforcada]

- Round of cleanups, refactorings and coverage fixes.
  [gforcada]

- Conditionally depend on collective.taskqueue to do mass processing asynchronously.
  [gforcada]

0.6 (2016-01-20)
----------------
- Apply IStopWordsVerified when discarding an alert.
  [gforcada] [staeff]

- Sort imports, use plone.api and some buildout cleanups.
  [gforcada]

0.5 (2016-01-19)
----------------
- Support Plone 4.3.7
  [gforcada]

- Make normalize a global function
  [gforcada] [staeff]

0.4.post1 (2015-08-31)
----------------------
- Add German translation.
  [staeff]

0.4.post0 (2015-08-19)
----------------------
- Create wheels as well.

0.4 (2015-08-19)
----------------
- Add a browser view to remove the IHasStopWords marker interface on a per object basis.
  [gforcada]

0.3.1 (2015-08-17)
------------------
- Make sure that the ``IHasStopWords`` marker interface is indexed on the catalog.
  [gforcada]

0.3.post0 (2015-08-15)
----------------------
- Fix package URL.
  [gforcada]

0.3 (2015-08-14)
----------------
- Correctly split stop words text so that it takes into account different line endings.
  [gforcada]

- Ignore empty lines on stop words to not produce unexpected results.
  [gforcada]

0.2 (2015-08-14)
----------------
- Split string subtitutions in two: ``text_alert`` and ``comment_alert``.
  [gforcada]

0.1 (2015-08-14)
----------------
- Initial release.
  [gforcada]

- Fix package structure:

  - remove unneeded parts
  - add travis and coveralls badges

  [gforcada]

- Add a ``plone.registry`` to keep the general stop words list.
  [gforcada]

- Add a control panel configlet to edit the stop words list.
  [gforcada]

- Add more code analysis checks, dependency tracker and MANIFEST check
  [gforcada]

- Add utility to search for stop words on a given text
  [gforcada]

- Add a plone.app.contentrules condition: ``collective.contentalerts.TextAlert``
  [gforcada]

- Add a string substitution: ``text_alert``. To be used to compose emails on a contentrule
  [gforcada]

- Apply a marker interface to the objects that are found to have a stop words.
  [gforcada]



