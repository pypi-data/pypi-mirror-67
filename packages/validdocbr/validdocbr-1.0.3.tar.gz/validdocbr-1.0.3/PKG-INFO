Metadata-Version: 2.1
Name: validdocbr
Version: 1.0.3
Summary: Brazilian document validator (CPF or CNPJ) using the check digit
Home-page: https://github.com/JohnChinaski/validdocbr
Author: johnchinaski
Author-email: tatophoenix666@gmail.com
License: MIT
Description: <h1 class="code-line" data-line-start=0 data-line-end=1 ><a id="validdocbr_0"></a>validdocbr</h1>
        <ul>
        <li class="has-line-data" data-line-start="2" data-line-end="4">Document validator (CPF or CNPJ) based on the verification digit.</li>
        </ul>
        <p class="has-line-data" data-line-start="4" data-line-end="5">Installation:</p>
        <pre><code>pip3 install validdocbr   
        </code></pre>
        <h1 class="code-line" data-line-start=8 data-line-end=9 ><a id="Usage_8"></a>Usage:</h1>
        <p class="has-line-data" data-line-start="9" data-line-end="10">Send a CNPJ or CPF as a string, it can contain special characters, returns True if the document is valid or False if it is invalid, using the check digits for the conference.</p>
        <h1 class="code-line" data-line-start=11 data-line-end=12 ><a id="Example_11"></a>Example:</h1>
        <pre><code class="has-line-data" data-line-start="13" data-line-end="25">from validdocbr import validdocbr
        validator = validdocbr.validdocbr()
             
        cpf = &quot;12345678912&quot;    
        cnpj = &quot;98765432112345&quot;    
              
        validator.cpf (cpf) ---&gt; to validate CPF      
        validator.cnpj (cnpj) ---&gt; to validate CNPJ     
               
        answer = False ---&gt; the document is invalid      
        answer = True ---&gt; the document is valid      
        </code></pre>
        <hr>
        <hr>
        <h1 class="code-line" data-line-start=30 data-line-end=31 ><a id="validdocbr_30"></a>validdocbr</h1>
        <ul>
        <li class="has-line-data" data-line-start="32" data-line-end="34">Validador de documentos (CPF ou CNPJ) com base no digito verificador.</li>
        </ul>
        <h1 class="code-line" data-line-start=34 data-line-end=35 ><a id="Istalao_34"></a>Istalação:</h1>
        <pre><code>pip3 install validdocbr
        </code></pre>
        <h1 class="code-line" data-line-start=38 data-line-end=39 ><a id="Utilizao_38"></a>Utilização:</h1>
        <p class="has-line-data" data-line-start="39" data-line-end="40">Ennvie um CNPJ ou CPF como string, pode conter caracteres especiais, retorna True se documento for válido ou False caso seja inválido, utilizando os digitos verificadores para conferencia.</p>
        <h1 class="code-line" data-line-start=41 data-line-end=42 ><a id="Exemplo_41"></a>Exemplo:</h1>
        <pre><code class="has-line-data" data-line-start="43" data-line-end="56">from validdocbr import validdocbr
        
        validator = validdocbr.validdocbr()   
         
        cpf = &quot;12345678912&quot;      
        cnpj = &quot;98765432112345&quot;     
            
        validador.cpf(cpf) ---&gt; para validar CPF      
        validador.cnpj(cnpj) ---&gt; para validar CNPJ      
        
        resposta = False ---&gt; caso documento seja inválido      
        reposta = True ---&gt; caso docmunto seja válido     
        </code></pre>
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
