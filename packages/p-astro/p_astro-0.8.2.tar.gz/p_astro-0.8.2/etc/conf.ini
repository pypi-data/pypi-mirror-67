[core]
inj_file_pattern = *.sqlite
sqlite_run_tag = ^.*_(.*)-([0-9]+)-([0-9]+).sqlite$
accounting_group = ligo.prod.o2.cbc.pe.lalinferencerapid 
; Columns to extract from GstLAL sim-coinc database
sqlite_cols = inj_m1,inj_m2,inj_spin1z,inj_spin2z,inj_redshift,rec_m1,rec_m2,rec_spin1z,rec_spin2z,Gamma1,cfar,snr,gpstime

[sub_names]
; em_bright subs
em_bright_extract = em_bright_extract.sub
em_bright_categorize = em_bright_categorize.sub
em_bright_train = em_bright_train.sub
em_bright_join = em_bright_join.sub
; p_astro subs
p_astro_histogram_by_bin = p_astro_histogram_by_bin.sub
p_astro_compute_means = p_astro_compute_means.sub

[node_names]
; em_bright Condor DAG nodenames
em_bright_extract = extract
em_bright_categorize = categorize
em_bright_train = train
em_bright_join = join
; p_astro Condor DAG nodenames
p_astro_histogram_by_bin = binning
p_astro_compute_means = means

[executables]
; em_bright executables
em_bright_extract = em_bright_extract
em_bright_join = em_bright_join
em_bright_categorize = em_bright_categorize
em_bright_train = em_bright_train
; p_astro executables
p_astro_histogram_by_bin = p_astro_histogram_by_bin
p_astro_compute_means = p_astro_compute_means

[output_filenames]
; em_bright prefixes and suffixes
em_bright_extract_prefix = em_bright_INJCOINC
em_bright_extract_suffix = .txt
em_bright_join_prefix = em_bright_JOIN
em_bright_join_suffix = .tbl
em_bright_categorize_prefix = em_bright_CATEGORIZE
em_bright_categorize_suffix = .tbl
em_bright_train_prefix = em_bright_TRAIN
em_bright_train_suffix = .pickle
; p_astro prefixes and suffixes
p_astro_histogram_by_bin_prefix = p_astro_BIN
p_astro_histogram_by_bin_suffix = .tbl
p_astro_compute_means_prefix = p_astro_MEAN
p_astro_compute_means_suffix = .json

[em_bright]
; suffix _cols columns should exist input dataframe, comma separated, no whitespace
feature_cols = m1_rec,m2_rec,chi1_rec,chi2_rec,snr
category_cols = NS,EMB
threshold_cols = cfar,snr
threshold_values = 3.86e-07,0.
; values to keep are lesser/greater than threshold value
threshold_type = lesser,greater
; kwargs passed to KNearestNeighborClassifier
clf_kwargs = {'n_neighbors':11, 'n_jobs':-1, 'weights':'distance'}
eos_name = 2H

[p_astro]
ln_likelihood_threshold = 8.
cfar_threshold = 1./(60.*86400.)
end_time_threshold = -1.
mass_threshold = -1.
num_svd_bins = 686
prior_type = Uniform
