{"version":3,"sources":["webpack:///./src/containers/collection-detail/base.ts","webpack:///./src/containers/collection-detail/collection-detail.scss","webpack:///./src/containers/collection-detail/collection-detail.scss?bb89","webpack:///./src/containers/collection-detail/collection-detail.tsx","webpack:///./src/containers/collection-detail/collection-content.tsx","webpack:///./src/containers/collection-detail/collection-docs.tsx","webpack:///./src/containers/collection-detail/collection-import-log.tsx"],"names":["loadCollection","forceReload","callback","getCached","this","props","match","params","state","then","result","setState","collection","catch","history","push","notFound","module","exports","i","content","options","transform","undefined","update","locals","hot","accept","newContent","a","b","key","idx","Error","dispose","parseParamString","location","search","componentDidMount","render","breadcrumbs","url","partners","name","namespace","updateParams","p","activeTab","className","updateParamsMixin","CollectionDetail","contents","latest_version","CollectionImportLog","docsRef","displayHTML","pluginData","urlFields","contentType","contentName","docs_blob","documentation_files","file","find","x","html","content_type","content_name","collection_readme","current","scrollIntoView","selectedName","selectedType","ref","dangerouslySetInnerHTML","__html","plugin","collectionName","namespaceName","allContent","renderNotFound","variant","full","icon","headingLevel","size","CollectionDocs","loadingImports","selectedImportDetail","selectedImport","apiError","loadData","loading","task","followMessages","setFollowMessages","_","hideCollectionName","failMsg","list","version","sort","importListResult","importObj","data","get","id","importDetailResult","err"],"mappings":"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","file":"js/collection_detail.js","sourcesContent":["import { CollectionDetailType, CollectionAPI } from '../../api';\nimport { Paths } from '../../paths';\n\nexport interface IBaseCollectionState {\n  params: {\n    version?: string;\n    showing?: string;\n    keywords?: string;\n  };\n  collection: CollectionDetailType;\n}\n\nexport function loadCollection(forceReload = false, callback = () => null) {\n  CollectionAPI.getCached(\n    this.props.match.params['namespace'],\n    this.props.match.params['collection'],\n    this.state.params,\n    forceReload,\n  )\n    .then(result => {\n      this.setState({ collection: result }, callback);\n    })\n    .catch(result => {\n      this.props.history.push(Paths.notFound);\n    });\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/* logo blue */\\n/* well background color */\\n/* alert info background color */\\n/* alert info border color */\\n.main {\\n  margin: 0px;\\n  padding: 0px; }\\n\\n.header {\\n  border-bottom: 1px solid #d8d8d8; }\\n\\n.docs-container {\\n  padding-top: 24px;\\n  background-color: white; }\\n  @media (min-width: 1000px) {\\n    .docs-container {\\n      display: flex; } }\\n  .docs-container .sidebar {\\n    min-width: 294px;\\n    max-width: 294px;\\n    border-right: 1px solid #d8d8d8;\\n    padding: 0px;\\n    padding-top: 0px; }\\n  .docs-container .docs {\\n    flex-grow: 1;\\n    padding: 24px;\\n    padding-top: 0px;\\n    min-height: calc(100vh - 250px); }\\n    .docs-container .docs table tr:nth-child(2n) {\\n      background-color: #f2f2f2; }\\n    .docs-container .docs table td,\\n    .docs-container .docs table th {\\n      border: 1px solid #ccc;\\n      padding: 5px; }\\n\", \"\"]);\n\n","\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./collection-detail.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionInfo,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders collection level information\nclass CollectionDetail extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        name: collection.name,\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='details'\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionInfo\n              {...collection}\n              updateParams={p => this.updateParams(p)}\n              params={this.state.params}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDetail);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  CollectionHeader,\n  CollectionContentList,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\n// renders list of contents in a collection\nclass CollectionImportLog extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { collection, params } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Content' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='contents'\n        />\n        <Main>\n          <Section className='body'>\n            <CollectionContentList\n              contents={collection.latest_version.contents}\n              collection={collection.name}\n              namespace={collection.namespace.name}\n              params={params}\n              updateParams={p => this.updateParams(p)}\n            ></CollectionContentList>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n","import * as React from 'react';\nimport './collection-detail.scss';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Section } from '@redhat-cloud-services/frontend-components';\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n  EmptyStateIcon,\n} from '@patternfly/react-core';\n\nimport { WarningTriangleIcon } from '@patternfly/react-icons';\n\nimport {\n  CollectionHeader,\n  TableOfContents,\n  RenderPluginDoc,\n  LoadingPageWithHeader,\n  Main,\n} from '../../components';\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper, sanitizeDocsUrls } from '../../utilities';\nimport { formatPath, Paths } from '../../paths';\n\n// renders markdown files in collection docs/ directory\nclass CollectionDocs extends React.Component<\n  RouteComponentProps,\n  IBaseCollectionState\n> {\n  docsRef: any;\n\n  constructor(props) {\n    super(props);\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n    };\n\n    this.docsRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadCollection();\n  }\n\n  render() {\n    const { params, collection } = this.state;\n    const urlFields = this.props.match.params;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    // If the parser can't find anything that matches the URL, neither of\n    // these variables should be set\n    let displayHTML: string;\n    let pluginData;\n\n    const contentType = urlFields['type'] || 'docs';\n    const contentName = urlFields['name'] || urlFields['page'] || null;\n\n    if (contentType === 'docs' && contentName) {\n      if (collection.latest_version.docs_blob.documentation_files) {\n        const file = collection.latest_version.docs_blob.documentation_files.find(\n          x => sanitizeDocsUrls(x.name) === urlFields['page'],\n        );\n\n        if (file) {\n          displayHTML = file.html;\n        }\n      }\n    } else if (contentName) {\n      // check if contents exists\n      if (collection.latest_version.docs_blob.contents) {\n        const content = collection.latest_version.docs_blob.contents.find(\n          x => x.content_type === contentType && x.content_name === contentName,\n        );\n\n        if (content) {\n          if (contentType === 'role') {\n            displayHTML = content['readme_html'];\n          } else {\n            pluginData = content;\n          }\n        }\n      }\n    } else {\n      if (collection.latest_version.docs_blob.collection_readme) {\n        displayHTML =\n          collection.latest_version.docs_blob.collection_readme.html;\n      }\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Documentation' },\n    ];\n\n    // scroll to top of page\n    if (this.docsRef.current) {\n      this.docsRef.current.scrollIntoView();\n    }\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={p =>\n            this.updateParams(p, () => this.loadCollection(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='documentation'\n          className='header'\n        />\n        <Main className='main'>\n          <Section className='docs-container'>\n            <TableOfContents\n              className='sidebar'\n              namespace={collection.namespace.name}\n              collection={collection.name}\n              docs_blob={collection.latest_version.docs_blob}\n              selectedName={contentName}\n              selectedType={contentType}\n              params={params}\n            ></TableOfContents>\n            <div className='body docs' ref={this.docsRef}>\n              {displayHTML || pluginData ? (\n                // if neither variable is set, render not found\n                displayHTML ? (\n                  // if displayHTML is set, render it\n                  <div\n                    className='pf-c-content'\n                    dangerouslySetInnerHTML={{\n                      __html: displayHTML,\n                    }}\n                  ></div>\n                ) : (\n                  // if plugin data is set render it\n                  <RenderPluginDoc\n                    plugin={pluginData}\n                    collectionName={collection.name}\n                    namespaceName={collection.namespace.name}\n                    allContent={collection.latest_version.contents}\n                    params={params}\n                  />\n                )\n              ) : (\n                this.renderNotFound(collection.name)\n              )}\n            </div>\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private renderNotFound(collectionName) {\n    return (\n      <EmptyState className='empty' variant={EmptyStateVariant.full}>\n        <EmptyStateIcon icon={WarningTriangleIcon} />\n        <Title headingLevel='h2' size='lg'>\n          Not found\n        </Title>\n        <EmptyStateBody>\n          The file you're looking for doesn't seem to be available in this\n          version of {collectionName}.\n        </EmptyStateBody>\n      </EmptyState>\n    );\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionDocs);\n","import * as React from 'react';\n\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Main, Section } from '@redhat-cloud-services/frontend-components';\n\nimport { ImportAPI, ImportDetailType, ImportListType } from '../../api';\nimport {\n  CollectionHeader,\n  LoadingPageWithHeader,\n  ImportConsole,\n} from '../../components';\n\nimport { loadCollection, IBaseCollectionState } from './base';\nimport { ParamHelper } from '../../utilities/param-helper';\nimport { formatPath, Paths } from '../../paths';\n\ninterface IState extends IBaseCollectionState {\n  loadingImports: boolean;\n  selectedImportDetail: ImportDetailType;\n  selectedImport: ImportListType;\n  apiError: string;\n}\n\nclass CollectionImportLog extends React.Component<RouteComponentProps, IState> {\n  constructor(props) {\n    super(props);\n\n    const params = ParamHelper.parseParamString(props.location.search);\n\n    this.state = {\n      collection: undefined,\n      params: params,\n      loadingImports: true,\n      selectedImportDetail: undefined,\n      selectedImport: undefined,\n      apiError: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const {\n      collection,\n      params,\n      loadingImports,\n      selectedImportDetail,\n      selectedImport,\n      apiError,\n    } = this.state;\n\n    if (!collection) {\n      return <LoadingPageWithHeader></LoadingPageWithHeader>;\n    }\n\n    const breadcrumbs = [\n      { url: Paths.partners, name: 'Partners' },\n      {\n        url: formatPath(Paths.namespace, {\n          namespace: collection.namespace.name,\n        }),\n        name: collection.namespace.name,\n      },\n      {\n        url: formatPath(Paths.collection, {\n          namespace: collection.namespace.name,\n          collection: collection.name,\n        }),\n        name: collection.name,\n      },\n      { name: 'Import log' },\n    ];\n\n    return (\n      <React.Fragment>\n        <CollectionHeader\n          collection={collection}\n          params={params}\n          updateParams={params =>\n            this.updateParams(params, () => this.loadData(true))\n          }\n          breadcrumbs={breadcrumbs}\n          activeTab='import-log'\n        />\n        <Main>\n          <Section className='body'>\n            <ImportConsole\n              loading={loadingImports}\n              task={selectedImportDetail}\n              followMessages={false}\n              setFollowMessages={_ => null}\n              selectedImport={selectedImport}\n              apiError={apiError}\n              hideCollectionName={true}\n            />\n          </Section>\n        </Main>\n      </React.Fragment>\n    );\n  }\n\n  private loadData(forceReload = false) {\n    const failMsg = 'Could not load import log';\n    this.setState({ loadingImports: true }, () => {\n      this.loadCollection(forceReload, () => {\n        ImportAPI.list({\n          namespace: this.state.collection.namespace.name,\n          name: this.state.collection.name,\n          version: this.state.collection.latest_version.version,\n          sort: '-created',\n        })\n          .then(importListResult => {\n            const importObj = importListResult.data.data[0];\n            ImportAPI.get(importObj.id)\n              .then(importDetailResult => {\n                this.setState({\n                  apiError: undefined,\n                  loadingImports: false,\n                  selectedImport: importObj,\n                  selectedImportDetail: importDetailResult.data,\n                });\n              })\n              .catch(err => {\n                this.setState({\n                  apiError: failMsg,\n                  loadingImports: false,\n                });\n              });\n          })\n          .catch(err => {\n            this.setState({\n              apiError: failMsg,\n              loadingImports: false,\n            });\n          });\n      });\n    });\n  }\n\n  get loadCollection() {\n    return loadCollection;\n  }\n\n  get updateParams() {\n    return ParamHelper.updateParamsMixin();\n  }\n}\n\nexport default withRouter(CollectionImportLog);\n"],"sourceRoot":""}