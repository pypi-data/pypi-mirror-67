{"version":3,"sources":["components/sidebar/buttons.js","components/text.js","components/div.js","constants.js","components/sidebar/instructions.js","components/sidebar/metadata.js","containers/sidebar.js","components/topology/labels.js","components/topology/nodes.js","components/topology/edges.js","components/topology/controls.js","containers/topology.js","containers/vincentjianliu.js","App.js","serviceWorker.js","index.js"],"names":["ActiveButton","styled","button","InactiveButton","Container","div","Buttons","props","hasPrevious","id","Title","h2","Info","p","Header","Link","a","InlineInfo","Entry","Card","INPUT_SIZE","OUTPUT_SIZE","MODULE_SIZE","NODE_SIZE","Instructions","convertColor","hex","toString","style","overflow","color","Ul","ul","Li","li","Metadata","getShapes","key","label","meta","length","shapes","map","element","idx","join","getLinks","links","name","isModule","slice","split","formatted","i","line","margin","String","push","marginLeft","formatName","op","type","params","getParams","Sidebar","useEffect","previousModule","document","getElementById","resetRotation","resetPosition","rootModule","onclick","tag","includes","newTag","substring","lastIndexOf","setTag","setRotation","setPosition","Label","useThree","scene","camera","xOffset","rotation","x","yOffset","y","zOffset","z","position","repeat","Node","coords","useState","hover","setHover","C","baseColor","hoverColor","size","receiveShadow","onPointerUp","replace","body","cursor","onPointerOver","e","setName","onPointerOut","attach","args","Nodes","inputs","outputs","Object","keys","Edge","vertices","Float32Array","attachObject","count","array","itemSize","Edges","parts","edges","node","nodeX","nodeY","input","extend","OrbitControls","Controls","controls","useRef","gl","useFrame","current","update","Math","PI","ref","domElement","enableKeys","enableDamping","enablePan","dampingFactor","rotateSpeed","maxPolarAngle","minPolarAngle","Topology","config","zoom","physicallyCorrectLights","intensity","castShadow","VincentJianLiu","display","whiteSpace","href","AppContainer","App","ready","setReady","setConfig","fetch","json","getConfig","window","addEventListener","event","target","tagName","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76cd4042.chunk.js","sourcesContent":["/**\n * @file contains button parts and button compnent\n * @author Vincent Liu\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\n\n\n// clickable button\nconst ActiveButton = styled.button`\n    width: auto;\n    height: auto;\n    padding: 1em;\n    background-color: #000000;\n    border: 2px solid #000000;\n    border-radius: 5px;\n    color: #FFFFFF;\n    font-weight: 600;\n    margin: 1em;\n    outline: 0;\n    &:hover {\n        color: #000000;\n        background-color: #DFF9FB;\n        cursor: pointer;\n    }\n    &:focus {\n        outline: 0;\n    }\n`\n\n// unclickable button\nconst InactiveButton = styled.button`\n    width: auto;\n    height: auto;\n    padding: 1em;\n    background-color: #B2BEC3;\n    border: 2px solid #B2BEC3;\n    border-radius: 5px;\n    color: #FFFFFF;\n    font-weight: 600;\n    margin: 1em;\n    outline: 0;\n    &:focus {\n        outline: 0;\n    }\n`\n\n// container for buttons\nconst Container = styled.div`\n    display: flex;\n    flex-direction: row;\n    order: 1;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 1em;\n`\n\n/**\n * returns a div of buttons for controlling canvas actions\n *\n * @param {*} props passed from Sidebar\n */\nconst Buttons = (props) => {\n    return (\n        <Container>\n            {(props.hasPrevious)\n                ? <ActiveButton id='previousModule'>\n                    previous<br />module\n                </ActiveButton>\n                : <InactiveButton>\n                    previous<br />module\n                </InactiveButton>}\n            <ActiveButton id='rootModule'>\n            root<br />module\n            </ActiveButton>\n            <ActiveButton id='resetRotation'>\n                reset<br />rotation\n            </ActiveButton>\n            <ActiveButton id='resetPosition'>\n                reset<br />position\n            </ActiveButton>\n        </Container>\n    );\n}\n\nexport default Buttons;\n","/**\n * @file contains styled text components\n * @author Vincent Liu\n */\n\nimport styled from 'styled-components';\n\n\nexport const Title = styled.h2`\n    font-size: large;\n    word-wrap: break-word;\n    margin: 0;\n    &:hover {\n        cursor: text;\n    }\n`\n\nexport const Info = styled.p`\n    font-size: small;\n    word-wrap: break-word;\n    padding: 0;\n    margin: 0;\n    &:hover {\n        cursor: text;\n    }\n`\n\nexport const Header = styled.p`\n    font-weight: bold;\n    font-size: small;\n    word-wrap: break-word;\n    padding: 0;\n    margin: 0;\n    &:hover {\n        cursor: text;\n    }\n`\n\nexport const Link = styled.a`\n    font-size: small;\n    word-wrap: break-word;\n    padding: 0;\n    margin: 0;\n    text-decoration: none;\n    color: #4834D4;\n    &:hover {\n        cursor: pointer;\n    }\n    &:active {\n        color: #EB4D4B;\n    }\n`\n","/**\n * @file contains styled div components\n * @author Vincent Liu\n */\n\nimport styled from 'styled-components';\n\n\nexport const InlineInfo = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: pre;\n    padding: 0;\n    margin: 0;\n`\n\nexport const Entry = styled.div`\n    padding: 0.1em 0.5em;\n    margin: 0.1em 0.5em;\n    text-align: left;\n`\n\nexport const Card = styled.div`\n    margin: 1em;\n    padding: 0.5em 0;\n    background-color: white;\n    border: 2px solid #95AFC0;\n    border-radius: 10px;\n    overflow: scroll;\n`\n","/**\n * @file constants used for rendering three.js geometries\n * @author Vincent Liu\n */\n\n// root\nexport const ROOT = 'root';\n\n// input nodes\nexport const INPUT_COLOR = 0x22A6B3;\nexport const INPUT_HOVER_COLOR = INPUT_COLOR;\nexport const INPUT_SIZE = [0.75, 0.75, 0.75];\nexport const INPUT_TYPE = 'input';\n\n// output nodes\nexport const OUTPUT_COLOR = 0xF0932B;\nexport const OUTPUT_HOVER_COLOR = OUTPUT_COLOR;\nexport const OUTPUT_SIZE = INPUT_SIZE;\nexport const OUTPUT_TYPE = 'output';\n\n// modules\nexport const MODULE_COLOR = 0x4834D4;\nexport const MODULE_HOVER_COLOR = 0xEB4D4B;\nexport const MODULE_SIZE = [1.5, 1.5, 1.5];\nexport const MODULE_TYPE = 'module';\n\n// base nodes\nexport const NODE_COLOR = 0x535C68;\nexport const NODE_HOVER_COLOR = NODE_COLOR;\nexport const NODE_SIZE = [0.5, 0.5, 0.5];\nexport const NODE_TYPE = 'node';\n\n// io nodes\nexport const IO_NODE_OP = 'IO Node';\n\n// param nodes\nexport const PARAM_NODE_OP = 'visu::param'\n","/**\n * @file contains card for visunn instructions\n * @author Vincent Liu\n */\n\nimport React from 'react';\n\nimport { Entry, Card, InlineInfo } from '../div';\nimport { Title, Header, Info } from '../text';\nimport * as C from '../../constants';\n\n\n/**\n * returns card component with `visunn: how to` instructions\n */\nconst Instructions = () => {\n    const convertColor = (hex) => {\n        return '#' + hex.toString(16);\n    }\n\n    return (\n        <Card style={{overflow: 'visible'}}>\n            <Entry>\n                <Title><strong>visunn</strong>: how to</Title>\n            </Entry>\n            <Entry>\n                <Info><strong>hover</strong> over a node to display its info below</Info>\n                <Info><strong>left click</strong> on a module to open its contents</Info>\n            </Entry>\n            <Entry>\n                <Info><strong>left click + drag</strong> to rotate</Info>\n                <Info><strong>right click + drag</strong> to pan</Info>\n                <Info><strong>scroll</strong> to zoom</Info>\n            </Entry>\n            <Entry>\n                <InlineInfo>\n                    <Header style={{color: convertColor(C.MODULE_COLOR)}}>purple</Header>\n                    <Info> blocks are op modules</Info>\n                </InlineInfo>\n                <InlineInfo>\n                    <Header style={{color: convertColor(C.INPUT_COLOR)}}>blue</Header>\n                    <Info> blocks are input nodes</Info>\n                </InlineInfo>\n                <InlineInfo>\n                    <Header style={{color: convertColor(C.OUTPUT_COLOR)}}>orange</Header>\n                    <Info> blocks are output nodes</Info>\n                </InlineInfo>\n                <InlineInfo>\n                    <Header style={{color: convertColor(C.NODE_COLOR)}}>gray</Header>\n                    <Info> blocks are op nodes</Info>\n                </InlineInfo>\n            </Entry>\n        </Card>\n    );\n}\n\nexport default Instructions;\n","/**\n * @file contains parts for rendering metadata of hovered node\n * @author Vincent Liu\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { Header, Info } from '../text';\nimport { Entry, Card } from '../div';\nimport Instructions from './instructions';\nimport * as C from '../../constants';\n\n// lists for enumerated data\nconst Ul = styled.ul`\n    margin: 0;\n    padding-left: 20px;\n`\n\nconst Li = styled.li`\n    margin: 0;\n    padding: 0;\n`\n\n// container for metadata\nconst Container = styled.div`\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: left;\n    order: 2;\n    overflow: auto;\n`\n\n/**\n * returns cards containing metadata and `visunn: how to` instructions\n *\n * @param {*} props passed from Sidebar\n */\nconst Metadata = (props) => {\n    const getShapes = (key, label) => {\n        // make sure this node has a shapes\n        if (props.meta[key].length === 0) {\n            return <></>;\n        }\n\n        const formatShape = (shape) => {\n            return '(' + shape.join(', ') + ')';\n        }\n\n        // map shapes to text entries\n        let shapes = props.meta[key].map(\n            (element, idx) =>\n                <Li key={idx}><Info>{formatShape(element)}</Info></Li>\n        );\n        return [\n            <Header key='header'>{label}</Header>,\n            <Ul key='contents'>{shapes}</Ul>\n        ];\n    }\n\n    const getLinks = (key, label) => {\n        if (key in props.meta) {\n            let links = props.meta[key].map(\n                (element, idx) => \n                    <Li key={idx}><Info>{element}</Info></Li>\n            );\n\n            return [\n                <Header key='header'>{label}</Header>,\n                <Ul key='contents'>{links}</Ul>\n            ];\n        } else {\n            return <></>;\n        }\n    }\n\n    const getParams = () => {\n        // make sure this node has a param attribute\n        if (!('params' in props.meta)) {\n            return <></>;\n        }\n\n        // grab the params\n        let params = props.meta.params.map(\n            (element, idx) => \n                <Li key={idx}><Info>{element}</Info></Li>\n        );\n        return [\n            <Header key='header'>params</Header>,\n            <Ul key='contents'>{params}</Ul>\n        ];\n    }\n\n    const formatName = () => {\n        let name = props.meta.name;\n        let isModule = false;\n        if (name.slice(-1) === '/') {\n            name = name.slice(0, -1);\n            isModule = true;\n        }\n        name = name.split('/');\n\n        let formatted = [];\n        for (let i = 0; i < name.length; i++) {\n            let line = name[i];\n            if (i < name.length - 1 || isModule) {\n                line += '/';\n            }\n            let margin = String(10 * i);\n            formatted.push(\n                <Info key={i} style={{marginLeft: margin+'px'}}>{line}</Info>\n            );\n        }\n        return formatted;\n    }\n\n    let meta = <></>;\n    if (props.meta !== null) {\n        // all nodes have name and op\n        meta = [\n            <Entry key='name'>\n                <Header>name</Header>\n                {formatName()}\n            </Entry>,\n            <Entry key='op'>\n                <Header>op</Header>\n                <Info>{props.meta.op}</Info>\n            </Entry>\n        ];\n\n        // input and param nodes don't show anything about inputs\n        if (props.type !== C.INPUT_TYPE && props.meta.op !== C.PARAM_NODE_OP) {\n            meta.push(\n                <Entry key='inputs'>\n                    {getLinks('input', 'inputs')}\n                </Entry>,\n                <Entry key='input shapes'>\n                    {getShapes('input_shapes', 'input shapes')}\n                </Entry>\n            );\n        }\n\n        // output nodes don't show anything about outputs\n        if (props.type !== C.OUTPUT_TYPE) {\n            meta.push(\n                <Entry key='outputs'>\n                    {getLinks('output', 'outputs')}\n                </Entry>,\n                <Entry key='output shapes'>\n                    {getShapes('output_shapes', 'output shapes')}\n                </Entry>\n            );\n        }\n\n        // only modules show params\n        if (props.type === C.MODULE_TYPE) {\n            meta.push(\n                <Entry key='params'>\n                    {getParams()}\n                </Entry>\n            );\n        }\n\n        meta = <Card>{meta}</Card>;\n    }\n\n    return (\n        <Container>\n            <Instructions />\n            {meta}\n        </Container>\n    );\n}\n\nexport default Metadata;\n","/**\n * @file contains the sidebar component\n * @author Vincent Liu\n */\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport Buttons from '../components/sidebar/buttons';\nimport Metadata from '../components/sidebar/metadata';\nimport { ROOT } from '../constants';\n\n\n// sidebar container\nconst Container = styled.div`\n    position: relative;\n    max-height: 100vh;\n    max-width: 100vw;\n    height: 100%;\n    width: 25em;\n    display: flex;\n    flex-direction: column-reverse;\n    background-color: #DFF9FB;\n    border-color: #C7ECEE;\n    border: none;\n`\n\n/**\n * returns sidebar, which contains buttons and instruction + data cards\n *\n * @param {*} props passed from App\n */\nconst Sidebar = (props) => {\n    // add onclick event handlers\n    useEffect(() => {\n        let previousModule = document.getElementById('previousModule');\n        let resetRotation = document.getElementById('resetRotation');\n        let resetPosition = document.getElementById('resetPosition');\n        let rootModule = document.getElementById('rootModule')\n\n        if (previousModule !== null) {\n            previousModule.onclick = () => {\n                if (props.tag.includes(';')) {\n                    let newTag = props.tag.substring(0, props.tag.lastIndexOf(';'));\n                    props.setTag(newTag);\n                } else {\n                    props.setTag(ROOT);\n                }\n                return true;\n            }\n        }\n        resetRotation.onclick = () => {\n            props.setRotation(true);\n            return true;\n        }\n        resetPosition.onclick = () => {\n            props.setPosition(true);\n            return true;\n        }\n        rootModule.onclick = () => {\n            props.setTag(ROOT);\n        }\n    });\n\n    return (\n        <Container>\n            <Buttons hasPrevious={props.hasPrevious} />\n            <Metadata meta={props.meta} type={props.type} />\n        </Container>\n    );\n}\n\nexport default Sidebar;\n","/**\n * @file component to add label above each node\n * @author Vincent Liu\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Dom, useThree } from 'react-three-fiber';\n\nimport { Info } from '../text';\n\n\n// label container\nconst Container = styled.div`\n    text-align: left;\n    white-space: pre;\n    background-color: #DFF9FB;\n    padding: 0.5em;\n    border: 1px solid #C7ECEE;\n    border-radius: 5px;\n`\n\n/**\n * returns a dom element of metadata label\n * \n * @param {*} props passed from Node\n */\nconst Label = (props) => {\n    const formatName = () => {\n        let name = props.name;\n        let isModule = false;\n        if (name.slice(-1) === '/') {\n            name = name.slice(0, -1);\n            isModule = true;\n        }\n        name = name.split('/');\n\n        let formatted = [];\n        for (let i = 0; i < name.length; i++) {\n            let line = ' '.repeat(3*i) + name[i];\n            if (i < name.length - 1 || isModule) {\n                line += '/';\n            }\n            formatted.push(\n                <Info key={i}>{line}</Info>\n            );\n        }\n        return formatted;\n    }\n\n    // add offset to text labels so that they aren't covering the node\n    const { scene, camera } = useThree();\n    const xOffset = (camera.rotation.x - scene.rotation.x > 0) ? 1 : -1\n    const yOffset = (camera.rotation.y - scene.rotation.y > 0) ? 1 : -1\n    const zOffset = (camera.rotation.z - scene.rotation.z > 0) ? 1 : -1\n\n    return (\n        <Dom position={[props.x+xOffset, props.y+yOffset, zOffset]}>\n            <Container>\n                {formatName()}\n            </Container>\n        </Dom>\n    );\n}\n\nexport default Label;\n","/**\n * @file component to render nodes\n * @author Vincent Liu\n */\n\nimport React, { useState } from 'react';\n\nimport Label from './labels';\nimport * as C from '../../constants';\n\n\n/**\n * returns a mesh component corresponding to a node to be drawn on the canvas\n * \n * @param {*} props props passed from Nodes\n */\nconst Node = (props) => {\n    const [x, y] = props.coords;\n    let [hover, setHover] = useState(false);\n\n    // node colors and size\n    const [baseColor, hoverColor, size] = (\n        (props.type === C.MODULE_TYPE)\n            ? [C.MODULE_COLOR, C.MODULE_HOVER_COLOR, C.MODULE_SIZE]\n            : (props.type === C.INPUT_TYPE)\n                ? [C.INPUT_COLOR, C.INPUT_HOVER_COLOR, C.INPUT_SIZE]\n                : (props.type === C.OUTPUT_TYPE)\n                    ? [C.OUTPUT_COLOR, C.OUTPUT_HOVER_COLOR, C.OUTPUT_SIZE]\n                    : [C.NODE_COLOR, C.NODE_HOVER_COLOR, C.NODE_SIZE]\n    );\n\n    const onPointerUp = () => {\n        // only modules should have clickable actions\n        if (props.type !== C.MODULE_TYPE) {\n            return false;\n        }\n        props.setTag(props.name.replace(/\\//g, ';').slice(0, -1));\n        document.body.style.cursor = 'default';\n        return true;\n    }\n\n    const onPointerOver = (e) => {\n        setHover(true);\n        if (props.type === C.MODULE_TYPE) {\n            document.body.style.cursor = 'pointer';\n        }\n        props.setName(props.name);\n        return true;\n    }\n\n    const onPointerOut = (e) => {\n        setHover(false);\n        if (props.type === C.MODULE_TYPE) {\n            document.body.style.cursor = 'default';\n        }\n        return true;\n    }\n\n    return (\n        <>\n            {hover\n                ? <Label\n                    name={props.meta.name}\n                    op={props.meta.op}\n                    x={x}\n                    y={y} />\n                : <></>}\n            <mesh\n                position={[x, y, 0]}\n                rotation={[0, 0, 0]}\n                receiveShadow={true}\n                // onPointerDown={onPointerDown}\n                onPointerUp={onPointerUp}\n                onPointerOver={onPointerOver}\n                onPointerOut={onPointerOut}>\n                <boxGeometry\n                    attach='geometry'\n                    args={size}\n                    key={'geo'} />\n                <meshLambertMaterial\n                    attach='material'\n                    color={hover ? hoverColor : baseColor}\n                    key={'mat'} />\n            </mesh>\n        </>\n    );\n}\n\n/**\n * returns a list of meshes (nodes) to draw on the canvas\n * \n * @param {*} props passed from Topology\n */\nconst Nodes = (props) => {\n    const type = (name) => {\n        if (name.slice(-1) === '/') {\n            return C.MODULE_TYPE;\n        } else if (props.inputs.includes(name)) {\n            return C.INPUT_TYPE;\n        } else if (props.outputs.includes(name)) {\n            return C.OUTPUT_TYPE;\n        } else {\n            return C.NODE_TYPE;\n        }\n    }\n\n    let nodes = Object.keys(props.coords).map(\n        (name, idx) =>\n            <Node\n                key={idx}\n                name={name}\n                meta={props.meta[name]}\n                coords={props.coords[name]}\n                type={type(name)}\n                setName={props.setName}\n                setTag={props.setTag} />\n    );\n    return nodes;\n}\n\nexport default Nodes;\n","/**\n * @file component to render edges\n * @author Vincent Liu\n */\n\nimport React from 'react';\n\n\n/**\n * returns a line between to points (edge between nodes)\n * \n * @param {*} props passed from Edges\n */\nconst Edge = (props) => {\n    const vertices = new Float32Array(props.vertices);\n    return (\n        <line>\n            <bufferGeometry attach='geometry' key={'geo'}>\n                <bufferAttribute\n                    attachObject={['attributes', 'position']}\n                    count={vertices.length/3}\n                    array={vertices}\n                    itemSize={3} />\n            </bufferGeometry>\n            <lineBasicMaterial attach='material' color='gray' key={'mat'} />\n        </line>\n    );\n}\n\n/**\n * returns a set of lines to be drawn onto the canvas\n * \n * @param {*} props passed from Topology\n */\nconst Edges = (props) => {\n    let parts = [];\n    for (let node of Object.keys(props.edges)) {\n        let [nodeX, nodeY] = props.coords[node];\n\n        for (let input of props.edges[node]) {\n            let [inputX, inputY] = props.coords[input];\n            let vertices = [nodeX, nodeY, 0, inputX, inputY, 0];\n\n            parts.push(\n                <Edge vertices={vertices} key={input + '->' + node} />\n            );\n        }\n    }\n\n    return parts;\n}\n\nexport default Edges;\n","/**\n * @file component to enable mouse controls on canvas\n * @author Vincent Liu\n */\n\nimport React, { useRef } from 'react';\nimport { useThree, useFrame, extend } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n\nextend({ OrbitControls });\n\n/**\n * component for camera orbitcontrols for three.js\n * \n * @param {*} props passed from Topology\n */\nconst Controls = (props) => {\n    const controls = useRef();\n    const { camera, scene, gl } = useThree();\n\n    if (props.position) {\n        camera.position.x = 0;\n        camera.position.y = 0;\n        camera.position.z = props.z;\n    }\n\n    // update controls / rotation\n    useFrame(() => {\n        controls.current.update();\n        if (props.rotation) {\n            scene.rotation.y += 0.01;\n            if (scene.rotation.y > 2 * Math.PI) {\n                scene.rotation.y -= 2 * Math.PI;\n            }\n        }\n    });\n\n    return (\n        <orbitControls\n            ref={controls}\n            args={[camera, gl.domElement]} \n            enableKeys={true}\n            enableDamping={true}\n            enablePan={true}\n            dampingFactor={0.1}\n            rotateSpeed={0.75}\n            maxPolarAngle={Math.PI * 5/8}\n            minPolarAngle={Math.PI * 2/8} />\n    )\n}\n\nexport default Controls;\n","/**\n * @file contains topology component (canvas and three js objects)\n * @author Vincent Liu\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Canvas } from 'react-three-fiber';\n\nimport Nodes from '../components/topology/nodes';\nimport Edges from '../components/topology/edges';\nimport Controls from '../components/topology/controls';\n\n\n// topology container\nconst Container = styled.div`\n    position: relative;\n    max-height: 100vh;\n    max-width: calc(100vw - 25em);\n    width: 100%;\n    height: 100%;\n`\n\n/**\n * returns the canvas and all its elements draw on it\n * \n * @param {Object} props.config config data from backend\n */\nconst Topology = (props) => {\n    let z = 3 * Object.keys(props.config.meta).length;\n    return (\n        <Container>\n            <Canvas\n                camera={{position: [0, 0, props.zoom]}}\n                gl={{physicallyCorrectLights: true}}>\n                <ambientLight intensity={0.75} />\n                <pointLight position={[0, 0, 5000]} intensity={0.9} castShadow={true} />\n                <pointLight position={[0, 0, -5000]} intensity={0.9} castShadow={true} />\n                <pointLight position={[5000, 0, 0]} intensity={0.5} castShadow={true} />\n                <pointLight position={[-5000, 0, 0]} intensity={0.5} castShadow={true} />\n                <pointLight position={[0, 5000, 0]} intensity={0.1} castShadow={true} />\n                <pointLight position={[0, -5000, 0]} intensity={0.1} castShadow={true} />\n                <Controls rotation={props.rotation} position={props.position} z={z} />\n\n                <Nodes\n                    key={'nodes'}\n                    meta={props.config.meta}\n                    coords={props.config.coords}\n                    inputs={props.config.inputs}\n                    outputs={props.config.outputs}\n                    setName={props.setName}\n                    setTag={props.setTag} />\n                <Edges\n                    key={'edges'}\n                    coords={props.config.coords}\n                    edges={props.config.edges} />\n            </Canvas>\n        </Container>\n    );\n}\n\nexport default Topology;\n","/**\n * @file contains component with credits and contact\n * @author Vincent Liu\n */\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { Info, Link } from '../components/text';\n\n// vincentjianliu container\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    align-items: right;\n    justify-content: right;\n    text-align: right;\n    background-color: #F6E58D80;\n    right: 0;\n    bottom: 0;\n    padding: 0.5em;\n    border-top-left-radius: 0.5em;\n`\n\n/**\n * renders a component with credits and contact in bottom right corner\n */\nconst VincentJianLiu = () => {\n    return (\n        <Container>\n            <Info><strong>vincent liu</strong>, &copy;2020</Info>\n            <div style={{display: 'flex', whiteSpace: 'pre'}}>\n                <Link href='mailto:vliu15@stanford.edu'>email</Link>\n                <Info> <strong>|</strong> </Info>\n                <Link href='https://www.github.com/vliu15/visunn'>github</Link>\n            </div>\n        </Container>\n    );\n}\n\nexport default VincentJianLiu;\n","/**\n * @file javascript app main file\n * @author Vincent Liu\n */\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nimport Sidebar from './containers/sidebar';\nimport Topology from './containers/topology';\nimport VincentJianLiu from './containers/vincentjianliu';\nimport * as C from './constants';\n\n\nexport const AppContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    width: 100vw;\n    height: 100vh;\n`\n\nconst App = () => {\n    let [tag, setTag] = useState(C.ROOT);\n    let [ready, setReady] = useState(false);\n    let [config, setConfig] = useState({});\n    let [rotation, setRotation] = useState(true);\n    let [position, setPosition] = useState(true);\n    let [name, setName] = useState(null);\n\n    // retrieve the metadata corresponding to tag\n    useEffect(() => {\n        const getConfig = async () => {\n            let config = await fetch('/api/' + tag);\n            let json = await config.json();\n            setConfig(json);\n            setRotation(true);\n            setPosition(true);\n            setReady(true);\n        }\n\n        getConfig();\n    }, [tag]);\n\n    // add event listeners\n    useEffect(() => {\n        window.addEventListener('mousedown', (e) => {\n            if (!e) {\n                e = window.event;\n            }\n            if (e.target && e.target.tagName === 'CANVAS') {\n                setRotation(false);\n            }\n            setPosition(false);\n        })\n    })\n\n    const type = (name) => {\n        if (name === null) {\n            return '';\n        }\n        if (name.slice(-1) === '/') {\n            return C.MODULE_TYPE;\n        } else if (config.inputs.includes(name)) {\n            return C.INPUT_TYPE;\n        } else if (config.outputs.includes(name)) {\n            return C.OUTPUT_TYPE;\n        } else {\n            return C.NODE_TYPE;\n        }\n    }\n\n    return (\n        <div className='App'>\n            <AppContainer>\n                <Sidebar\n                    hasPrevious={tag !== C.ROOT}\n                    setRotation={setRotation}\n                    setPosition={setPosition}\n                    tag={tag}\n                    setTag={setTag}\n                    meta={(ready && (name in config.meta)) ? config.meta[name] : null}\n                    type={(type(name))} />\n                {ready\n                    ? <Topology\n                        rotation={rotation}\n                        position={position}\n                        config={config}\n                        setName={setName}\n                        setTag={setTag} />\n                    : <></>}\n                <VincentJianLiu />\n            </AppContainer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}