# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import SenseClient_pb2 as SenseClient__pb2


class SenseStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sense = channel.stream_unary(
                '/sense.full.v1.Sense/sense',
                request_serializer=SenseClient__pb2.Request.SerializeToString,
                response_deserializer=SenseClient__pb2.Response.FromString,
                )
        self.sense_stream = channel.stream_stream(
                '/sense.full.v1.Sense/sense_stream',
                request_serializer=SenseClient__pb2.RequestStream.SerializeToString,
                response_deserializer=SenseClient__pb2.Response.FromString,
                )


class SenseServicer(object):
    """Missing associated documentation comment in .proto file"""

    def sense(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sense_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SenseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sense': grpc.stream_unary_rpc_method_handler(
                    servicer.sense,
                    request_deserializer=SenseClient__pb2.Request.FromString,
                    response_serializer=SenseClient__pb2.Response.SerializeToString,
            ),
            'sense_stream': grpc.stream_stream_rpc_method_handler(
                    servicer.sense_stream,
                    request_deserializer=SenseClient__pb2.RequestStream.FromString,
                    response_serializer=SenseClient__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sense.full.v1.Sense', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sense(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def sense(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/sense.full.v1.Sense/sense',
            SenseClient__pb2.Request.SerializeToString,
            SenseClient__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sense_stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/sense.full.v1.Sense/sense_stream',
            SenseClient__pb2.RequestStream.SerializeToString,
            SenseClient__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
