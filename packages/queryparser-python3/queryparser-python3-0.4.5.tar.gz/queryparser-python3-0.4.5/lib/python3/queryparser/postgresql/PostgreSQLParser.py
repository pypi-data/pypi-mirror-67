# Generated from src/queryparser/postgresql/PostgreSQLParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0118")
        buf.write("\u043c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\5\3\u00bd\n\3\3\3\3\3\3\3\3\3\5\3\u00c3\n\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u00cf\n\3\3\3\5\3")
        buf.write("\u00d2\n\3\3\3\3\3\3\3\3\3\3\3\5\3\u00d9\n\3\3\4\3\4\3")
        buf.write("\5\3\5\3\6\3\6\3\7\3\7\3\b\5\b\u00e4\n\b\3\b\3\b\3\t\3")
        buf.write("\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3")
        buf.write("\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u00fe")
        buf.write("\n\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0106\n\22\3")
        buf.write("\23\3\23\5\23\u010a\n\23\3\23\3\23\3\23\3\23\5\23\u0110")
        buf.write("\n\23\3\23\5\23\u0113\n\23\3\23\5\23\u0116\n\23\3\23\5")
        buf.write("\23\u0119\n\23\5\23\u011b\n\23\3\23\5\23\u011e\n\23\3")
        buf.write("\23\5\23\u0121\n\23\3\23\5\23\u0124\n\23\3\23\3\23\5\23")
        buf.write("\u0128\n\23\3\23\5\23\u012b\n\23\3\24\5\24\u012e\n\24")
        buf.write("\3\24\3\24\3\25\3\25\3\25\5\25\u0135\n\25\3\26\3\26\3")
        buf.write("\26\5\26\u013a\n\26\3\26\3\26\5\26\u013e\n\26\3\26\5\26")
        buf.write("\u0141\n\26\3\26\3\26\5\26\u0145\n\26\3\27\3\27\3\27\5")
        buf.write("\27\u014a\n\27\3\27\3\27\5\27\u014e\n\27\3\27\3\27\3\30")
        buf.write("\3\30\3\30\3\30\3\30\6\30\u0157\n\30\r\30\16\30\u0158")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\6\31\u0161\n\31\r\31\16")
        buf.write("\31\u0162\3\32\3\32\3\32\3\32\7\32\u0169\n\32\f\32\16")
        buf.write("\32\u016c\13\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\5\34")
        buf.write("\u0175\n\34\3\34\3\34\3\34\5\34\u017a\n\34\3\34\3\34\5")
        buf.write("\34\u017e\n\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0186")
        buf.write("\n\35\3\35\3\35\5\35\u018a\n\35\3\35\5\35\u018d\n\35\5")
        buf.write("\35\u018f\n\35\3\36\3\36\3\36\7\36\u0194\n\36\f\36\16")
        buf.write("\36\u0197\13\36\3\37\5\37\u019a\n\37\3\37\3\37\3 \3 \3")
        buf.write(" \5 \u01a1\n \3 \3 \3 \3 \5 \u01a7\n \5 \u01a9\n \3 \5")
        buf.write(" \u01ac\n \5 \u01ae\n \3!\3!\3!\7!\u01b3\n!\f!\16!\u01b6")
        buf.write("\13!\3\"\3\"\3\"\3\"\7\"\u01bc\n\"\f\"\16\"\u01bf\13\"")
        buf.write("\3\"\3\"\3#\3#\3#\5#\u01c6\n#\3$\3$\3$\5$\u01cb\n$\3%")
        buf.write("\3%\3%\7%\u01d0\n%\f%\16%\u01d3\13%\3&\3&\3&\7&\u01d8")
        buf.write("\n&\f&\16&\u01db\13&\3\'\5\'\u01de\n\'\3\'\3\'\5\'\u01e2")
        buf.write("\n\'\3\'\3\'\5\'\u01e6\n\'\3(\3(\3(\3(\3(\7(\u01ed\n(")
        buf.write("\f(\16(\u01f0\13(\5(\u01f2\n(\3(\5(\u01f5\n(\3(\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\5(\u0210\n(\3(\3(\5(\u0214\n(\5(\u0216\n")
        buf.write("(\3(\3(\5(\u021a\n(\3)\3)\3)\3)\3)\7)\u0221\n)\f)\16)")
        buf.write("\u0224\13)\3)\3)\5)\u0228\n)\3*\3*\3*\5*\u022d\n*\3*\5")
        buf.write("*\u0230\n*\3+\3+\3+\3,\3,\3,\3,\5,\u0239\n,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0249\n,\3-\3-\3-\7")
        buf.write("-\u024e\n-\f-\16-\u0251\13-\3.\3.\3/\3/\3/\7/\u0258\n")
        buf.write("/\f/\16/\u025b\13/\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\5\60\u0264\n\60\5\60\u0266\n\60\3\61\3\61\3\61\3\61\3")
        buf.write("\62\3\62\3\62\3\62\5\62\u0270\n\62\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0276\n\63\3\63\3\63\3\63\3\63\3\63\5\63\u027d\n")
        buf.write("\63\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\67\3\67\3\67")
        buf.write("\3\67\3\67\7\67\u028b\n\67\f\67\16\67\u028e\13\67\38\3")
        buf.write("8\58\u0292\n8\38\38\58\u0296\n8\58\u0298\n8\38\38\38\3")
        buf.write("8\58\u029e\n8\39\39\39\39\39\3:\3:\3;\3;\3;\7;\u02aa\n")
        buf.write(";\f;\16;\u02ad\13;\3<\5<\u02b0\n<\3<\3<\3<\5<\u02b5\n")
        buf.write("<\3<\3<\3<\3<\5<\u02bb\n<\3<\3<\3<\5<\u02c0\n<\3<\3<\5")
        buf.write("<\u02c4\n<\3<\3<\5<\u02c8\n<\3<\3<\3<\5<\u02cd\n<\3=\3")
        buf.write("=\3=\3=\5=\u02d3\n=\3>\3>\5>\u02d7\n>\3>\3>\5>\u02db\n")
        buf.write(">\3?\3?\3?\3@\3@\3A\3A\3A\7A\u02e5\nA\fA\16A\u02e8\13")
        buf.write("A\3A\3A\3A\3A\3A\7A\u02ef\nA\fA\16A\u02f2\13A\5A\u02f4")
        buf.write("\nA\5A\u02f6\nA\3B\3B\3B\5B\u02fb\nB\3B\7B\u02fe\nB\f")
        buf.write("B\16B\u0301\13B\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u030e")
        buf.write("\nC\3D\3D\3D\3D\5D\u0314\nD\3D\6D\u0317\nD\rD\16D\u0318")
        buf.write("\3E\3E\3E\3E\3F\3F\5F\u0321\nF\3F\5F\u0324\nF\3F\5F\u0327")
        buf.write("\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5")
        buf.write("F\u0339\nF\3G\3G\3H\3H\5H\u033f\nH\3H\3H\3H\5H\u0344\n")
        buf.write("H\7H\u0346\nH\fH\16H\u0349\13H\3I\3I\3I\3I\3I\5I\u0350")
        buf.write("\nI\5I\u0352\nI\3J\3J\3J\5J\u0357\nJ\3J\3J\3J\3J\7J\u035d")
        buf.write("\nJ\fJ\16J\u0360\13J\3K\3K\3K\3K\5K\u0366\nK\5K\u0368")
        buf.write("\nK\3K\3K\5K\u036c\nK\3L\3L\3L\3L\3L\3L\3L\5L\u0375\n")
        buf.write("L\5L\u0377\nL\3M\3M\3M\7M\u037c\nM\fM\16M\u037f\13M\3")
        buf.write("N\3N\3N\5N\u0384\nN\3N\3N\3O\3O\3O\3O\7O\u038c\nO\fO\16")
        buf.write("O\u038f\13O\3P\3P\3P\3Q\3Q\3R\3R\5R\u0398\nR\3R\3R\5R")
        buf.write("\u039c\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3R\5R\u03af\nR\3R\3R\3R\5R\u03b4\nR\3R\3R\3R\3R\5")
        buf.write("R\u03ba\nR\3R\3R\3R\3R\3R\5R\u03c1\nR\3R\3R\3R\3R\5R\u03c7")
        buf.write("\nR\3R\3R\3R\3R\5R\u03cd\nR\3R\3R\3R\3R\3R\3R\3R\5R\u03d6")
        buf.write("\nR\3R\5R\u03d9\nR\3R\6R\u03dc\nR\rR\16R\u03dd\5R\u03e0")
        buf.write("\nR\3S\3S\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u03fe\nU\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3W\3W\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u041d\nX\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\5Y\u0426\nY\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3[\3")
        buf.write("[\3[\3[\3[\3[\3[\5[\u043a\n[\3[\2\2\\\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\2\31\4\2\u00ee\u00f1\u0103\u0104")
        buf.write("\13\2\62\66TWuw{{\u008f\u008f\u009e\u009f\u00d1\u00d1")
        buf.write("\u00d8\u00d8\u00da\u00da\4\2EE\u00c1\u00c1\3\2\u00fd\u00fe")
        buf.write("\4\2\u0110\u0110\u0113\u0113\f\2\22\22\35 fgmo\u0095\u0098")
        buf.write("\u009c\u009d\u00af\u00af\u00c0\u00c0\u00c7\u00c7\u00db")
        buf.write("\u00db\13\2\f\f\20\21\23\24%%rrxx\u00a9\u00ab\u00b1\u00b1")
        buf.write("\u00ce\u00d0\30\2\3\4\b\b\n\13\31\33#$88::BBIIPPjjlly")
        buf.write("y\u008b\u008b\u008d\u008e\u0091\u0092\u009a\u009a\u00a3")
        buf.write("\u00a3\u00a5\u00a5\u00a8\u00a8\u00b4\u00b4\u00c2\u00c2")
        buf.write("\5\2>>ss\u00cd\u00cd\32\2\"\"\'(*\61DDMOTTeepqtu{|\u0080")
        buf.write("\u0080\u0089\u008a\u008f\u008f\u009e\u009e\u00a0\u00a0")
        buf.write("\u00ae\u00ae\u00b0\u00b0\u00b3\u00b3\u00b6\u00bc\u00be")
        buf.write("\u00bf\u00c4\u00c4\u00ca\u00cc\u00d1\u00d3\u00d8\u00d9")
        buf.write("\4\2\5\5;;\4\2__\177\177\3\2\u00f2\u00f3\5\2\u00e8\u00e9")
        buf.write("\u00f8\u00f8\u0102\u0102\5\2\17\17\u00ec\u00ed\u00fd\u00ff")
        buf.write("\5\2\5\5;;\u00f8\u00f8\4\2\7\799\4\2YYbb\4\2GGdd\3\2\u0103")
        buf.write("\u0104\6\2&&ZZff\u0098\u0098\4\2ff\u0098\u0098\5\2\u00eb")
        buf.write("\u00ec\u00ff\u00ff\u0105\u010b\2\u04a7\2\u00b6\3\2\2\2")
        buf.write("\4\u00d8\3\2\2\2\6\u00da\3\2\2\2\b\u00dc\3\2\2\2\n\u00de")
        buf.write("\3\2\2\2\f\u00e0\3\2\2\2\16\u00e3\3\2\2\2\20\u00e7\3\2")
        buf.write("\2\2\22\u00e9\3\2\2\2\24\u00eb\3\2\2\2\26\u00ed\3\2\2")
        buf.write("\2\30\u00ef\3\2\2\2\32\u00f1\3\2\2\2\34\u00f3\3\2\2\2")
        buf.write("\36\u00f5\3\2\2\2 \u00fd\3\2\2\2\"\u0105\3\2\2\2$\u0107")
        buf.write("\3\2\2\2&\u012d\3\2\2\2(\u0131\3\2\2\2*\u0144\3\2\2\2")
        buf.write(",\u0146\3\2\2\2.\u0156\3\2\2\2\60\u015a\3\2\2\2\62\u0164")
        buf.write("\3\2\2\2\64\u016f\3\2\2\2\66\u0179\3\2\2\28\u018e\3\2")
        buf.write("\2\2:\u0190\3\2\2\2<\u0199\3\2\2\2>\u019d\3\2\2\2@\u01af")
        buf.write("\3\2\2\2B\u01b7\3\2\2\2D\u01c2\3\2\2\2F\u01c7\3\2\2\2")
        buf.write("H\u01cc\3\2\2\2J\u01d4\3\2\2\2L\u01dd\3\2\2\2N\u0219\3")
        buf.write("\2\2\2P\u021b\3\2\2\2R\u022c\3\2\2\2T\u0231\3\2\2\2V\u0248")
        buf.write("\3\2\2\2X\u024a\3\2\2\2Z\u0252\3\2\2\2\\\u0254\3\2\2\2")
        buf.write("^\u025c\3\2\2\2`\u0267\3\2\2\2b\u026f\3\2\2\2d\u027c\3")
        buf.write("\2\2\2f\u027e\3\2\2\2h\u0280\3\2\2\2j\u0283\3\2\2\2l\u0285")
        buf.write("\3\2\2\2n\u029d\3\2\2\2p\u029f\3\2\2\2r\u02a4\3\2\2\2")
        buf.write("t\u02a6\3\2\2\2v\u02af\3\2\2\2x\u02ce\3\2\2\2z\u02d6\3")
        buf.write("\2\2\2|\u02dc\3\2\2\2~\u02df\3\2\2\2\u0080\u02f5\3\2\2")
        buf.write("\2\u0082\u02f7\3\2\2\2\u0084\u030d\3\2\2\2\u0086\u0316")
        buf.write("\3\2\2\2\u0088\u031a\3\2\2\2\u008a\u0338\3\2\2\2\u008c")
        buf.write("\u033a\3\2\2\2\u008e\u033c\3\2\2\2\u0090\u034a\3\2\2\2")
        buf.write("\u0092\u0353\3\2\2\2\u0094\u0361\3\2\2\2\u0096\u0376\3")
        buf.write("\2\2\2\u0098\u0378\3\2\2\2\u009a\u0383\3\2\2\2\u009c\u0387")
        buf.write("\3\2\2\2\u009e\u0390\3\2\2\2\u00a0\u0393\3\2\2\2\u00a2")
        buf.write("\u03df\3\2\2\2\u00a4\u03e1\3\2\2\2\u00a6\u03e8\3\2\2\2")
        buf.write("\u00a8\u03fd\3\2\2\2\u00aa\u03ff\3\2\2\2\u00ac\u040a\3")
        buf.write("\2\2\2\u00ae\u041c\3\2\2\2\u00b0\u0425\3\2\2\2\u00b2\u0427")
        buf.write("\3\2\2\2\u00b4\u0439\3\2\2\2\u00b6\u00b7\t\2\2\2\u00b7")
        buf.write("\3\3\2\2\2\u00b8\u00bc\7\17\2\2\u00b9\u00ba\7\u00fa\2")
        buf.write("\2\u00ba\u00bb\7\u0110\2\2\u00bb\u00bd\7\u00f9\2\2\u00bc")
        buf.write("\u00b9\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00d9\3\2\2\2")
        buf.write("\u00be\u00c2\7\34\2\2\u00bf\u00c0\7\u00fa\2\2\u00c0\u00c1")
        buf.write("\7\u0110\2\2\u00c1\u00c3\7\u00f9\2\2\u00c2\u00bf\3\2\2")
        buf.write("\2\u00c2\u00c3\3\2\2\2\u00c3\u00d9\3\2\2\2\u00c4\u00d9")
        buf.write("\7-\2\2\u00c5\u00d9\7)\2\2\u00c6\u00d9\7\u00bb\2\2\u00c7")
        buf.write("\u00d9\7\u00b7\2\2\u00c8\u00d9\7]\2\2\u00c9\u00d1\7\67")
        buf.write("\2\2\u00ca\u00cb\7\u00fa\2\2\u00cb\u00ce\7\u0110\2\2\u00cc")
        buf.write("\u00cd\7\u00f7\2\2\u00cd\u00cf\7\u0110\2\2\u00ce\u00cc")
        buf.write("\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0")
        buf.write("\u00d2\7\u00f9\2\2\u00d1\u00ca\3\2\2\2\u00d1\u00d2\3\2")
        buf.write("\2\2\u00d2\u00d9\3\2\2\2\u00d3\u00d9\7\\\2\2\u00d4\u00d9")
        buf.write("\7\16\2\2\u00d5\u00d9\7H\2\2\u00d6\u00d9\7\u0093\2\2\u00d7")
        buf.write("\u00d9\7<\2\2\u00d8\u00b8\3\2\2\2\u00d8\u00be\3\2\2\2")
        buf.write("\u00d8\u00c4\3\2\2\2\u00d8\u00c5\3\2\2\2\u00d8\u00c6\3")
        buf.write("\2\2\2\u00d8\u00c7\3\2\2\2\u00d8\u00c8\3\2\2\2\u00d8\u00c9")
        buf.write("\3\2\2\2\u00d8\u00d3\3\2\2\2\u00d8\u00d4\3\2\2\2\u00d8")
        buf.write("\u00d5\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8\u00d7\3\2\2\2")
        buf.write("\u00d9\5\3\2\2\2\u00da\u00db\t\3\2\2\u00db\7\3\2\2\2\u00dc")
        buf.write("\u00dd\7\u0112\2\2\u00dd\t\3\2\2\2\u00de\u00df\t\4\2\2")
        buf.write("\u00df\13\3\2\2\2\u00e0\u00e1\7\u0111\2\2\u00e1\r\3\2")
        buf.write("\2\2\u00e2\u00e4\t\5\2\2\u00e3\u00e2\3\2\2\2\u00e3\u00e4")
        buf.write("\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e6\t\6\2\2\u00e6")
        buf.write("\17\3\2\2\2\u00e7\u00e8\7\u0115\2\2\u00e8\21\3\2\2\2\u00e9")
        buf.write("\u00ea\t\7\2\2\u00ea\23\3\2\2\2\u00eb\u00ec\t\b\2\2\u00ec")
        buf.write("\25\3\2\2\2\u00ed\u00ee\t\t\2\2\u00ee\27\3\2\2\2\u00ef")
        buf.write("\u00f0\t\n\2\2\u00f0\31\3\2\2\2\u00f1\u00f2\t\13\2\2\u00f2")
        buf.write("\33\3\2\2\2\u00f3\u00f4\7\u00e7\2\2\u00f4\35\3\2\2\2\u00f5")
        buf.write("\u00f6\7\u00e6\2\2\u00f6\37\3\2\2\2\u00f7\u00fe\5\26\f")
        buf.write("\2\u00f8\u00fe\5\22\n\2\u00f9\u00fe\5\32\16\2\u00fa\u00fe")
        buf.write("\5\30\r\2\u00fb\u00fe\5\36\20\2\u00fc\u00fe\5\34\17\2")
        buf.write("\u00fd\u00f7\3\2\2\2\u00fd\u00f8\3\2\2\2\u00fd\u00f9\3")
        buf.write("\2\2\2\u00fd\u00fa\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fc")
        buf.write("\3\2\2\2\u00fe!\3\2\2\2\u00ff\u0106\5\20\t\2\u0100\u0106")
        buf.write("\5\16\b\2\u0101\u0106\5\f\7\2\u0102\u0106\5\n\6\2\u0103")
        buf.write("\u0106\5\b\5\2\u0104\u0106\7\u0081\2\2\u0105\u00ff\3\2")
        buf.write("\2\2\u0105\u0100\3\2\2\2\u0105\u0101\3\2\2\2\u0105\u0102")
        buf.write("\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0104\3\2\2\2\u0106")
        buf.write("#\3\2\2\2\u0107\u0109\7\u00a1\2\2\u0108\u010a\t\f\2\2")
        buf.write("\u0109\u0108\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010b\3")
        buf.write("\2\2\2\u010b\u011a\5\u0080A\2\u010c\u010d\7L\2\2\u010d")
        buf.write("\u010f\5\u0098M\2\u010e\u0110\5p9\2\u010f\u010e\3\2\2")
        buf.write("\2\u010f\u0110\3\2\2\2\u0110\u0112\3\2\2\2\u0111\u0113")
        buf.write("\5\u009eP\2\u0112\u0111\3\2\2\2\u0112\u0113\3\2\2\2\u0113")
        buf.write("\u0115\3\2\2\2\u0114\u0116\5P)\2\u0115\u0114\3\2\2\2\u0115")
        buf.write("\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0119\5T+\2\u0118")
        buf.write("\u0117\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\3\2\2\2")
        buf.write("\u011a\u010c\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d\3")
        buf.write("\2\2\2\u011c\u011e\5l\67\2\u011d\u011c\3\2\2\2\u011d\u011e")
        buf.write("\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u0121\5d\63\2\u0120")
        buf.write("\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123\3\2\2\2")
        buf.write("\u0122\u0124\5h\65\2\u0123\u0122\3\2\2\2\u0123\u0124\3")
        buf.write("\2\2\2\u0124\u0127\3\2\2\2\u0125\u0126\7K\2\2\u0126\u0128")
        buf.write("\7\u00c6\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\u012a\3\2\2\2\u0129\u012b\7\u00f4\2\2\u012a\u0129\3\2")
        buf.write("\2\2\u012a\u012b\3\2\2\2\u012b%\3\2\2\2\u012c\u012e\7")
        buf.write("\t\2\2\u012d\u012c\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0130\7\u0116\2\2\u0130\'\3\2\2\2\u0131")
        buf.write("\u0134\5D#\2\u0132\u0133\7\u0100\2\2\u0133\u0135\5D#\2")
        buf.write("\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135)\3\2\2")
        buf.write("\2\u0136\u013d\5z>\2\u0137\u0139\5\2\2\2\u0138\u013a\7")
        buf.write("\6\2\2\u0139\u0138\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\u013c\5z>\2\u013c\u013e\3\2\2\2\u013d\u0137")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0145\3\2\2\2\u013f")
        buf.write("\u0141\7~\2\2\u0140\u013f\3\2\2\2\u0140\u0141\3\2\2\2")
        buf.write("\u0141\u0142\3\2\2\2\u0142\u0143\7A\2\2\u0143\u0145\5")
        buf.write("\u0088E\2\u0144\u0136\3\2\2\2\u0144\u0140\3\2\2\2\u0145")
        buf.write("+\3\2\2\2\u0146\u0149\7\27\2\2\u0147\u014a\5.\30\2\u0148")
        buf.write("\u014a\5\60\31\2\u0149\u0147\3\2\2\2\u0149\u0148\3\2\2")
        buf.write("\2\u014a\u014d\3\2\2\2\u014b\u014c\7=\2\2\u014c\u014e")
        buf.write("\5(\25\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u014f\3\2\2\2\u014f\u0150\7?\2\2\u0150-\3\2\2\2\u0151")
        buf.write("\u0152\7\u00d5\2\2\u0152\u0153\5@!\2\u0153\u0154\7\u00b5")
        buf.write("\2\2\u0154\u0155\5(\25\2\u0155\u0157\3\2\2\2\u0156\u0151")
        buf.write("\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0156\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159/\3\2\2\2\u015a\u0160\5(\25\2\u015b")
        buf.write("\u015c\7\u00d5\2\2\u015c\u015d\5(\25\2\u015d\u015e\7\u00b5")
        buf.write("\2\2\u015e\u015f\5(\25\2\u015f\u0161\3\2\2\2\u0160\u015b")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0160\3\2\2\2\u0162")
        buf.write("\u0163\3\2\2\2\u0163\61\3\2\2\2\u0164\u0165\7\u00fa\2")
        buf.write("\2\u0165\u016a\5\66\34\2\u0166\u0167\7\u00f7\2\2\u0167")
        buf.write("\u0169\5\66\34\2\u0168\u0166\3\2\2\2\u0169\u016c\3\2\2")
        buf.write("\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d")
        buf.write("\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016e\7\u00f9\2\2\u016e")
        buf.write("\63\3\2\2\2\u016f\u0170\7\u0116\2\2\u0170\65\3\2\2\2\u0171")
        buf.write("\u0172\5~@\2\u0172\u0173\7\u00f6\2\2\u0173\u0175\3\2\2")
        buf.write("\2\u0174\u0171\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u0177\5\u008cG\2\u0177\u0178\7\u00f6\2")
        buf.write("\2\u0178\u017a\3\2\2\2\u0179\u0174\3\2\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\5\64\33\2\u017c")
        buf.write("\u017e\5\u0086D\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2")
        buf.write("\2\2\u017e\67\3\2\2\2\u017f\u0180\5\u009aN\2\u0180\u0181")
        buf.write("\7\u00f6\2\2\u0181\u0182\7\u00f8\2\2\u0182\u018f\3\2\2")
        buf.write("\2\u0183\u0186\5(\25\2\u0184\u0186\5\u00a2R\2\u0185\u0183")
        buf.write("\3\2\2\2\u0185\u0184\3\2\2\2\u0186\u0189\3\2\2\2\u0187")
        buf.write("\u0188\7h\2\2\u0188\u018a\7\u0115\2\2\u0189\u0187\3\2")
        buf.write("\2\2\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u018d")
        buf.write("\5&\24\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018f\3\2\2\2\u018e\u017f\3\2\2\2\u018e\u0185\3\2\2\2")
        buf.write("\u018f9\3\2\2\2\u0190\u0195\5<\37\2\u0191\u0192\7\u00eb")
        buf.write("\2\2\u0192\u0194\5<\37\2\u0193\u0191\3\2\2\2\u0194\u0197")
        buf.write("\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write(";\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u019a\7~\2\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3\2\2\2")
        buf.write("\u019b\u019c\5> \2\u019c=\3\2\2\2\u019d\u01ad\5*\26\2")
        buf.write("\u019e\u01a0\7`\2\2\u019f\u01a1\7~\2\2\u01a0\u019f\3\2")
        buf.write("\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a6\3\2\2\2\u01a2\u01a7")
        buf.write("\5\n\6\2\u01a3\u01a7\7\u0081\2\2\u01a4\u01a5\7;\2\2\u01a5")
        buf.write("\u01a7\7L\2\2\u01a6\u01a2\3\2\2\2\u01a6\u01a3\3\2\2\2")
        buf.write("\u01a6\u01a4\3\2\2\2\u01a7\u01a9\3\2\2\2\u01a8\u019e\3")
        buf.write("\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ae\3\2\2\2\u01aa\u01ac")
        buf.write("\t\r\2\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u01ae\3\2\2\2\u01ad\u01a8\3\2\2\2\u01ad\u01ab\3\2\2\2")
        buf.write("\u01ae?\3\2\2\2\u01af\u01b4\5:\36\2\u01b0\u01b1\7\u00ea")
        buf.write("\2\2\u01b1\u01b3\5:\36\2\u01b2\u01b0\3\2\2\2\u01b3\u01b6")
        buf.write("\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5")
        buf.write("A\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b7\u01b8\7\u00fa\2\2")
        buf.write("\u01b8\u01bd\5@!\2\u01b9\u01ba\7\u00f7\2\2\u01ba\u01bc")
        buf.write("\5@!\2\u01bb\u01b9\3\2\2\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c0\3\2\2\2\u01bf")
        buf.write("\u01bd\3\2\2\2\u01c0\u01c1\7\u00f9\2\2\u01c1C\3\2\2\2")
        buf.write("\u01c2\u01c5\5F$\2\u01c3\u01c4\7\u0101\2\2\u01c4\u01c6")
        buf.write("\5F$\2\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6E")
        buf.write("\3\2\2\2\u01c7\u01ca\5H%\2\u01c8\u01c9\t\16\2\2\u01c9")
        buf.write("\u01cb\5H%\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("G\3\2\2\2\u01cc\u01d1\5J&\2\u01cd\u01ce\t\5\2\2\u01ce")
        buf.write("\u01d0\5J&\2\u01cf\u01cd\3\2\2\2\u01d0\u01d3\3\2\2\2\u01d1")
        buf.write("\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2I\3\2\2\2\u01d3")
        buf.write("\u01d1\3\2\2\2\u01d4\u01d9\5L\'\2\u01d5\u01d6\t\17\2\2")
        buf.write("\u01d6\u01d8\5L\'\2\u01d7\u01d5\3\2\2\2\u01d8\u01db\3")
        buf.write("\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01daK")
        buf.write("\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01de\t\20\2\2\u01dd")
        buf.write("\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e1\5\u0084C\2\u01e0\u01e2\7~\2\2\u01e1\u01e0")
        buf.write("\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3")
        buf.write("\u01e4\t\5\2\2\u01e4\u01e6\5`\61\2\u01e5\u01e3\3\2\2\2")
        buf.write("\u01e5\u01e6\3\2\2\2\u01e6M\3\2\2\2\u01e7\u01f4\5 \21")
        buf.write("\2\u01e8\u01f1\7\u00fa\2\2\u01e9\u01ee\5@!\2\u01ea\u01eb")
        buf.write("\7\u00f7\2\2\u01eb\u01ed\5@!\2\u01ec\u01ea\3\2\2\2\u01ed")
        buf.write("\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef\u01f2\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1\u01e9\3")
        buf.write("\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f5")
        buf.write("\7\u00f9\2\2\u01f4\u01e8\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5")
        buf.write("\u021a\3\2\2\2\u01f6\u01f7\7\30\2\2\u01f7\u01f8\7\u00fa")
        buf.write("\2\2\u01f8\u01f9\5@!\2\u01f9\u01fa\7\t\2\2\u01fa\u01fb")
        buf.write("\5\4\3\2\u01fb\u01fc\7\u00f9\2\2\u01fc\u021a\3\2\2\2\u01fd")
        buf.write("\u01fe\7!\2\2\u01fe\u01ff\7\u00fa\2\2\u01ff\u0200\7\u0115")
        buf.write("\2\2\u0200\u0201\7\u00f7\2\2\u0201\u0202\7\u0115\2\2\u0202")
        buf.write("\u0203\7\u00f7\2\2\u0203\u0204\7\u0115\2\2\u0204\u021a")
        buf.write("\7\u00f9\2\2\u0205\u0206\7\u008c\2\2\u0206\u0207\7\u00fa")
        buf.write("\2\2\u0207\u0208\5@!\2\u0208\u0209\7^\2\2\u0209\u020a")
        buf.write("\5@!\2\u020a\u020b\7\u00f9\2\2\u020b\u021a\3\2\2\2\u020c")
        buf.write("\u020d\5\24\13\2\u020d\u020f\7\u00fa\2\2\u020e\u0210\t")
        buf.write("\21\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0215\3\2\2\2\u0211\u0214\5(\25\2\u0212\u0214\5\u00a2")
        buf.write("R\2\u0213\u0211\3\2\2\2\u0213\u0212\3\2\2\2\u0214\u0216")
        buf.write("\3\2\2\2\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216")
        buf.write("\u0217\3\2\2\2\u0217\u0218\7\u00f9\2\2\u0218\u021a\3\2")
        buf.write("\2\2\u0219\u01e7\3\2\2\2\u0219\u01f6\3\2\2\2\u0219\u01fd")
        buf.write("\3\2\2\2\u0219\u0205\3\2\2\2\u0219\u020c\3\2\2\2\u021a")
        buf.write("O\3\2\2\2\u021b\u021c\7R\2\2\u021c\u021d\7\26\2\2\u021d")
        buf.write("\u0222\5R*\2\u021e\u021f\7\u00f7\2\2\u021f\u0221\5R*\2")
        buf.write("\u0220\u021e\3\2\2\2\u0221\u0224\3\2\2\2\u0222\u0220\3")
        buf.write("\2\2\2\u0222\u0223\3\2\2\2\u0223\u0227\3\2\2\2\u0224\u0222")
        buf.write("\3\2\2\2\u0225\u0226\7\u00d7\2\2\u0226\u0228\7\u0099\2")
        buf.write("\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228Q\3\2")
        buf.write("\2\2\u0229\u022d\5\66\34\2\u022a\u022d\7\u0110\2\2\u022b")
        buf.write("\u022d\5(\25\2\u022c\u0229\3\2\2\2\u022c\u022a\3\2\2\2")
        buf.write("\u022c\u022b\3\2\2\2\u022d\u022f\3\2\2\2\u022e\u0230\t")
        buf.write("\22\2\2\u022f\u022e\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("S\3\2\2\2\u0231\u0232\7S\2\2\u0232\u0233\5@!\2\u0233U")
        buf.write("\3\2\2\2\u0234\u0235\7\u00c8\2\2\u0235\u0236\5^\60\2\u0236")
        buf.write("\u0238\7\u00fa\2\2\u0237\u0239\5\\/\2\u0238\u0237\3\2")
        buf.write("\2\2\u0238\u0239\3\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b")
        buf.write("\7\u00f9\2\2\u023b\u0249\3\2\2\2\u023c\u023d\7X\2\2\u023d")
        buf.write("\u023e\5^\60\2\u023e\u023f\7\u00fa\2\2\u023f\u0240\5\\")
        buf.write("/\2\u0240\u0241\7\u00f9\2\2\u0241\u0249\3\2\2\2\u0242")
        buf.write("\u0243\7J\2\2\u0243\u0244\5^\60\2\u0244\u0245\7\u00fa")
        buf.write("\2\2\u0245\u0246\5\\/\2\u0246\u0247\7\u00f9\2\2\u0247")
        buf.write("\u0249\3\2\2\2\u0248\u0234\3\2\2\2\u0248\u023c\3\2\2\2")
        buf.write("\u0248\u0242\3\2\2\2\u0249W\3\2\2\2\u024a\u024f\5V,\2")
        buf.write("\u024b\u024c\7\u00f7\2\2\u024c\u024e\5V,\2\u024d\u024b")
        buf.write("\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f")
        buf.write("\u0250\3\2\2\2\u0250Y\3\2\2\2\u0251\u024f\3\2\2\2\u0252")
        buf.write("\u0253\7\u0116\2\2\u0253[\3\2\2\2\u0254\u0259\5Z.\2\u0255")
        buf.write("\u0256\7\u00f7\2\2\u0256\u0258\5Z.\2\u0257\u0255\3\2\2")
        buf.write("\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2\u0259\u025a")
        buf.write("\3\2\2\2\u025a]\3\2\2\2\u025b\u0259\3\2\2\2\u025c\u0265")
        buf.write("\t\23\2\2\u025d\u0263\7K\2\2\u025e\u0264\7a\2\2\u025f")
        buf.write("\u0260\7\u0086\2\2\u0260\u0264\7\26\2\2\u0261\u0262\7")
        buf.write("R\2\2\u0262\u0264\7\26\2\2\u0263\u025e\3\2\2\2\u0263\u025f")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0264\u0266\3\2\2\2\u0265")
        buf.write("\u025d\3\2\2\2\u0265\u0266\3\2\2\2\u0266_\3\2\2\2\u0267")
        buf.write("\u0268\7]\2\2\u0268\u0269\5@!\2\u0269\u026a\5\6\4\2\u026a")
        buf.write("a\3\2\2\2\u026b\u026c\7\u0085\2\2\u026c\u0270\5@!\2\u026d")
        buf.write("\u026e\7\u00c9\2\2\u026e\u0270\5\62\32\2\u026f\u026b\3")
        buf.write("\2\2\2\u026f\u026d\3\2\2\2\u0270c\3\2\2\2\u0271\u0272")
        buf.write("\7i\2\2\u0272\u0275\5j\66\2\u0273\u0274\7\u0083\2\2\u0274")
        buf.write("\u0276\5f\64\2\u0275\u0273\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write("\u0276\u027d\3\2\2\2\u0277\u0278\7\u0083\2\2\u0278\u0279")
        buf.write("\5f\64\2\u0279\u027a\7i\2\2\u027a\u027b\5j\66\2\u027b")
        buf.write("\u027d\3\2\2\2\u027c\u0271\3\2\2\2\u027c\u0277\3\2\2\2")
        buf.write("\u027de\3\2\2\2\u027e\u027f\7\u0110\2\2\u027fg\3\2\2\2")
        buf.write("\u0280\u0281\7\u0083\2\2\u0281\u0282\5f\64\2\u0282i\3")
        buf.write("\2\2\2\u0283\u0284\7\u0110\2\2\u0284k\3\2\2\2\u0285\u0286")
        buf.write("\7\u0086\2\2\u0286\u0287\7\26\2\2\u0287\u028c\5n8\2\u0288")
        buf.write("\u0289\7\u00f7\2\2\u0289\u028b\5n8\2\u028a\u0288\3\2\2")
        buf.write("\2\u028b\u028e\3\2\2\2\u028c\u028a\3\2\2\2\u028c\u028d")
        buf.write("\3\2\2\2\u028dm\3\2\2\2\u028e\u028c\3\2\2\2\u028f\u0297")
        buf.write("\5R*\2\u0290\u0292\t\22\2\2\u0291\u0290\3\2\2\2\u0291")
        buf.write("\u0292\3\2\2\2\u0292\u0298\3\2\2\2\u0293\u0294\7\u0082")
        buf.write("\2\2\u0294\u0296\t\24\2\2\u0295\u0293\3\2\2\2\u0295\u0296")
        buf.write("\3\2\2\2\u0296\u0298\3\2\2\2\u0297\u0291\3\2\2\2\u0297")
        buf.write("\u0295\3\2\2\2\u0298\u029e\3\2\2\2\u0299\u029a\5R*\2\u029a")
        buf.write("\u029b\7\u00c9\2\2\u029b\u029c\t\25\2\2\u029c\u029e\3")
        buf.write("\2\2\2\u029d\u028f\3\2\2\2\u029d\u0299\3\2\2\2\u029eo")
        buf.write("\3\2\2\2\u029f\u02a0\7\u0088\2\2\u02a0\u02a1\7\u00fa\2")
        buf.write("\2\u02a1\u02a2\5t;\2\u02a2\u02a3\7\u00f9\2\2\u02a3q\3")
        buf.write("\2\2\2\u02a4\u02a5\7\u0116\2\2\u02a5s\3\2\2\2\u02a6\u02ab")
        buf.write("\5r:\2\u02a7\u02a8\7\u00f7\2\2\u02a8\u02aa\5r:\2\u02a9")
        buf.write("\u02a7\3\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2")
        buf.write("\u02ab\u02ac\3\2\2\2\u02acu\3\2\2\2\u02ad\u02ab\3\2\2")
        buf.write("\2\u02ae\u02b0\7~\2\2\u02af\u02ae\3\2\2\2\u02af\u02b0")
        buf.write("\3\2\2\2\u02b0\u02cc\3\2\2\2\u02b1\u02b4\7^\2\2\u02b2")
        buf.write("\u02b5\5\u0088E\2\u02b3\u02b5\5B\"\2\u02b4\u02b2\3\2\2")
        buf.write("\2\u02b4\u02b3\3\2\2\2\u02b5\u02cd\3\2\2\2\u02b6\u02b7")
        buf.write("\7h\2\2\u02b7\u02ba\5\u0084C\2\u02b8\u02b9\7@\2\2\u02b9")
        buf.write("\u02bb\5\u0084C\2\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3\2")
        buf.write("\2\2\u02bb\u02cd\3\2\2\2\u02bc\u02bf\7\u0094\2\2\u02bd")
        buf.write("\u02c0\5(\25\2\u02be\u02c0\5\u00a2R\2\u02bf\u02bd\3\2")
        buf.write("\2\2\u02bf\u02be\3\2\2\2\u02c0\u02cd\3\2\2\2\u02c1\u02c3")
        buf.write("\7\r\2\2\u02c2\u02c4\7\u00b2\2\2\u02c3\u02c2\3\2\2\2\u02c3")
        buf.write("\u02c4\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c8\5(\25\2")
        buf.write("\u02c6\u02c8\5\u00a2R\2\u02c7\u02c5\3\2\2\2\u02c7\u02c6")
        buf.write("\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca\7\u00eb\2\2\u02ca")
        buf.write("\u02cb\5z>\2\u02cb\u02cd\3\2\2\2\u02cc\u02b1\3\2\2\2\u02cc")
        buf.write("\u02b6\3\2\2\2\u02cc\u02bc\3\2\2\2\u02cc\u02c1\3\2\2\2")
        buf.write("\u02cdw\3\2\2\2\u02ce\u02cf\7\u00a6\2\2\u02cf\u02d2\7")
        buf.write("h\2\2\u02d0\u02d3\5(\25\2\u02d1\u02d3\5\u00a2R\2\u02d2")
        buf.write("\u02d0\3\2\2\2\u02d2\u02d1\3\2\2\2\u02d3y\3\2\2\2\u02d4")
        buf.write("\u02d7\5(\25\2\u02d5\u02d7\5\u00a2R\2\u02d6\u02d4\3\2")
        buf.write("\2\2\u02d6\u02d5\3\2\2\2\u02d7\u02da\3\2\2\2\u02d8\u02db")
        buf.write("\5v<\2\u02d9\u02db\5x=\2\u02da\u02d8\3\2\2\2\u02da\u02d9")
        buf.write("\3\2\2\2\u02da\u02db\3\2\2\2\u02db{\3\2\2\2\u02dc\u02dd")
        buf.write("\5\u0082B\2\u02dd\u02de\7\u00f4\2\2\u02de}\3\2\2\2\u02df")
        buf.write("\u02e0\7\u0116\2\2\u02e0\177\3\2\2\2\u02e1\u02e6\58\35")
        buf.write("\2\u02e2\u02e3\7\u00f7\2\2\u02e3\u02e5\58\35\2\u02e4\u02e2")
        buf.write("\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e6")
        buf.write("\u02e7\3\2\2\2\u02e7\u02f6\3\2\2\2\u02e8\u02e6\3\2\2\2")
        buf.write("\u02e9\u02f3\7\u00f8\2\2\u02ea\u02eb\7\u00f7\2\2\u02eb")
        buf.write("\u02f0\58\35\2\u02ec\u02ed\7\u00f7\2\2\u02ed\u02ef\58")
        buf.write("\35\2\u02ee\u02ec\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f3\u02ea\3\2\2\2\u02f3\u02f4\3\2\2\2")
        buf.write("\u02f4\u02f6\3\2\2\2\u02f5\u02e1\3\2\2\2\u02f5\u02e9\3")
        buf.write("\2\2\2\u02f6\u0081\3\2\2\2\u02f7\u02ff\5$\23\2\u02f8\u02fa")
        buf.write("\7\u00c3\2\2\u02f9\u02fb\7\5\2\2\u02fa\u02f9\3\2\2\2\u02fa")
        buf.write("\u02fb\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\5$\23\2")
        buf.write("\u02fd\u02f8\3\2\2\2\u02fe\u0301\3\2\2\2\u02ff\u02fd\3")
        buf.write("\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0083\3\2\2\2\u0301\u02ff")
        buf.write("\3\2\2\2\u0302\u030e\5\"\22\2\u0303\u030e\5B\"\2\u0304")
        buf.write("\u030e\5\66\34\2\u0305\u030e\5N(\2\u0306\u0307\7\u009b")
        buf.write("\2\2\u0307\u030e\5B\"\2\u0308\u030e\5\u0088E\2\u0309\u030a")
        buf.write("\7A\2\2\u030a\u030e\5\u0088E\2\u030b\u030e\5`\61\2\u030c")
        buf.write("\u030e\5,\27\2\u030d\u0302\3\2\2\2\u030d\u0303\3\2\2\2")
        buf.write("\u030d\u0304\3\2\2\2\u030d\u0305\3\2\2\2\u030d\u0306\3")
        buf.write("\2\2\2\u030d\u0308\3\2\2\2\u030d\u0309\3\2\2\2\u030d\u030b")
        buf.write("\3\2\2\2\u030d\u030c\3\2\2\2\u030e\u0085\3\2\2\2\u030f")
        buf.write("\u0310\7\u00fc\2\2\u0310\u0313\7\u0110\2\2\u0311\u0312")
        buf.write("\7\u00f5\2\2\u0312\u0314\7\u0110\2\2\u0313\u0311\3\2\2")
        buf.write("\2\u0313\u0314\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317")
        buf.write("\7\u00fb\2\2\u0316\u030f\3\2\2\2\u0317\u0318\3\2\2\2\u0318")
        buf.write("\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u0087\3\2\2\2")
        buf.write("\u031a\u031b\7\u00fa\2\2\u031b\u031c\5\u0082B\2\u031c")
        buf.write("\u031d\7\u00f9\2\2\u031d\u0089\3\2\2\2\u031e\u0320\5\u009a")
        buf.write("N\2\u031f\u0321\5p9\2\u0320\u031f\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u0323\3\2\2\2\u0322\u0324\5&\24\2\u0323")
        buf.write("\u0322\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0326\3\2\2\2")
        buf.write("\u0325\u0327\5X-\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2")
        buf.write("\2\2\u0327\u0339\3\2\2\2\u0328\u0329\5\u0088E\2\u0329")
        buf.write("\u032a\5&\24\2\u032a\u0339\3\2\2\2\u032b\u032c\7\u00fa")
        buf.write("\2\2\u032c\u032d\5\u0098M\2\u032d\u032e\7\u00f9\2\2\u032e")
        buf.write("\u0339\3\2\2\2\u032f\u0330\7\u0084\2\2\u0330\u0331\5\u0096")
        buf.write("L\2\u0331\u0332\7f\2\2\u0332\u0333\7\u0087\2\2\u0333\u0334")
        buf.write("\7a\2\2\u0334\u0335\5\u0096L\2\u0335\u0336\7\u0085\2\2")
        buf.write("\u0336\u0337\5@!\2\u0337\u0339\3\2\2\2\u0338\u031e\3\2")
        buf.write("\2\2\u0338\u0328\3\2\2\2\u0338\u032b\3\2\2\2\u0338\u032f")
        buf.write("\3\2\2\2\u0339\u008b\3\2\2\2\u033a\u033b\7\u0116\2\2\u033b")
        buf.write("\u008d\3\2\2\2\u033c\u0347\5\u0090I\2\u033d\u033f\t\26")
        buf.write("\2\2\u033e\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340")
        buf.write("\3\2\2\2\u0340\u0341\7a\2\2\u0341\u0343\5\u008aF\2\u0342")
        buf.write("\u0344\5b\62\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u0346\3\2\2\2\u0345\u033e\3\2\2\2\u0346\u0349\3")
        buf.write("\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u008f")
        buf.write("\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u0351\5\u0092J\2\u034b")
        buf.write("\u034c\7\u00ac\2\2\u034c\u034f\5\u008aF\2\u034d\u034e")
        buf.write("\7\u0085\2\2\u034e\u0350\5@!\2\u034f\u034d\3\2\2\2\u034f")
        buf.write("\u0350\3\2\2\2\u0350\u0352\3\2\2\2\u0351\u034b\3\2\2\2")
        buf.write("\u0351\u0352\3\2\2\2\u0352\u0091\3\2\2\2\u0353\u035e\5")
        buf.write("\u0094K\2\u0354\u0356\t\27\2\2\u0355\u0357\7\u0087\2\2")
        buf.write("\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358\3")
        buf.write("\2\2\2\u0358\u0359\7a\2\2\u0359\u035a\5\u0094K\2\u035a")
        buf.write("\u035b\5b\62\2\u035b\u035d\3\2\2\2\u035c\u0354\3\2\2\2")
        buf.write("\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3")
        buf.write("\2\2\2\u035f\u0093\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u036b")
        buf.write("\5\u008aF\2\u0362\u0367\7}\2\2\u0363\u0365\t\27\2\2\u0364")
        buf.write("\u0366\7\u0087\2\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2")
        buf.write("\2\2\u0366\u0368\3\2\2\2\u0367\u0363\3\2\2\2\u0367\u0368")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036a\7a\2\2\u036a")
        buf.write("\u036c\5\u008aF\2\u036b\u0362\3\2\2\2\u036b\u036c\3\2")
        buf.write("\2\2\u036c\u0095\3\2\2\2\u036d\u0377\5\u008eH\2\u036e")
        buf.write("\u036f\7\u00fa\2\2\u036f\u0370\5\u009cO\2\u0370\u0371")
        buf.write("\7\u00f9\2\2\u0371\u0372\3\2\2\2\u0372\u0374\5&\24\2\u0373")
        buf.write("\u0375\5\62\32\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2")
        buf.write("\2\u0375\u0377\3\2\2\2\u0376\u036d\3\2\2\2\u0376\u036e")
        buf.write("\3\2\2\2\u0377\u0097\3\2\2\2\u0378\u037d\5\u0096L\2\u0379")
        buf.write("\u037a\7\u00f7\2\2\u037a\u037c\5\u0096L\2\u037b\u0379")
        buf.write("\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d")
        buf.write("\u037e\3\2\2\2\u037e\u0099\3\2\2\2\u037f\u037d\3\2\2\2")
        buf.write("\u0380\u0381\5~@\2\u0381\u0382\7\u00f6\2\2\u0382\u0384")
        buf.write("\3\2\2\2\u0383\u0380\3\2\2\2\u0383\u0384\3\2\2\2\u0384")
        buf.write("\u0385\3\2\2\2\u0385\u0386\5\u008cG\2\u0386\u009b\3\2")
        buf.write("\2\2\u0387\u0388\7\u00cd\2\2\u0388\u038d\5B\"\2\u0389")
        buf.write("\u038a\7\u00f7\2\2\u038a\u038c\5B\"\2\u038b\u0389\3\2")
        buf.write("\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e")
        buf.write("\3\2\2\2\u038e\u009d\3\2\2\2\u038f\u038d\3\2\2\2\u0390")
        buf.write("\u0391\7\u00d6\2\2\u0391\u0392\5@!\2\u0392\u009f\3\2\2")
        buf.write("\2\u0393\u0394\t\30\2\2\u0394\u00a1\3\2\2\2\u0395\u0398")
        buf.write("\5\u00b4[\2\u0396\u0398\5\u00a4S\2\u0397\u0395\3\2\2\2")
        buf.write("\u0397\u0396\3\2\2\2\u0398\u03e0\3\2\2\2\u0399\u039c\5")
        buf.write("\u00a4S\2\u039a\u039c\5\u0084C\2\u039b\u0399\3\2\2\2\u039b")
        buf.write("\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e\5\u00a0")
        buf.write("Q\2\u039e\u039f\5\u00b4[\2\u039f\u03e0\3\2\2\2\u03a0\u03a1")
        buf.write("\5\u00b4[\2\u03a1\u03a2\7\u00ee\2\2\u03a2\u03a3\5\u00b4")
        buf.write("[\2\u03a3\u03e0\3\2\2\2\u03a4\u03a5\5\u00b4[\2\u03a5\u03a6")
        buf.write("\5\u00a0Q\2\u03a6\u03a7\5\u00b4[\2\u03a7\u03e0\3\2\2\2")
        buf.write("\u03a8\u03af\5\u00a8U\2\u03a9\u03aa\5\u0084C\2\u03aa\u03ab")
        buf.write("\7\u010c\2\2\u03ab\u03ac\5\u00a8U\2\u03ac\u03af\3\2\2")
        buf.write("\2\u03ad\u03af\5\u0084C\2\u03ae\u03a8\3\2\2\2\u03ae\u03a9")
        buf.write("\3\2\2\2\u03ae\u03ad\3\2\2\2\u03af\u03e0\3\2\2\2\u03b0")
        buf.write("\u03b4\5\u00a4S\2\u03b1\u03b4\5\u00a6T\2\u03b2\u03b4\5")
        buf.write("\u0084C\2\u03b3\u03b0\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3")
        buf.write("\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b9\7\u010d")
        buf.write("\2\2\u03b6\u03ba\5\u00a4S\2\u03b7\u03ba\5\u00a6T\2\u03b8")
        buf.write("\u03ba\5\u0084C\2\u03b9\u03b6\3\2\2\2\u03b9\u03b7\3\2")
        buf.write("\2\2\u03b9\u03b8\3\2\2\2\u03ba\u03e0\3\2\2\2\u03bb\u03c0")
        buf.write("\7\u010e\2\2\u03bc\u03c1\5\u00a6T\2\u03bd\u03c1\5\u00ac")
        buf.write("W\2\u03be\u03c1\5\u00aeX\2\u03bf\u03c1\5\u0084C\2\u03c0")
        buf.write("\u03bc\3\2\2\2\u03c0\u03bd\3\2\2\2\u03c0\u03be\3\2\2\2")
        buf.write("\u03c0\u03bf\3\2\2\2\u03c1\u03e0\3\2\2\2\u03c2\u03c6\7")
        buf.write("\u010f\2\2\u03c3\u03c7\5\u00a6T\2\u03c4\u03c7\5\u00aa")
        buf.write("V\2\u03c5\u03c7\5\u0084C\2\u03c6\u03c3\3\2\2\2\u03c6\u03c4")
        buf.write("\3\2\2\2\u03c6\u03c5\3\2\2\2\u03c7\u03e0\3\2\2\2\u03c8")
        buf.write("\u03cc\7\u00fe\2\2\u03c9\u03cd\5\u00a8U\2\u03ca\u03cd")
        buf.write("\5\u00b0Y\2\u03cb\u03cd\5\u0084C\2\u03cc\u03c9\3\2\2\2")
        buf.write("\u03cc\u03ca\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u03e0\3")
        buf.write("\2\2\2\u03ce\u03d6\5\u00a4S\2\u03cf\u03d6\5\u00a6T\2\u03d0")
        buf.write("\u03d6\5\u00a8U\2\u03d1\u03d6\5\u00aaV\2\u03d2\u03d6\5")
        buf.write("\u00aeX\2\u03d3\u03d6\5\u00b0Y\2\u03d4\u03d6\5\u0084C")
        buf.write("\2\u03d5\u03ce\3\2\2\2\u03d5\u03cf\3\2\2\2\u03d5\u03d0")
        buf.write("\3\2\2\2\u03d5\u03d1\3\2\2\2\u03d5\u03d2\3\2\2\2\u03d5")
        buf.write("\u03d3\3\2\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03db\3\2\2\2\u03d7\u03d9\t\5\2\2\u03d8\u03d7\3")
        buf.write("\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc")
        buf.write("\5\u00b2Z\2\u03db\u03d8\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e0\3\2\2\2")
        buf.write("\u03df\u0397\3\2\2\2\u03df\u039b\3\2\2\2\u03df\u03a0\3")
        buf.write("\2\2\2\u03df\u03a4\3\2\2\2\u03df\u03ae\3\2\2\2\u03df\u03b3")
        buf.write("\3\2\2\2\u03df\u03bb\3\2\2\2\u03df\u03c2\3\2\2\2\u03df")
        buf.write("\u03c8\3\2\2\2\u03df\u03d5\3\2\2\2\u03e0\u00a3\3\2\2\2")
        buf.write("\u03e1\u03e2\7\u00de\2\2\u03e2\u03e3\7\u00fa\2\2\u03e3")
        buf.write("\u03e4\5(\25\2\u03e4\u03e5\7\u00f7\2\2\u03e5\u03e6\5(")
        buf.write("\25\2\u03e6\u03e7\7\u00f9\2\2\u03e7\u00a5\3\2\2\2\u03e8")
        buf.write("\u03e9\7\u00df\2\2\u03e9\u03ea\7\u00fa\2\2\u03ea\u03eb")
        buf.write("\5\u00a4S\2\u03eb\u03ec\7\u00f7\2\2\u03ec\u03ed\5(\25")
        buf.write("\2\u03ed\u03ee\7\u00f9\2\2\u03ee\u00a7\3\2\2\2\u03ef\u03f0")
        buf.write("\7\u00e0\2\2\u03f0\u03f1\7\u00fa\2\2\u03f1\u03f2\5\u00a4")
        buf.write("S\2\u03f2\u03f3\7\u00f7\2\2\u03f3\u03f4\5\u00a4S\2\u03f4")
        buf.write("\u03f5\7\u00f9\2\2\u03f5\u03fe\3\2\2\2\u03f6\u03f7\7\u00e0")
        buf.write("\2\2\u03f7\u03f8\7\u00fa\2\2\u03f8\u03f9\5\u00b2Z\2\u03f9")
        buf.write("\u03fa\7\u00f7\2\2\u03fa\u03fb\5(\25\2\u03fb\u03fc\7\u00f9")
        buf.write("\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03ef\3\2\2\2\u03fd\u03f6")
        buf.write("\3\2\2\2\u03fe\u00a9\3\2\2\2\u03ff\u0400\7\u00e1\2\2\u0400")
        buf.write("\u0401\7\u00fa\2\2\u0401\u0402\5\u00a4S\2\u0402\u0403")
        buf.write("\7\u00f7\2\2\u0403\u0404\5(\25\2\u0404\u0405\7\u00f7\2")
        buf.write("\2\u0405\u0406\5(\25\2\u0406\u0407\7\u00f7\2\2\u0407\u0408")
        buf.write("\5(\25\2\u0408\u0409\7\u00f9\2\2\u0409\u00ab\3\2\2\2\u040a")
        buf.write("\u040b\7\u00e4\2\2\u040b\u040c\7\u00fa\2\2\u040c\u040d")
        buf.write("\5\u00a4S\2\u040d\u040e\7\u00f7\2\2\u040e\u040f\5\u00a4")
        buf.write("S\2\u040f\u0410\7\u00f9\2\2\u0410\u00ad\3\2\2\2\u0411")
        buf.write("\u0412\7\u00e2\2\2\u0412\u041d\7\u0115\2\2\u0413\u0414")
        buf.write("\7\u00e2\2\2\u0414\u0415\7\u00fa\2\2\u0415\u0416\5\66")
        buf.write("\34\2\u0416\u0417\7\u00f9\2\2\u0417\u041d\3\2\2\2\u0418")
        buf.write("\u0419\7\u00e2\2\2\u0419\u041a\7\u00fa\2\2\u041a\u041b")
        buf.write("\7\u0115\2\2\u041b\u041d\7\u00f9\2\2\u041c\u0411\3\2\2")
        buf.write("\2\u041c\u0413\3\2\2\2\u041c\u0418\3\2\2\2\u041d\u00af")
        buf.write("\3\2\2\2\u041e\u041f\7\u00e3\2\2\u041f\u0426\7\u0115\2")
        buf.write("\2\u0420\u0421\7\u00e3\2\2\u0421\u0422\7\u00fa\2\2\u0422")
        buf.write("\u0423\5\66\34\2\u0423\u0424\7\u00f9\2\2\u0424\u0426\3")
        buf.write("\2\2\2\u0425\u041e\3\2\2\2\u0425\u0420\3\2\2\2\u0426\u00b1")
        buf.write("\3\2\2\2\u0427\u0428\7\u00e5\2\2\u0428\u0429\7\u00fa\2")
        buf.write("\2\u0429\u042a\5(\25\2\u042a\u042b\7\u00f7\2\2\u042b\u042c")
        buf.write("\5(\25\2\u042c\u042d\7\u00f7\2\2\u042d\u042e\5(\25\2\u042e")
        buf.write("\u042f\7\u00f7\2\2\u042f\u0430\7\u0114\2\2\u0430\u0431")
        buf.write("\7\u00f9\2\2\u0431\u00b3\3\2\2\2\u0432\u043a\5\u00a6T")
        buf.write("\2\u0433\u043a\5\u00a8U\2\u0434\u043a\5\u00aaV\2\u0435")
        buf.write("\u043a\5\u00acW\2\u0436\u043a\5\u00aeX\2\u0437\u043a\5")
        buf.write("\u00b0Y\2\u0438\u043a\5\u0084C\2\u0439\u0432\3\2\2\2\u0439")
        buf.write("\u0433\3\2\2\2\u0439\u0434\3\2\2\2\u0439\u0435\3\2\2\2")
        buf.write("\u0439\u0436\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u0438\3")
        buf.write("\2\2\2\u043a\u00b5\3\2\2\2\u0087\u00bc\u00c2\u00ce\u00d1")
        buf.write("\u00d8\u00e3\u00fd\u0105\u0109\u010f\u0112\u0115\u0118")
        buf.write("\u011a\u011d\u0120\u0123\u0127\u012a\u012d\u0134\u0139")
        buf.write("\u013d\u0140\u0144\u0149\u014d\u0158\u0162\u016a\u0174")
        buf.write("\u0179\u017d\u0185\u0189\u018c\u018e\u0195\u0199\u01a0")
        buf.write("\u01a6\u01a8\u01ab\u01ad\u01b4\u01bd\u01c5\u01ca\u01d1")
        buf.write("\u01d9\u01dd\u01e1\u01e5\u01ee\u01f1\u01f4\u020f\u0213")
        buf.write("\u0215\u0219\u0222\u0227\u022c\u022f\u0238\u0248\u024f")
        buf.write("\u0259\u0263\u0265\u026f\u0275\u027c\u028c\u0291\u0295")
        buf.write("\u0297\u029d\u02ab\u02af\u02b4\u02ba\u02bf\u02c3\u02c7")
        buf.write("\u02cc\u02d2\u02d6\u02da\u02e6\u02f0\u02f3\u02f5\u02fa")
        buf.write("\u02ff\u030d\u0313\u0318\u0320\u0323\u0326\u0338\u033e")
        buf.write("\u0343\u0347\u034f\u0351\u0356\u035e\u0365\u0367\u036b")
        buf.write("\u0374\u0376\u037d\u0383\u038d\u0397\u039b\u03ae\u03b3")
        buf.write("\u03b9\u03c0\u03c6\u03cc\u03d5\u03d8\u03dd\u03df\u03fd")
        buf.write("\u041c\u0425\u0439")
        return buf.getvalue()


class PostgreSQLParser ( Parser ):

    grammarFileName = "PostgreSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'@'", "'!!'", "<INVALID>", 
                     "<INVALID>", "'<='", "'>='", "'<<'", "'>>'", "';'", 
                     "':'", "'.'", "','", "'*'", "')'", "'('", "']'", "'['", 
                     "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", "'>'", "'<'", 
                     "'<@'", "'@>'", "'!@'", "'!<@'", "'!~'", "'!@>'", "'!&&'", 
                     "'#'", "'<->'", "'@-@'", "'@@'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "ALL", "ANY", "ASC", "ASIN", 
                      "AS_SYM", "ATAN", "ATAN2", "AVG", "BETWEEN", "BIGINT", 
                      "BINARY", "BIT_AND", "BIT_COUNT", "BIT_LENGTH", "BIT_OR", 
                      "BIT_XOR", "BOOLEAN_SYM", "BY_SYM", "CASE_SYM", "CAST_SYM", 
                      "CBRT", "CEIL", "CEILING", "CHAR", "CHR", "CHAR_LENGTH", 
                      "CONCAT", "CONCAT_WS", "CONVERT_SYM", "CONVERT_TZ", 
                      "COS", "COT", "COUNT", "CROSS", "CURDATE", "CURTIME", 
                      "DATETIME", "DATE_ADD", "DATE_FORMAT", "DATE_PART", 
                      "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", 
                      "DAYOFYEAR", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", 
                      "DAY_SECOND", "DAY_SYM", "DECIMAL_SYM", "DEGREES", 
                      "DESC", "DIV", "DISTINCT", "DOUBLE_PRECISION_SYM", 
                      "ELSE_SYM", "ENCODE", "END_SYM", "ESCAPE_SYM", "EXISTS", 
                      "EXP", "EXPANSION_SYM", "EXTRACT", "FALSE_SYM", "FIND_IN_SET", 
                      "FIRST_SYM", "FLOAT", "FLOOR", "FORCE_SYM", "FOR_SYM", 
                      "FROM", "FROM_DAYS", "FROM_UNIXTIME", "GET_FORMAT", 
                      "GREATEST", "GROUP_CONCAT", "GROUP_SYM", "HAVING", 
                      "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", "HOUR_SECOND", 
                      "IGNORE_SYM", "INDEX_SYM", "INNER_SYM", "INSTR", "INTEGER_SYM", 
                      "INTERVAL_SYM", "IN_SYM", "ISNULL", "IS_SYM", "JOIN_SYM", 
                      "KEY_SYM", "LANGUAGE", "LAST_SYM", "LAST_DAY", "LEFT", 
                      "LENGTH", "LIKE_SYM", "LIMIT", "LN", "LOCK", "LOG", 
                      "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
                      "MAX_SYM", "MD5", "MICROSECOND", "MINUTE", "MINUTE_MICROSECOND", 
                      "MINUTE_SECOND", "MIN_SYM", "MOD", "MODE_SYM", "MONTH", 
                      "MONTHNAME", "NATURAL", "NOT_SYM", "NOTNULL", "NOW", 
                      "NULL_SYM", "NULLS_SYM", "OFFSET_SYM", "OJ_SYM", "ON", 
                      "ORDER_SYM", "OUTER", "PARTITION_SYM", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POSITION_SYM", "POW", "POWER", 
                      "QUARTER", "QUERY_SYM", "RADIANS", "RANDOM", "REAL", 
                      "REGEXP", "REPEAT", "REPLACE", "REVERSE", "RIGHT", 
                      "ROLLUP_SYM", "ROUND", "ROW_SYM", "RPAD", "RTRIM", 
                      "SECOND", "SECOND_MICROSECOND", "SEC_TO_TIME", "SELECT", 
                      "SHARE_SYM", "SIGN", "SIGNED_SYM", "SIN", "SOUNDS_SYM", 
                      "SPACE", "SQRT", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
                      "STRAIGHT_JOIN", "STRCMP", "STR_TO_DATE", "SUBSTRING", 
                      "SUBTIME", "SUM", "SYMMETRIC", "SYSDATE", "TAN", "THEN_SYM", 
                      "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
                      "TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", "TO_BASE64", 
                      "TO_DAYS", "TO_SECONDS", "TRIM", "TRUE_SYM", "TRUNCATE", 
                      "UNION_SYM", "UNIX_TIMESTAMP", "UNSIGNED_SYM", "UPDATE", 
                      "UPPER", "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "VALUES", "VARIANCE", "VAR_POP", 
                      "VAR_SAMP", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", 
                      "WHEN_SYM", "WHERE", "WITH", "YEAR", "YEARWEEK", "YEAR_MONTH", 
                      "ASCII_SYM", "LATIN1", "UTF8", "SPOINT", "SCIRCLE", 
                      "SLINE", "SELLIPSE", "SPOLY", "SPATH", "SBOX", "STRANS", 
                      "AREA", "ARRAY_LENGTH", "DIVIDE", "MOD_SYM", "OR_SYM", 
                      "AND_SYM", "ABS_VAL_OR_SCONTAINS", "DFACTORIAL", "EQ", 
                      "NOT_EQ", "LET", "GET", "SHIFT_LEFT", "SHIFT_RIGHT", 
                      "SEMI", "COLON", "DOT", "COMMA", "ASTERISK", "RPAREN", 
                      "LPAREN", "RBRACK", "LBRACK", "PLUS", "MINUS", "NEGATION", 
                      "VERTBAR", "BITAND", "POWER_OP", "GTH", "LTH", "SCONTAINS2", 
                      "SLEFTCONTAINS2", "SNOTCONTAINS", "SNOTCONTAINS2", 
                      "SLEFTNOTCONTAINS", "SLEFTNOTCONTAINS2", "SNOTOVERLAP", 
                      "SCROSS", "SDISTANCE", "SLENGTH", "SCENTER", "INTEGER_NUM", 
                      "HEX_DIGIT", "BIT_NUM", "REAL_NUMBER", "TRANS", "TEXT_STRING", 
                      "ID", "COMMENT", "WS" ]

    RULE_relational_op = 0
    RULE_cast_data_type = 1
    RULE_interval_unit = 2
    RULE_bit_literal = 3
    RULE_boolean_literal = 4
    RULE_hex_literal = 5
    RULE_number_literal = 6
    RULE_string_literal = 7
    RULE_char_functions = 8
    RULE_group_functions = 9
    RULE_number_functions = 10
    RULE_other_functions = 11
    RULE_time_functions = 12
    RULE_array_functions = 13
    RULE_pg_sphere_functions = 14
    RULE_functionList = 15
    RULE_literal_value = 16
    RULE_select_expression = 17
    RULE_alias = 18
    RULE_bit_expr = 19
    RULE_bool_primary = 20
    RULE_case_when_statement = 21
    RULE_case_when_statement1 = 22
    RULE_case_when_statement2 = 23
    RULE_column_list = 24
    RULE_column_name = 25
    RULE_column_spec = 26
    RULE_displayed_column = 27
    RULE_exp_factor1 = 28
    RULE_exp_factor2 = 29
    RULE_exp_factor3 = 30
    RULE_expression = 31
    RULE_expression_list = 32
    RULE_factor1 = 33
    RULE_factor2 = 34
    RULE_factor3 = 35
    RULE_factor4 = 36
    RULE_factor5 = 37
    RULE_function_call = 38
    RULE_groupby_clause = 39
    RULE_groupby_item = 40
    RULE_having_clause = 41
    RULE_index_hint = 42
    RULE_index_hint_list = 43
    RULE_index_name = 44
    RULE_index_list = 45
    RULE_index_options = 46
    RULE_interval_expr = 47
    RULE_join_condition = 48
    RULE_limit_clause = 49
    RULE_offset = 50
    RULE_offset_clause = 51
    RULE_row_count = 52
    RULE_orderby_clause = 53
    RULE_orderby_item = 54
    RULE_partition_clause = 55
    RULE_partition_name = 56
    RULE_partition_names = 57
    RULE_bit_fac1 = 58
    RULE_bit_fac2 = 59
    RULE_predicate = 60
    RULE_query = 61
    RULE_schema_name = 62
    RULE_select_list = 63
    RULE_select_statement = 64
    RULE_simple_expr = 65
    RULE_slice_spec = 66
    RULE_subquery = 67
    RULE_table_atom = 68
    RULE_table_name = 69
    RULE_table_factor1 = 70
    RULE_table_factor2 = 71
    RULE_table_factor3 = 72
    RULE_table_factor4 = 73
    RULE_table_reference = 74
    RULE_table_references = 75
    RULE_table_spec = 76
    RULE_values_list = 77
    RULE_where_clause = 78
    RULE_pg_sphere_op = 79
    RULE_sbit_expr = 80
    RULE_spoint = 81
    RULE_scircle = 82
    RULE_sline = 83
    RULE_sellipse = 84
    RULE_sbox = 85
    RULE_spoly = 86
    RULE_spath = 87
    RULE_strans = 88
    RULE_pg_sphere_object = 89

    ruleNames =  [ "relational_op", "cast_data_type", "interval_unit", "bit_literal", 
                   "boolean_literal", "hex_literal", "number_literal", "string_literal", 
                   "char_functions", "group_functions", "number_functions", 
                   "other_functions", "time_functions", "array_functions", 
                   "pg_sphere_functions", "functionList", "literal_value", 
                   "select_expression", "alias", "bit_expr", "bool_primary", 
                   "case_when_statement", "case_when_statement1", "case_when_statement2", 
                   "column_list", "column_name", "column_spec", "displayed_column", 
                   "exp_factor1", "exp_factor2", "exp_factor3", "expression", 
                   "expression_list", "factor1", "factor2", "factor3", "factor4", 
                   "factor5", "function_call", "groupby_clause", "groupby_item", 
                   "having_clause", "index_hint", "index_hint_list", "index_name", 
                   "index_list", "index_options", "interval_expr", "join_condition", 
                   "limit_clause", "offset", "offset_clause", "row_count", 
                   "orderby_clause", "orderby_item", "partition_clause", 
                   "partition_name", "partition_names", "bit_fac1", "bit_fac2", 
                   "predicate", "query", "schema_name", "select_list", "select_statement", 
                   "simple_expr", "slice_spec", "subquery", "table_atom", 
                   "table_name", "table_factor1", "table_factor2", "table_factor3", 
                   "table_factor4", "table_reference", "table_references", 
                   "table_spec", "values_list", "where_clause", "pg_sphere_op", 
                   "sbit_expr", "spoint", "scircle", "sline", "sellipse", 
                   "sbox", "spoly", "spath", "strans", "pg_sphere_object" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    ALL=3
    ANY=4
    ASC=5
    ASIN=6
    AS_SYM=7
    ATAN=8
    ATAN2=9
    AVG=10
    BETWEEN=11
    BIGINT=12
    BINARY=13
    BIT_AND=14
    BIT_COUNT=15
    BIT_LENGTH=16
    BIT_OR=17
    BIT_XOR=18
    BOOLEAN_SYM=19
    BY_SYM=20
    CASE_SYM=21
    CAST_SYM=22
    CBRT=23
    CEIL=24
    CEILING=25
    CHAR=26
    CHR=27
    CHAR_LENGTH=28
    CONCAT=29
    CONCAT_WS=30
    CONVERT_SYM=31
    CONVERT_TZ=32
    COS=33
    COT=34
    COUNT=35
    CROSS=36
    CURDATE=37
    CURTIME=38
    DATETIME=39
    DATE_ADD=40
    DATE_FORMAT=41
    DATE_PART=42
    DATE_SYM=43
    DAYNAME=44
    DAYOFMONTH=45
    DAYOFWEEK=46
    DAYOFYEAR=47
    DAY_HOUR=48
    DAY_MICROSECOND=49
    DAY_MINUTE=50
    DAY_SECOND=51
    DAY_SYM=52
    DECIMAL_SYM=53
    DEGREES=54
    DESC=55
    DIV=56
    DISTINCT=57
    DOUBLE_PRECISION_SYM=58
    ELSE_SYM=59
    ENCODE=60
    END_SYM=61
    ESCAPE_SYM=62
    EXISTS=63
    EXP=64
    EXPANSION_SYM=65
    EXTRACT=66
    FALSE_SYM=67
    FIND_IN_SET=68
    FIRST_SYM=69
    FLOAT=70
    FLOOR=71
    FORCE_SYM=72
    FOR_SYM=73
    FROM=74
    FROM_DAYS=75
    FROM_UNIXTIME=76
    GET_FORMAT=77
    GREATEST=78
    GROUP_CONCAT=79
    GROUP_SYM=80
    HAVING=81
    HOUR=82
    HOUR_MICROSECOND=83
    HOUR_MINUTE=84
    HOUR_SECOND=85
    IGNORE_SYM=86
    INDEX_SYM=87
    INNER_SYM=88
    INSTR=89
    INTEGER_SYM=90
    INTERVAL_SYM=91
    IN_SYM=92
    ISNULL=93
    IS_SYM=94
    JOIN_SYM=95
    KEY_SYM=96
    LANGUAGE=97
    LAST_SYM=98
    LAST_DAY=99
    LEFT=100
    LENGTH=101
    LIKE_SYM=102
    LIMIT=103
    LN=104
    LOCK=105
    LOG=106
    LOWER=107
    LPAD=108
    LTRIM=109
    MAKEDATE=110
    MAKETIME=111
    MAX_SYM=112
    MD5=113
    MICROSECOND=114
    MINUTE=115
    MINUTE_MICROSECOND=116
    MINUTE_SECOND=117
    MIN_SYM=118
    MOD=119
    MODE_SYM=120
    MONTH=121
    MONTHNAME=122
    NATURAL=123
    NOT_SYM=124
    NOTNULL=125
    NOW=126
    NULL_SYM=127
    NULLS_SYM=128
    OFFSET_SYM=129
    OJ_SYM=130
    ON=131
    ORDER_SYM=132
    OUTER=133
    PARTITION_SYM=134
    PERIOD_ADD=135
    PERIOD_DIFF=136
    PI=137
    POSITION_SYM=138
    POW=139
    POWER=140
    QUARTER=141
    QUERY_SYM=142
    RADIANS=143
    RANDOM=144
    REAL=145
    REGEXP=146
    REPEAT=147
    REPLACE=148
    REVERSE=149
    RIGHT=150
    ROLLUP_SYM=151
    ROUND=152
    ROW_SYM=153
    RPAD=154
    RTRIM=155
    SECOND=156
    SECOND_MICROSECOND=157
    SEC_TO_TIME=158
    SELECT=159
    SHARE_SYM=160
    SIGN=161
    SIGNED_SYM=162
    SIN=163
    SOUNDS_SYM=164
    SPACE=165
    SQRT=166
    STDDEV=167
    STDDEV_POP=168
    STDDEV_SAMP=169
    STRAIGHT_JOIN=170
    STRCMP=171
    STR_TO_DATE=172
    SUBSTRING=173
    SUBTIME=174
    SUM=175
    SYMMETRIC=176
    SYSDATE=177
    TAN=178
    THEN_SYM=179
    TIMEDIFF=180
    TIMESTAMP=181
    TIMESTAMPADD=182
    TIMESTAMPDIFF=183
    TIME_FORMAT=184
    TIME_SYM=185
    TIME_TO_SEC=186
    TO_BASE64=187
    TO_DAYS=188
    TO_SECONDS=189
    TRIM=190
    TRUE_SYM=191
    TRUNCATE=192
    UNION_SYM=193
    UNIX_TIMESTAMP=194
    UNSIGNED_SYM=195
    UPDATE=196
    UPPER=197
    USE_SYM=198
    USING_SYM=199
    UTC_DATE=200
    UTC_TIME=201
    UTC_TIMESTAMP=202
    VALUES=203
    VARIANCE=204
    VAR_POP=205
    VAR_SAMP=206
    WEEK=207
    WEEKDAY=208
    WEEKOFYEAR=209
    WEIGHT_STRING=210
    WHEN_SYM=211
    WHERE=212
    WITH=213
    YEAR=214
    YEARWEEK=215
    YEAR_MONTH=216
    ASCII_SYM=217
    LATIN1=218
    UTF8=219
    SPOINT=220
    SCIRCLE=221
    SLINE=222
    SELLIPSE=223
    SPOLY=224
    SPATH=225
    SBOX=226
    STRANS=227
    AREA=228
    ARRAY_LENGTH=229
    DIVIDE=230
    MOD_SYM=231
    OR_SYM=232
    AND_SYM=233
    ABS_VAL_OR_SCONTAINS=234
    DFACTORIAL=235
    EQ=236
    NOT_EQ=237
    LET=238
    GET=239
    SHIFT_LEFT=240
    SHIFT_RIGHT=241
    SEMI=242
    COLON=243
    DOT=244
    COMMA=245
    ASTERISK=246
    RPAREN=247
    LPAREN=248
    RBRACK=249
    LBRACK=250
    PLUS=251
    MINUS=252
    NEGATION=253
    VERTBAR=254
    BITAND=255
    POWER_OP=256
    GTH=257
    LTH=258
    SCONTAINS2=259
    SLEFTCONTAINS2=260
    SNOTCONTAINS=261
    SNOTCONTAINS2=262
    SLEFTNOTCONTAINS=263
    SLEFTNOTCONTAINS2=264
    SNOTOVERLAP=265
    SCROSS=266
    SDISTANCE=267
    SLENGTH=268
    SCENTER=269
    INTEGER_NUM=270
    HEX_DIGIT=271
    BIT_NUM=272
    REAL_NUMBER=273
    TRANS=274
    TEXT_STRING=275
    ID=276
    COMMENT=277
    WS=278

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def NOT_EQ(self):
            return self.getToken(PostgreSQLParser.NOT_EQ, 0)

        def LET(self):
            return self.getToken(PostgreSQLParser.LET, 0)

        def GET(self):
            return self.getToken(PostgreSQLParser.GET, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)




    def relational_op(self):

        localctx = PostgreSQLParser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            _la = self._input.LA(1)
            if not(((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (PostgreSQLParser.EQ - 236)) | (1 << (PostgreSQLParser.NOT_EQ - 236)) | (1 << (PostgreSQLParser.LET - 236)) | (1 << (PostgreSQLParser.GET - 236)) | (1 << (PostgreSQLParser.GTH - 236)) | (1 << (PostgreSQLParser.LTH - 236)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cast_data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def CHAR(self):
            return self.getToken(PostgreSQLParser.CHAR, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DATETIME(self):
            return self.getToken(PostgreSQLParser.DATETIME, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def DECIMAL_SYM(self):
            return self.getToken(PostgreSQLParser.DECIMAL_SYM, 0)

        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def INTEGER_SYM(self):
            return self.getToken(PostgreSQLParser.INTEGER_SYM, 0)

        def BIGINT(self):
            return self.getToken(PostgreSQLParser.BIGINT, 0)

        def FLOAT(self):
            return self.getToken(PostgreSQLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(PostgreSQLParser.REAL, 0)

        def DOUBLE_PRECISION_SYM(self):
            return self.getToken(PostgreSQLParser.DOUBLE_PRECISION_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_cast_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_data_type" ):
                listener.enterCast_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_data_type" ):
                listener.exitCast_data_type(self)




    def cast_data_type(self):

        localctx = PostgreSQLParser.Cast_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_cast_data_type)
        self._la = 0 # Token type
        try:
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.match(PostgreSQLParser.BINARY)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 183
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 184
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 185
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.match(PostgreSQLParser.CHAR)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 189
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 190
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 191
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.DATE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.match(PostgreSQLParser.DATE_SYM)
                pass
            elif token in [PostgreSQLParser.DATETIME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 195
                self.match(PostgreSQLParser.DATETIME)
                pass
            elif token in [PostgreSQLParser.TIME_SYM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 196
                self.match(PostgreSQLParser.TIME_SYM)
                pass
            elif token in [PostgreSQLParser.TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 197
                self.match(PostgreSQLParser.TIMESTAMP)
                pass
            elif token in [PostgreSQLParser.INTERVAL_SYM]:
                self.enterOuterAlt(localctx, 7)
                self.state = 198
                self.match(PostgreSQLParser.INTERVAL_SYM)
                pass
            elif token in [PostgreSQLParser.DECIMAL_SYM]:
                self.enterOuterAlt(localctx, 8)
                self.state = 199
                self.match(PostgreSQLParser.DECIMAL_SYM)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 200
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 201
                    self.match(PostgreSQLParser.INTEGER_NUM)
                    self.state = 204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.COMMA:
                        self.state = 202
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 203
                        self.match(PostgreSQLParser.INTEGER_NUM)


                    self.state = 206
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.INTEGER_SYM]:
                self.enterOuterAlt(localctx, 9)
                self.state = 209
                self.match(PostgreSQLParser.INTEGER_SYM)
                pass
            elif token in [PostgreSQLParser.BIGINT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 210
                self.match(PostgreSQLParser.BIGINT)
                pass
            elif token in [PostgreSQLParser.FLOAT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 211
                self.match(PostgreSQLParser.FLOAT)
                pass
            elif token in [PostgreSQLParser.REAL]:
                self.enterOuterAlt(localctx, 12)
                self.state = 212
                self.match(PostgreSQLParser.REAL)
                pass
            elif token in [PostgreSQLParser.DOUBLE_PRECISION_SYM]:
                self.enterOuterAlt(localctx, 13)
                self.state = 213
                self.match(PostgreSQLParser.DOUBLE_PRECISION_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_unitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def DAY_SYM(self):
            return self.getToken(PostgreSQLParser.DAY_SYM, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_MICROSECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(PostgreSQLParser.MINUTE_SECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_MICROSECOND, 0)

        def HOUR_SECOND(self):
            return self.getToken(PostgreSQLParser.HOUR_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(PostgreSQLParser.HOUR_MINUTE, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(PostgreSQLParser.DAY_MICROSECOND, 0)

        def DAY_SECOND(self):
            return self.getToken(PostgreSQLParser.DAY_SECOND, 0)

        def DAY_MINUTE(self):
            return self.getToken(PostgreSQLParser.DAY_MINUTE, 0)

        def DAY_HOUR(self):
            return self.getToken(PostgreSQLParser.DAY_HOUR, 0)

        def YEAR_MONTH(self):
            return self.getToken(PostgreSQLParser.YEAR_MONTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_unit" ):
                listener.enterInterval_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_unit" ):
                listener.exitInterval_unit(self)




    def interval_unit(self):

        localctx = PostgreSQLParser.Interval_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_interval_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.DAY_HOUR) | (1 << PostgreSQLParser.DAY_MICROSECOND) | (1 << PostgreSQLParser.DAY_MINUTE) | (1 << PostgreSQLParser.DAY_SECOND) | (1 << PostgreSQLParser.DAY_SYM))) != 0) or ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (PostgreSQLParser.HOUR - 82)) | (1 << (PostgreSQLParser.HOUR_MICROSECOND - 82)) | (1 << (PostgreSQLParser.HOUR_MINUTE - 82)) | (1 << (PostgreSQLParser.HOUR_SECOND - 82)) | (1 << (PostgreSQLParser.MINUTE - 82)) | (1 << (PostgreSQLParser.MINUTE_MICROSECOND - 82)) | (1 << (PostgreSQLParser.MINUTE_SECOND - 82)) | (1 << (PostgreSQLParser.MONTH - 82)) | (1 << (PostgreSQLParser.QUARTER - 82)))) != 0) or ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.SECOND - 156)) | (1 << (PostgreSQLParser.SECOND_MICROSECOND - 156)) | (1 << (PostgreSQLParser.WEEK - 156)) | (1 << (PostgreSQLParser.YEAR - 156)) | (1 << (PostgreSQLParser.YEAR_MONTH - 156)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_NUM(self):
            return self.getToken(PostgreSQLParser.BIT_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_literal" ):
                listener.enterBit_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_literal" ):
                listener.exitBit_literal(self)




    def bit_literal(self):

        localctx = PostgreSQLParser.Bit_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_bit_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(PostgreSQLParser.BIT_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Boolean_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE_SYM(self):
            return self.getToken(PostgreSQLParser.TRUE_SYM, 0)

        def FALSE_SYM(self):
            return self.getToken(PostgreSQLParser.FALSE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = PostgreSQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.FALSE_SYM or _la==PostgreSQLParser.TRUE_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(PostgreSQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_hex_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_literal" ):
                listener.enterHex_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_literal" ):
                listener.exitHex_literal(self)




    def hex_literal(self):

        localctx = PostgreSQLParser.Hex_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_hex_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(PostgreSQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def REAL_NUMBER(self):
            return self.getToken(PostgreSQLParser.REAL_NUMBER, 0)

        def PLUS(self):
            return self.getToken(PostgreSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PostgreSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_literal" ):
                listener.enterNumber_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_literal" ):
                listener.exitNumber_literal(self)




    def number_literal(self):

        localctx = PostgreSQLParser.Number_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_number_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                self.state = 224
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 227
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INTEGER_NUM or _la==PostgreSQLParser.REAL_NUMBER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = PostgreSQLParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(PostgreSQLParser.TEXT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Char_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII_SYM(self):
            return self.getToken(PostgreSQLParser.ASCII_SYM, 0)

        def BIT_LENGTH(self):
            return self.getToken(PostgreSQLParser.BIT_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(PostgreSQLParser.CHAR_LENGTH, 0)

        def CHR(self):
            return self.getToken(PostgreSQLParser.CHR, 0)

        def CONCAT_WS(self):
            return self.getToken(PostgreSQLParser.CONCAT_WS, 0)

        def CONCAT(self):
            return self.getToken(PostgreSQLParser.CONCAT, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(PostgreSQLParser.LENGTH, 0)

        def LOWER(self):
            return self.getToken(PostgreSQLParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(PostgreSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(PostgreSQLParser.LTRIM, 0)

        def REPEAT(self):
            return self.getToken(PostgreSQLParser.REPEAT, 0)

        def REPLACE(self):
            return self.getToken(PostgreSQLParser.REPLACE, 0)

        def REVERSE(self):
            return self.getToken(PostgreSQLParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def RPAD(self):
            return self.getToken(PostgreSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(PostgreSQLParser.RTRIM, 0)

        def SUBSTRING(self):
            return self.getToken(PostgreSQLParser.SUBSTRING, 0)

        def TRIM(self):
            return self.getToken(PostgreSQLParser.TRIM, 0)

        def UPPER(self):
            return self.getToken(PostgreSQLParser.UPPER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_char_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_functions" ):
                listener.enterChar_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_functions" ):
                listener.exitChar_functions(self)




    def char_functions(self):

        localctx = PostgreSQLParser.Char_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_char_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.CHR) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS))) != 0) or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (PostgreSQLParser.LEFT - 100)) | (1 << (PostgreSQLParser.LENGTH - 100)) | (1 << (PostgreSQLParser.LOWER - 100)) | (1 << (PostgreSQLParser.LPAD - 100)) | (1 << (PostgreSQLParser.LTRIM - 100)) | (1 << (PostgreSQLParser.REPEAT - 100)) | (1 << (PostgreSQLParser.REPLACE - 100)) | (1 << (PostgreSQLParser.REVERSE - 100)) | (1 << (PostgreSQLParser.RIGHT - 100)) | (1 << (PostgreSQLParser.RPAD - 100)) | (1 << (PostgreSQLParser.RTRIM - 100)))) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (PostgreSQLParser.SUBSTRING - 173)) | (1 << (PostgreSQLParser.TRIM - 173)) | (1 << (PostgreSQLParser.UPPER - 173)) | (1 << (PostgreSQLParser.ASCII_SYM - 173)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(PostgreSQLParser.AVG, 0)

        def COUNT(self):
            return self.getToken(PostgreSQLParser.COUNT, 0)

        def MAX_SYM(self):
            return self.getToken(PostgreSQLParser.MAX_SYM, 0)

        def MIN_SYM(self):
            return self.getToken(PostgreSQLParser.MIN_SYM, 0)

        def SUM(self):
            return self.getToken(PostgreSQLParser.SUM, 0)

        def BIT_AND(self):
            return self.getToken(PostgreSQLParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(PostgreSQLParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(PostgreSQLParser.BIT_XOR, 0)

        def BIT_COUNT(self):
            return self.getToken(PostgreSQLParser.BIT_COUNT, 0)

        def STDDEV(self):
            return self.getToken(PostgreSQLParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(PostgreSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(PostgreSQLParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(PostgreSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(PostgreSQLParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(PostgreSQLParser.VARIANCE, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_group_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_functions" ):
                listener.enterGroup_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_functions" ):
                listener.exitGroup_functions(self)




    def group_functions(self):

        localctx = PostgreSQLParser.Group_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_group_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.COUNT))) != 0) or ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & ((1 << (PostgreSQLParser.MAX_SYM - 112)) | (1 << (PostgreSQLParser.MIN_SYM - 112)) | (1 << (PostgreSQLParser.STDDEV - 112)) | (1 << (PostgreSQLParser.STDDEV_POP - 112)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 112)) | (1 << (PostgreSQLParser.SUM - 112)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (PostgreSQLParser.VARIANCE - 204)) | (1 << (PostgreSQLParser.VAR_POP - 204)) | (1 << (PostgreSQLParser.VAR_SAMP - 204)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Number_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(PostgreSQLParser.ABS, 0)

        def ACOS(self):
            return self.getToken(PostgreSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(PostgreSQLParser.ASIN, 0)

        def ATAN2(self):
            return self.getToken(PostgreSQLParser.ATAN2, 0)

        def ATAN(self):
            return self.getToken(PostgreSQLParser.ATAN, 0)

        def CBRT(self):
            return self.getToken(PostgreSQLParser.CBRT, 0)

        def CEIL(self):
            return self.getToken(PostgreSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(PostgreSQLParser.CEILING, 0)

        def COS(self):
            return self.getToken(PostgreSQLParser.COS, 0)

        def COT(self):
            return self.getToken(PostgreSQLParser.COT, 0)

        def DEGREES(self):
            return self.getToken(PostgreSQLParser.DEGREES, 0)

        def DIV(self):
            return self.getToken(PostgreSQLParser.DIV, 0)

        def EXP(self):
            return self.getToken(PostgreSQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(PostgreSQLParser.FLOOR, 0)

        def LN(self):
            return self.getToken(PostgreSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(PostgreSQLParser.LOG, 0)

        def MOD(self):
            return self.getToken(PostgreSQLParser.MOD, 0)

        def PI(self):
            return self.getToken(PostgreSQLParser.PI, 0)

        def POW(self):
            return self.getToken(PostgreSQLParser.POW, 0)

        def POWER(self):
            return self.getToken(PostgreSQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(PostgreSQLParser.RADIANS, 0)

        def RANDOM(self):
            return self.getToken(PostgreSQLParser.RANDOM, 0)

        def ROUND(self):
            return self.getToken(PostgreSQLParser.ROUND, 0)

        def SIGN(self):
            return self.getToken(PostgreSQLParser.SIGN, 0)

        def SIN(self):
            return self.getToken(PostgreSQLParser.SIN, 0)

        def SQRT(self):
            return self.getToken(PostgreSQLParser.SQRT, 0)

        def TAN(self):
            return self.getToken(PostgreSQLParser.TAN, 0)

        def TRUNCATE(self):
            return self.getToken(PostgreSQLParser.TRUNCATE, 0)

        def GREATEST(self):
            return self.getToken(PostgreSQLParser.GREATEST, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_number_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_functions" ):
                listener.enterNumber_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_functions" ):
                listener.exitNumber_functions(self)




    def number_functions(self):

        localctx = PostgreSQLParser.Number_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_number_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.DEGREES) | (1 << PostgreSQLParser.DIV))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.GREATEST - 64)) | (1 << (PostgreSQLParser.LN - 64)) | (1 << (PostgreSQLParser.LOG - 64)) | (1 << (PostgreSQLParser.MOD - 64)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (PostgreSQLParser.PI - 137)) | (1 << (PostgreSQLParser.POW - 137)) | (1 << (PostgreSQLParser.POWER - 137)) | (1 << (PostgreSQLParser.RADIANS - 137)) | (1 << (PostgreSQLParser.RANDOM - 137)) | (1 << (PostgreSQLParser.ROUND - 137)) | (1 << (PostgreSQLParser.SIGN - 137)) | (1 << (PostgreSQLParser.SIN - 137)) | (1 << (PostgreSQLParser.SQRT - 137)) | (1 << (PostgreSQLParser.TAN - 137)) | (1 << (PostgreSQLParser.TRUNCATE - 137)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Other_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCODE(self):
            return self.getToken(PostgreSQLParser.ENCODE, 0)

        def MD5(self):
            return self.getToken(PostgreSQLParser.MD5, 0)

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_other_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_functions" ):
                listener.enterOther_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_functions" ):
                listener.exitOther_functions(self)




    def other_functions(self):

        localctx = PostgreSQLParser.Other_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_other_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.ENCODE or _la==PostgreSQLParser.MD5 or _la==PostgreSQLParser.VALUES):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Time_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONVERT_TZ(self):
            return self.getToken(PostgreSQLParser.CONVERT_TZ, 0)

        def CURDATE(self):
            return self.getToken(PostgreSQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(PostgreSQLParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(PostgreSQLParser.DATE_ADD, 0)

        def DATE_FORMAT(self):
            return self.getToken(PostgreSQLParser.DATE_FORMAT, 0)

        def DATE_PART(self):
            return self.getToken(PostgreSQLParser.DATE_PART, 0)

        def DATE_SYM(self):
            return self.getToken(PostgreSQLParser.DATE_SYM, 0)

        def DAYNAME(self):
            return self.getToken(PostgreSQLParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(PostgreSQLParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(PostgreSQLParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(PostgreSQLParser.DAYOFYEAR, 0)

        def EXTRACT(self):
            return self.getToken(PostgreSQLParser.EXTRACT, 0)

        def FROM_DAYS(self):
            return self.getToken(PostgreSQLParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(PostgreSQLParser.FROM_UNIXTIME, 0)

        def GET_FORMAT(self):
            return self.getToken(PostgreSQLParser.GET_FORMAT, 0)

        def HOUR(self):
            return self.getToken(PostgreSQLParser.HOUR, 0)

        def LAST_DAY(self):
            return self.getToken(PostgreSQLParser.LAST_DAY, 0)

        def MAKEDATE(self):
            return self.getToken(PostgreSQLParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(PostgreSQLParser.MAKETIME, 0)

        def MICROSECOND(self):
            return self.getToken(PostgreSQLParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(PostgreSQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(PostgreSQLParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(PostgreSQLParser.MONTHNAME, 0)

        def NOW(self):
            return self.getToken(PostgreSQLParser.NOW, 0)

        def PERIOD_ADD(self):
            return self.getToken(PostgreSQLParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(PostgreSQLParser.PERIOD_DIFF, 0)

        def QUARTER(self):
            return self.getToken(PostgreSQLParser.QUARTER, 0)

        def SEC_TO_TIME(self):
            return self.getToken(PostgreSQLParser.SEC_TO_TIME, 0)

        def SECOND(self):
            return self.getToken(PostgreSQLParser.SECOND, 0)

        def STR_TO_DATE(self):
            return self.getToken(PostgreSQLParser.STR_TO_DATE, 0)

        def SUBTIME(self):
            return self.getToken(PostgreSQLParser.SUBTIME, 0)

        def SYSDATE(self):
            return self.getToken(PostgreSQLParser.SYSDATE, 0)

        def TIME_FORMAT(self):
            return self.getToken(PostgreSQLParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(PostgreSQLParser.TIME_TO_SEC, 0)

        def TIME_SYM(self):
            return self.getToken(PostgreSQLParser.TIME_SYM, 0)

        def TIMEDIFF(self):
            return self.getToken(PostgreSQLParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(PostgreSQLParser.TIMESTAMPDIFF, 0)

        def TO_DAYS(self):
            return self.getToken(PostgreSQLParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(PostgreSQLParser.TO_SECONDS, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UNIX_TIMESTAMP, 0)

        def UTC_DATE(self):
            return self.getToken(PostgreSQLParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(PostgreSQLParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(PostgreSQLParser.UTC_TIMESTAMP, 0)

        def WEEK(self):
            return self.getToken(PostgreSQLParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(PostgreSQLParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(PostgreSQLParser.WEEKOFYEAR, 0)

        def YEAR(self):
            return self.getToken(PostgreSQLParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(PostgreSQLParser.YEARWEEK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_time_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_functions" ):
                listener.enterTime_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_functions" ):
                listener.exitTime_functions(self)




    def time_functions(self):

        localctx = PostgreSQLParser.Time_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_time_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            _la = self._input.LA(1)
            if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (PostgreSQLParser.CONVERT_TZ - 32)) | (1 << (PostgreSQLParser.CURDATE - 32)) | (1 << (PostgreSQLParser.CURTIME - 32)) | (1 << (PostgreSQLParser.DATE_ADD - 32)) | (1 << (PostgreSQLParser.DATE_FORMAT - 32)) | (1 << (PostgreSQLParser.DATE_PART - 32)) | (1 << (PostgreSQLParser.DATE_SYM - 32)) | (1 << (PostgreSQLParser.DAYNAME - 32)) | (1 << (PostgreSQLParser.DAYOFMONTH - 32)) | (1 << (PostgreSQLParser.DAYOFWEEK - 32)) | (1 << (PostgreSQLParser.DAYOFYEAR - 32)) | (1 << (PostgreSQLParser.EXTRACT - 32)) | (1 << (PostgreSQLParser.FROM_DAYS - 32)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 32)) | (1 << (PostgreSQLParser.GET_FORMAT - 32)) | (1 << (PostgreSQLParser.HOUR - 32)))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (PostgreSQLParser.LAST_DAY - 99)) | (1 << (PostgreSQLParser.MAKEDATE - 99)) | (1 << (PostgreSQLParser.MAKETIME - 99)) | (1 << (PostgreSQLParser.MICROSECOND - 99)) | (1 << (PostgreSQLParser.MINUTE - 99)) | (1 << (PostgreSQLParser.MONTH - 99)) | (1 << (PostgreSQLParser.MONTHNAME - 99)) | (1 << (PostgreSQLParser.NOW - 99)) | (1 << (PostgreSQLParser.PERIOD_ADD - 99)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 99)) | (1 << (PostgreSQLParser.QUARTER - 99)) | (1 << (PostgreSQLParser.SECOND - 99)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 99)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (PostgreSQLParser.STR_TO_DATE - 172)) | (1 << (PostgreSQLParser.SUBTIME - 172)) | (1 << (PostgreSQLParser.SYSDATE - 172)) | (1 << (PostgreSQLParser.TIMEDIFF - 172)) | (1 << (PostgreSQLParser.TIMESTAMP - 172)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 172)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 172)) | (1 << (PostgreSQLParser.TIME_FORMAT - 172)) | (1 << (PostgreSQLParser.TIME_SYM - 172)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 172)) | (1 << (PostgreSQLParser.TO_DAYS - 172)) | (1 << (PostgreSQLParser.TO_SECONDS - 172)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 172)) | (1 << (PostgreSQLParser.UTC_DATE - 172)) | (1 << (PostgreSQLParser.UTC_TIME - 172)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 172)) | (1 << (PostgreSQLParser.WEEK - 172)) | (1 << (PostgreSQLParser.WEEKDAY - 172)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 172)) | (1 << (PostgreSQLParser.YEAR - 172)) | (1 << (PostgreSQLParser.YEARWEEK - 172)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Array_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY_LENGTH(self):
            return self.getToken(PostgreSQLParser.ARRAY_LENGTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_array_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_functions" ):
                listener.enterArray_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_functions" ):
                listener.exitArray_functions(self)




    def array_functions(self):

        localctx = PostgreSQLParser.Array_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_array_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(PostgreSQLParser.ARRAY_LENGTH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_functionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(PostgreSQLParser.AREA, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_functions" ):
                listener.enterPg_sphere_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_functions" ):
                listener.exitPg_sphere_functions(self)




    def pg_sphere_functions(self):

        localctx = PostgreSQLParser.Pg_sphere_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pg_sphere_functions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(PostgreSQLParser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_functionsContext,0)


        def char_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Char_functionsContext,0)


        def time_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Time_functionsContext,0)


        def other_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Other_functionsContext,0)


        def pg_sphere_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_functionsContext,0)


        def array_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Array_functionsContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = PostgreSQLParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionList)
        try:
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.EXP, PostgreSQLParser.FLOOR, PostgreSQLParser.GREATEST, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.MOD, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.ROUND, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.TAN, PostgreSQLParser.TRUNCATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.number_functions()
                pass
            elif token in [PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SUBSTRING, PostgreSQLParser.TRIM, PostgreSQLParser.UPPER, PostgreSQLParser.ASCII_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.char_functions()
                pass
            elif token in [PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.EXTRACT, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.HOUR, PostgreSQLParser.LAST_DAY, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.QUARTER, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBTIME, PostgreSQLParser.SYSDATE, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 247
                self.time_functions()
                pass
            elif token in [PostgreSQLParser.ENCODE, PostgreSQLParser.MD5, PostgreSQLParser.VALUES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 248
                self.other_functions()
                pass
            elif token in [PostgreSQLParser.AREA]:
                self.enterOuterAlt(localctx, 5)
                self.state = 249
                self.pg_sphere_functions()
                pass
            elif token in [PostgreSQLParser.ARRAY_LENGTH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 250
                self.array_functions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.String_literalContext,0)


        def number_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Number_literalContext,0)


        def hex_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Hex_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def bit_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = PostgreSQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_literal_value)
        try:
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.TEXT_STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.string_literal()
                pass
            elif token in [PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.REAL_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.number_literal()
                pass
            elif token in [PostgreSQLParser.HEX_DIGIT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self.hex_literal()
                pass
            elif token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 256
                self.boolean_literal()
                pass
            elif token in [PostgreSQLParser.BIT_NUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 257
                self.bit_literal()
                pass
            elif token in [PostgreSQLParser.NULL_SYM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 258
                self.match(PostgreSQLParser.NULL_SYM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PostgreSQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_listContext,0)


        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def orderby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Orderby_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Offset_clauseContext,0)


        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def UPDATE(self):
            return self.getToken(PostgreSQLParser.UPDATE, 0)

        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Where_clauseContext,0)


        def groupby_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = PostgreSQLParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(PostgreSQLParser.SELECT)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT:
                self.state = 262
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 265
            self.select_list()
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FROM:
                self.state = 266
                self.match(PostgreSQLParser.FROM)
                self.state = 267
                self.table_references()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.PARTITION_SYM:
                    self.state = 268
                    self.partition_clause()


                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.WHERE:
                    self.state = 271
                    self.where_clause()


                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.GROUP_SYM:
                    self.state = 274
                    self.groupby_clause()


                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.HAVING:
                    self.state = 277
                    self.having_clause()




            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ORDER_SYM:
                self.state = 282
                self.orderby_clause()


            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 285
                self.limit_clause()


            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.OFFSET_SYM:
                self.state = 288
                self.offset_clause()


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR_SYM:
                self.state = 291
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 292
                self.match(PostgreSQLParser.UPDATE)


            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 295
                self.match(PostgreSQLParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = PostgreSQLParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.AS_SYM:
                self.state = 298
                self.match(PostgreSQLParser.AS_SYM)


            self.state = 301
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor1Context,i)


        def VERTBAR(self):
            return self.getToken(PostgreSQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_expr" ):
                listener.enterBit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_expr" ):
                listener.exitBit_expr(self)




    def bit_expr(self):

        localctx = PostgreSQLParser.Bit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bit_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.factor1()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.VERTBAR:
                self.state = 304
                self.match(PostgreSQLParser.VERTBAR)
                self.state = 305
                self.factor1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_primaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.PredicateContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,i)


        def relational_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Relational_opContext,0)


        def ANY(self):
            return self.getToken(PostgreSQLParser.ANY, 0)

        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bool_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_primary" ):
                listener.enterBool_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_primary" ):
                listener.exitBool_primary(self)




    def bool_primary(self):

        localctx = PostgreSQLParser.Bool_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_bool_primary)
        self._la = 0 # Token type
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.predicate()
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (PostgreSQLParser.EQ - 236)) | (1 << (PostgreSQLParser.NOT_EQ - 236)) | (1 << (PostgreSQLParser.LET - 236)) | (1 << (PostgreSQLParser.GET - 236)) | (1 << (PostgreSQLParser.GTH - 236)) | (1 << (PostgreSQLParser.LTH - 236)))) != 0):
                    self.state = 309
                    self.relational_op()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ANY:
                        self.state = 310
                        self.match(PostgreSQLParser.ANY)


                    self.state = 313
                    self.predicate()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.NOT_SYM:
                    self.state = 317
                    self.match(PostgreSQLParser.NOT_SYM)


                self.state = 320
                self.match(PostgreSQLParser.EXISTS)
                self.state = 321
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_SYM(self):
            return self.getToken(PostgreSQLParser.CASE_SYM, 0)

        def END_SYM(self):
            return self.getToken(PostgreSQLParser.END_SYM, 0)

        def case_when_statement1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement1Context,0)


        def case_when_statement2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statement2Context,0)


        def ELSE_SYM(self):
            return self.getToken(PostgreSQLParser.ELSE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement" ):
                listener.enterCase_when_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement" ):
                listener.exitCase_when_statement(self)




    def case_when_statement(self):

        localctx = PostgreSQLParser.Case_when_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_case_when_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(PostgreSQLParser.CASE_SYM)
            self.state = 327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.WHEN_SYM]:
                self.state = 325
                self.case_when_statement1()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.ABS_VAL_OR_SCONTAINS, PostgreSQLParser.DFACTORIAL, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.state = 326
                self.case_when_statement2()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.ELSE_SYM:
                self.state = 329
                self.match(PostgreSQLParser.ELSE_SYM)
                self.state = 330
                self.bit_expr()


            self.state = 333
            self.match(PostgreSQLParser.END_SYM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement1" ):
                listener.enterCase_when_statement1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement1" ):
                listener.exitCase_when_statement1(self)




    def case_when_statement1(self):

        localctx = PostgreSQLParser.Case_when_statement1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_case_when_statement1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 335
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 336
                self.expression()
                self.state = 337
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 338
                self.bit_expr()
                self.state = 342 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Case_when_statement2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def WHEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.WHEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.WHEN_SYM, i)

        def THEN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.THEN_SYM)
            else:
                return self.getToken(PostgreSQLParser.THEN_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_case_when_statement2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_when_statement2" ):
                listener.enterCase_when_statement2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_when_statement2" ):
                listener.exitCase_when_statement2(self)




    def case_when_statement2(self):

        localctx = PostgreSQLParser.Case_when_statement2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_case_when_statement2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.bit_expr()
            self.state = 350 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 345
                self.match(PostgreSQLParser.WHEN_SYM)
                self.state = 346
                self.bit_expr()
                self.state = 347
                self.match(PostgreSQLParser.THEN_SYM)
                self.state = 348
                self.bit_expr()
                self.state = 352 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.WHEN_SYM):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = PostgreSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(PostgreSQLParser.LPAREN)
            self.state = 355
            self.column_spec()
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 356
                self.match(PostgreSQLParser.COMMA)
                self.state = 357
                self.column_spec()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = PostgreSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DOT)
            else:
                return self.getToken(PostgreSQLParser.DOT, i)

        def slice_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Slice_specContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = PostgreSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 367
                    self.schema_name()
                    self.state = 368
                    self.match(PostgreSQLParser.DOT)


                self.state = 372
                self.table_name()
                self.state = 373
                self.match(PostgreSQLParser.DOT)


            self.state = 377
            self.column_name()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.LBRACK:
                self.state = 378
                self.slice_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Displayed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_displayed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayed_column" ):
                listener.enterDisplayed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayed_column" ):
                listener.exitDisplayed_column(self)




    def displayed_column(self):

        localctx = PostgreSQLParser.Displayed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_displayed_column)
        self._la = 0 # Token type
        try:
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.table_spec()
                self.state = 382
                self.match(PostgreSQLParser.DOT)
                self.state = 383
                self.match(PostgreSQLParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 385
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 386
                    self.sbit_expr()
                    pass


                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LIKE_SYM:
                    self.state = 389
                    self.match(PostgreSQLParser.LIKE_SYM)
                    self.state = 390
                    self.match(PostgreSQLParser.TEXT_STRING)


                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 393
                    self.alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor2Context,i)


        def AND_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.AND_SYM)
            else:
                return self.getToken(PostgreSQLParser.AND_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor1" ):
                listener.enterExp_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor1" ):
                listener.exitExp_factor1(self)




    def exp_factor1(self):

        localctx = PostgreSQLParser.Exp_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_exp_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.exp_factor2()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.AND_SYM:
                self.state = 399
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 400
                self.exp_factor2()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Exp_factor3Context,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor2" ):
                listener.enterExp_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor2" ):
                listener.exitExp_factor2(self)




    def exp_factor2(self):

        localctx = PostgreSQLParser.Exp_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_exp_factor2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 406
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 409
            self.exp_factor3()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Exp_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_primary(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bool_primaryContext,0)


        def IS_SYM(self):
            return self.getToken(PostgreSQLParser.IS_SYM, 0)

        def ISNULL(self):
            return self.getToken(PostgreSQLParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(PostgreSQLParser.NOTNULL, 0)

        def boolean_literal(self):
            return self.getTypedRuleContext(PostgreSQLParser.Boolean_literalContext,0)


        def NULL_SYM(self):
            return self.getToken(PostgreSQLParser.NULL_SYM, 0)

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def FROM(self):
            return self.getToken(PostgreSQLParser.FROM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_exp_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExp_factor3" ):
                listener.enterExp_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExp_factor3" ):
                listener.exitExp_factor3(self)




    def exp_factor3(self):

        localctx = PostgreSQLParser.Exp_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exp_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.bool_primary()
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.IS_SYM:
                    self.state = 412
                    self.match(PostgreSQLParser.IS_SYM)
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NOT_SYM:
                        self.state = 413
                        self.match(PostgreSQLParser.NOT_SYM)


                    self.state = 420
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PostgreSQLParser.FALSE_SYM, PostgreSQLParser.TRUE_SYM]:
                        self.state = 416
                        self.boolean_literal()
                        pass
                    elif token in [PostgreSQLParser.NULL_SYM]:
                        self.state = 417
                        self.match(PostgreSQLParser.NULL_SYM)
                        pass
                    elif token in [PostgreSQLParser.DISTINCT]:
                        self.state = 418
                        self.match(PostgreSQLParser.DISTINCT)
                        self.state = 419
                        self.match(PostgreSQLParser.FROM)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ISNULL or _la==PostgreSQLParser.NOTNULL:
                    self.state = 424
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ISNULL or _la==PostgreSQLParser.NOTNULL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_factor1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Exp_factor1Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Exp_factor1Context,i)


        def OR_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OR_SYM)
            else:
                return self.getToken(PostgreSQLParser.OR_SYM, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PostgreSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.exp_factor1()
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.OR_SYM:
                self.state = 430
                self.match(PostgreSQLParser.OR_SYM)
                self.state = 431
                self.exp_factor1()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)




    def expression_list(self):

        localctx = PostgreSQLParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(PostgreSQLParser.LPAREN)
            self.state = 438
            self.expression()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 439
                self.match(PostgreSQLParser.COMMA)
                self.state = 440
                self.expression()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 446
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor2Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor2Context,i)


        def BITAND(self):
            return self.getToken(PostgreSQLParser.BITAND, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor1" ):
                listener.enterFactor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor1" ):
                listener.exitFactor1(self)




    def factor1(self):

        localctx = PostgreSQLParser.Factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.factor2()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.BITAND:
                self.state = 449
                self.match(PostgreSQLParser.BITAND)
                self.state = 450
                self.factor2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor3Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor3Context,i)


        def SHIFT_LEFT(self):
            return self.getToken(PostgreSQLParser.SHIFT_LEFT, 0)

        def SHIFT_RIGHT(self):
            return self.getToken(PostgreSQLParser.SHIFT_RIGHT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor2" ):
                listener.enterFactor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor2" ):
                listener.exitFactor2(self)




    def factor2(self):

        localctx = PostgreSQLParser.Factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.factor3()
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.SHIFT_LEFT or _la==PostgreSQLParser.SHIFT_RIGHT:
                self.state = 454
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.SHIFT_LEFT or _la==PostgreSQLParser.SHIFT_RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 455
                self.factor3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor4Context,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor3" ):
                listener.enterFactor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor3" ):
                listener.exitFactor3(self)




    def factor3(self):

        localctx = PostgreSQLParser.Factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.factor4()
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                self.state = 459
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 460
                self.factor4()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor5(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Factor5Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Factor5Context,i)


        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ASTERISK)
            else:
                return self.getToken(PostgreSQLParser.ASTERISK, i)

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.DIVIDE)
            else:
                return self.getToken(PostgreSQLParser.DIVIDE, i)

        def MOD_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MOD_SYM)
            else:
                return self.getToken(PostgreSQLParser.MOD_SYM, i)

        def POWER_OP(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.POWER_OP)
            else:
                return self.getToken(PostgreSQLParser.POWER_OP, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor4" ):
                listener.enterFactor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor4" ):
                listener.exitFactor4(self)




    def factor4(self):

        localctx = PostgreSQLParser.Factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.factor5()
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (PostgreSQLParser.DIVIDE - 230)) | (1 << (PostgreSQLParser.MOD_SYM - 230)) | (1 << (PostgreSQLParser.ASTERISK - 230)) | (1 << (PostgreSQLParser.POWER_OP - 230)))) != 0):
                self.state = 467
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (PostgreSQLParser.DIVIDE - 230)) | (1 << (PostgreSQLParser.MOD_SYM - 230)) | (1 << (PostgreSQLParser.ASTERISK - 230)) | (1 << (PostgreSQLParser.POWER_OP - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 468
                self.factor5()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factor5Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def BINARY(self):
            return self.getToken(PostgreSQLParser.BINARY, 0)

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def DFACTORIAL(self):
            return self.getToken(PostgreSQLParser.DFACTORIAL, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_factor5

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor5" ):
                listener.enterFactor5(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor5" ):
                listener.exitFactor5(self)




    def factor5(self):

        localctx = PostgreSQLParser.Factor5Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_factor5)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 474
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.BINARY or ((((_la - 234)) & ~0x3f) == 0 and ((1 << (_la - 234)) & ((1 << (PostgreSQLParser.ABS_VAL_OR_SCONTAINS - 234)) | (1 << (PostgreSQLParser.DFACTORIAL - 234)) | (1 << (PostgreSQLParser.PLUS - 234)) | (1 << (PostgreSQLParser.MINUS - 234)) | (1 << (PostgreSQLParser.NEGATION - 234)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 477
            self.simple_expr()
            self.state = 479
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 478
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 481
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 482
                self.interval_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(PostgreSQLParser.FunctionListContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def CAST_SYM(self):
            return self.getToken(PostgreSQLParser.CAST_SYM, 0)

        def AS_SYM(self):
            return self.getToken(PostgreSQLParser.AS_SYM, 0)

        def cast_data_type(self):
            return self.getTypedRuleContext(PostgreSQLParser.Cast_data_typeContext,0)


        def CONVERT_SYM(self):
            return self.getToken(PostgreSQLParser.CONVERT_SYM, 0)

        def TEXT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.TEXT_STRING)
            else:
                return self.getToken(PostgreSQLParser.TEXT_STRING, i)

        def POSITION_SYM(self):
            return self.getToken(PostgreSQLParser.POSITION_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def group_functions(self):
            return self.getTypedRuleContext(PostgreSQLParser.Group_functionsContext,0)


        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def ALL(self):
            return self.getToken(PostgreSQLParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(PostgreSQLParser.DISTINCT, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = PostgreSQLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 535
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.functionList()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 486
                    self.match(PostgreSQLParser.LPAREN)
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHR) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURTIME) | (1 << PostgreSQLParser.DATE_ADD) | (1 << PostgreSQLParser.DATE_FORMAT) | (1 << PostgreSQLParser.DATE_PART) | (1 << PostgreSQLParser.DATE_SYM) | (1 << PostgreSQLParser.DAYNAME) | (1 << PostgreSQLParser.DAYOFMONTH) | (1 << PostgreSQLParser.DAYOFWEEK) | (1 << PostgreSQLParser.DAYOFYEAR) | (1 << PostgreSQLParser.DEGREES) | (1 << PostgreSQLParser.DIV) | (1 << PostgreSQLParser.ENCODE) | (1 << PostgreSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GREATEST - 64)) | (1 << (PostgreSQLParser.HOUR - 64)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 64)) | (1 << (PostgreSQLParser.LAST_DAY - 64)) | (1 << (PostgreSQLParser.LEFT - 64)) | (1 << (PostgreSQLParser.LENGTH - 64)) | (1 << (PostgreSQLParser.LN - 64)) | (1 << (PostgreSQLParser.LOG - 64)) | (1 << (PostgreSQLParser.LOWER - 64)) | (1 << (PostgreSQLParser.LPAD - 64)) | (1 << (PostgreSQLParser.LTRIM - 64)) | (1 << (PostgreSQLParser.MAKEDATE - 64)) | (1 << (PostgreSQLParser.MAKETIME - 64)) | (1 << (PostgreSQLParser.MAX_SYM - 64)) | (1 << (PostgreSQLParser.MD5 - 64)) | (1 << (PostgreSQLParser.MICROSECOND - 64)) | (1 << (PostgreSQLParser.MINUTE - 64)) | (1 << (PostgreSQLParser.MIN_SYM - 64)) | (1 << (PostgreSQLParser.MOD - 64)) | (1 << (PostgreSQLParser.MONTH - 64)) | (1 << (PostgreSQLParser.MONTHNAME - 64)) | (1 << (PostgreSQLParser.NOT_SYM - 64)) | (1 << (PostgreSQLParser.NOW - 64)) | (1 << (PostgreSQLParser.NULL_SYM - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (PostgreSQLParser.PERIOD_ADD - 135)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 135)) | (1 << (PostgreSQLParser.PI - 135)) | (1 << (PostgreSQLParser.POSITION_SYM - 135)) | (1 << (PostgreSQLParser.POW - 135)) | (1 << (PostgreSQLParser.POWER - 135)) | (1 << (PostgreSQLParser.QUARTER - 135)) | (1 << (PostgreSQLParser.RADIANS - 135)) | (1 << (PostgreSQLParser.RANDOM - 135)) | (1 << (PostgreSQLParser.REPEAT - 135)) | (1 << (PostgreSQLParser.REPLACE - 135)) | (1 << (PostgreSQLParser.REVERSE - 135)) | (1 << (PostgreSQLParser.RIGHT - 135)) | (1 << (PostgreSQLParser.ROUND - 135)) | (1 << (PostgreSQLParser.ROW_SYM - 135)) | (1 << (PostgreSQLParser.RPAD - 135)) | (1 << (PostgreSQLParser.RTRIM - 135)) | (1 << (PostgreSQLParser.SECOND - 135)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 135)) | (1 << (PostgreSQLParser.SIGN - 135)) | (1 << (PostgreSQLParser.SIN - 135)) | (1 << (PostgreSQLParser.SQRT - 135)) | (1 << (PostgreSQLParser.STDDEV - 135)) | (1 << (PostgreSQLParser.STDDEV_POP - 135)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 135)) | (1 << (PostgreSQLParser.STR_TO_DATE - 135)) | (1 << (PostgreSQLParser.SUBSTRING - 135)) | (1 << (PostgreSQLParser.SUBTIME - 135)) | (1 << (PostgreSQLParser.SUM - 135)) | (1 << (PostgreSQLParser.SYSDATE - 135)) | (1 << (PostgreSQLParser.TAN - 135)) | (1 << (PostgreSQLParser.TIMEDIFF - 135)) | (1 << (PostgreSQLParser.TIMESTAMP - 135)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 135)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 135)) | (1 << (PostgreSQLParser.TIME_FORMAT - 135)) | (1 << (PostgreSQLParser.TIME_SYM - 135)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 135)) | (1 << (PostgreSQLParser.TO_DAYS - 135)) | (1 << (PostgreSQLParser.TO_SECONDS - 135)) | (1 << (PostgreSQLParser.TRIM - 135)) | (1 << (PostgreSQLParser.TRUE_SYM - 135)) | (1 << (PostgreSQLParser.TRUNCATE - 135)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 135)) | (1 << (PostgreSQLParser.UPPER - 135)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PostgreSQLParser.UTC_DATE - 200)) | (1 << (PostgreSQLParser.UTC_TIME - 200)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 200)) | (1 << (PostgreSQLParser.VALUES - 200)) | (1 << (PostgreSQLParser.VARIANCE - 200)) | (1 << (PostgreSQLParser.VAR_POP - 200)) | (1 << (PostgreSQLParser.VAR_SAMP - 200)) | (1 << (PostgreSQLParser.WEEK - 200)) | (1 << (PostgreSQLParser.WEEKDAY - 200)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 200)) | (1 << (PostgreSQLParser.YEAR - 200)) | (1 << (PostgreSQLParser.YEARWEEK - 200)) | (1 << (PostgreSQLParser.ASCII_SYM - 200)) | (1 << (PostgreSQLParser.SPOINT - 200)) | (1 << (PostgreSQLParser.SCIRCLE - 200)) | (1 << (PostgreSQLParser.SLINE - 200)) | (1 << (PostgreSQLParser.SELLIPSE - 200)) | (1 << (PostgreSQLParser.SPOLY - 200)) | (1 << (PostgreSQLParser.SPATH - 200)) | (1 << (PostgreSQLParser.SBOX - 200)) | (1 << (PostgreSQLParser.STRANS - 200)) | (1 << (PostgreSQLParser.AREA - 200)) | (1 << (PostgreSQLParser.ARRAY_LENGTH - 200)) | (1 << (PostgreSQLParser.ABS_VAL_OR_SCONTAINS - 200)) | (1 << (PostgreSQLParser.DFACTORIAL - 200)) | (1 << (PostgreSQLParser.LPAREN - 200)) | (1 << (PostgreSQLParser.PLUS - 200)) | (1 << (PostgreSQLParser.MINUS - 200)) | (1 << (PostgreSQLParser.NEGATION - 200)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (PostgreSQLParser.SLENGTH - 268)) | (1 << (PostgreSQLParser.SCENTER - 268)) | (1 << (PostgreSQLParser.INTEGER_NUM - 268)) | (1 << (PostgreSQLParser.HEX_DIGIT - 268)) | (1 << (PostgreSQLParser.BIT_NUM - 268)) | (1 << (PostgreSQLParser.REAL_NUMBER - 268)) | (1 << (PostgreSQLParser.TEXT_STRING - 268)) | (1 << (PostgreSQLParser.ID - 268)))) != 0):
                        self.state = 487
                        self.expression()
                        self.state = 492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==PostgreSQLParser.COMMA:
                            self.state = 488
                            self.match(PostgreSQLParser.COMMA)
                            self.state = 489
                            self.expression()
                            self.state = 494
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 497
                    self.match(PostgreSQLParser.RPAREN)


                pass
            elif token in [PostgreSQLParser.CAST_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.match(PostgreSQLParser.CAST_SYM)
                self.state = 501
                self.match(PostgreSQLParser.LPAREN)
                self.state = 502
                self.expression()
                self.state = 503
                self.match(PostgreSQLParser.AS_SYM)
                self.state = 504
                self.cast_data_type()
                self.state = 505
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.CONVERT_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(PostgreSQLParser.CONVERT_SYM)
                self.state = 508
                self.match(PostgreSQLParser.LPAREN)
                self.state = 509
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 510
                self.match(PostgreSQLParser.COMMA)
                self.state = 511
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 512
                self.match(PostgreSQLParser.COMMA)
                self.state = 513
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 514
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.POSITION_SYM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 515
                self.match(PostgreSQLParser.POSITION_SYM)
                self.state = 516
                self.match(PostgreSQLParser.LPAREN)
                self.state = 517
                self.expression()
                self.state = 518
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 519
                self.expression()
                self.state = 520
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.COUNT, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MIN_SYM, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.SUM, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 522
                self.group_functions()
                self.state = 523
                self.match(PostgreSQLParser.LPAREN)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK:
                    self.state = 524
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.ALL or _la==PostgreSQLParser.DISTINCT or _la==PostgreSQLParser.ASTERISK):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PostgreSQLParser.ABS) | (1 << PostgreSQLParser.ACOS) | (1 << PostgreSQLParser.ASIN) | (1 << PostgreSQLParser.ATAN) | (1 << PostgreSQLParser.ATAN2) | (1 << PostgreSQLParser.AVG) | (1 << PostgreSQLParser.BINARY) | (1 << PostgreSQLParser.BIT_AND) | (1 << PostgreSQLParser.BIT_COUNT) | (1 << PostgreSQLParser.BIT_LENGTH) | (1 << PostgreSQLParser.BIT_OR) | (1 << PostgreSQLParser.BIT_XOR) | (1 << PostgreSQLParser.CASE_SYM) | (1 << PostgreSQLParser.CAST_SYM) | (1 << PostgreSQLParser.CBRT) | (1 << PostgreSQLParser.CEIL) | (1 << PostgreSQLParser.CEILING) | (1 << PostgreSQLParser.CHR) | (1 << PostgreSQLParser.CHAR_LENGTH) | (1 << PostgreSQLParser.CONCAT) | (1 << PostgreSQLParser.CONCAT_WS) | (1 << PostgreSQLParser.CONVERT_SYM) | (1 << PostgreSQLParser.CONVERT_TZ) | (1 << PostgreSQLParser.COS) | (1 << PostgreSQLParser.COT) | (1 << PostgreSQLParser.COUNT) | (1 << PostgreSQLParser.CURDATE) | (1 << PostgreSQLParser.CURTIME) | (1 << PostgreSQLParser.DATE_ADD) | (1 << PostgreSQLParser.DATE_FORMAT) | (1 << PostgreSQLParser.DATE_PART) | (1 << PostgreSQLParser.DATE_SYM) | (1 << PostgreSQLParser.DAYNAME) | (1 << PostgreSQLParser.DAYOFMONTH) | (1 << PostgreSQLParser.DAYOFWEEK) | (1 << PostgreSQLParser.DAYOFYEAR) | (1 << PostgreSQLParser.DEGREES) | (1 << PostgreSQLParser.DIV) | (1 << PostgreSQLParser.ENCODE) | (1 << PostgreSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PostgreSQLParser.EXP - 64)) | (1 << (PostgreSQLParser.EXTRACT - 64)) | (1 << (PostgreSQLParser.FALSE_SYM - 64)) | (1 << (PostgreSQLParser.FLOOR - 64)) | (1 << (PostgreSQLParser.FROM_DAYS - 64)) | (1 << (PostgreSQLParser.FROM_UNIXTIME - 64)) | (1 << (PostgreSQLParser.GET_FORMAT - 64)) | (1 << (PostgreSQLParser.GREATEST - 64)) | (1 << (PostgreSQLParser.HOUR - 64)) | (1 << (PostgreSQLParser.INTERVAL_SYM - 64)) | (1 << (PostgreSQLParser.LAST_DAY - 64)) | (1 << (PostgreSQLParser.LEFT - 64)) | (1 << (PostgreSQLParser.LENGTH - 64)) | (1 << (PostgreSQLParser.LN - 64)) | (1 << (PostgreSQLParser.LOG - 64)) | (1 << (PostgreSQLParser.LOWER - 64)) | (1 << (PostgreSQLParser.LPAD - 64)) | (1 << (PostgreSQLParser.LTRIM - 64)) | (1 << (PostgreSQLParser.MAKEDATE - 64)) | (1 << (PostgreSQLParser.MAKETIME - 64)) | (1 << (PostgreSQLParser.MAX_SYM - 64)) | (1 << (PostgreSQLParser.MD5 - 64)) | (1 << (PostgreSQLParser.MICROSECOND - 64)) | (1 << (PostgreSQLParser.MINUTE - 64)) | (1 << (PostgreSQLParser.MIN_SYM - 64)) | (1 << (PostgreSQLParser.MOD - 64)) | (1 << (PostgreSQLParser.MONTH - 64)) | (1 << (PostgreSQLParser.MONTHNAME - 64)) | (1 << (PostgreSQLParser.NOW - 64)) | (1 << (PostgreSQLParser.NULL_SYM - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (PostgreSQLParser.PERIOD_ADD - 135)) | (1 << (PostgreSQLParser.PERIOD_DIFF - 135)) | (1 << (PostgreSQLParser.PI - 135)) | (1 << (PostgreSQLParser.POSITION_SYM - 135)) | (1 << (PostgreSQLParser.POW - 135)) | (1 << (PostgreSQLParser.POWER - 135)) | (1 << (PostgreSQLParser.QUARTER - 135)) | (1 << (PostgreSQLParser.RADIANS - 135)) | (1 << (PostgreSQLParser.RANDOM - 135)) | (1 << (PostgreSQLParser.REPEAT - 135)) | (1 << (PostgreSQLParser.REPLACE - 135)) | (1 << (PostgreSQLParser.REVERSE - 135)) | (1 << (PostgreSQLParser.RIGHT - 135)) | (1 << (PostgreSQLParser.ROUND - 135)) | (1 << (PostgreSQLParser.ROW_SYM - 135)) | (1 << (PostgreSQLParser.RPAD - 135)) | (1 << (PostgreSQLParser.RTRIM - 135)) | (1 << (PostgreSQLParser.SECOND - 135)) | (1 << (PostgreSQLParser.SEC_TO_TIME - 135)) | (1 << (PostgreSQLParser.SIGN - 135)) | (1 << (PostgreSQLParser.SIN - 135)) | (1 << (PostgreSQLParser.SQRT - 135)) | (1 << (PostgreSQLParser.STDDEV - 135)) | (1 << (PostgreSQLParser.STDDEV_POP - 135)) | (1 << (PostgreSQLParser.STDDEV_SAMP - 135)) | (1 << (PostgreSQLParser.STR_TO_DATE - 135)) | (1 << (PostgreSQLParser.SUBSTRING - 135)) | (1 << (PostgreSQLParser.SUBTIME - 135)) | (1 << (PostgreSQLParser.SUM - 135)) | (1 << (PostgreSQLParser.SYSDATE - 135)) | (1 << (PostgreSQLParser.TAN - 135)) | (1 << (PostgreSQLParser.TIMEDIFF - 135)) | (1 << (PostgreSQLParser.TIMESTAMP - 135)) | (1 << (PostgreSQLParser.TIMESTAMPADD - 135)) | (1 << (PostgreSQLParser.TIMESTAMPDIFF - 135)) | (1 << (PostgreSQLParser.TIME_FORMAT - 135)) | (1 << (PostgreSQLParser.TIME_SYM - 135)) | (1 << (PostgreSQLParser.TIME_TO_SEC - 135)) | (1 << (PostgreSQLParser.TO_DAYS - 135)) | (1 << (PostgreSQLParser.TO_SECONDS - 135)) | (1 << (PostgreSQLParser.TRIM - 135)) | (1 << (PostgreSQLParser.TRUE_SYM - 135)) | (1 << (PostgreSQLParser.TRUNCATE - 135)) | (1 << (PostgreSQLParser.UNIX_TIMESTAMP - 135)) | (1 << (PostgreSQLParser.UPPER - 135)))) != 0) or ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PostgreSQLParser.UTC_DATE - 200)) | (1 << (PostgreSQLParser.UTC_TIME - 200)) | (1 << (PostgreSQLParser.UTC_TIMESTAMP - 200)) | (1 << (PostgreSQLParser.VALUES - 200)) | (1 << (PostgreSQLParser.VARIANCE - 200)) | (1 << (PostgreSQLParser.VAR_POP - 200)) | (1 << (PostgreSQLParser.VAR_SAMP - 200)) | (1 << (PostgreSQLParser.WEEK - 200)) | (1 << (PostgreSQLParser.WEEKDAY - 200)) | (1 << (PostgreSQLParser.WEEKOFYEAR - 200)) | (1 << (PostgreSQLParser.YEAR - 200)) | (1 << (PostgreSQLParser.YEARWEEK - 200)) | (1 << (PostgreSQLParser.ASCII_SYM - 200)) | (1 << (PostgreSQLParser.SPOINT - 200)) | (1 << (PostgreSQLParser.SCIRCLE - 200)) | (1 << (PostgreSQLParser.SLINE - 200)) | (1 << (PostgreSQLParser.SELLIPSE - 200)) | (1 << (PostgreSQLParser.SPOLY - 200)) | (1 << (PostgreSQLParser.SPATH - 200)) | (1 << (PostgreSQLParser.SBOX - 200)) | (1 << (PostgreSQLParser.STRANS - 200)) | (1 << (PostgreSQLParser.AREA - 200)) | (1 << (PostgreSQLParser.ARRAY_LENGTH - 200)) | (1 << (PostgreSQLParser.ABS_VAL_OR_SCONTAINS - 200)) | (1 << (PostgreSQLParser.DFACTORIAL - 200)) | (1 << (PostgreSQLParser.LPAREN - 200)) | (1 << (PostgreSQLParser.PLUS - 200)) | (1 << (PostgreSQLParser.MINUS - 200)) | (1 << (PostgreSQLParser.NEGATION - 200)))) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & ((1 << (PostgreSQLParser.SLENGTH - 268)) | (1 << (PostgreSQLParser.SCENTER - 268)) | (1 << (PostgreSQLParser.INTEGER_NUM - 268)) | (1 << (PostgreSQLParser.HEX_DIGIT - 268)) | (1 << (PostgreSQLParser.BIT_NUM - 268)) | (1 << (PostgreSQLParser.REAL_NUMBER - 268)) | (1 << (PostgreSQLParser.TEXT_STRING - 268)) | (1 << (PostgreSQLParser.ID - 268)))) != 0):
                    self.state = 529
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        self.state = 527
                        self.bit_expr()
                        pass

                    elif la_ == 2:
                        self.state = 528
                        self.sbit_expr()
                        pass




                self.state = 533
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def groupby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Groupby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def WITH(self):
            return self.getToken(PostgreSQLParser.WITH, 0)

        def ROLLUP_SYM(self):
            return self.getToken(PostgreSQLParser.ROLLUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_clause" ):
                listener.enterGroupby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_clause" ):
                listener.exitGroupby_clause(self)




    def groupby_clause(self):

        localctx = PostgreSQLParser.Groupby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_groupby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(PostgreSQLParser.GROUP_SYM)
            self.state = 538
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 539
            self.groupby_item()
            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 540
                self.match(PostgreSQLParser.COMMA)
                self.state = 541
                self.groupby_item()
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.WITH:
                self.state = 547
                self.match(PostgreSQLParser.WITH)
                self.state = 548
                self.match(PostgreSQLParser.ROLLUP_SYM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Groupby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_groupby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupby_item" ):
                listener.enterGroupby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupby_item" ):
                listener.exitGroupby_item(self)




    def groupby_item(self):

        localctx = PostgreSQLParser.Groupby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_groupby_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 551
                self.column_spec()
                pass

            elif la_ == 2:
                self.state = 552
                self.match(PostgreSQLParser.INTEGER_NUM)
                pass

            elif la_ == 3:
                self.state = 553
                self.bit_expr()
                pass


            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 556
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Having_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(PostgreSQLParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = PostgreSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(PostgreSQLParser.HAVING)
            self.state = 560
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYM(self):
            return self.getToken(PostgreSQLParser.USE_SYM, 0)

        def index_options(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_optionsContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def index_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_listContext,0)


        def IGNORE_SYM(self):
            return self.getToken(PostgreSQLParser.IGNORE_SYM, 0)

        def FORCE_SYM(self):
            return self.getToken(PostgreSQLParser.FORCE_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint" ):
                listener.enterIndex_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint" ):
                listener.exitIndex_hint(self)




    def index_hint(self):

        localctx = PostgreSQLParser.Index_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_index_hint)
        self._la = 0 # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.USE_SYM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 562
                self.match(PostgreSQLParser.USE_SYM)
                self.state = 563
                self.index_options()
                self.state = 564
                self.match(PostgreSQLParser.LPAREN)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ID:
                    self.state = 565
                    self.index_list()


                self.state = 568
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.IGNORE_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(PostgreSQLParser.IGNORE_SYM)
                self.state = 571
                self.index_options()
                self.state = 572
                self.match(PostgreSQLParser.LPAREN)
                self.state = 573
                self.index_list()
                self.state = 574
                self.match(PostgreSQLParser.RPAREN)
                pass
            elif token in [PostgreSQLParser.FORCE_SYM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.match(PostgreSQLParser.FORCE_SYM)
                self.state = 577
                self.index_options()
                self.state = 578
                self.match(PostgreSQLParser.LPAREN)
                self.state = 579
                self.index_list()
                self.state = 580
                self.match(PostgreSQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_hint_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_hintContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_hintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_hint_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_hint_list" ):
                listener.enterIndex_hint_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_hint_list" ):
                listener.exitIndex_hint_list(self)




    def index_hint_list(self):

        localctx = PostgreSQLParser.Index_hint_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_index_hint_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.index_hint()
            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 585
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 586
                    self.index_hint() 
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = PostgreSQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Index_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Index_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_list" ):
                listener.enterIndex_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_list" ):
                listener.exitIndex_list(self)




    def index_list(self):

        localctx = PostgreSQLParser.Index_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.index_name()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 595
                self.match(PostgreSQLParser.COMMA)
                self.state = 596
                self.index_name()
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX_SYM(self):
            return self.getToken(PostgreSQLParser.INDEX_SYM, 0)

        def KEY_SYM(self):
            return self.getToken(PostgreSQLParser.KEY_SYM, 0)

        def FOR_SYM(self):
            return self.getToken(PostgreSQLParser.FOR_SYM, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def GROUP_SYM(self):
            return self.getToken(PostgreSQLParser.GROUP_SYM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)




    def index_options(self):

        localctx = PostgreSQLParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            _la = self._input.LA(1)
            if not(_la==PostgreSQLParser.INDEX_SYM or _la==PostgreSQLParser.KEY_SYM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.FOR_SYM:
                self.state = 603
                self.match(PostgreSQLParser.FOR_SYM)
                self.state = 609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.JOIN_SYM]:
                    self.state = 604
                    self.match(PostgreSQLParser.JOIN_SYM)
                    pass
                elif token in [PostgreSQLParser.ORDER_SYM]:
                    self.state = 605
                    self.match(PostgreSQLParser.ORDER_SYM)
                    self.state = 606
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                elif token in [PostgreSQLParser.GROUP_SYM]:
                    self.state = 607
                    self.match(PostgreSQLParser.GROUP_SYM)
                    self.state = 608
                    self.match(PostgreSQLParser.BY_SYM)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Interval_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_SYM(self):
            return self.getToken(PostgreSQLParser.INTERVAL_SYM, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def interval_unit(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_unitContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_interval_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr" ):
                listener.enterInterval_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr" ):
                listener.exitInterval_expr(self)




    def interval_expr(self):

        localctx = PostgreSQLParser.Interval_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interval_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(PostgreSQLParser.INTERVAL_SYM)
            self.state = 614
            self.expression()
            self.state = 615
            self.interval_unit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)




    def join_condition(self):

        localctx = PostgreSQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_join_condition)
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(PostgreSQLParser.ON)
                self.state = 618
                self.expression()
                pass
            elif token in [PostgreSQLParser.USING_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 620
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(PostgreSQLParser.LIMIT, 0)

        def row_count(self):
            return self.getTypedRuleContext(PostgreSQLParser.Row_countContext,0)


        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = PostgreSQLParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_limit_clause)
        try:
            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.LIMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 623
                self.match(PostgreSQLParser.LIMIT)
                self.state = 624
                self.row_count()
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 625
                    self.match(PostgreSQLParser.OFFSET_SYM)
                    self.state = 626
                    self.offset()


                pass
            elif token in [PostgreSQLParser.OFFSET_SYM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 629
                self.match(PostgreSQLParser.OFFSET_SYM)
                self.state = 630
                self.offset()
                self.state = 631
                self.match(PostgreSQLParser.LIMIT)
                self.state = 632
                self.row_count()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)




    def offset(self):

        localctx = PostgreSQLParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Offset_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET_SYM(self):
            return self.getToken(PostgreSQLParser.OFFSET_SYM, 0)

        def offset(self):
            return self.getTypedRuleContext(PostgreSQLParser.OffsetContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = PostgreSQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(PostgreSQLParser.OFFSET_SYM)
            self.state = 639
            self.offset()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_NUM(self):
            return self.getToken(PostgreSQLParser.INTEGER_NUM, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_row_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count" ):
                listener.enterRow_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count" ):
                listener.exitRow_count(self)




    def row_count(self):

        localctx = PostgreSQLParser.Row_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_row_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(PostgreSQLParser.INTEGER_NUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_SYM(self):
            return self.getToken(PostgreSQLParser.ORDER_SYM, 0)

        def BY_SYM(self):
            return self.getToken(PostgreSQLParser.BY_SYM, 0)

        def orderby_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Orderby_itemContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Orderby_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_clause" ):
                listener.enterOrderby_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_clause" ):
                listener.exitOrderby_clause(self)




    def orderby_clause(self):

        localctx = PostgreSQLParser.Orderby_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_orderby_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(PostgreSQLParser.ORDER_SYM)
            self.state = 644
            self.match(PostgreSQLParser.BY_SYM)
            self.state = 645
            self.orderby_item()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 646
                self.match(PostgreSQLParser.COMMA)
                self.state = 647
                self.orderby_item()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Orderby_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupby_item(self):
            return self.getTypedRuleContext(PostgreSQLParser.Groupby_itemContext,0)


        def NULLS_SYM(self):
            return self.getToken(PostgreSQLParser.NULLS_SYM, 0)

        def ASC(self):
            return self.getToken(PostgreSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PostgreSQLParser.DESC, 0)

        def FIRST_SYM(self):
            return self.getToken(PostgreSQLParser.FIRST_SYM, 0)

        def LAST_SYM(self):
            return self.getToken(PostgreSQLParser.LAST_SYM, 0)

        def USING_SYM(self):
            return self.getToken(PostgreSQLParser.USING_SYM, 0)

        def GTH(self):
            return self.getToken(PostgreSQLParser.GTH, 0)

        def LTH(self):
            return self.getToken(PostgreSQLParser.LTH, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_orderby_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderby_item" ):
                listener.enterOrderby_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderby_item" ):
                listener.exitOrderby_item(self)




    def orderby_item(self):

        localctx = PostgreSQLParser.Orderby_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_orderby_item)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.groupby_item()
                self.state = 661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC:
                        self.state = 654
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.ASC or _la==PostgreSQLParser.DESC):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 2:
                    self.state = 659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.NULLS_SYM:
                        self.state = 657
                        self.match(PostgreSQLParser.NULLS_SYM)
                        self.state = 658
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.FIRST_SYM or _la==PostgreSQLParser.LAST_SYM):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.groupby_item()
                self.state = 664
                self.match(PostgreSQLParser.USING_SYM)
                self.state = 665
                _la = self._input.LA(1)
                if not(_la==PostgreSQLParser.GTH or _la==PostgreSQLParser.LTH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_SYM(self):
            return self.getToken(PostgreSQLParser.PARTITION_SYM, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def partition_names(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_namesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_clause" ):
                listener.enterPartition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_clause" ):
                listener.exitPartition_clause(self)




    def partition_clause(self):

        localctx = PostgreSQLParser.Partition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(PostgreSQLParser.PARTITION_SYM)
            self.state = 670
            self.match(PostgreSQLParser.LPAREN)
            self.state = 671
            self.partition_names()
            self.state = 672
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)




    def partition_name(self):

        localctx = PostgreSQLParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Partition_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Partition_nameContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Partition_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_partition_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_names" ):
                listener.enterPartition_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_names" ):
                listener.exitPartition_names(self)




    def partition_names(self):

        localctx = PostgreSQLParser.Partition_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.partition_name()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 677
                self.match(PostgreSQLParser.COMMA)
                self.state = 678
                self.partition_name()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT_SYM(self):
            return self.getToken(PostgreSQLParser.NOT_SYM, 0)

        def IN_SYM(self):
            return self.getToken(PostgreSQLParser.IN_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def REGEXP(self):
            return self.getToken(PostgreSQLParser.REGEXP, 0)

        def BETWEEN(self):
            return self.getToken(PostgreSQLParser.BETWEEN, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def predicate(self):
            return self.getTypedRuleContext(PostgreSQLParser.PredicateContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def ESCAPE_SYM(self):
            return self.getToken(PostgreSQLParser.ESCAPE_SYM, 0)

        def SYMMETRIC(self):
            return self.getToken(PostgreSQLParser.SYMMETRIC, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac1" ):
                listener.enterBit_fac1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac1" ):
                listener.exitBit_fac1(self)




    def bit_fac1(self):

        localctx = PostgreSQLParser.Bit_fac1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_bit_fac1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NOT_SYM:
                self.state = 684
                self.match(PostgreSQLParser.NOT_SYM)


            self.state = 714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.IN_SYM]:
                self.state = 687
                self.match(PostgreSQLParser.IN_SYM)
                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 689
                    self.expression_list()
                    pass


                pass
            elif token in [PostgreSQLParser.LIKE_SYM]:
                self.state = 692
                self.match(PostgreSQLParser.LIKE_SYM)
                self.state = 693
                self.simple_expr()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ESCAPE_SYM:
                    self.state = 694
                    self.match(PostgreSQLParser.ESCAPE_SYM)
                    self.state = 695
                    self.simple_expr()


                pass
            elif token in [PostgreSQLParser.REGEXP]:
                self.state = 698
                self.match(PostgreSQLParser.REGEXP)
                self.state = 701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 700
                    self.sbit_expr()
                    pass


                pass
            elif token in [PostgreSQLParser.BETWEEN]:
                self.state = 703
                self.match(PostgreSQLParser.BETWEEN)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.SYMMETRIC:
                    self.state = 704
                    self.match(PostgreSQLParser.SYMMETRIC)


                self.state = 709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 707
                    self.bit_expr()
                    pass

                elif la_ == 2:
                    self.state = 708
                    self.sbit_expr()
                    pass


                self.state = 711
                self.match(PostgreSQLParser.AND_SYM)
                self.state = 712
                self.predicate()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bit_fac2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOUNDS_SYM(self):
            return self.getToken(PostgreSQLParser.SOUNDS_SYM, 0)

        def LIKE_SYM(self):
            return self.getToken(PostgreSQLParser.LIKE_SYM, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_bit_fac2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_fac2" ):
                listener.enterBit_fac2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_fac2" ):
                listener.exitBit_fac2(self)




    def bit_fac2(self):

        localctx = PostgreSQLParser.Bit_fac2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_bit_fac2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(PostgreSQLParser.SOUNDS_SYM)
            self.state = 717
            self.match(PostgreSQLParser.LIKE_SYM)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 718
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 719
                self.sbit_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def sbit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Sbit_exprContext,0)


        def bit_fac1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac1Context,0)


        def bit_fac2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_fac2Context,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = PostgreSQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 722
                self.bit_expr()
                pass

            elif la_ == 2:
                self.state = 723
                self.sbit_expr()
                pass


            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 726
                self.bit_fac1()

            elif la_ == 2:
                self.state = 727
                self.bit_fac2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def SEMI(self):
            return self.getToken(PostgreSQLParser.SEMI, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = PostgreSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.select_statement()
            self.state = 731
            self.match(PostgreSQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = PostgreSQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def displayed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Displayed_columnContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Displayed_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(PostgreSQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = PostgreSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BINARY, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.SPOINT, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.STRANS, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.ABS_VAL_OR_SCONTAINS, PostgreSQLParser.DFACTORIAL, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.NEGATION, PostgreSQLParser.SLENGTH, PostgreSQLParser.SCENTER, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.displayed_column()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PostgreSQLParser.COMMA:
                    self.state = 736
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 737
                    self.displayed_column()
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [PostgreSQLParser.ASTERISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.match(PostgreSQLParser.ASTERISK)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COMMA:
                    self.state = 744
                    self.match(PostgreSQLParser.COMMA)
                    self.state = 745
                    self.displayed_column()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PostgreSQLParser.COMMA:
                        self.state = 746
                        self.match(PostgreSQLParser.COMMA)
                        self.state = 747
                        self.displayed_column()
                        self.state = 752
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Select_expressionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Select_expressionContext,i)


        def UNION_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.UNION_SYM)
            else:
                return self.getToken(PostgreSQLParser.UNION_SYM, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.ALL)
            else:
                return self.getToken(PostgreSQLParser.ALL, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = PostgreSQLParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.select_expression()
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.UNION_SYM:
                self.state = 758
                self.match(PostgreSQLParser.UNION_SYM)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.ALL:
                    self.state = 759
                    self.match(PostgreSQLParser.ALL)


                self.state = 762
                self.select_expression()
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(PostgreSQLParser.Literal_valueContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,0)


        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def function_call(self):
            return self.getTypedRuleContext(PostgreSQLParser.Function_callContext,0)


        def ROW_SYM(self):
            return self.getToken(PostgreSQLParser.ROW_SYM, 0)

        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def EXISTS(self):
            return self.getToken(PostgreSQLParser.EXISTS, 0)

        def interval_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Interval_exprContext,0)


        def case_when_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Case_when_statementContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_simple_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expr" ):
                listener.enterSimple_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expr" ):
                listener.exitSimple_expr(self)




    def simple_expr(self):

        localctx = PostgreSQLParser.Simple_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simple_expr)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.literal_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 769
                self.expression_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 770
                self.column_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 771
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 772
                self.match(PostgreSQLParser.ROW_SYM)
                self.state = 773
                self.expression_list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 774
                self.subquery()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 775
                self.match(PostgreSQLParser.EXISTS)
                self.state = 776
                self.subquery()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 777
                self.interval_expr()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 778
                self.case_when_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Slice_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LBRACK)
            else:
                return self.getToken(PostgreSQLParser.LBRACK, i)

        def INTEGER_NUM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INTEGER_NUM)
            else:
                return self.getToken(PostgreSQLParser.INTEGER_NUM, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RBRACK)
            else:
                return self.getToken(PostgreSQLParser.RBRACK, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COLON)
            else:
                return self.getToken(PostgreSQLParser.COLON, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_slice_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_spec" ):
                listener.enterSlice_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_spec" ):
                listener.exitSlice_spec(self)




    def slice_spec(self):

        localctx = PostgreSQLParser.Slice_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_slice_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 781
                self.match(PostgreSQLParser.LBRACK)
                self.state = 782
                self.match(PostgreSQLParser.INTEGER_NUM)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.COLON:
                    self.state = 783
                    self.match(PostgreSQLParser.COLON)
                    self.state = 784
                    self.match(PostgreSQLParser.INTEGER_NUM)


                self.state = 787
                self.match(PostgreSQLParser.RBRACK)
                self.state = 790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PostgreSQLParser.LBRACK):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(PostgreSQLParser.Select_statementContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = PostgreSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(PostgreSQLParser.LPAREN)
            self.state = 793
            self.select_statement()
            self.state = 794
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_atomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_specContext,0)


        def partition_clause(self):
            return self.getTypedRuleContext(PostgreSQLParser.Partition_clauseContext,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def index_hint_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Index_hint_listContext,0)


        def subquery(self):
            return self.getTypedRuleContext(PostgreSQLParser.SubqueryContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def table_references(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_referencesContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def OJ_SYM(self):
            return self.getToken(PostgreSQLParser.OJ_SYM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_atom" ):
                listener.enterTable_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_atom" ):
                listener.exitTable_atom(self)




    def table_atom(self):

        localctx = PostgreSQLParser.Table_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_table_atom)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.table_spec()
                self.state = 798
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 797
                    self.partition_clause()


                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.AS_SYM or _la==PostgreSQLParser.ID:
                    self.state = 800
                    self.alias()


                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.FORCE_SYM or _la==PostgreSQLParser.IGNORE_SYM or _la==PostgreSQLParser.USE_SYM:
                    self.state = 803
                    self.index_hint_list()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.subquery()
                self.state = 807
                self.alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.match(PostgreSQLParser.LPAREN)
                self.state = 810
                self.table_references()
                self.state = 811
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 813
                self.match(PostgreSQLParser.OJ_SYM)
                self.state = 814
                self.table_reference()
                self.state = 815
                self.match(PostgreSQLParser.LEFT)
                self.state = 816
                self.match(PostgreSQLParser.OUTER)
                self.state = 817
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 818
                self.table_reference()
                self.state = 819
                self.match(PostgreSQLParser.ON)
                self.state = 820
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PostgreSQLParser.ID, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = PostgreSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(PostgreSQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor2(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor2Context,0)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def INNER_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.INNER_SYM)
            else:
                return self.getToken(PostgreSQLParser.INNER_SYM, i)

        def CROSS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.CROSS)
            else:
                return self.getToken(PostgreSQLParser.CROSS, i)

        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor1" ):
                listener.enterTable_factor1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor1" ):
                listener.exitTable_factor1(self)




    def table_factor1(self):

        localctx = PostgreSQLParser.Table_factor1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_factor1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.table_factor2()
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.CROSS or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (PostgreSQLParser.INNER_SYM - 88)) | (1 << (PostgreSQLParser.LEFT - 88)) | (1 << (PostgreSQLParser.RIGHT - 88)))) != 0):
                        self.state = 827
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.CROSS or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (PostgreSQLParser.INNER_SYM - 88)) | (1 << (PostgreSQLParser.LEFT - 88)) | (1 << (PostgreSQLParser.RIGHT - 88)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 830
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 831
                    self.table_atom()
                    self.state = 833
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        self.state = 832
                        self.join_condition()

             
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor3(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor3Context,0)


        def STRAIGHT_JOIN(self):
            return self.getToken(PostgreSQLParser.STRAIGHT_JOIN, 0)

        def table_atom(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,0)


        def ON(self):
            return self.getToken(PostgreSQLParser.ON, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor2" ):
                listener.enterTable_factor2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor2" ):
                listener.exitTable_factor2(self)




    def table_factor2(self):

        localctx = PostgreSQLParser.Table_factor2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_factor2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.table_factor3()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.STRAIGHT_JOIN:
                self.state = 841
                self.match(PostgreSQLParser.STRAIGHT_JOIN)
                self.state = 842
                self.table_atom()
                self.state = 845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.match(PostgreSQLParser.ON)
                    self.state = 844
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor3Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor4(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_factor4Context)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_factor4Context,i)


        def JOIN_SYM(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.JOIN_SYM)
            else:
                return self.getToken(PostgreSQLParser.JOIN_SYM, i)

        def join_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Join_conditionContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Join_conditionContext,i)


        def LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.LEFT)
            else:
                return self.getToken(PostgreSQLParser.LEFT, i)

        def RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.RIGHT)
            else:
                return self.getToken(PostgreSQLParser.RIGHT, i)

        def OUTER(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.OUTER)
            else:
                return self.getToken(PostgreSQLParser.OUTER, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor3" ):
                listener.enterTable_factor3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor3" ):
                listener.exitTable_factor3(self)




    def table_factor3(self):

        localctx = PostgreSQLParser.Table_factor3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_factor3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.table_factor4()
            self.state = 860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 850
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 852
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 851
                        self.match(PostgreSQLParser.OUTER)


                    self.state = 854
                    self.match(PostgreSQLParser.JOIN_SYM)
                    self.state = 855
                    self.table_factor4()
                    self.state = 856
                    self.join_condition() 
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_factor4Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_atom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_atomContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_atomContext,i)


        def NATURAL(self):
            return self.getToken(PostgreSQLParser.NATURAL, 0)

        def JOIN_SYM(self):
            return self.getToken(PostgreSQLParser.JOIN_SYM, 0)

        def LEFT(self):
            return self.getToken(PostgreSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(PostgreSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(PostgreSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_factor4

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_factor4" ):
                listener.enterTable_factor4(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_factor4" ):
                listener.exitTable_factor4(self)




    def table_factor4(self):

        localctx = PostgreSQLParser.Table_factor4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_factor4)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.table_atom()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PostgreSQLParser.NATURAL:
                self.state = 864
                self.match(PostgreSQLParser.NATURAL)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT:
                    self.state = 865
                    _la = self._input.LA(1)
                    if not(_la==PostgreSQLParser.LEFT or _la==PostgreSQLParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.OUTER:
                        self.state = 866
                        self.match(PostgreSQLParser.OUTER)




                self.state = 871
                self.match(PostgreSQLParser.JOIN_SYM)
                self.state = 872
                self.table_atom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_factor1(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_factor1Context,0)


        def alias(self):
            return self.getTypedRuleContext(PostgreSQLParser.AliasContext,0)


        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def values_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Values_listContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def column_list(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = PostgreSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.table_factor1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(PostgreSQLParser.LPAREN)
                self.state = 877
                self.values_list()
                self.state = 878
                self.match(PostgreSQLParser.RPAREN)
                self.state = 880
                self.alias()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PostgreSQLParser.LPAREN:
                    self.state = 881
                    self.column_list()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_referencesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_references" ):
                listener.enterTable_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_references" ):
                listener.exitTable_references(self)




    def table_references(self):

        localctx = PostgreSQLParser.Table_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.table_reference()
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 887
                self.match(PostgreSQLParser.COMMA)
                self.state = 888
                self.table_reference()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(PostgreSQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(PostgreSQLParser.DOT, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = PostgreSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_table_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 894
                self.schema_name()
                self.state = 895
                self.match(PostgreSQLParser.DOT)


            self.state = 899
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Values_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(PostgreSQLParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Expression_listContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = PostgreSQLParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(PostgreSQLParser.VALUES)

            self.state = 902
            self.expression_list()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PostgreSQLParser.COMMA:
                self.state = 903
                self.match(PostgreSQLParser.COMMA)
                self.state = 904
                self.expression_list()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(PostgreSQLParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(PostgreSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = PostgreSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(PostgreSQLParser.WHERE)
            self.state = 911
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS_VAL_OR_SCONTAINS(self):
            return self.getToken(PostgreSQLParser.ABS_VAL_OR_SCONTAINS, 0)

        def SCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SCONTAINS2, 0)

        def NEGATION(self):
            return self.getToken(PostgreSQLParser.NEGATION, 0)

        def SLEFTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTCONTAINS2, 0)

        def SNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS, 0)

        def SNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SNOTCONTAINS2, 0)

        def SLEFTNOTCONTAINS(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS, 0)

        def SLEFTNOTCONTAINS2(self):
            return self.getToken(PostgreSQLParser.SLEFTNOTCONTAINS2, 0)

        def AND_SYM(self):
            return self.getToken(PostgreSQLParser.AND_SYM, 0)

        def SNOTOVERLAP(self):
            return self.getToken(PostgreSQLParser.SNOTOVERLAP, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_op" ):
                listener.enterPg_sphere_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_op" ):
                listener.exitPg_sphere_op(self)




    def pg_sphere_op(self):

        localctx = PostgreSQLParser.Pg_sphere_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pg_sphere_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            _la = self._input.LA(1)
            if not(((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & ((1 << (PostgreSQLParser.AND_SYM - 233)) | (1 << (PostgreSQLParser.ABS_VAL_OR_SCONTAINS - 233)) | (1 << (PostgreSQLParser.NEGATION - 233)) | (1 << (PostgreSQLParser.SCONTAINS2 - 233)) | (1 << (PostgreSQLParser.SLEFTCONTAINS2 - 233)) | (1 << (PostgreSQLParser.SNOTCONTAINS - 233)) | (1 << (PostgreSQLParser.SNOTCONTAINS2 - 233)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS - 233)) | (1 << (PostgreSQLParser.SLEFTNOTCONTAINS2 - 233)) | (1 << (PostgreSQLParser.SNOTOVERLAP - 233)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sbit_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pg_sphere_object(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Pg_sphere_objectContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_objectContext,i)


        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def pg_sphere_op(self):
            return self.getTypedRuleContext(PostgreSQLParser.Pg_sphere_opContext,0)


        def simple_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Simple_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,i)


        def EQ(self):
            return self.getToken(PostgreSQLParser.EQ, 0)

        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def SCROSS(self):
            return self.getToken(PostgreSQLParser.SCROSS, 0)

        def SDISTANCE(self):
            return self.getToken(PostgreSQLParser.SDISTANCE, 0)

        def scircle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.ScircleContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,i)


        def SLENGTH(self):
            return self.getToken(PostgreSQLParser.SLENGTH, 0)

        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def SCENTER(self):
            return self.getToken(PostgreSQLParser.SCENTER, 0)

        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.MINUS)
            else:
                return self.getToken(PostgreSQLParser.MINUS, i)

        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def strans(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.StransContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.StransContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.PLUS)
            else:
                return self.getToken(PostgreSQLParser.PLUS, i)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbit_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbit_expr" ):
                listener.enterSbit_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbit_expr" ):
                listener.exitSbit_expr(self)




    def sbit_expr(self):

        localctx = PostgreSQLParser.Sbit_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_sbit_expr)
        self._la = 0 # Token type
        try:
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.SCIRCLE, PostgreSQLParser.SLINE, PostgreSQLParser.SELLIPSE, PostgreSQLParser.SPOLY, PostgreSQLParser.SPATH, PostgreSQLParser.SBOX, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 915
                    self.pg_sphere_object()
                    pass
                elif token in [PostgreSQLParser.SPOINT]:
                    self.state = 916
                    self.spoint()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 919
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 920
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 923
                self.pg_sphere_op()
                self.state = 924
                self.pg_sphere_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.pg_sphere_object()
                self.state = 927
                self.match(PostgreSQLParser.EQ)
                self.state = 928
                self.pg_sphere_object()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 930
                self.pg_sphere_object()
                self.state = 931
                self.pg_sphere_op()
                self.state = 932
                self.pg_sphere_object()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.sline()
                    pass

                elif la_ == 2:
                    self.state = 935
                    self.simple_expr()
                    self.state = 936
                    self.match(PostgreSQLParser.SCROSS)
                    self.state = 937
                    self.sline()
                    pass

                elif la_ == 3:
                    self.state = 939
                    self.simple_expr()
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 945
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 942
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 943
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 944
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 947
                self.match(PostgreSQLParser.SDISTANCE)
                self.state = 951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SPOINT]:
                    self.state = 948
                    self.spoint()
                    pass
                elif token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 949
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 950
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 953
                self.match(PostgreSQLParser.SLENGTH)
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 954
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SBOX]:
                    self.state = 955
                    self.sbox()
                    pass
                elif token in [PostgreSQLParser.SPOLY]:
                    self.state = 956
                    self.spoly()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 957
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 960
                self.match(PostgreSQLParser.SCENTER)
                self.state = 964
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SCIRCLE]:
                    self.state = 961
                    self.scircle()
                    pass
                elif token in [PostgreSQLParser.SELLIPSE]:
                    self.state = 962
                    self.sellipse()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 963
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 966
                self.match(PostgreSQLParser.MINUS)
                self.state = 970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PostgreSQLParser.SLINE]:
                    self.state = 967
                    self.sline()
                    pass
                elif token in [PostgreSQLParser.SPATH]:
                    self.state = 968
                    self.spath()
                    pass
                elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                    self.state = 969
                    self.simple_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 972
                    self.spoint()

                elif la_ == 2:
                    self.state = 973
                    self.scircle()

                elif la_ == 3:
                    self.state = 974
                    self.sline()

                elif la_ == 4:
                    self.state = 975
                    self.sellipse()

                elif la_ == 5:
                    self.state = 976
                    self.spoly()

                elif la_ == 6:
                    self.state = 977
                    self.spath()

                elif la_ == 7:
                    self.state = 978
                    self.simple_expr()


                self.state = 985 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS:
                        self.state = 981
                        _la = self._input.LA(1)
                        if not(_la==PostgreSQLParser.PLUS or _la==PostgreSQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 984
                    self.strans()
                    self.state = 987 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 227)) & ~0x3f) == 0 and ((1 << (_la - 227)) & ((1 << (PostgreSQLParser.STRANS - 227)) | (1 << (PostgreSQLParser.PLUS - 227)) | (1 << (PostgreSQLParser.MINUS - 227)))) != 0)):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpointContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOINT(self):
            return self.getToken(PostgreSQLParser.SPOINT, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoint" ):
                listener.enterSpoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoint" ):
                listener.exitSpoint(self)




    def spoint(self):

        localctx = PostgreSQLParser.SpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_spoint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(PostgreSQLParser.SPOINT)
            self.state = 992
            self.match(PostgreSQLParser.LPAREN)
            self.state = 993
            self.bit_expr()
            self.state = 994
            self.match(PostgreSQLParser.COMMA)
            self.state = 995
            self.bit_expr()
            self.state = 996
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScircleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCIRCLE(self):
            return self.getToken(PostgreSQLParser.SCIRCLE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_scircle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScircle" ):
                listener.enterScircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScircle" ):
                listener.exitScircle(self)




    def scircle(self):

        localctx = PostgreSQLParser.ScircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_scircle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(PostgreSQLParser.SCIRCLE)
            self.state = 999
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1000
            self.spoint()
            self.state = 1001
            self.match(PostgreSQLParser.COMMA)
            self.state = 1002
            self.bit_expr()
            self.state = 1003
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLINE(self):
            return self.getToken(PostgreSQLParser.SLINE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def strans(self):
            return self.getTypedRuleContext(PostgreSQLParser.StransContext,0)


        def bit_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSline" ):
                listener.enterSline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSline" ):
                listener.exitSline(self)




    def sline(self):

        localctx = PostgreSQLParser.SlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_sline)
        try:
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.match(PostgreSQLParser.SLINE)
                self.state = 1006
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1007
                self.spoint()
                self.state = 1008
                self.match(PostgreSQLParser.COMMA)
                self.state = 1009
                self.spoint()
                self.state = 1010
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.match(PostgreSQLParser.SLINE)
                self.state = 1013
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1014
                self.strans()
                self.state = 1015
                self.match(PostgreSQLParser.COMMA)
                self.state = 1016
                self.bit_expr()
                self.state = 1017
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SellipseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELLIPSE(self):
            return self.getToken(PostgreSQLParser.SELLIPSE, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpointContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sellipse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSellipse" ):
                listener.enterSellipse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSellipse" ):
                listener.exitSellipse(self)




    def sellipse(self):

        localctx = PostgreSQLParser.SellipseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_sellipse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(PostgreSQLParser.SELLIPSE)
            self.state = 1022
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1023
            self.spoint()
            self.state = 1024
            self.match(PostgreSQLParser.COMMA)
            self.state = 1025
            self.bit_expr()
            self.state = 1026
            self.match(PostgreSQLParser.COMMA)
            self.state = 1027
            self.bit_expr()
            self.state = 1028
            self.match(PostgreSQLParser.COMMA)
            self.state = 1029
            self.bit_expr()
            self.state = 1030
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SboxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SBOX(self):
            return self.getToken(PostgreSQLParser.SBOX, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def spoint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.SpointContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.SpointContext,i)


        def COMMA(self):
            return self.getToken(PostgreSQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_sbox

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSbox" ):
                listener.enterSbox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSbox" ):
                listener.exitSbox(self)




    def sbox(self):

        localctx = PostgreSQLParser.SboxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sbox)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(PostgreSQLParser.SBOX)
            self.state = 1033
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1034
            self.spoint()
            self.state = 1035
            self.match(PostgreSQLParser.COMMA)
            self.state = 1036
            self.spoint()
            self.state = 1037
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpolyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOLY(self):
            return self.getToken(PostgreSQLParser.SPOLY, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spoly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpoly" ):
                listener.enterSpoly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpoly" ):
                listener.exitSpoly(self)




    def spoly(self):

        localctx = PostgreSQLParser.SpolyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_spoly)
        try:
            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1039
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1040
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1042
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1043
                self.column_spec()
                self.state = 1044
                self.match(PostgreSQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.match(PostgreSQLParser.SPOLY)
                self.state = 1047
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1048
                self.match(PostgreSQLParser.TEXT_STRING)
                self.state = 1049
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPATH(self):
            return self.getToken(PostgreSQLParser.SPATH, 0)

        def TEXT_STRING(self):
            return self.getToken(PostgreSQLParser.TEXT_STRING, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def column_spec(self):
            return self.getTypedRuleContext(PostgreSQLParser.Column_specContext,0)


        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_spath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpath" ):
                listener.enterSpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpath" ):
                listener.exitSpath(self)




    def spath(self):

        localctx = PostgreSQLParser.SpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_spath)
        try:
            self.state = 1059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.match(PostgreSQLParser.SPATH)
                self.state = 1053
                self.match(PostgreSQLParser.TEXT_STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self.match(PostgreSQLParser.SPATH)
                self.state = 1055
                self.match(PostgreSQLParser.LPAREN)
                self.state = 1056
                self.column_spec()
                self.state = 1057
                self.match(PostgreSQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StransContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRANS(self):
            return self.getToken(PostgreSQLParser.STRANS, 0)

        def LPAREN(self):
            return self.getToken(PostgreSQLParser.LPAREN, 0)

        def bit_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PostgreSQLParser.Bit_exprContext)
            else:
                return self.getTypedRuleContext(PostgreSQLParser.Bit_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PostgreSQLParser.COMMA)
            else:
                return self.getToken(PostgreSQLParser.COMMA, i)

        def TRANS(self):
            return self.getToken(PostgreSQLParser.TRANS, 0)

        def RPAREN(self):
            return self.getToken(PostgreSQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return PostgreSQLParser.RULE_strans

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrans" ):
                listener.enterStrans(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrans" ):
                listener.exitStrans(self)




    def strans(self):

        localctx = PostgreSQLParser.StransContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_strans)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(PostgreSQLParser.STRANS)
            self.state = 1062
            self.match(PostgreSQLParser.LPAREN)
            self.state = 1063
            self.bit_expr()
            self.state = 1064
            self.match(PostgreSQLParser.COMMA)
            self.state = 1065
            self.bit_expr()
            self.state = 1066
            self.match(PostgreSQLParser.COMMA)
            self.state = 1067
            self.bit_expr()
            self.state = 1068
            self.match(PostgreSQLParser.COMMA)
            self.state = 1069
            self.match(PostgreSQLParser.TRANS)
            self.state = 1070
            self.match(PostgreSQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pg_sphere_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scircle(self):
            return self.getTypedRuleContext(PostgreSQLParser.ScircleContext,0)


        def sline(self):
            return self.getTypedRuleContext(PostgreSQLParser.SlineContext,0)


        def sellipse(self):
            return self.getTypedRuleContext(PostgreSQLParser.SellipseContext,0)


        def sbox(self):
            return self.getTypedRuleContext(PostgreSQLParser.SboxContext,0)


        def spoly(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpolyContext,0)


        def spath(self):
            return self.getTypedRuleContext(PostgreSQLParser.SpathContext,0)


        def simple_expr(self):
            return self.getTypedRuleContext(PostgreSQLParser.Simple_exprContext,0)


        def getRuleIndex(self):
            return PostgreSQLParser.RULE_pg_sphere_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPg_sphere_object" ):
                listener.enterPg_sphere_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPg_sphere_object" ):
                listener.exitPg_sphere_object(self)




    def pg_sphere_object(self):

        localctx = PostgreSQLParser.Pg_sphere_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_pg_sphere_object)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PostgreSQLParser.SCIRCLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.scircle()
                pass
            elif token in [PostgreSQLParser.SLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.sline()
                pass
            elif token in [PostgreSQLParser.SELLIPSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.sellipse()
                pass
            elif token in [PostgreSQLParser.SBOX]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1075
                self.sbox()
                pass
            elif token in [PostgreSQLParser.SPOLY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1076
                self.spoly()
                pass
            elif token in [PostgreSQLParser.SPATH]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1077
                self.spath()
                pass
            elif token in [PostgreSQLParser.ABS, PostgreSQLParser.ACOS, PostgreSQLParser.ASIN, PostgreSQLParser.ATAN, PostgreSQLParser.ATAN2, PostgreSQLParser.AVG, PostgreSQLParser.BIT_AND, PostgreSQLParser.BIT_COUNT, PostgreSQLParser.BIT_LENGTH, PostgreSQLParser.BIT_OR, PostgreSQLParser.BIT_XOR, PostgreSQLParser.CASE_SYM, PostgreSQLParser.CAST_SYM, PostgreSQLParser.CBRT, PostgreSQLParser.CEIL, PostgreSQLParser.CEILING, PostgreSQLParser.CHR, PostgreSQLParser.CHAR_LENGTH, PostgreSQLParser.CONCAT, PostgreSQLParser.CONCAT_WS, PostgreSQLParser.CONVERT_SYM, PostgreSQLParser.CONVERT_TZ, PostgreSQLParser.COS, PostgreSQLParser.COT, PostgreSQLParser.COUNT, PostgreSQLParser.CURDATE, PostgreSQLParser.CURTIME, PostgreSQLParser.DATE_ADD, PostgreSQLParser.DATE_FORMAT, PostgreSQLParser.DATE_PART, PostgreSQLParser.DATE_SYM, PostgreSQLParser.DAYNAME, PostgreSQLParser.DAYOFMONTH, PostgreSQLParser.DAYOFWEEK, PostgreSQLParser.DAYOFYEAR, PostgreSQLParser.DEGREES, PostgreSQLParser.DIV, PostgreSQLParser.ENCODE, PostgreSQLParser.EXISTS, PostgreSQLParser.EXP, PostgreSQLParser.EXTRACT, PostgreSQLParser.FALSE_SYM, PostgreSQLParser.FLOOR, PostgreSQLParser.FROM_DAYS, PostgreSQLParser.FROM_UNIXTIME, PostgreSQLParser.GET_FORMAT, PostgreSQLParser.GREATEST, PostgreSQLParser.HOUR, PostgreSQLParser.INTERVAL_SYM, PostgreSQLParser.LAST_DAY, PostgreSQLParser.LEFT, PostgreSQLParser.LENGTH, PostgreSQLParser.LN, PostgreSQLParser.LOG, PostgreSQLParser.LOWER, PostgreSQLParser.LPAD, PostgreSQLParser.LTRIM, PostgreSQLParser.MAKEDATE, PostgreSQLParser.MAKETIME, PostgreSQLParser.MAX_SYM, PostgreSQLParser.MD5, PostgreSQLParser.MICROSECOND, PostgreSQLParser.MINUTE, PostgreSQLParser.MIN_SYM, PostgreSQLParser.MOD, PostgreSQLParser.MONTH, PostgreSQLParser.MONTHNAME, PostgreSQLParser.NOW, PostgreSQLParser.NULL_SYM, PostgreSQLParser.PERIOD_ADD, PostgreSQLParser.PERIOD_DIFF, PostgreSQLParser.PI, PostgreSQLParser.POSITION_SYM, PostgreSQLParser.POW, PostgreSQLParser.POWER, PostgreSQLParser.QUARTER, PostgreSQLParser.RADIANS, PostgreSQLParser.RANDOM, PostgreSQLParser.REPEAT, PostgreSQLParser.REPLACE, PostgreSQLParser.REVERSE, PostgreSQLParser.RIGHT, PostgreSQLParser.ROUND, PostgreSQLParser.ROW_SYM, PostgreSQLParser.RPAD, PostgreSQLParser.RTRIM, PostgreSQLParser.SECOND, PostgreSQLParser.SEC_TO_TIME, PostgreSQLParser.SIGN, PostgreSQLParser.SIN, PostgreSQLParser.SQRT, PostgreSQLParser.STDDEV, PostgreSQLParser.STDDEV_POP, PostgreSQLParser.STDDEV_SAMP, PostgreSQLParser.STR_TO_DATE, PostgreSQLParser.SUBSTRING, PostgreSQLParser.SUBTIME, PostgreSQLParser.SUM, PostgreSQLParser.SYSDATE, PostgreSQLParser.TAN, PostgreSQLParser.TIMEDIFF, PostgreSQLParser.TIMESTAMP, PostgreSQLParser.TIMESTAMPADD, PostgreSQLParser.TIMESTAMPDIFF, PostgreSQLParser.TIME_FORMAT, PostgreSQLParser.TIME_SYM, PostgreSQLParser.TIME_TO_SEC, PostgreSQLParser.TO_DAYS, PostgreSQLParser.TO_SECONDS, PostgreSQLParser.TRIM, PostgreSQLParser.TRUE_SYM, PostgreSQLParser.TRUNCATE, PostgreSQLParser.UNIX_TIMESTAMP, PostgreSQLParser.UPPER, PostgreSQLParser.UTC_DATE, PostgreSQLParser.UTC_TIME, PostgreSQLParser.UTC_TIMESTAMP, PostgreSQLParser.VALUES, PostgreSQLParser.VARIANCE, PostgreSQLParser.VAR_POP, PostgreSQLParser.VAR_SAMP, PostgreSQLParser.WEEK, PostgreSQLParser.WEEKDAY, PostgreSQLParser.WEEKOFYEAR, PostgreSQLParser.YEAR, PostgreSQLParser.YEARWEEK, PostgreSQLParser.ASCII_SYM, PostgreSQLParser.AREA, PostgreSQLParser.ARRAY_LENGTH, PostgreSQLParser.LPAREN, PostgreSQLParser.PLUS, PostgreSQLParser.MINUS, PostgreSQLParser.INTEGER_NUM, PostgreSQLParser.HEX_DIGIT, PostgreSQLParser.BIT_NUM, PostgreSQLParser.REAL_NUMBER, PostgreSQLParser.TEXT_STRING, PostgreSQLParser.ID]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1078
                self.simple_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





