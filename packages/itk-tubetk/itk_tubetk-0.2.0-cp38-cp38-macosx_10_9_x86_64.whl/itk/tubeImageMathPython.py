# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeImageMathPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeImageMathPython', [dirname(__file__)])
        except ImportError:
            import _tubeImageMathPython
            return _tubeImageMathPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeImageMathPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeImageMathPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeImageMathPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkContinuousIndexPython
import itkVariableSizeMatrixPython
import itkArrayPython

def tubeImageMathDD3_New():
  return tubeImageMathDD3.New()


def tubeImageMathDD2_New():
  return tubeImageMathDD2.New()


def tubeImageMathDF3_New():
  return tubeImageMathDF3.New()


def tubeImageMathDF2_New():
  return tubeImageMathDF2.New()


def tubeImageMathDUS3_New():
  return tubeImageMathDUS3.New()


def tubeImageMathDUS2_New():
  return tubeImageMathDUS2.New()


def tubeImageMathDUC3_New():
  return tubeImageMathDUC3.New()


def tubeImageMathDUC2_New():
  return tubeImageMathDUC2.New()


def tubeImageMathDSS3_New():
  return tubeImageMathDSS3.New()


def tubeImageMathDSS2_New():
  return tubeImageMathDSS2.New()


def tubeImageMathFD3_New():
  return tubeImageMathFD3.New()


def tubeImageMathFD2_New():
  return tubeImageMathFD2.New()


def tubeImageMathFF3_New():
  return tubeImageMathFF3.New()


def tubeImageMathFF2_New():
  return tubeImageMathFF2.New()


def tubeImageMathFUS3_New():
  return tubeImageMathFUS3.New()


def tubeImageMathFUS2_New():
  return tubeImageMathFUS2.New()


def tubeImageMathFUC3_New():
  return tubeImageMathFUC3.New()


def tubeImageMathFUC2_New():
  return tubeImageMathFUC2.New()


def tubeImageMathFSS3_New():
  return tubeImageMathFSS3.New()


def tubeImageMathFSS2_New():
  return tubeImageMathFSS2.New()


def tubeImageMathUSD3_New():
  return tubeImageMathUSD3.New()


def tubeImageMathUSD2_New():
  return tubeImageMathUSD2.New()


def tubeImageMathUSF3_New():
  return tubeImageMathUSF3.New()


def tubeImageMathUSF2_New():
  return tubeImageMathUSF2.New()


def tubeImageMathUSUS3_New():
  return tubeImageMathUSUS3.New()


def tubeImageMathUSUS2_New():
  return tubeImageMathUSUS2.New()


def tubeImageMathUSUC3_New():
  return tubeImageMathUSUC3.New()


def tubeImageMathUSUC2_New():
  return tubeImageMathUSUC2.New()


def tubeImageMathUSSS3_New():
  return tubeImageMathUSSS3.New()


def tubeImageMathUSSS2_New():
  return tubeImageMathUSSS2.New()


def tubeImageMathUCD3_New():
  return tubeImageMathUCD3.New()


def tubeImageMathUCD2_New():
  return tubeImageMathUCD2.New()


def tubeImageMathUCF3_New():
  return tubeImageMathUCF3.New()


def tubeImageMathUCF2_New():
  return tubeImageMathUCF2.New()


def tubeImageMathUCUS3_New():
  return tubeImageMathUCUS3.New()


def tubeImageMathUCUS2_New():
  return tubeImageMathUCUS2.New()


def tubeImageMathUCUC3_New():
  return tubeImageMathUCUC3.New()


def tubeImageMathUCUC2_New():
  return tubeImageMathUCUC2.New()


def tubeImageMathUCSS3_New():
  return tubeImageMathUCSS3.New()


def tubeImageMathUCSS2_New():
  return tubeImageMathUCSS2.New()


def tubeImageMathSSD3_New():
  return tubeImageMathSSD3.New()


def tubeImageMathSSD2_New():
  return tubeImageMathSSD2.New()


def tubeImageMathSSF3_New():
  return tubeImageMathSSF3.New()


def tubeImageMathSSF2_New():
  return tubeImageMathSSF2.New()


def tubeImageMathSSUS3_New():
  return tubeImageMathSSUS3.New()


def tubeImageMathSSUS2_New():
  return tubeImageMathSSUS2.New()


def tubeImageMathSSUC3_New():
  return tubeImageMathSSUC3.New()


def tubeImageMathSSUC2_New():
  return tubeImageMathSSUC2.New()


def tubeImageMathSSSS3_New():
  return tubeImageMathSSSS3.New()


def tubeImageMathSSSS2_New():
  return tubeImageMathSSSS2.New()

class tubeImageMathDD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDD2_Pointer":
        """__New_orig__() -> tubeImageMathDD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDD2_Pointer":
        """Clone(tubeImageMathDD2 self) -> tubeImageMathDD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDD2_Clone(self)


    def SetInput(self, input: 'itkImageD2') -> "void":
        """SetInput(tubeImageMathDD2 self, itkImageD2 input)"""
        return _tubeImageMathPython.tubeImageMathDD2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathDD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeImageMathDD2 self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathDD2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathDD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDD2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathDD2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDD2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathDD2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDD2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDD2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDD2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathDD2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDD2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDD2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDD2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDD2 self, itkImageD2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDD2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD2') -> "void":
        """MultiplyImages(tubeImageMathDD2 self, itkImageD2 input2)"""
        return _tubeImageMathPython.tubeImageMathDD2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDD2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDD2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDD2 self)"""
        return _tubeImageMathPython.tubeImageMathDD2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDD2 self)"""
        return _tubeImageMathPython.tubeImageMathDD2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDD2 self)"""
        return _tubeImageMathPython.tubeImageMathDD2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDD2 self, itkImageD2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDD2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDD2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDD2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDD2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDD2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDD2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDD2 self)"""
        return _tubeImageMathPython.tubeImageMathDD2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDD2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDD2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDD2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDD2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDD2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDD2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDD2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDD2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDD2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDD2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDD2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDD2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDD2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDD2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD2') -> "void":
        """IntensityCorrection(tubeImageMathDD2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDD2 self, double factor)
        Resize(tubeImageMathDD2 self, itkImageD2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDD2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDD2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDD2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDD2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDD2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathDD2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathDD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDD2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDD2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDD2

    def cast(obj: 'itkLightObject') -> "tubeImageMathDD2 *":
        """cast(itkLightObject obj) -> tubeImageMathDD2"""
        return _tubeImageMathPython.tubeImageMathDD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDD2

        Create a new object of the class tubeImageMathDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDD2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Clone, None, tubeImageMathDD2)
tubeImageMathDD2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_SetInput, None, tubeImageMathDD2)
tubeImageMathDD2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetInput, None, tubeImageMathDD2)
tubeImageMathDD2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetOutput, None, tubeImageMathDD2)
tubeImageMathDD2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetOutputFloat, None, tubeImageMathDD2)
tubeImageMathDD2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetOutputUChar, None, tubeImageMathDD2)
tubeImageMathDD2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetOutputShort, None, tubeImageMathDD2)
tubeImageMathDD2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_IntensityWindow, None, tubeImageMathDD2)
tubeImageMathDD2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDD2)
tubeImageMathDD2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Resample, None, tubeImageMathDD2)
tubeImageMathDD2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_AddUniformNoise, None, tubeImageMathDD2)
tubeImageMathDD2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_AddGaussianNoise, None, tubeImageMathDD2)
tubeImageMathDD2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_AddImages, None, tubeImageMathDD2)
tubeImageMathDD2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_MultiplyImages, None, tubeImageMathDD2)
tubeImageMathDD2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_PadUsingMirroring, None, tubeImageMathDD2)
tubeImageMathDD2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_NormalizeMeanStdDev, None, tubeImageMathDD2)
tubeImageMathDD2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_NormalizeFWHM, None, tubeImageMathDD2)
tubeImageMathDD2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_NormalizeMeanShift, None, tubeImageMathDD2)
tubeImageMathDD2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_FuseUsingMax, None, tubeImageMathDD2)
tubeImageMathDD2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_MedianFilter, None, tubeImageMathDD2)
tubeImageMathDD2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Threshold, None, tubeImageMathDD2)
tubeImageMathDD2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_MeanWithinMaskRange, None, tubeImageMathDD2)
tubeImageMathDD2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_StdDevWithinMaskRange, None, tubeImageMathDD2)
tubeImageMathDD2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_AbsoluteValue, None, tubeImageMathDD2)
tubeImageMathDD2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_ReplaceValuesOutsideMaskRange, None, tubeImageMathDD2)
tubeImageMathDD2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Erode, None, tubeImageMathDD2)
tubeImageMathDD2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Dilate, None, tubeImageMathDD2)
tubeImageMathDD2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_ReplaceValueWithinMaskRange, None, tubeImageMathDD2)
tubeImageMathDD2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Blur, None, tubeImageMathDD2)
tubeImageMathDD2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_BlurOrder, None, tubeImageMathDD2)
tubeImageMathDD2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_HistogramBinMin, None, tubeImageMathDD2)
tubeImageMathDD2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_HistogramBinSize, None, tubeImageMathDD2)
tubeImageMathDD2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Histogram, None, tubeImageMathDD2)
tubeImageMathDD2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_IntensityCorrectionBySlice, None, tubeImageMathDD2)
tubeImageMathDD2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_IntensityCorrection, None, tubeImageMathDD2)
tubeImageMathDD2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_Resize, None, tubeImageMathDD2)
tubeImageMathDD2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_ExtractSlice, None, tubeImageMathDD2)
tubeImageMathDD2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_EnhanceVessels, None, tubeImageMathDD2)
tubeImageMathDD2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_ConnectedComponents, None, tubeImageMathDD2)
tubeImageMathDD2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_VoronoiTessellation, None, tubeImageMathDD2)
tubeImageMathDD2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDD2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDD2)
tubeImageMathDD2_swigregister = _tubeImageMathPython.tubeImageMathDD2_swigregister
tubeImageMathDD2_swigregister(tubeImageMathDD2)

def tubeImageMathDD2___New_orig__() -> "tubeImageMathDD2_Pointer":
    """tubeImageMathDD2___New_orig__() -> tubeImageMathDD2_Pointer"""
    return _tubeImageMathPython.tubeImageMathDD2___New_orig__()

def tubeImageMathDD2_cast(obj: 'itkLightObject') -> "tubeImageMathDD2 *":
    """tubeImageMathDD2_cast(itkLightObject obj) -> tubeImageMathDD2"""
    return _tubeImageMathPython.tubeImageMathDD2_cast(obj)

class tubeImageMathDD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDD3_Pointer":
        """__New_orig__() -> tubeImageMathDD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDD3_Pointer":
        """Clone(tubeImageMathDD3 self) -> tubeImageMathDD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDD3_Clone(self)


    def SetInput(self, input: 'itkImageD3') -> "void":
        """SetInput(tubeImageMathDD3 self, itkImageD3 input)"""
        return _tubeImageMathPython.tubeImageMathDD3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathDD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDD3_GetInput(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeImageMathDD3 self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathDD3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathDD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDD3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathDD3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDD3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathDD3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDD3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDD3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDD3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathDD3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDD3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDD3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDD3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDD3 self, itkImageD3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDD3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD3') -> "void":
        """MultiplyImages(tubeImageMathDD3 self, itkImageD3 input2)"""
        return _tubeImageMathPython.tubeImageMathDD3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDD3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDD3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDD3 self)"""
        return _tubeImageMathPython.tubeImageMathDD3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDD3 self)"""
        return _tubeImageMathPython.tubeImageMathDD3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDD3 self)"""
        return _tubeImageMathPython.tubeImageMathDD3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDD3 self, itkImageD3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDD3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDD3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDD3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDD3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDD3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDD3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDD3 self)"""
        return _tubeImageMathPython.tubeImageMathDD3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDD3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDD3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDD3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDD3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDD3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDD3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDD3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDD3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDD3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDD3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDD3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDD3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDD3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDD3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD3') -> "void":
        """IntensityCorrection(tubeImageMathDD3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDD3 self, double factor)
        Resize(tubeImageMathDD3 self, itkImageD3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDD3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDD3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDD3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDD3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDD3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathDD3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathDD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDD3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDD3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDD3

    def cast(obj: 'itkLightObject') -> "tubeImageMathDD3 *":
        """cast(itkLightObject obj) -> tubeImageMathDD3"""
        return _tubeImageMathPython.tubeImageMathDD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDD3

        Create a new object of the class tubeImageMathDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDD3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Clone, None, tubeImageMathDD3)
tubeImageMathDD3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_SetInput, None, tubeImageMathDD3)
tubeImageMathDD3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetInput, None, tubeImageMathDD3)
tubeImageMathDD3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetOutput, None, tubeImageMathDD3)
tubeImageMathDD3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetOutputFloat, None, tubeImageMathDD3)
tubeImageMathDD3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetOutputUChar, None, tubeImageMathDD3)
tubeImageMathDD3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetOutputShort, None, tubeImageMathDD3)
tubeImageMathDD3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_IntensityWindow, None, tubeImageMathDD3)
tubeImageMathDD3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDD3)
tubeImageMathDD3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Resample, None, tubeImageMathDD3)
tubeImageMathDD3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_AddUniformNoise, None, tubeImageMathDD3)
tubeImageMathDD3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_AddGaussianNoise, None, tubeImageMathDD3)
tubeImageMathDD3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_AddImages, None, tubeImageMathDD3)
tubeImageMathDD3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_MultiplyImages, None, tubeImageMathDD3)
tubeImageMathDD3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_PadUsingMirroring, None, tubeImageMathDD3)
tubeImageMathDD3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_NormalizeMeanStdDev, None, tubeImageMathDD3)
tubeImageMathDD3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_NormalizeFWHM, None, tubeImageMathDD3)
tubeImageMathDD3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_NormalizeMeanShift, None, tubeImageMathDD3)
tubeImageMathDD3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_FuseUsingMax, None, tubeImageMathDD3)
tubeImageMathDD3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_MedianFilter, None, tubeImageMathDD3)
tubeImageMathDD3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Threshold, None, tubeImageMathDD3)
tubeImageMathDD3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_MeanWithinMaskRange, None, tubeImageMathDD3)
tubeImageMathDD3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_StdDevWithinMaskRange, None, tubeImageMathDD3)
tubeImageMathDD3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_AbsoluteValue, None, tubeImageMathDD3)
tubeImageMathDD3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_ReplaceValuesOutsideMaskRange, None, tubeImageMathDD3)
tubeImageMathDD3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Erode, None, tubeImageMathDD3)
tubeImageMathDD3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Dilate, None, tubeImageMathDD3)
tubeImageMathDD3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_ReplaceValueWithinMaskRange, None, tubeImageMathDD3)
tubeImageMathDD3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Blur, None, tubeImageMathDD3)
tubeImageMathDD3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_BlurOrder, None, tubeImageMathDD3)
tubeImageMathDD3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_HistogramBinMin, None, tubeImageMathDD3)
tubeImageMathDD3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_HistogramBinSize, None, tubeImageMathDD3)
tubeImageMathDD3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Histogram, None, tubeImageMathDD3)
tubeImageMathDD3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_IntensityCorrectionBySlice, None, tubeImageMathDD3)
tubeImageMathDD3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_IntensityCorrection, None, tubeImageMathDD3)
tubeImageMathDD3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_Resize, None, tubeImageMathDD3)
tubeImageMathDD3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_ExtractSlice, None, tubeImageMathDD3)
tubeImageMathDD3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_EnhanceVessels, None, tubeImageMathDD3)
tubeImageMathDD3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_ConnectedComponents, None, tubeImageMathDD3)
tubeImageMathDD3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_VoronoiTessellation, None, tubeImageMathDD3)
tubeImageMathDD3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDD3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDD3)
tubeImageMathDD3_swigregister = _tubeImageMathPython.tubeImageMathDD3_swigregister
tubeImageMathDD3_swigregister(tubeImageMathDD3)

def tubeImageMathDD3___New_orig__() -> "tubeImageMathDD3_Pointer":
    """tubeImageMathDD3___New_orig__() -> tubeImageMathDD3_Pointer"""
    return _tubeImageMathPython.tubeImageMathDD3___New_orig__()

def tubeImageMathDD3_cast(obj: 'itkLightObject') -> "tubeImageMathDD3 *":
    """tubeImageMathDD3_cast(itkLightObject obj) -> tubeImageMathDD3"""
    return _tubeImageMathPython.tubeImageMathDD3_cast(obj)

class tubeImageMathDF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDF2_Pointer":
        """__New_orig__() -> tubeImageMathDF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDF2_Pointer":
        """Clone(tubeImageMathDF2 self) -> tubeImageMathDF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDF2_Clone(self)


    def SetInput(self, input: 'itkImageD2') -> "void":
        """SetInput(tubeImageMathDF2 self, itkImageD2 input)"""
        return _tubeImageMathPython.tubeImageMathDF2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathDF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeImageMathDF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDF2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathDF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDF2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathDF2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDF2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathDF2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDF2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDF2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDF2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathDF2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDF2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDF2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDF2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDF2 self, itkImageD2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDF2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD2') -> "void":
        """MultiplyImages(tubeImageMathDF2 self, itkImageD2 input2)"""
        return _tubeImageMathPython.tubeImageMathDF2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDF2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDF2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDF2 self)"""
        return _tubeImageMathPython.tubeImageMathDF2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDF2 self)"""
        return _tubeImageMathPython.tubeImageMathDF2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDF2 self)"""
        return _tubeImageMathPython.tubeImageMathDF2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDF2 self, itkImageD2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDF2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDF2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDF2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDF2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDF2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDF2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDF2 self)"""
        return _tubeImageMathPython.tubeImageMathDF2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDF2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDF2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDF2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDF2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDF2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDF2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDF2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDF2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDF2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDF2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDF2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDF2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDF2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDF2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD2') -> "void":
        """IntensityCorrection(tubeImageMathDF2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDF2 self, double factor)
        Resize(tubeImageMathDF2 self, itkImageD2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDF2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDF2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDF2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDF2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDF2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathDF2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathDF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDF2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDF2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDF2

    def cast(obj: 'itkLightObject') -> "tubeImageMathDF2 *":
        """cast(itkLightObject obj) -> tubeImageMathDF2"""
        return _tubeImageMathPython.tubeImageMathDF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDF2

        Create a new object of the class tubeImageMathDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDF2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Clone, None, tubeImageMathDF2)
tubeImageMathDF2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_SetInput, None, tubeImageMathDF2)
tubeImageMathDF2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetInput, None, tubeImageMathDF2)
tubeImageMathDF2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetOutput, None, tubeImageMathDF2)
tubeImageMathDF2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetOutputFloat, None, tubeImageMathDF2)
tubeImageMathDF2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetOutputUChar, None, tubeImageMathDF2)
tubeImageMathDF2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetOutputShort, None, tubeImageMathDF2)
tubeImageMathDF2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_IntensityWindow, None, tubeImageMathDF2)
tubeImageMathDF2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDF2)
tubeImageMathDF2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Resample, None, tubeImageMathDF2)
tubeImageMathDF2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_AddUniformNoise, None, tubeImageMathDF2)
tubeImageMathDF2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_AddGaussianNoise, None, tubeImageMathDF2)
tubeImageMathDF2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_AddImages, None, tubeImageMathDF2)
tubeImageMathDF2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_MultiplyImages, None, tubeImageMathDF2)
tubeImageMathDF2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_PadUsingMirroring, None, tubeImageMathDF2)
tubeImageMathDF2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_NormalizeMeanStdDev, None, tubeImageMathDF2)
tubeImageMathDF2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_NormalizeFWHM, None, tubeImageMathDF2)
tubeImageMathDF2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_NormalizeMeanShift, None, tubeImageMathDF2)
tubeImageMathDF2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_FuseUsingMax, None, tubeImageMathDF2)
tubeImageMathDF2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_MedianFilter, None, tubeImageMathDF2)
tubeImageMathDF2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Threshold, None, tubeImageMathDF2)
tubeImageMathDF2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_MeanWithinMaskRange, None, tubeImageMathDF2)
tubeImageMathDF2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_StdDevWithinMaskRange, None, tubeImageMathDF2)
tubeImageMathDF2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_AbsoluteValue, None, tubeImageMathDF2)
tubeImageMathDF2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_ReplaceValuesOutsideMaskRange, None, tubeImageMathDF2)
tubeImageMathDF2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Erode, None, tubeImageMathDF2)
tubeImageMathDF2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Dilate, None, tubeImageMathDF2)
tubeImageMathDF2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_ReplaceValueWithinMaskRange, None, tubeImageMathDF2)
tubeImageMathDF2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Blur, None, tubeImageMathDF2)
tubeImageMathDF2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_BlurOrder, None, tubeImageMathDF2)
tubeImageMathDF2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_HistogramBinMin, None, tubeImageMathDF2)
tubeImageMathDF2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_HistogramBinSize, None, tubeImageMathDF2)
tubeImageMathDF2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Histogram, None, tubeImageMathDF2)
tubeImageMathDF2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_IntensityCorrectionBySlice, None, tubeImageMathDF2)
tubeImageMathDF2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_IntensityCorrection, None, tubeImageMathDF2)
tubeImageMathDF2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_Resize, None, tubeImageMathDF2)
tubeImageMathDF2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_ExtractSlice, None, tubeImageMathDF2)
tubeImageMathDF2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_EnhanceVessels, None, tubeImageMathDF2)
tubeImageMathDF2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_ConnectedComponents, None, tubeImageMathDF2)
tubeImageMathDF2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_VoronoiTessellation, None, tubeImageMathDF2)
tubeImageMathDF2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDF2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDF2)
tubeImageMathDF2_swigregister = _tubeImageMathPython.tubeImageMathDF2_swigregister
tubeImageMathDF2_swigregister(tubeImageMathDF2)

def tubeImageMathDF2___New_orig__() -> "tubeImageMathDF2_Pointer":
    """tubeImageMathDF2___New_orig__() -> tubeImageMathDF2_Pointer"""
    return _tubeImageMathPython.tubeImageMathDF2___New_orig__()

def tubeImageMathDF2_cast(obj: 'itkLightObject') -> "tubeImageMathDF2 *":
    """tubeImageMathDF2_cast(itkLightObject obj) -> tubeImageMathDF2"""
    return _tubeImageMathPython.tubeImageMathDF2_cast(obj)

class tubeImageMathDF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDF3_Pointer":
        """__New_orig__() -> tubeImageMathDF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDF3_Pointer":
        """Clone(tubeImageMathDF3 self) -> tubeImageMathDF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDF3_Clone(self)


    def SetInput(self, input: 'itkImageD3') -> "void":
        """SetInput(tubeImageMathDF3 self, itkImageD3 input)"""
        return _tubeImageMathPython.tubeImageMathDF3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathDF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeImageMathDF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDF3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathDF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDF3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathDF3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDF3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathDF3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDF3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDF3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDF3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathDF3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDF3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDF3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDF3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDF3 self, itkImageD3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDF3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD3') -> "void":
        """MultiplyImages(tubeImageMathDF3 self, itkImageD3 input2)"""
        return _tubeImageMathPython.tubeImageMathDF3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDF3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDF3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDF3 self)"""
        return _tubeImageMathPython.tubeImageMathDF3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDF3 self)"""
        return _tubeImageMathPython.tubeImageMathDF3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDF3 self)"""
        return _tubeImageMathPython.tubeImageMathDF3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDF3 self, itkImageD3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDF3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDF3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDF3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDF3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDF3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDF3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDF3 self)"""
        return _tubeImageMathPython.tubeImageMathDF3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDF3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDF3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDF3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDF3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDF3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDF3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDF3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDF3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDF3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDF3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDF3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDF3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDF3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDF3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD3') -> "void":
        """IntensityCorrection(tubeImageMathDF3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDF3 self, double factor)
        Resize(tubeImageMathDF3 self, itkImageD3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDF3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDF3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDF3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDF3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDF3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathDF3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathDF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDF3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDF3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDF3

    def cast(obj: 'itkLightObject') -> "tubeImageMathDF3 *":
        """cast(itkLightObject obj) -> tubeImageMathDF3"""
        return _tubeImageMathPython.tubeImageMathDF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDF3

        Create a new object of the class tubeImageMathDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDF3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Clone, None, tubeImageMathDF3)
tubeImageMathDF3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_SetInput, None, tubeImageMathDF3)
tubeImageMathDF3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetInput, None, tubeImageMathDF3)
tubeImageMathDF3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetOutput, None, tubeImageMathDF3)
tubeImageMathDF3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetOutputFloat, None, tubeImageMathDF3)
tubeImageMathDF3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetOutputUChar, None, tubeImageMathDF3)
tubeImageMathDF3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetOutputShort, None, tubeImageMathDF3)
tubeImageMathDF3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_IntensityWindow, None, tubeImageMathDF3)
tubeImageMathDF3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDF3)
tubeImageMathDF3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Resample, None, tubeImageMathDF3)
tubeImageMathDF3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_AddUniformNoise, None, tubeImageMathDF3)
tubeImageMathDF3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_AddGaussianNoise, None, tubeImageMathDF3)
tubeImageMathDF3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_AddImages, None, tubeImageMathDF3)
tubeImageMathDF3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_MultiplyImages, None, tubeImageMathDF3)
tubeImageMathDF3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_PadUsingMirroring, None, tubeImageMathDF3)
tubeImageMathDF3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_NormalizeMeanStdDev, None, tubeImageMathDF3)
tubeImageMathDF3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_NormalizeFWHM, None, tubeImageMathDF3)
tubeImageMathDF3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_NormalizeMeanShift, None, tubeImageMathDF3)
tubeImageMathDF3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_FuseUsingMax, None, tubeImageMathDF3)
tubeImageMathDF3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_MedianFilter, None, tubeImageMathDF3)
tubeImageMathDF3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Threshold, None, tubeImageMathDF3)
tubeImageMathDF3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_MeanWithinMaskRange, None, tubeImageMathDF3)
tubeImageMathDF3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_StdDevWithinMaskRange, None, tubeImageMathDF3)
tubeImageMathDF3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_AbsoluteValue, None, tubeImageMathDF3)
tubeImageMathDF3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_ReplaceValuesOutsideMaskRange, None, tubeImageMathDF3)
tubeImageMathDF3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Erode, None, tubeImageMathDF3)
tubeImageMathDF3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Dilate, None, tubeImageMathDF3)
tubeImageMathDF3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_ReplaceValueWithinMaskRange, None, tubeImageMathDF3)
tubeImageMathDF3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Blur, None, tubeImageMathDF3)
tubeImageMathDF3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_BlurOrder, None, tubeImageMathDF3)
tubeImageMathDF3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_HistogramBinMin, None, tubeImageMathDF3)
tubeImageMathDF3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_HistogramBinSize, None, tubeImageMathDF3)
tubeImageMathDF3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Histogram, None, tubeImageMathDF3)
tubeImageMathDF3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_IntensityCorrectionBySlice, None, tubeImageMathDF3)
tubeImageMathDF3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_IntensityCorrection, None, tubeImageMathDF3)
tubeImageMathDF3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_Resize, None, tubeImageMathDF3)
tubeImageMathDF3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_ExtractSlice, None, tubeImageMathDF3)
tubeImageMathDF3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_EnhanceVessels, None, tubeImageMathDF3)
tubeImageMathDF3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_ConnectedComponents, None, tubeImageMathDF3)
tubeImageMathDF3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_VoronoiTessellation, None, tubeImageMathDF3)
tubeImageMathDF3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDF3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDF3)
tubeImageMathDF3_swigregister = _tubeImageMathPython.tubeImageMathDF3_swigregister
tubeImageMathDF3_swigregister(tubeImageMathDF3)

def tubeImageMathDF3___New_orig__() -> "tubeImageMathDF3_Pointer":
    """tubeImageMathDF3___New_orig__() -> tubeImageMathDF3_Pointer"""
    return _tubeImageMathPython.tubeImageMathDF3___New_orig__()

def tubeImageMathDF3_cast(obj: 'itkLightObject') -> "tubeImageMathDF3 *":
    """tubeImageMathDF3_cast(itkLightObject obj) -> tubeImageMathDF3"""
    return _tubeImageMathPython.tubeImageMathDF3_cast(obj)

class tubeImageMathDSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDSS2_Pointer":
        """__New_orig__() -> tubeImageMathDSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDSS2_Pointer":
        """Clone(tubeImageMathDSS2 self) -> tubeImageMathDSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDSS2_Clone(self)


    def SetInput(self, input: 'itkImageD2') -> "void":
        """SetInput(tubeImageMathDSS2 self, itkImageD2 input)"""
        return _tubeImageMathPython.tubeImageMathDSS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathDSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeImageMathDSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathDSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathDSS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathDSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDSS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDSS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathDSS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDSS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDSS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDSS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDSS2 self, itkImageD2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDSS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD2') -> "void":
        """MultiplyImages(tubeImageMathDSS2 self, itkImageD2 input2)"""
        return _tubeImageMathPython.tubeImageMathDSS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDSS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDSS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDSS2 self)"""
        return _tubeImageMathPython.tubeImageMathDSS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDSS2 self)"""
        return _tubeImageMathPython.tubeImageMathDSS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDSS2 self)"""
        return _tubeImageMathPython.tubeImageMathDSS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDSS2 self, itkImageD2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDSS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDSS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDSS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDSS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDSS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDSS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDSS2 self)"""
        return _tubeImageMathPython.tubeImageMathDSS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDSS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDSS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDSS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDSS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDSS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDSS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDSS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDSS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDSS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDSS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDSS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDSS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDSS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDSS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD2') -> "void":
        """IntensityCorrection(tubeImageMathDSS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDSS2 self, double factor)
        Resize(tubeImageMathDSS2 self, itkImageD2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDSS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDSS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDSS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDSS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDSS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathDSS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathDSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDSS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDSS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDSS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathDSS2 *":
        """cast(itkLightObject obj) -> tubeImageMathDSS2"""
        return _tubeImageMathPython.tubeImageMathDSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDSS2

        Create a new object of the class tubeImageMathDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDSS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Clone, None, tubeImageMathDSS2)
tubeImageMathDSS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_SetInput, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetInput, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetOutput, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetOutputFloat, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetOutputUChar, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetOutputShort, None, tubeImageMathDSS2)
tubeImageMathDSS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_IntensityWindow, None, tubeImageMathDSS2)
tubeImageMathDSS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDSS2)
tubeImageMathDSS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Resample, None, tubeImageMathDSS2)
tubeImageMathDSS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_AddUniformNoise, None, tubeImageMathDSS2)
tubeImageMathDSS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_AddGaussianNoise, None, tubeImageMathDSS2)
tubeImageMathDSS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_AddImages, None, tubeImageMathDSS2)
tubeImageMathDSS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_MultiplyImages, None, tubeImageMathDSS2)
tubeImageMathDSS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_PadUsingMirroring, None, tubeImageMathDSS2)
tubeImageMathDSS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_NormalizeMeanStdDev, None, tubeImageMathDSS2)
tubeImageMathDSS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_NormalizeFWHM, None, tubeImageMathDSS2)
tubeImageMathDSS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_NormalizeMeanShift, None, tubeImageMathDSS2)
tubeImageMathDSS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_FuseUsingMax, None, tubeImageMathDSS2)
tubeImageMathDSS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_MedianFilter, None, tubeImageMathDSS2)
tubeImageMathDSS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Threshold, None, tubeImageMathDSS2)
tubeImageMathDSS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_MeanWithinMaskRange, None, tubeImageMathDSS2)
tubeImageMathDSS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_StdDevWithinMaskRange, None, tubeImageMathDSS2)
tubeImageMathDSS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_AbsoluteValue, None, tubeImageMathDSS2)
tubeImageMathDSS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathDSS2)
tubeImageMathDSS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Erode, None, tubeImageMathDSS2)
tubeImageMathDSS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Dilate, None, tubeImageMathDSS2)
tubeImageMathDSS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_ReplaceValueWithinMaskRange, None, tubeImageMathDSS2)
tubeImageMathDSS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Blur, None, tubeImageMathDSS2)
tubeImageMathDSS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_BlurOrder, None, tubeImageMathDSS2)
tubeImageMathDSS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_HistogramBinMin, None, tubeImageMathDSS2)
tubeImageMathDSS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_HistogramBinSize, None, tubeImageMathDSS2)
tubeImageMathDSS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Histogram, None, tubeImageMathDSS2)
tubeImageMathDSS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_IntensityCorrectionBySlice, None, tubeImageMathDSS2)
tubeImageMathDSS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_IntensityCorrection, None, tubeImageMathDSS2)
tubeImageMathDSS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_Resize, None, tubeImageMathDSS2)
tubeImageMathDSS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_ExtractSlice, None, tubeImageMathDSS2)
tubeImageMathDSS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_EnhanceVessels, None, tubeImageMathDSS2)
tubeImageMathDSS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_ConnectedComponents, None, tubeImageMathDSS2)
tubeImageMathDSS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_VoronoiTessellation, None, tubeImageMathDSS2)
tubeImageMathDSS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDSS2)
tubeImageMathDSS2_swigregister = _tubeImageMathPython.tubeImageMathDSS2_swigregister
tubeImageMathDSS2_swigregister(tubeImageMathDSS2)

def tubeImageMathDSS2___New_orig__() -> "tubeImageMathDSS2_Pointer":
    """tubeImageMathDSS2___New_orig__() -> tubeImageMathDSS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathDSS2___New_orig__()

def tubeImageMathDSS2_cast(obj: 'itkLightObject') -> "tubeImageMathDSS2 *":
    """tubeImageMathDSS2_cast(itkLightObject obj) -> tubeImageMathDSS2"""
    return _tubeImageMathPython.tubeImageMathDSS2_cast(obj)

class tubeImageMathDSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDSS3_Pointer":
        """__New_orig__() -> tubeImageMathDSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDSS3_Pointer":
        """Clone(tubeImageMathDSS3 self) -> tubeImageMathDSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDSS3_Clone(self)


    def SetInput(self, input: 'itkImageD3') -> "void":
        """SetInput(tubeImageMathDSS3 self, itkImageD3 input)"""
        return _tubeImageMathPython.tubeImageMathDSS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathDSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetInput(self)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeImageMathDSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathDSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathDSS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathDSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDSS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDSS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathDSS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDSS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDSS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDSS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDSS3 self, itkImageD3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDSS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD3') -> "void":
        """MultiplyImages(tubeImageMathDSS3 self, itkImageD3 input2)"""
        return _tubeImageMathPython.tubeImageMathDSS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDSS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDSS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDSS3 self)"""
        return _tubeImageMathPython.tubeImageMathDSS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDSS3 self)"""
        return _tubeImageMathPython.tubeImageMathDSS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDSS3 self)"""
        return _tubeImageMathPython.tubeImageMathDSS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDSS3 self, itkImageD3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDSS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDSS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDSS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDSS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDSS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDSS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDSS3 self)"""
        return _tubeImageMathPython.tubeImageMathDSS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDSS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDSS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDSS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDSS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDSS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDSS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDSS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDSS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDSS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDSS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDSS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDSS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDSS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDSS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD3') -> "void":
        """IntensityCorrection(tubeImageMathDSS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDSS3 self, double factor)
        Resize(tubeImageMathDSS3 self, itkImageD3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDSS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDSS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDSS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDSS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDSS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathDSS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathDSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDSS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDSS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDSS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathDSS3 *":
        """cast(itkLightObject obj) -> tubeImageMathDSS3"""
        return _tubeImageMathPython.tubeImageMathDSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDSS3

        Create a new object of the class tubeImageMathDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDSS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Clone, None, tubeImageMathDSS3)
tubeImageMathDSS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_SetInput, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetInput, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetOutput, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetOutputFloat, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetOutputUChar, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetOutputShort, None, tubeImageMathDSS3)
tubeImageMathDSS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_IntensityWindow, None, tubeImageMathDSS3)
tubeImageMathDSS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDSS3)
tubeImageMathDSS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Resample, None, tubeImageMathDSS3)
tubeImageMathDSS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_AddUniformNoise, None, tubeImageMathDSS3)
tubeImageMathDSS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_AddGaussianNoise, None, tubeImageMathDSS3)
tubeImageMathDSS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_AddImages, None, tubeImageMathDSS3)
tubeImageMathDSS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_MultiplyImages, None, tubeImageMathDSS3)
tubeImageMathDSS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_PadUsingMirroring, None, tubeImageMathDSS3)
tubeImageMathDSS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_NormalizeMeanStdDev, None, tubeImageMathDSS3)
tubeImageMathDSS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_NormalizeFWHM, None, tubeImageMathDSS3)
tubeImageMathDSS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_NormalizeMeanShift, None, tubeImageMathDSS3)
tubeImageMathDSS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_FuseUsingMax, None, tubeImageMathDSS3)
tubeImageMathDSS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_MedianFilter, None, tubeImageMathDSS3)
tubeImageMathDSS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Threshold, None, tubeImageMathDSS3)
tubeImageMathDSS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_MeanWithinMaskRange, None, tubeImageMathDSS3)
tubeImageMathDSS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_StdDevWithinMaskRange, None, tubeImageMathDSS3)
tubeImageMathDSS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_AbsoluteValue, None, tubeImageMathDSS3)
tubeImageMathDSS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathDSS3)
tubeImageMathDSS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Erode, None, tubeImageMathDSS3)
tubeImageMathDSS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Dilate, None, tubeImageMathDSS3)
tubeImageMathDSS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_ReplaceValueWithinMaskRange, None, tubeImageMathDSS3)
tubeImageMathDSS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Blur, None, tubeImageMathDSS3)
tubeImageMathDSS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_BlurOrder, None, tubeImageMathDSS3)
tubeImageMathDSS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_HistogramBinMin, None, tubeImageMathDSS3)
tubeImageMathDSS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_HistogramBinSize, None, tubeImageMathDSS3)
tubeImageMathDSS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Histogram, None, tubeImageMathDSS3)
tubeImageMathDSS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_IntensityCorrectionBySlice, None, tubeImageMathDSS3)
tubeImageMathDSS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_IntensityCorrection, None, tubeImageMathDSS3)
tubeImageMathDSS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_Resize, None, tubeImageMathDSS3)
tubeImageMathDSS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_ExtractSlice, None, tubeImageMathDSS3)
tubeImageMathDSS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_EnhanceVessels, None, tubeImageMathDSS3)
tubeImageMathDSS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_ConnectedComponents, None, tubeImageMathDSS3)
tubeImageMathDSS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_VoronoiTessellation, None, tubeImageMathDSS3)
tubeImageMathDSS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDSS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDSS3)
tubeImageMathDSS3_swigregister = _tubeImageMathPython.tubeImageMathDSS3_swigregister
tubeImageMathDSS3_swigregister(tubeImageMathDSS3)

def tubeImageMathDSS3___New_orig__() -> "tubeImageMathDSS3_Pointer":
    """tubeImageMathDSS3___New_orig__() -> tubeImageMathDSS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathDSS3___New_orig__()

def tubeImageMathDSS3_cast(obj: 'itkLightObject') -> "tubeImageMathDSS3 *":
    """tubeImageMathDSS3_cast(itkLightObject obj) -> tubeImageMathDSS3"""
    return _tubeImageMathPython.tubeImageMathDSS3_cast(obj)

class tubeImageMathDUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDUC2_Pointer":
        """__New_orig__() -> tubeImageMathDUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDUC2_Pointer":
        """Clone(tubeImageMathDUC2 self) -> tubeImageMathDUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUC2_Clone(self)


    def SetInput(self, input: 'itkImageD2') -> "void":
        """SetInput(tubeImageMathDUC2 self, itkImageD2 input)"""
        return _tubeImageMathPython.tubeImageMathDUC2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathDUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeImageMathDUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathDUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathDUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathDUC2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDUC2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDUC2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathDUC2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUC2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDUC2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDUC2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDUC2 self, itkImageD2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDUC2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD2') -> "void":
        """MultiplyImages(tubeImageMathDUC2 self, itkImageD2 input2)"""
        return _tubeImageMathPython.tubeImageMathDUC2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDUC2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDUC2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDUC2 self)"""
        return _tubeImageMathPython.tubeImageMathDUC2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDUC2 self)"""
        return _tubeImageMathPython.tubeImageMathDUC2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDUC2 self)"""
        return _tubeImageMathPython.tubeImageMathDUC2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDUC2 self, itkImageD2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDUC2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDUC2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDUC2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDUC2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDUC2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDUC2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDUC2 self)"""
        return _tubeImageMathPython.tubeImageMathDUC2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDUC2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUC2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUC2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDUC2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDUC2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDUC2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDUC2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDUC2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUC2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUC2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDUC2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDUC2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDUC2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDUC2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD2') -> "void":
        """IntensityCorrection(tubeImageMathDUC2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDUC2 self, double factor)
        Resize(tubeImageMathDUC2 self, itkImageD2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDUC2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDUC2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDUC2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDUC2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDUC2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathDUC2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathDUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDUC2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDUC2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDUC2

    def cast(obj: 'itkLightObject') -> "tubeImageMathDUC2 *":
        """cast(itkLightObject obj) -> tubeImageMathDUC2"""
        return _tubeImageMathPython.tubeImageMathDUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDUC2

        Create a new object of the class tubeImageMathDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDUC2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Clone, None, tubeImageMathDUC2)
tubeImageMathDUC2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_SetInput, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetInput, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetOutput, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetOutputFloat, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetOutputUChar, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetOutputShort, None, tubeImageMathDUC2)
tubeImageMathDUC2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_IntensityWindow, None, tubeImageMathDUC2)
tubeImageMathDUC2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDUC2)
tubeImageMathDUC2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Resample, None, tubeImageMathDUC2)
tubeImageMathDUC2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_AddUniformNoise, None, tubeImageMathDUC2)
tubeImageMathDUC2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_AddGaussianNoise, None, tubeImageMathDUC2)
tubeImageMathDUC2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_AddImages, None, tubeImageMathDUC2)
tubeImageMathDUC2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_MultiplyImages, None, tubeImageMathDUC2)
tubeImageMathDUC2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_PadUsingMirroring, None, tubeImageMathDUC2)
tubeImageMathDUC2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_NormalizeMeanStdDev, None, tubeImageMathDUC2)
tubeImageMathDUC2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_NormalizeFWHM, None, tubeImageMathDUC2)
tubeImageMathDUC2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_NormalizeMeanShift, None, tubeImageMathDUC2)
tubeImageMathDUC2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_FuseUsingMax, None, tubeImageMathDUC2)
tubeImageMathDUC2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_MedianFilter, None, tubeImageMathDUC2)
tubeImageMathDUC2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Threshold, None, tubeImageMathDUC2)
tubeImageMathDUC2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_MeanWithinMaskRange, None, tubeImageMathDUC2)
tubeImageMathDUC2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_StdDevWithinMaskRange, None, tubeImageMathDUC2)
tubeImageMathDUC2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_AbsoluteValue, None, tubeImageMathDUC2)
tubeImageMathDUC2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_ReplaceValuesOutsideMaskRange, None, tubeImageMathDUC2)
tubeImageMathDUC2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Erode, None, tubeImageMathDUC2)
tubeImageMathDUC2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Dilate, None, tubeImageMathDUC2)
tubeImageMathDUC2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_ReplaceValueWithinMaskRange, None, tubeImageMathDUC2)
tubeImageMathDUC2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Blur, None, tubeImageMathDUC2)
tubeImageMathDUC2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_BlurOrder, None, tubeImageMathDUC2)
tubeImageMathDUC2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_HistogramBinMin, None, tubeImageMathDUC2)
tubeImageMathDUC2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_HistogramBinSize, None, tubeImageMathDUC2)
tubeImageMathDUC2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Histogram, None, tubeImageMathDUC2)
tubeImageMathDUC2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_IntensityCorrectionBySlice, None, tubeImageMathDUC2)
tubeImageMathDUC2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_IntensityCorrection, None, tubeImageMathDUC2)
tubeImageMathDUC2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_Resize, None, tubeImageMathDUC2)
tubeImageMathDUC2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_ExtractSlice, None, tubeImageMathDUC2)
tubeImageMathDUC2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_EnhanceVessels, None, tubeImageMathDUC2)
tubeImageMathDUC2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_ConnectedComponents, None, tubeImageMathDUC2)
tubeImageMathDUC2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_VoronoiTessellation, None, tubeImageMathDUC2)
tubeImageMathDUC2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDUC2)
tubeImageMathDUC2_swigregister = _tubeImageMathPython.tubeImageMathDUC2_swigregister
tubeImageMathDUC2_swigregister(tubeImageMathDUC2)

def tubeImageMathDUC2___New_orig__() -> "tubeImageMathDUC2_Pointer":
    """tubeImageMathDUC2___New_orig__() -> tubeImageMathDUC2_Pointer"""
    return _tubeImageMathPython.tubeImageMathDUC2___New_orig__()

def tubeImageMathDUC2_cast(obj: 'itkLightObject') -> "tubeImageMathDUC2 *":
    """tubeImageMathDUC2_cast(itkLightObject obj) -> tubeImageMathDUC2"""
    return _tubeImageMathPython.tubeImageMathDUC2_cast(obj)

class tubeImageMathDUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDUC3_Pointer":
        """__New_orig__() -> tubeImageMathDUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDUC3_Pointer":
        """Clone(tubeImageMathDUC3 self) -> tubeImageMathDUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUC3_Clone(self)


    def SetInput(self, input: 'itkImageD3') -> "void":
        """SetInput(tubeImageMathDUC3 self, itkImageD3 input)"""
        return _tubeImageMathPython.tubeImageMathDUC3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathDUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetInput(self)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeImageMathDUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathDUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathDUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathDUC3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDUC3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDUC3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathDUC3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUC3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDUC3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDUC3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDUC3 self, itkImageD3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDUC3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD3') -> "void":
        """MultiplyImages(tubeImageMathDUC3 self, itkImageD3 input2)"""
        return _tubeImageMathPython.tubeImageMathDUC3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDUC3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDUC3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDUC3 self)"""
        return _tubeImageMathPython.tubeImageMathDUC3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDUC3 self)"""
        return _tubeImageMathPython.tubeImageMathDUC3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDUC3 self)"""
        return _tubeImageMathPython.tubeImageMathDUC3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDUC3 self, itkImageD3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDUC3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDUC3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDUC3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDUC3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDUC3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDUC3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDUC3 self)"""
        return _tubeImageMathPython.tubeImageMathDUC3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDUC3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUC3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUC3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDUC3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDUC3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDUC3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDUC3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDUC3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUC3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUC3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDUC3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDUC3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDUC3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDUC3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD3') -> "void":
        """IntensityCorrection(tubeImageMathDUC3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDUC3 self, double factor)
        Resize(tubeImageMathDUC3 self, itkImageD3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDUC3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDUC3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDUC3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDUC3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDUC3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathDUC3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathDUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDUC3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDUC3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDUC3

    def cast(obj: 'itkLightObject') -> "tubeImageMathDUC3 *":
        """cast(itkLightObject obj) -> tubeImageMathDUC3"""
        return _tubeImageMathPython.tubeImageMathDUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDUC3

        Create a new object of the class tubeImageMathDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDUC3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Clone, None, tubeImageMathDUC3)
tubeImageMathDUC3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_SetInput, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetInput, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetOutput, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetOutputFloat, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetOutputUChar, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetOutputShort, None, tubeImageMathDUC3)
tubeImageMathDUC3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_IntensityWindow, None, tubeImageMathDUC3)
tubeImageMathDUC3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDUC3)
tubeImageMathDUC3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Resample, None, tubeImageMathDUC3)
tubeImageMathDUC3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_AddUniformNoise, None, tubeImageMathDUC3)
tubeImageMathDUC3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_AddGaussianNoise, None, tubeImageMathDUC3)
tubeImageMathDUC3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_AddImages, None, tubeImageMathDUC3)
tubeImageMathDUC3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_MultiplyImages, None, tubeImageMathDUC3)
tubeImageMathDUC3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_PadUsingMirroring, None, tubeImageMathDUC3)
tubeImageMathDUC3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_NormalizeMeanStdDev, None, tubeImageMathDUC3)
tubeImageMathDUC3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_NormalizeFWHM, None, tubeImageMathDUC3)
tubeImageMathDUC3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_NormalizeMeanShift, None, tubeImageMathDUC3)
tubeImageMathDUC3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_FuseUsingMax, None, tubeImageMathDUC3)
tubeImageMathDUC3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_MedianFilter, None, tubeImageMathDUC3)
tubeImageMathDUC3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Threshold, None, tubeImageMathDUC3)
tubeImageMathDUC3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_MeanWithinMaskRange, None, tubeImageMathDUC3)
tubeImageMathDUC3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_StdDevWithinMaskRange, None, tubeImageMathDUC3)
tubeImageMathDUC3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_AbsoluteValue, None, tubeImageMathDUC3)
tubeImageMathDUC3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_ReplaceValuesOutsideMaskRange, None, tubeImageMathDUC3)
tubeImageMathDUC3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Erode, None, tubeImageMathDUC3)
tubeImageMathDUC3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Dilate, None, tubeImageMathDUC3)
tubeImageMathDUC3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_ReplaceValueWithinMaskRange, None, tubeImageMathDUC3)
tubeImageMathDUC3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Blur, None, tubeImageMathDUC3)
tubeImageMathDUC3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_BlurOrder, None, tubeImageMathDUC3)
tubeImageMathDUC3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_HistogramBinMin, None, tubeImageMathDUC3)
tubeImageMathDUC3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_HistogramBinSize, None, tubeImageMathDUC3)
tubeImageMathDUC3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Histogram, None, tubeImageMathDUC3)
tubeImageMathDUC3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_IntensityCorrectionBySlice, None, tubeImageMathDUC3)
tubeImageMathDUC3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_IntensityCorrection, None, tubeImageMathDUC3)
tubeImageMathDUC3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_Resize, None, tubeImageMathDUC3)
tubeImageMathDUC3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_ExtractSlice, None, tubeImageMathDUC3)
tubeImageMathDUC3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_EnhanceVessels, None, tubeImageMathDUC3)
tubeImageMathDUC3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_ConnectedComponents, None, tubeImageMathDUC3)
tubeImageMathDUC3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_VoronoiTessellation, None, tubeImageMathDUC3)
tubeImageMathDUC3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDUC3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDUC3)
tubeImageMathDUC3_swigregister = _tubeImageMathPython.tubeImageMathDUC3_swigregister
tubeImageMathDUC3_swigregister(tubeImageMathDUC3)

def tubeImageMathDUC3___New_orig__() -> "tubeImageMathDUC3_Pointer":
    """tubeImageMathDUC3___New_orig__() -> tubeImageMathDUC3_Pointer"""
    return _tubeImageMathPython.tubeImageMathDUC3___New_orig__()

def tubeImageMathDUC3_cast(obj: 'itkLightObject') -> "tubeImageMathDUC3 *":
    """tubeImageMathDUC3_cast(itkLightObject obj) -> tubeImageMathDUC3"""
    return _tubeImageMathPython.tubeImageMathDUC3_cast(obj)

class tubeImageMathDUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDUS2_Pointer":
        """__New_orig__() -> tubeImageMathDUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDUS2_Pointer":
        """Clone(tubeImageMathDUS2 self) -> tubeImageMathDUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUS2_Clone(self)


    def SetInput(self, input: 'itkImageD2') -> "void":
        """SetInput(tubeImageMathDUS2 self, itkImageD2 input)"""
        return _tubeImageMathPython.tubeImageMathDUS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathDUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeImageMathDUS2 self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathDUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathDUS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathDUS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDUS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDUS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathDUS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDUS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDUS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDUS2 self, itkImageD2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDUS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD2') -> "void":
        """MultiplyImages(tubeImageMathDUS2 self, itkImageD2 input2)"""
        return _tubeImageMathPython.tubeImageMathDUS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDUS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDUS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDUS2 self)"""
        return _tubeImageMathPython.tubeImageMathDUS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDUS2 self)"""
        return _tubeImageMathPython.tubeImageMathDUS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDUS2 self)"""
        return _tubeImageMathPython.tubeImageMathDUS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDUS2 self, itkImageD2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDUS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDUS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDUS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDUS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDUS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDUS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDUS2 self)"""
        return _tubeImageMathPython.tubeImageMathDUS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDUS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDUS2 self, itkImageD2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDUS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDUS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDUS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDUS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDUS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDUS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDUS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDUS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD2') -> "void":
        """IntensityCorrection(tubeImageMathDUS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDUS2 self, double factor)
        Resize(tubeImageMathDUS2 self, itkImageD2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDUS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDUS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDUS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDUS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDUS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathDUS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathDUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDUS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDUS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDUS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathDUS2 *":
        """cast(itkLightObject obj) -> tubeImageMathDUS2"""
        return _tubeImageMathPython.tubeImageMathDUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDUS2

        Create a new object of the class tubeImageMathDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDUS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Clone, None, tubeImageMathDUS2)
tubeImageMathDUS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_SetInput, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetInput, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetOutput, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetOutputFloat, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetOutputUChar, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetOutputShort, None, tubeImageMathDUS2)
tubeImageMathDUS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_IntensityWindow, None, tubeImageMathDUS2)
tubeImageMathDUS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDUS2)
tubeImageMathDUS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Resample, None, tubeImageMathDUS2)
tubeImageMathDUS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_AddUniformNoise, None, tubeImageMathDUS2)
tubeImageMathDUS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_AddGaussianNoise, None, tubeImageMathDUS2)
tubeImageMathDUS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_AddImages, None, tubeImageMathDUS2)
tubeImageMathDUS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_MultiplyImages, None, tubeImageMathDUS2)
tubeImageMathDUS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_PadUsingMirroring, None, tubeImageMathDUS2)
tubeImageMathDUS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_NormalizeMeanStdDev, None, tubeImageMathDUS2)
tubeImageMathDUS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_NormalizeFWHM, None, tubeImageMathDUS2)
tubeImageMathDUS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_NormalizeMeanShift, None, tubeImageMathDUS2)
tubeImageMathDUS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_FuseUsingMax, None, tubeImageMathDUS2)
tubeImageMathDUS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_MedianFilter, None, tubeImageMathDUS2)
tubeImageMathDUS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Threshold, None, tubeImageMathDUS2)
tubeImageMathDUS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_MeanWithinMaskRange, None, tubeImageMathDUS2)
tubeImageMathDUS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_StdDevWithinMaskRange, None, tubeImageMathDUS2)
tubeImageMathDUS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_AbsoluteValue, None, tubeImageMathDUS2)
tubeImageMathDUS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathDUS2)
tubeImageMathDUS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Erode, None, tubeImageMathDUS2)
tubeImageMathDUS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Dilate, None, tubeImageMathDUS2)
tubeImageMathDUS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_ReplaceValueWithinMaskRange, None, tubeImageMathDUS2)
tubeImageMathDUS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Blur, None, tubeImageMathDUS2)
tubeImageMathDUS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_BlurOrder, None, tubeImageMathDUS2)
tubeImageMathDUS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_HistogramBinMin, None, tubeImageMathDUS2)
tubeImageMathDUS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_HistogramBinSize, None, tubeImageMathDUS2)
tubeImageMathDUS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Histogram, None, tubeImageMathDUS2)
tubeImageMathDUS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_IntensityCorrectionBySlice, None, tubeImageMathDUS2)
tubeImageMathDUS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_IntensityCorrection, None, tubeImageMathDUS2)
tubeImageMathDUS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_Resize, None, tubeImageMathDUS2)
tubeImageMathDUS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_ExtractSlice, None, tubeImageMathDUS2)
tubeImageMathDUS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_EnhanceVessels, None, tubeImageMathDUS2)
tubeImageMathDUS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_ConnectedComponents, None, tubeImageMathDUS2)
tubeImageMathDUS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_VoronoiTessellation, None, tubeImageMathDUS2)
tubeImageMathDUS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDUS2)
tubeImageMathDUS2_swigregister = _tubeImageMathPython.tubeImageMathDUS2_swigregister
tubeImageMathDUS2_swigregister(tubeImageMathDUS2)

def tubeImageMathDUS2___New_orig__() -> "tubeImageMathDUS2_Pointer":
    """tubeImageMathDUS2___New_orig__() -> tubeImageMathDUS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathDUS2___New_orig__()

def tubeImageMathDUS2_cast(obj: 'itkLightObject') -> "tubeImageMathDUS2 *":
    """tubeImageMathDUS2_cast(itkLightObject obj) -> tubeImageMathDUS2"""
    return _tubeImageMathPython.tubeImageMathDUS2_cast(obj)

class tubeImageMathDUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathDUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathDUS3_Pointer":
        """__New_orig__() -> tubeImageMathDUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathDUS3_Pointer":
        """Clone(tubeImageMathDUS3 self) -> tubeImageMathDUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathDUS3_Clone(self)


    def SetInput(self, input: 'itkImageD3') -> "void":
        """SetInput(tubeImageMathDUS3 self, itkImageD3 input)"""
        return _tubeImageMathPython.tubeImageMathDUS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathDUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetInput(self)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeImageMathDUS3 self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathDUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathDUS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathDUS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathDUS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathDUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathDUS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathDUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathDUS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathDUS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathDUS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathDUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageD3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathDUS3 self, itkImageD3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathDUS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageD3') -> "void":
        """MultiplyImages(tubeImageMathDUS3 self, itkImageD3 input2)"""
        return _tubeImageMathPython.tubeImageMathDUS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathDUS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathDUS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathDUS3 self)"""
        return _tubeImageMathPython.tubeImageMathDUS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathDUS3 self)"""
        return _tubeImageMathPython.tubeImageMathDUS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathDUS3 self)"""
        return _tubeImageMathPython.tubeImageMathDUS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageD3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathDUS3 self, itkImageD3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathDUS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathDUS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathDUS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathDUS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathDUS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathDUS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathDUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathDUS3 self)"""
        return _tubeImageMathPython.tubeImageMathDUS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathDUS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathDUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathDUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathDUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathDUS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageD3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathDUS3 self, itkImageD3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathDUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathDUS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathDUS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathDUS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathDUS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathDUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathDUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathDUS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathDUS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathDUS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathDUS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathDUS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathDUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageD3') -> "void":
        """IntensityCorrection(tubeImageMathDUS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageD3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathDUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathDUS3 self, double factor)
        Resize(tubeImageMathDUS3 self, itkImageD3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathDUS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathDUS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathDUS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathDUS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathDUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathDUS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathDUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathDUS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathDUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathDUS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathDUS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathDUS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathDUS3 *":
        """cast(itkLightObject obj) -> tubeImageMathDUS3"""
        return _tubeImageMathPython.tubeImageMathDUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathDUS3

        Create a new object of the class tubeImageMathDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathDUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathDUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathDUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathDUS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Clone, None, tubeImageMathDUS3)
tubeImageMathDUS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_SetInput, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetInput, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetOutput, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetOutputFloat, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetOutputUChar, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetOutputShort, None, tubeImageMathDUS3)
tubeImageMathDUS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_IntensityWindow, None, tubeImageMathDUS3)
tubeImageMathDUS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathDUS3)
tubeImageMathDUS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Resample, None, tubeImageMathDUS3)
tubeImageMathDUS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_AddUniformNoise, None, tubeImageMathDUS3)
tubeImageMathDUS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_AddGaussianNoise, None, tubeImageMathDUS3)
tubeImageMathDUS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_AddImages, None, tubeImageMathDUS3)
tubeImageMathDUS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_MultiplyImages, None, tubeImageMathDUS3)
tubeImageMathDUS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_PadUsingMirroring, None, tubeImageMathDUS3)
tubeImageMathDUS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_NormalizeMeanStdDev, None, tubeImageMathDUS3)
tubeImageMathDUS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_NormalizeFWHM, None, tubeImageMathDUS3)
tubeImageMathDUS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_NormalizeMeanShift, None, tubeImageMathDUS3)
tubeImageMathDUS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_FuseUsingMax, None, tubeImageMathDUS3)
tubeImageMathDUS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_MedianFilter, None, tubeImageMathDUS3)
tubeImageMathDUS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Threshold, None, tubeImageMathDUS3)
tubeImageMathDUS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_MeanWithinMaskRange, None, tubeImageMathDUS3)
tubeImageMathDUS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_StdDevWithinMaskRange, None, tubeImageMathDUS3)
tubeImageMathDUS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_AbsoluteValue, None, tubeImageMathDUS3)
tubeImageMathDUS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathDUS3)
tubeImageMathDUS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Erode, None, tubeImageMathDUS3)
tubeImageMathDUS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Dilate, None, tubeImageMathDUS3)
tubeImageMathDUS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_ReplaceValueWithinMaskRange, None, tubeImageMathDUS3)
tubeImageMathDUS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Blur, None, tubeImageMathDUS3)
tubeImageMathDUS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_BlurOrder, None, tubeImageMathDUS3)
tubeImageMathDUS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_HistogramBinMin, None, tubeImageMathDUS3)
tubeImageMathDUS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_HistogramBinSize, None, tubeImageMathDUS3)
tubeImageMathDUS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Histogram, None, tubeImageMathDUS3)
tubeImageMathDUS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_IntensityCorrectionBySlice, None, tubeImageMathDUS3)
tubeImageMathDUS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_IntensityCorrection, None, tubeImageMathDUS3)
tubeImageMathDUS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_Resize, None, tubeImageMathDUS3)
tubeImageMathDUS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_ExtractSlice, None, tubeImageMathDUS3)
tubeImageMathDUS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_EnhanceVessels, None, tubeImageMathDUS3)
tubeImageMathDUS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_ConnectedComponents, None, tubeImageMathDUS3)
tubeImageMathDUS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_VoronoiTessellation, None, tubeImageMathDUS3)
tubeImageMathDUS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathDUS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathDUS3)
tubeImageMathDUS3_swigregister = _tubeImageMathPython.tubeImageMathDUS3_swigregister
tubeImageMathDUS3_swigregister(tubeImageMathDUS3)

def tubeImageMathDUS3___New_orig__() -> "tubeImageMathDUS3_Pointer":
    """tubeImageMathDUS3___New_orig__() -> tubeImageMathDUS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathDUS3___New_orig__()

def tubeImageMathDUS3_cast(obj: 'itkLightObject') -> "tubeImageMathDUS3 *":
    """tubeImageMathDUS3_cast(itkLightObject obj) -> tubeImageMathDUS3"""
    return _tubeImageMathPython.tubeImageMathDUS3_cast(obj)

class tubeImageMathFD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFD2_Pointer":
        """__New_orig__() -> tubeImageMathFD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFD2_Pointer":
        """Clone(tubeImageMathFD2 self) -> tubeImageMathFD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFD2_Clone(self)


    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(tubeImageMathFD2 self, itkImageF2 input)"""
        return _tubeImageMathPython.tubeImageMathFD2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathFD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeImageMathFD2 self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathFD2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathFD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFD2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathFD2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFD2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathFD2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFD2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFD2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFD2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathFD2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFD2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFD2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFD2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFD2 self, itkImageF2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFD2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF2') -> "void":
        """MultiplyImages(tubeImageMathFD2 self, itkImageF2 input2)"""
        return _tubeImageMathPython.tubeImageMathFD2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFD2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFD2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFD2 self)"""
        return _tubeImageMathPython.tubeImageMathFD2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFD2 self)"""
        return _tubeImageMathPython.tubeImageMathFD2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFD2 self)"""
        return _tubeImageMathPython.tubeImageMathFD2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFD2 self, itkImageF2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFD2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFD2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFD2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFD2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFD2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFD2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFD2 self)"""
        return _tubeImageMathPython.tubeImageMathFD2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFD2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFD2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFD2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFD2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFD2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFD2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFD2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFD2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFD2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFD2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFD2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFD2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFD2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFD2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF2') -> "void":
        """IntensityCorrection(tubeImageMathFD2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFD2 self, double factor)
        Resize(tubeImageMathFD2 self, itkImageF2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFD2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFD2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFD2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFD2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFD2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathFD2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathFD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFD2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFD2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFD2

    def cast(obj: 'itkLightObject') -> "tubeImageMathFD2 *":
        """cast(itkLightObject obj) -> tubeImageMathFD2"""
        return _tubeImageMathPython.tubeImageMathFD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFD2

        Create a new object of the class tubeImageMathFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFD2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Clone, None, tubeImageMathFD2)
tubeImageMathFD2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_SetInput, None, tubeImageMathFD2)
tubeImageMathFD2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetInput, None, tubeImageMathFD2)
tubeImageMathFD2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetOutput, None, tubeImageMathFD2)
tubeImageMathFD2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetOutputFloat, None, tubeImageMathFD2)
tubeImageMathFD2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetOutputUChar, None, tubeImageMathFD2)
tubeImageMathFD2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetOutputShort, None, tubeImageMathFD2)
tubeImageMathFD2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_IntensityWindow, None, tubeImageMathFD2)
tubeImageMathFD2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFD2)
tubeImageMathFD2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Resample, None, tubeImageMathFD2)
tubeImageMathFD2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_AddUniformNoise, None, tubeImageMathFD2)
tubeImageMathFD2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_AddGaussianNoise, None, tubeImageMathFD2)
tubeImageMathFD2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_AddImages, None, tubeImageMathFD2)
tubeImageMathFD2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_MultiplyImages, None, tubeImageMathFD2)
tubeImageMathFD2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_PadUsingMirroring, None, tubeImageMathFD2)
tubeImageMathFD2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_NormalizeMeanStdDev, None, tubeImageMathFD2)
tubeImageMathFD2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_NormalizeFWHM, None, tubeImageMathFD2)
tubeImageMathFD2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_NormalizeMeanShift, None, tubeImageMathFD2)
tubeImageMathFD2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_FuseUsingMax, None, tubeImageMathFD2)
tubeImageMathFD2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_MedianFilter, None, tubeImageMathFD2)
tubeImageMathFD2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Threshold, None, tubeImageMathFD2)
tubeImageMathFD2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_MeanWithinMaskRange, None, tubeImageMathFD2)
tubeImageMathFD2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_StdDevWithinMaskRange, None, tubeImageMathFD2)
tubeImageMathFD2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_AbsoluteValue, None, tubeImageMathFD2)
tubeImageMathFD2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_ReplaceValuesOutsideMaskRange, None, tubeImageMathFD2)
tubeImageMathFD2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Erode, None, tubeImageMathFD2)
tubeImageMathFD2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Dilate, None, tubeImageMathFD2)
tubeImageMathFD2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_ReplaceValueWithinMaskRange, None, tubeImageMathFD2)
tubeImageMathFD2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Blur, None, tubeImageMathFD2)
tubeImageMathFD2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_BlurOrder, None, tubeImageMathFD2)
tubeImageMathFD2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_HistogramBinMin, None, tubeImageMathFD2)
tubeImageMathFD2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_HistogramBinSize, None, tubeImageMathFD2)
tubeImageMathFD2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Histogram, None, tubeImageMathFD2)
tubeImageMathFD2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_IntensityCorrectionBySlice, None, tubeImageMathFD2)
tubeImageMathFD2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_IntensityCorrection, None, tubeImageMathFD2)
tubeImageMathFD2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_Resize, None, tubeImageMathFD2)
tubeImageMathFD2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_ExtractSlice, None, tubeImageMathFD2)
tubeImageMathFD2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_EnhanceVessels, None, tubeImageMathFD2)
tubeImageMathFD2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_ConnectedComponents, None, tubeImageMathFD2)
tubeImageMathFD2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_VoronoiTessellation, None, tubeImageMathFD2)
tubeImageMathFD2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFD2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFD2)
tubeImageMathFD2_swigregister = _tubeImageMathPython.tubeImageMathFD2_swigregister
tubeImageMathFD2_swigregister(tubeImageMathFD2)

def tubeImageMathFD2___New_orig__() -> "tubeImageMathFD2_Pointer":
    """tubeImageMathFD2___New_orig__() -> tubeImageMathFD2_Pointer"""
    return _tubeImageMathPython.tubeImageMathFD2___New_orig__()

def tubeImageMathFD2_cast(obj: 'itkLightObject') -> "tubeImageMathFD2 *":
    """tubeImageMathFD2_cast(itkLightObject obj) -> tubeImageMathFD2"""
    return _tubeImageMathPython.tubeImageMathFD2_cast(obj)

class tubeImageMathFD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFD3_Pointer":
        """__New_orig__() -> tubeImageMathFD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFD3_Pointer":
        """Clone(tubeImageMathFD3 self) -> tubeImageMathFD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFD3_Clone(self)


    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(tubeImageMathFD3 self, itkImageF3 input)"""
        return _tubeImageMathPython.tubeImageMathFD3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathFD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFD3_GetInput(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeImageMathFD3 self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathFD3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathFD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFD3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathFD3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFD3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathFD3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFD3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFD3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFD3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathFD3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFD3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFD3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFD3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFD3 self, itkImageF3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFD3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF3') -> "void":
        """MultiplyImages(tubeImageMathFD3 self, itkImageF3 input2)"""
        return _tubeImageMathPython.tubeImageMathFD3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFD3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFD3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFD3 self)"""
        return _tubeImageMathPython.tubeImageMathFD3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFD3 self)"""
        return _tubeImageMathPython.tubeImageMathFD3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFD3 self)"""
        return _tubeImageMathPython.tubeImageMathFD3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFD3 self, itkImageF3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFD3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFD3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFD3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFD3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFD3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFD3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFD3 self)"""
        return _tubeImageMathPython.tubeImageMathFD3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFD3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFD3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFD3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFD3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFD3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFD3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFD3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFD3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFD3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFD3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFD3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFD3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFD3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFD3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF3') -> "void":
        """IntensityCorrection(tubeImageMathFD3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFD3 self, double factor)
        Resize(tubeImageMathFD3 self, itkImageF3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFD3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFD3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFD3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFD3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFD3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathFD3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathFD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFD3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFD3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFD3

    def cast(obj: 'itkLightObject') -> "tubeImageMathFD3 *":
        """cast(itkLightObject obj) -> tubeImageMathFD3"""
        return _tubeImageMathPython.tubeImageMathFD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFD3

        Create a new object of the class tubeImageMathFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFD3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Clone, None, tubeImageMathFD3)
tubeImageMathFD3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_SetInput, None, tubeImageMathFD3)
tubeImageMathFD3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetInput, None, tubeImageMathFD3)
tubeImageMathFD3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetOutput, None, tubeImageMathFD3)
tubeImageMathFD3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetOutputFloat, None, tubeImageMathFD3)
tubeImageMathFD3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetOutputUChar, None, tubeImageMathFD3)
tubeImageMathFD3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetOutputShort, None, tubeImageMathFD3)
tubeImageMathFD3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_IntensityWindow, None, tubeImageMathFD3)
tubeImageMathFD3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFD3)
tubeImageMathFD3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Resample, None, tubeImageMathFD3)
tubeImageMathFD3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_AddUniformNoise, None, tubeImageMathFD3)
tubeImageMathFD3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_AddGaussianNoise, None, tubeImageMathFD3)
tubeImageMathFD3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_AddImages, None, tubeImageMathFD3)
tubeImageMathFD3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_MultiplyImages, None, tubeImageMathFD3)
tubeImageMathFD3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_PadUsingMirroring, None, tubeImageMathFD3)
tubeImageMathFD3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_NormalizeMeanStdDev, None, tubeImageMathFD3)
tubeImageMathFD3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_NormalizeFWHM, None, tubeImageMathFD3)
tubeImageMathFD3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_NormalizeMeanShift, None, tubeImageMathFD3)
tubeImageMathFD3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_FuseUsingMax, None, tubeImageMathFD3)
tubeImageMathFD3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_MedianFilter, None, tubeImageMathFD3)
tubeImageMathFD3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Threshold, None, tubeImageMathFD3)
tubeImageMathFD3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_MeanWithinMaskRange, None, tubeImageMathFD3)
tubeImageMathFD3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_StdDevWithinMaskRange, None, tubeImageMathFD3)
tubeImageMathFD3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_AbsoluteValue, None, tubeImageMathFD3)
tubeImageMathFD3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_ReplaceValuesOutsideMaskRange, None, tubeImageMathFD3)
tubeImageMathFD3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Erode, None, tubeImageMathFD3)
tubeImageMathFD3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Dilate, None, tubeImageMathFD3)
tubeImageMathFD3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_ReplaceValueWithinMaskRange, None, tubeImageMathFD3)
tubeImageMathFD3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Blur, None, tubeImageMathFD3)
tubeImageMathFD3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_BlurOrder, None, tubeImageMathFD3)
tubeImageMathFD3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_HistogramBinMin, None, tubeImageMathFD3)
tubeImageMathFD3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_HistogramBinSize, None, tubeImageMathFD3)
tubeImageMathFD3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Histogram, None, tubeImageMathFD3)
tubeImageMathFD3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_IntensityCorrectionBySlice, None, tubeImageMathFD3)
tubeImageMathFD3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_IntensityCorrection, None, tubeImageMathFD3)
tubeImageMathFD3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_Resize, None, tubeImageMathFD3)
tubeImageMathFD3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_ExtractSlice, None, tubeImageMathFD3)
tubeImageMathFD3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_EnhanceVessels, None, tubeImageMathFD3)
tubeImageMathFD3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_ConnectedComponents, None, tubeImageMathFD3)
tubeImageMathFD3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_VoronoiTessellation, None, tubeImageMathFD3)
tubeImageMathFD3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFD3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFD3)
tubeImageMathFD3_swigregister = _tubeImageMathPython.tubeImageMathFD3_swigregister
tubeImageMathFD3_swigregister(tubeImageMathFD3)

def tubeImageMathFD3___New_orig__() -> "tubeImageMathFD3_Pointer":
    """tubeImageMathFD3___New_orig__() -> tubeImageMathFD3_Pointer"""
    return _tubeImageMathPython.tubeImageMathFD3___New_orig__()

def tubeImageMathFD3_cast(obj: 'itkLightObject') -> "tubeImageMathFD3 *":
    """tubeImageMathFD3_cast(itkLightObject obj) -> tubeImageMathFD3"""
    return _tubeImageMathPython.tubeImageMathFD3_cast(obj)

class tubeImageMathFF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFF2_Pointer":
        """__New_orig__() -> tubeImageMathFF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFF2_Pointer":
        """Clone(tubeImageMathFF2 self) -> tubeImageMathFF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFF2_Clone(self)


    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(tubeImageMathFF2 self, itkImageF2 input)"""
        return _tubeImageMathPython.tubeImageMathFF2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathFF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeImageMathFF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFF2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathFF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFF2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathFF2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFF2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathFF2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFF2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFF2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFF2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathFF2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFF2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFF2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFF2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFF2 self, itkImageF2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFF2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF2') -> "void":
        """MultiplyImages(tubeImageMathFF2 self, itkImageF2 input2)"""
        return _tubeImageMathPython.tubeImageMathFF2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFF2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFF2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFF2 self)"""
        return _tubeImageMathPython.tubeImageMathFF2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFF2 self)"""
        return _tubeImageMathPython.tubeImageMathFF2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFF2 self)"""
        return _tubeImageMathPython.tubeImageMathFF2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFF2 self, itkImageF2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFF2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFF2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFF2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFF2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFF2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFF2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFF2 self)"""
        return _tubeImageMathPython.tubeImageMathFF2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFF2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFF2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFF2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFF2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFF2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFF2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFF2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFF2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFF2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFF2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFF2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFF2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFF2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFF2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF2') -> "void":
        """IntensityCorrection(tubeImageMathFF2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFF2 self, double factor)
        Resize(tubeImageMathFF2 self, itkImageF2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFF2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFF2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFF2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFF2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFF2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathFF2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathFF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFF2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFF2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFF2

    def cast(obj: 'itkLightObject') -> "tubeImageMathFF2 *":
        """cast(itkLightObject obj) -> tubeImageMathFF2"""
        return _tubeImageMathPython.tubeImageMathFF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFF2

        Create a new object of the class tubeImageMathFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFF2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Clone, None, tubeImageMathFF2)
tubeImageMathFF2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_SetInput, None, tubeImageMathFF2)
tubeImageMathFF2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetInput, None, tubeImageMathFF2)
tubeImageMathFF2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetOutput, None, tubeImageMathFF2)
tubeImageMathFF2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetOutputFloat, None, tubeImageMathFF2)
tubeImageMathFF2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetOutputUChar, None, tubeImageMathFF2)
tubeImageMathFF2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetOutputShort, None, tubeImageMathFF2)
tubeImageMathFF2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_IntensityWindow, None, tubeImageMathFF2)
tubeImageMathFF2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFF2)
tubeImageMathFF2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Resample, None, tubeImageMathFF2)
tubeImageMathFF2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_AddUniformNoise, None, tubeImageMathFF2)
tubeImageMathFF2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_AddGaussianNoise, None, tubeImageMathFF2)
tubeImageMathFF2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_AddImages, None, tubeImageMathFF2)
tubeImageMathFF2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_MultiplyImages, None, tubeImageMathFF2)
tubeImageMathFF2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_PadUsingMirroring, None, tubeImageMathFF2)
tubeImageMathFF2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_NormalizeMeanStdDev, None, tubeImageMathFF2)
tubeImageMathFF2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_NormalizeFWHM, None, tubeImageMathFF2)
tubeImageMathFF2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_NormalizeMeanShift, None, tubeImageMathFF2)
tubeImageMathFF2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_FuseUsingMax, None, tubeImageMathFF2)
tubeImageMathFF2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_MedianFilter, None, tubeImageMathFF2)
tubeImageMathFF2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Threshold, None, tubeImageMathFF2)
tubeImageMathFF2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_MeanWithinMaskRange, None, tubeImageMathFF2)
tubeImageMathFF2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_StdDevWithinMaskRange, None, tubeImageMathFF2)
tubeImageMathFF2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_AbsoluteValue, None, tubeImageMathFF2)
tubeImageMathFF2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_ReplaceValuesOutsideMaskRange, None, tubeImageMathFF2)
tubeImageMathFF2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Erode, None, tubeImageMathFF2)
tubeImageMathFF2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Dilate, None, tubeImageMathFF2)
tubeImageMathFF2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_ReplaceValueWithinMaskRange, None, tubeImageMathFF2)
tubeImageMathFF2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Blur, None, tubeImageMathFF2)
tubeImageMathFF2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_BlurOrder, None, tubeImageMathFF2)
tubeImageMathFF2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_HistogramBinMin, None, tubeImageMathFF2)
tubeImageMathFF2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_HistogramBinSize, None, tubeImageMathFF2)
tubeImageMathFF2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Histogram, None, tubeImageMathFF2)
tubeImageMathFF2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_IntensityCorrectionBySlice, None, tubeImageMathFF2)
tubeImageMathFF2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_IntensityCorrection, None, tubeImageMathFF2)
tubeImageMathFF2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_Resize, None, tubeImageMathFF2)
tubeImageMathFF2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_ExtractSlice, None, tubeImageMathFF2)
tubeImageMathFF2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_EnhanceVessels, None, tubeImageMathFF2)
tubeImageMathFF2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_ConnectedComponents, None, tubeImageMathFF2)
tubeImageMathFF2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_VoronoiTessellation, None, tubeImageMathFF2)
tubeImageMathFF2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFF2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFF2)
tubeImageMathFF2_swigregister = _tubeImageMathPython.tubeImageMathFF2_swigregister
tubeImageMathFF2_swigregister(tubeImageMathFF2)

def tubeImageMathFF2___New_orig__() -> "tubeImageMathFF2_Pointer":
    """tubeImageMathFF2___New_orig__() -> tubeImageMathFF2_Pointer"""
    return _tubeImageMathPython.tubeImageMathFF2___New_orig__()

def tubeImageMathFF2_cast(obj: 'itkLightObject') -> "tubeImageMathFF2 *":
    """tubeImageMathFF2_cast(itkLightObject obj) -> tubeImageMathFF2"""
    return _tubeImageMathPython.tubeImageMathFF2_cast(obj)

class tubeImageMathFF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFF3_Pointer":
        """__New_orig__() -> tubeImageMathFF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFF3_Pointer":
        """Clone(tubeImageMathFF3 self) -> tubeImageMathFF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFF3_Clone(self)


    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(tubeImageMathFF3 self, itkImageF3 input)"""
        return _tubeImageMathPython.tubeImageMathFF3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathFF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeImageMathFF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFF3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathFF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFF3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathFF3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFF3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathFF3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFF3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFF3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFF3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathFF3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFF3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFF3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFF3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFF3 self, itkImageF3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFF3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF3') -> "void":
        """MultiplyImages(tubeImageMathFF3 self, itkImageF3 input2)"""
        return _tubeImageMathPython.tubeImageMathFF3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFF3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFF3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFF3 self)"""
        return _tubeImageMathPython.tubeImageMathFF3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFF3 self)"""
        return _tubeImageMathPython.tubeImageMathFF3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFF3 self)"""
        return _tubeImageMathPython.tubeImageMathFF3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFF3 self, itkImageF3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFF3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFF3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFF3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFF3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFF3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFF3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFF3 self)"""
        return _tubeImageMathPython.tubeImageMathFF3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFF3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFF3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFF3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFF3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFF3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFF3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFF3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFF3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFF3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFF3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFF3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFF3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFF3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFF3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF3') -> "void":
        """IntensityCorrection(tubeImageMathFF3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFF3 self, double factor)
        Resize(tubeImageMathFF3 self, itkImageF3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFF3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFF3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFF3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFF3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFF3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathFF3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathFF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFF3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFF3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFF3

    def cast(obj: 'itkLightObject') -> "tubeImageMathFF3 *":
        """cast(itkLightObject obj) -> tubeImageMathFF3"""
        return _tubeImageMathPython.tubeImageMathFF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFF3

        Create a new object of the class tubeImageMathFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFF3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Clone, None, tubeImageMathFF3)
tubeImageMathFF3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_SetInput, None, tubeImageMathFF3)
tubeImageMathFF3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetInput, None, tubeImageMathFF3)
tubeImageMathFF3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetOutput, None, tubeImageMathFF3)
tubeImageMathFF3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetOutputFloat, None, tubeImageMathFF3)
tubeImageMathFF3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetOutputUChar, None, tubeImageMathFF3)
tubeImageMathFF3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetOutputShort, None, tubeImageMathFF3)
tubeImageMathFF3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_IntensityWindow, None, tubeImageMathFF3)
tubeImageMathFF3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFF3)
tubeImageMathFF3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Resample, None, tubeImageMathFF3)
tubeImageMathFF3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_AddUniformNoise, None, tubeImageMathFF3)
tubeImageMathFF3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_AddGaussianNoise, None, tubeImageMathFF3)
tubeImageMathFF3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_AddImages, None, tubeImageMathFF3)
tubeImageMathFF3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_MultiplyImages, None, tubeImageMathFF3)
tubeImageMathFF3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_PadUsingMirroring, None, tubeImageMathFF3)
tubeImageMathFF3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_NormalizeMeanStdDev, None, tubeImageMathFF3)
tubeImageMathFF3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_NormalizeFWHM, None, tubeImageMathFF3)
tubeImageMathFF3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_NormalizeMeanShift, None, tubeImageMathFF3)
tubeImageMathFF3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_FuseUsingMax, None, tubeImageMathFF3)
tubeImageMathFF3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_MedianFilter, None, tubeImageMathFF3)
tubeImageMathFF3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Threshold, None, tubeImageMathFF3)
tubeImageMathFF3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_MeanWithinMaskRange, None, tubeImageMathFF3)
tubeImageMathFF3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_StdDevWithinMaskRange, None, tubeImageMathFF3)
tubeImageMathFF3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_AbsoluteValue, None, tubeImageMathFF3)
tubeImageMathFF3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_ReplaceValuesOutsideMaskRange, None, tubeImageMathFF3)
tubeImageMathFF3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Erode, None, tubeImageMathFF3)
tubeImageMathFF3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Dilate, None, tubeImageMathFF3)
tubeImageMathFF3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_ReplaceValueWithinMaskRange, None, tubeImageMathFF3)
tubeImageMathFF3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Blur, None, tubeImageMathFF3)
tubeImageMathFF3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_BlurOrder, None, tubeImageMathFF3)
tubeImageMathFF3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_HistogramBinMin, None, tubeImageMathFF3)
tubeImageMathFF3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_HistogramBinSize, None, tubeImageMathFF3)
tubeImageMathFF3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Histogram, None, tubeImageMathFF3)
tubeImageMathFF3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_IntensityCorrectionBySlice, None, tubeImageMathFF3)
tubeImageMathFF3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_IntensityCorrection, None, tubeImageMathFF3)
tubeImageMathFF3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_Resize, None, tubeImageMathFF3)
tubeImageMathFF3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_ExtractSlice, None, tubeImageMathFF3)
tubeImageMathFF3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_EnhanceVessels, None, tubeImageMathFF3)
tubeImageMathFF3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_ConnectedComponents, None, tubeImageMathFF3)
tubeImageMathFF3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_VoronoiTessellation, None, tubeImageMathFF3)
tubeImageMathFF3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFF3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFF3)
tubeImageMathFF3_swigregister = _tubeImageMathPython.tubeImageMathFF3_swigregister
tubeImageMathFF3_swigregister(tubeImageMathFF3)

def tubeImageMathFF3___New_orig__() -> "tubeImageMathFF3_Pointer":
    """tubeImageMathFF3___New_orig__() -> tubeImageMathFF3_Pointer"""
    return _tubeImageMathPython.tubeImageMathFF3___New_orig__()

def tubeImageMathFF3_cast(obj: 'itkLightObject') -> "tubeImageMathFF3 *":
    """tubeImageMathFF3_cast(itkLightObject obj) -> tubeImageMathFF3"""
    return _tubeImageMathPython.tubeImageMathFF3_cast(obj)

class tubeImageMathFSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFSS2_Pointer":
        """__New_orig__() -> tubeImageMathFSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFSS2_Pointer":
        """Clone(tubeImageMathFSS2 self) -> tubeImageMathFSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFSS2_Clone(self)


    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(tubeImageMathFSS2 self, itkImageF2 input)"""
        return _tubeImageMathPython.tubeImageMathFSS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathFSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeImageMathFSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathFSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathFSS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathFSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFSS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFSS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathFSS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFSS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFSS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFSS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFSS2 self, itkImageF2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFSS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF2') -> "void":
        """MultiplyImages(tubeImageMathFSS2 self, itkImageF2 input2)"""
        return _tubeImageMathPython.tubeImageMathFSS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFSS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFSS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFSS2 self)"""
        return _tubeImageMathPython.tubeImageMathFSS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFSS2 self)"""
        return _tubeImageMathPython.tubeImageMathFSS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFSS2 self)"""
        return _tubeImageMathPython.tubeImageMathFSS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFSS2 self, itkImageF2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFSS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFSS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFSS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFSS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFSS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFSS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFSS2 self)"""
        return _tubeImageMathPython.tubeImageMathFSS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFSS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFSS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFSS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFSS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFSS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFSS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFSS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFSS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFSS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFSS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFSS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFSS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFSS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFSS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF2') -> "void":
        """IntensityCorrection(tubeImageMathFSS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFSS2 self, double factor)
        Resize(tubeImageMathFSS2 self, itkImageF2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFSS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFSS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFSS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFSS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFSS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathFSS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathFSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFSS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFSS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFSS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathFSS2 *":
        """cast(itkLightObject obj) -> tubeImageMathFSS2"""
        return _tubeImageMathPython.tubeImageMathFSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFSS2

        Create a new object of the class tubeImageMathFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFSS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Clone, None, tubeImageMathFSS2)
tubeImageMathFSS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_SetInput, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetInput, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetOutput, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetOutputFloat, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetOutputUChar, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetOutputShort, None, tubeImageMathFSS2)
tubeImageMathFSS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_IntensityWindow, None, tubeImageMathFSS2)
tubeImageMathFSS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFSS2)
tubeImageMathFSS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Resample, None, tubeImageMathFSS2)
tubeImageMathFSS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_AddUniformNoise, None, tubeImageMathFSS2)
tubeImageMathFSS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_AddGaussianNoise, None, tubeImageMathFSS2)
tubeImageMathFSS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_AddImages, None, tubeImageMathFSS2)
tubeImageMathFSS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_MultiplyImages, None, tubeImageMathFSS2)
tubeImageMathFSS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_PadUsingMirroring, None, tubeImageMathFSS2)
tubeImageMathFSS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_NormalizeMeanStdDev, None, tubeImageMathFSS2)
tubeImageMathFSS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_NormalizeFWHM, None, tubeImageMathFSS2)
tubeImageMathFSS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_NormalizeMeanShift, None, tubeImageMathFSS2)
tubeImageMathFSS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_FuseUsingMax, None, tubeImageMathFSS2)
tubeImageMathFSS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_MedianFilter, None, tubeImageMathFSS2)
tubeImageMathFSS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Threshold, None, tubeImageMathFSS2)
tubeImageMathFSS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_MeanWithinMaskRange, None, tubeImageMathFSS2)
tubeImageMathFSS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_StdDevWithinMaskRange, None, tubeImageMathFSS2)
tubeImageMathFSS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_AbsoluteValue, None, tubeImageMathFSS2)
tubeImageMathFSS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathFSS2)
tubeImageMathFSS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Erode, None, tubeImageMathFSS2)
tubeImageMathFSS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Dilate, None, tubeImageMathFSS2)
tubeImageMathFSS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_ReplaceValueWithinMaskRange, None, tubeImageMathFSS2)
tubeImageMathFSS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Blur, None, tubeImageMathFSS2)
tubeImageMathFSS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_BlurOrder, None, tubeImageMathFSS2)
tubeImageMathFSS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_HistogramBinMin, None, tubeImageMathFSS2)
tubeImageMathFSS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_HistogramBinSize, None, tubeImageMathFSS2)
tubeImageMathFSS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Histogram, None, tubeImageMathFSS2)
tubeImageMathFSS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_IntensityCorrectionBySlice, None, tubeImageMathFSS2)
tubeImageMathFSS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_IntensityCorrection, None, tubeImageMathFSS2)
tubeImageMathFSS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_Resize, None, tubeImageMathFSS2)
tubeImageMathFSS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_ExtractSlice, None, tubeImageMathFSS2)
tubeImageMathFSS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_EnhanceVessels, None, tubeImageMathFSS2)
tubeImageMathFSS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_ConnectedComponents, None, tubeImageMathFSS2)
tubeImageMathFSS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_VoronoiTessellation, None, tubeImageMathFSS2)
tubeImageMathFSS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFSS2)
tubeImageMathFSS2_swigregister = _tubeImageMathPython.tubeImageMathFSS2_swigregister
tubeImageMathFSS2_swigregister(tubeImageMathFSS2)

def tubeImageMathFSS2___New_orig__() -> "tubeImageMathFSS2_Pointer":
    """tubeImageMathFSS2___New_orig__() -> tubeImageMathFSS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathFSS2___New_orig__()

def tubeImageMathFSS2_cast(obj: 'itkLightObject') -> "tubeImageMathFSS2 *":
    """tubeImageMathFSS2_cast(itkLightObject obj) -> tubeImageMathFSS2"""
    return _tubeImageMathPython.tubeImageMathFSS2_cast(obj)

class tubeImageMathFSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFSS3_Pointer":
        """__New_orig__() -> tubeImageMathFSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFSS3_Pointer":
        """Clone(tubeImageMathFSS3 self) -> tubeImageMathFSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFSS3_Clone(self)


    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(tubeImageMathFSS3 self, itkImageF3 input)"""
        return _tubeImageMathPython.tubeImageMathFSS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathFSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetInput(self)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeImageMathFSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathFSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathFSS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathFSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFSS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFSS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathFSS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFSS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFSS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFSS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFSS3 self, itkImageF3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFSS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF3') -> "void":
        """MultiplyImages(tubeImageMathFSS3 self, itkImageF3 input2)"""
        return _tubeImageMathPython.tubeImageMathFSS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFSS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFSS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFSS3 self)"""
        return _tubeImageMathPython.tubeImageMathFSS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFSS3 self)"""
        return _tubeImageMathPython.tubeImageMathFSS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFSS3 self)"""
        return _tubeImageMathPython.tubeImageMathFSS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFSS3 self, itkImageF3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFSS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFSS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFSS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFSS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFSS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFSS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFSS3 self)"""
        return _tubeImageMathPython.tubeImageMathFSS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFSS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFSS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFSS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFSS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFSS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFSS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFSS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFSS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFSS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFSS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFSS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFSS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFSS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFSS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF3') -> "void":
        """IntensityCorrection(tubeImageMathFSS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFSS3 self, double factor)
        Resize(tubeImageMathFSS3 self, itkImageF3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFSS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFSS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFSS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFSS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFSS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathFSS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathFSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFSS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFSS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFSS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathFSS3 *":
        """cast(itkLightObject obj) -> tubeImageMathFSS3"""
        return _tubeImageMathPython.tubeImageMathFSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFSS3

        Create a new object of the class tubeImageMathFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFSS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Clone, None, tubeImageMathFSS3)
tubeImageMathFSS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_SetInput, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetInput, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetOutput, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetOutputFloat, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetOutputUChar, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetOutputShort, None, tubeImageMathFSS3)
tubeImageMathFSS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_IntensityWindow, None, tubeImageMathFSS3)
tubeImageMathFSS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFSS3)
tubeImageMathFSS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Resample, None, tubeImageMathFSS3)
tubeImageMathFSS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_AddUniformNoise, None, tubeImageMathFSS3)
tubeImageMathFSS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_AddGaussianNoise, None, tubeImageMathFSS3)
tubeImageMathFSS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_AddImages, None, tubeImageMathFSS3)
tubeImageMathFSS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_MultiplyImages, None, tubeImageMathFSS3)
tubeImageMathFSS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_PadUsingMirroring, None, tubeImageMathFSS3)
tubeImageMathFSS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_NormalizeMeanStdDev, None, tubeImageMathFSS3)
tubeImageMathFSS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_NormalizeFWHM, None, tubeImageMathFSS3)
tubeImageMathFSS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_NormalizeMeanShift, None, tubeImageMathFSS3)
tubeImageMathFSS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_FuseUsingMax, None, tubeImageMathFSS3)
tubeImageMathFSS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_MedianFilter, None, tubeImageMathFSS3)
tubeImageMathFSS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Threshold, None, tubeImageMathFSS3)
tubeImageMathFSS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_MeanWithinMaskRange, None, tubeImageMathFSS3)
tubeImageMathFSS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_StdDevWithinMaskRange, None, tubeImageMathFSS3)
tubeImageMathFSS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_AbsoluteValue, None, tubeImageMathFSS3)
tubeImageMathFSS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathFSS3)
tubeImageMathFSS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Erode, None, tubeImageMathFSS3)
tubeImageMathFSS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Dilate, None, tubeImageMathFSS3)
tubeImageMathFSS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_ReplaceValueWithinMaskRange, None, tubeImageMathFSS3)
tubeImageMathFSS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Blur, None, tubeImageMathFSS3)
tubeImageMathFSS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_BlurOrder, None, tubeImageMathFSS3)
tubeImageMathFSS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_HistogramBinMin, None, tubeImageMathFSS3)
tubeImageMathFSS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_HistogramBinSize, None, tubeImageMathFSS3)
tubeImageMathFSS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Histogram, None, tubeImageMathFSS3)
tubeImageMathFSS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_IntensityCorrectionBySlice, None, tubeImageMathFSS3)
tubeImageMathFSS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_IntensityCorrection, None, tubeImageMathFSS3)
tubeImageMathFSS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_Resize, None, tubeImageMathFSS3)
tubeImageMathFSS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_ExtractSlice, None, tubeImageMathFSS3)
tubeImageMathFSS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_EnhanceVessels, None, tubeImageMathFSS3)
tubeImageMathFSS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_ConnectedComponents, None, tubeImageMathFSS3)
tubeImageMathFSS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_VoronoiTessellation, None, tubeImageMathFSS3)
tubeImageMathFSS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFSS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFSS3)
tubeImageMathFSS3_swigregister = _tubeImageMathPython.tubeImageMathFSS3_swigregister
tubeImageMathFSS3_swigregister(tubeImageMathFSS3)

def tubeImageMathFSS3___New_orig__() -> "tubeImageMathFSS3_Pointer":
    """tubeImageMathFSS3___New_orig__() -> tubeImageMathFSS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathFSS3___New_orig__()

def tubeImageMathFSS3_cast(obj: 'itkLightObject') -> "tubeImageMathFSS3 *":
    """tubeImageMathFSS3_cast(itkLightObject obj) -> tubeImageMathFSS3"""
    return _tubeImageMathPython.tubeImageMathFSS3_cast(obj)

class tubeImageMathFUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFUC2_Pointer":
        """__New_orig__() -> tubeImageMathFUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFUC2_Pointer":
        """Clone(tubeImageMathFUC2 self) -> tubeImageMathFUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUC2_Clone(self)


    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(tubeImageMathFUC2 self, itkImageF2 input)"""
        return _tubeImageMathPython.tubeImageMathFUC2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathFUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeImageMathFUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathFUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathFUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathFUC2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFUC2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFUC2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathFUC2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUC2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFUC2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFUC2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFUC2 self, itkImageF2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFUC2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF2') -> "void":
        """MultiplyImages(tubeImageMathFUC2 self, itkImageF2 input2)"""
        return _tubeImageMathPython.tubeImageMathFUC2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFUC2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFUC2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFUC2 self)"""
        return _tubeImageMathPython.tubeImageMathFUC2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFUC2 self)"""
        return _tubeImageMathPython.tubeImageMathFUC2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFUC2 self)"""
        return _tubeImageMathPython.tubeImageMathFUC2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFUC2 self, itkImageF2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFUC2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFUC2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFUC2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFUC2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFUC2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFUC2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFUC2 self)"""
        return _tubeImageMathPython.tubeImageMathFUC2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFUC2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUC2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUC2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFUC2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFUC2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFUC2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFUC2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFUC2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUC2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUC2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFUC2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFUC2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFUC2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFUC2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF2') -> "void":
        """IntensityCorrection(tubeImageMathFUC2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFUC2 self, double factor)
        Resize(tubeImageMathFUC2 self, itkImageF2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFUC2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFUC2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFUC2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFUC2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFUC2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathFUC2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathFUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFUC2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFUC2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFUC2

    def cast(obj: 'itkLightObject') -> "tubeImageMathFUC2 *":
        """cast(itkLightObject obj) -> tubeImageMathFUC2"""
        return _tubeImageMathPython.tubeImageMathFUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFUC2

        Create a new object of the class tubeImageMathFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFUC2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Clone, None, tubeImageMathFUC2)
tubeImageMathFUC2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_SetInput, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetInput, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetOutput, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetOutputFloat, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetOutputUChar, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetOutputShort, None, tubeImageMathFUC2)
tubeImageMathFUC2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_IntensityWindow, None, tubeImageMathFUC2)
tubeImageMathFUC2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFUC2)
tubeImageMathFUC2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Resample, None, tubeImageMathFUC2)
tubeImageMathFUC2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_AddUniformNoise, None, tubeImageMathFUC2)
tubeImageMathFUC2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_AddGaussianNoise, None, tubeImageMathFUC2)
tubeImageMathFUC2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_AddImages, None, tubeImageMathFUC2)
tubeImageMathFUC2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_MultiplyImages, None, tubeImageMathFUC2)
tubeImageMathFUC2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_PadUsingMirroring, None, tubeImageMathFUC2)
tubeImageMathFUC2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_NormalizeMeanStdDev, None, tubeImageMathFUC2)
tubeImageMathFUC2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_NormalizeFWHM, None, tubeImageMathFUC2)
tubeImageMathFUC2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_NormalizeMeanShift, None, tubeImageMathFUC2)
tubeImageMathFUC2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_FuseUsingMax, None, tubeImageMathFUC2)
tubeImageMathFUC2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_MedianFilter, None, tubeImageMathFUC2)
tubeImageMathFUC2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Threshold, None, tubeImageMathFUC2)
tubeImageMathFUC2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_MeanWithinMaskRange, None, tubeImageMathFUC2)
tubeImageMathFUC2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_StdDevWithinMaskRange, None, tubeImageMathFUC2)
tubeImageMathFUC2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_AbsoluteValue, None, tubeImageMathFUC2)
tubeImageMathFUC2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_ReplaceValuesOutsideMaskRange, None, tubeImageMathFUC2)
tubeImageMathFUC2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Erode, None, tubeImageMathFUC2)
tubeImageMathFUC2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Dilate, None, tubeImageMathFUC2)
tubeImageMathFUC2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_ReplaceValueWithinMaskRange, None, tubeImageMathFUC2)
tubeImageMathFUC2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Blur, None, tubeImageMathFUC2)
tubeImageMathFUC2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_BlurOrder, None, tubeImageMathFUC2)
tubeImageMathFUC2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_HistogramBinMin, None, tubeImageMathFUC2)
tubeImageMathFUC2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_HistogramBinSize, None, tubeImageMathFUC2)
tubeImageMathFUC2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Histogram, None, tubeImageMathFUC2)
tubeImageMathFUC2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_IntensityCorrectionBySlice, None, tubeImageMathFUC2)
tubeImageMathFUC2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_IntensityCorrection, None, tubeImageMathFUC2)
tubeImageMathFUC2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_Resize, None, tubeImageMathFUC2)
tubeImageMathFUC2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_ExtractSlice, None, tubeImageMathFUC2)
tubeImageMathFUC2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_EnhanceVessels, None, tubeImageMathFUC2)
tubeImageMathFUC2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_ConnectedComponents, None, tubeImageMathFUC2)
tubeImageMathFUC2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_VoronoiTessellation, None, tubeImageMathFUC2)
tubeImageMathFUC2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFUC2)
tubeImageMathFUC2_swigregister = _tubeImageMathPython.tubeImageMathFUC2_swigregister
tubeImageMathFUC2_swigregister(tubeImageMathFUC2)

def tubeImageMathFUC2___New_orig__() -> "tubeImageMathFUC2_Pointer":
    """tubeImageMathFUC2___New_orig__() -> tubeImageMathFUC2_Pointer"""
    return _tubeImageMathPython.tubeImageMathFUC2___New_orig__()

def tubeImageMathFUC2_cast(obj: 'itkLightObject') -> "tubeImageMathFUC2 *":
    """tubeImageMathFUC2_cast(itkLightObject obj) -> tubeImageMathFUC2"""
    return _tubeImageMathPython.tubeImageMathFUC2_cast(obj)

class tubeImageMathFUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFUC3_Pointer":
        """__New_orig__() -> tubeImageMathFUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFUC3_Pointer":
        """Clone(tubeImageMathFUC3 self) -> tubeImageMathFUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUC3_Clone(self)


    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(tubeImageMathFUC3 self, itkImageF3 input)"""
        return _tubeImageMathPython.tubeImageMathFUC3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathFUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetInput(self)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeImageMathFUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathFUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathFUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathFUC3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFUC3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFUC3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathFUC3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUC3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFUC3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFUC3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFUC3 self, itkImageF3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFUC3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF3') -> "void":
        """MultiplyImages(tubeImageMathFUC3 self, itkImageF3 input2)"""
        return _tubeImageMathPython.tubeImageMathFUC3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFUC3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFUC3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFUC3 self)"""
        return _tubeImageMathPython.tubeImageMathFUC3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFUC3 self)"""
        return _tubeImageMathPython.tubeImageMathFUC3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFUC3 self)"""
        return _tubeImageMathPython.tubeImageMathFUC3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFUC3 self, itkImageF3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFUC3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFUC3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFUC3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFUC3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFUC3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFUC3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFUC3 self)"""
        return _tubeImageMathPython.tubeImageMathFUC3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFUC3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUC3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUC3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFUC3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFUC3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFUC3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFUC3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFUC3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUC3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUC3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFUC3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFUC3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFUC3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFUC3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF3') -> "void":
        """IntensityCorrection(tubeImageMathFUC3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFUC3 self, double factor)
        Resize(tubeImageMathFUC3 self, itkImageF3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFUC3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFUC3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFUC3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFUC3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFUC3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathFUC3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathFUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFUC3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFUC3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFUC3

    def cast(obj: 'itkLightObject') -> "tubeImageMathFUC3 *":
        """cast(itkLightObject obj) -> tubeImageMathFUC3"""
        return _tubeImageMathPython.tubeImageMathFUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFUC3

        Create a new object of the class tubeImageMathFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFUC3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Clone, None, tubeImageMathFUC3)
tubeImageMathFUC3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_SetInput, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetInput, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetOutput, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetOutputFloat, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetOutputUChar, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetOutputShort, None, tubeImageMathFUC3)
tubeImageMathFUC3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_IntensityWindow, None, tubeImageMathFUC3)
tubeImageMathFUC3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFUC3)
tubeImageMathFUC3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Resample, None, tubeImageMathFUC3)
tubeImageMathFUC3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_AddUniformNoise, None, tubeImageMathFUC3)
tubeImageMathFUC3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_AddGaussianNoise, None, tubeImageMathFUC3)
tubeImageMathFUC3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_AddImages, None, tubeImageMathFUC3)
tubeImageMathFUC3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_MultiplyImages, None, tubeImageMathFUC3)
tubeImageMathFUC3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_PadUsingMirroring, None, tubeImageMathFUC3)
tubeImageMathFUC3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_NormalizeMeanStdDev, None, tubeImageMathFUC3)
tubeImageMathFUC3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_NormalizeFWHM, None, tubeImageMathFUC3)
tubeImageMathFUC3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_NormalizeMeanShift, None, tubeImageMathFUC3)
tubeImageMathFUC3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_FuseUsingMax, None, tubeImageMathFUC3)
tubeImageMathFUC3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_MedianFilter, None, tubeImageMathFUC3)
tubeImageMathFUC3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Threshold, None, tubeImageMathFUC3)
tubeImageMathFUC3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_MeanWithinMaskRange, None, tubeImageMathFUC3)
tubeImageMathFUC3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_StdDevWithinMaskRange, None, tubeImageMathFUC3)
tubeImageMathFUC3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_AbsoluteValue, None, tubeImageMathFUC3)
tubeImageMathFUC3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_ReplaceValuesOutsideMaskRange, None, tubeImageMathFUC3)
tubeImageMathFUC3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Erode, None, tubeImageMathFUC3)
tubeImageMathFUC3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Dilate, None, tubeImageMathFUC3)
tubeImageMathFUC3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_ReplaceValueWithinMaskRange, None, tubeImageMathFUC3)
tubeImageMathFUC3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Blur, None, tubeImageMathFUC3)
tubeImageMathFUC3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_BlurOrder, None, tubeImageMathFUC3)
tubeImageMathFUC3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_HistogramBinMin, None, tubeImageMathFUC3)
tubeImageMathFUC3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_HistogramBinSize, None, tubeImageMathFUC3)
tubeImageMathFUC3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Histogram, None, tubeImageMathFUC3)
tubeImageMathFUC3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_IntensityCorrectionBySlice, None, tubeImageMathFUC3)
tubeImageMathFUC3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_IntensityCorrection, None, tubeImageMathFUC3)
tubeImageMathFUC3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_Resize, None, tubeImageMathFUC3)
tubeImageMathFUC3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_ExtractSlice, None, tubeImageMathFUC3)
tubeImageMathFUC3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_EnhanceVessels, None, tubeImageMathFUC3)
tubeImageMathFUC3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_ConnectedComponents, None, tubeImageMathFUC3)
tubeImageMathFUC3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_VoronoiTessellation, None, tubeImageMathFUC3)
tubeImageMathFUC3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFUC3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFUC3)
tubeImageMathFUC3_swigregister = _tubeImageMathPython.tubeImageMathFUC3_swigregister
tubeImageMathFUC3_swigregister(tubeImageMathFUC3)

def tubeImageMathFUC3___New_orig__() -> "tubeImageMathFUC3_Pointer":
    """tubeImageMathFUC3___New_orig__() -> tubeImageMathFUC3_Pointer"""
    return _tubeImageMathPython.tubeImageMathFUC3___New_orig__()

def tubeImageMathFUC3_cast(obj: 'itkLightObject') -> "tubeImageMathFUC3 *":
    """tubeImageMathFUC3_cast(itkLightObject obj) -> tubeImageMathFUC3"""
    return _tubeImageMathPython.tubeImageMathFUC3_cast(obj)

class tubeImageMathFUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFUS2_Pointer":
        """__New_orig__() -> tubeImageMathFUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFUS2_Pointer":
        """Clone(tubeImageMathFUS2 self) -> tubeImageMathFUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUS2_Clone(self)


    def SetInput(self, input: 'itkImageF2') -> "void":
        """SetInput(tubeImageMathFUS2 self, itkImageF2 input)"""
        return _tubeImageMathPython.tubeImageMathFUS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathFUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeImageMathFUS2 self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathFUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathFUS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathFUS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFUS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFUS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathFUS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFUS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFUS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFUS2 self, itkImageF2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFUS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF2') -> "void":
        """MultiplyImages(tubeImageMathFUS2 self, itkImageF2 input2)"""
        return _tubeImageMathPython.tubeImageMathFUS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFUS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFUS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFUS2 self)"""
        return _tubeImageMathPython.tubeImageMathFUS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFUS2 self)"""
        return _tubeImageMathPython.tubeImageMathFUS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFUS2 self)"""
        return _tubeImageMathPython.tubeImageMathFUS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFUS2 self, itkImageF2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFUS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFUS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFUS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFUS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFUS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFUS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFUS2 self)"""
        return _tubeImageMathPython.tubeImageMathFUS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFUS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFUS2 self, itkImageF2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFUS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFUS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFUS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFUS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFUS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFUS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFUS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFUS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF2') -> "void":
        """IntensityCorrection(tubeImageMathFUS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFUS2 self, double factor)
        Resize(tubeImageMathFUS2 self, itkImageF2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFUS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFUS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFUS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFUS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFUS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathFUS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathFUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFUS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFUS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFUS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathFUS2 *":
        """cast(itkLightObject obj) -> tubeImageMathFUS2"""
        return _tubeImageMathPython.tubeImageMathFUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFUS2

        Create a new object of the class tubeImageMathFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFUS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Clone, None, tubeImageMathFUS2)
tubeImageMathFUS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_SetInput, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetInput, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetOutput, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetOutputFloat, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetOutputUChar, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetOutputShort, None, tubeImageMathFUS2)
tubeImageMathFUS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_IntensityWindow, None, tubeImageMathFUS2)
tubeImageMathFUS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFUS2)
tubeImageMathFUS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Resample, None, tubeImageMathFUS2)
tubeImageMathFUS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_AddUniformNoise, None, tubeImageMathFUS2)
tubeImageMathFUS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_AddGaussianNoise, None, tubeImageMathFUS2)
tubeImageMathFUS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_AddImages, None, tubeImageMathFUS2)
tubeImageMathFUS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_MultiplyImages, None, tubeImageMathFUS2)
tubeImageMathFUS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_PadUsingMirroring, None, tubeImageMathFUS2)
tubeImageMathFUS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_NormalizeMeanStdDev, None, tubeImageMathFUS2)
tubeImageMathFUS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_NormalizeFWHM, None, tubeImageMathFUS2)
tubeImageMathFUS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_NormalizeMeanShift, None, tubeImageMathFUS2)
tubeImageMathFUS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_FuseUsingMax, None, tubeImageMathFUS2)
tubeImageMathFUS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_MedianFilter, None, tubeImageMathFUS2)
tubeImageMathFUS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Threshold, None, tubeImageMathFUS2)
tubeImageMathFUS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_MeanWithinMaskRange, None, tubeImageMathFUS2)
tubeImageMathFUS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_StdDevWithinMaskRange, None, tubeImageMathFUS2)
tubeImageMathFUS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_AbsoluteValue, None, tubeImageMathFUS2)
tubeImageMathFUS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathFUS2)
tubeImageMathFUS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Erode, None, tubeImageMathFUS2)
tubeImageMathFUS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Dilate, None, tubeImageMathFUS2)
tubeImageMathFUS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_ReplaceValueWithinMaskRange, None, tubeImageMathFUS2)
tubeImageMathFUS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Blur, None, tubeImageMathFUS2)
tubeImageMathFUS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_BlurOrder, None, tubeImageMathFUS2)
tubeImageMathFUS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_HistogramBinMin, None, tubeImageMathFUS2)
tubeImageMathFUS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_HistogramBinSize, None, tubeImageMathFUS2)
tubeImageMathFUS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Histogram, None, tubeImageMathFUS2)
tubeImageMathFUS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_IntensityCorrectionBySlice, None, tubeImageMathFUS2)
tubeImageMathFUS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_IntensityCorrection, None, tubeImageMathFUS2)
tubeImageMathFUS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_Resize, None, tubeImageMathFUS2)
tubeImageMathFUS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_ExtractSlice, None, tubeImageMathFUS2)
tubeImageMathFUS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_EnhanceVessels, None, tubeImageMathFUS2)
tubeImageMathFUS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_ConnectedComponents, None, tubeImageMathFUS2)
tubeImageMathFUS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_VoronoiTessellation, None, tubeImageMathFUS2)
tubeImageMathFUS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFUS2)
tubeImageMathFUS2_swigregister = _tubeImageMathPython.tubeImageMathFUS2_swigregister
tubeImageMathFUS2_swigregister(tubeImageMathFUS2)

def tubeImageMathFUS2___New_orig__() -> "tubeImageMathFUS2_Pointer":
    """tubeImageMathFUS2___New_orig__() -> tubeImageMathFUS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathFUS2___New_orig__()

def tubeImageMathFUS2_cast(obj: 'itkLightObject') -> "tubeImageMathFUS2 *":
    """tubeImageMathFUS2_cast(itkLightObject obj) -> tubeImageMathFUS2"""
    return _tubeImageMathPython.tubeImageMathFUS2_cast(obj)

class tubeImageMathFUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathFUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathFUS3_Pointer":
        """__New_orig__() -> tubeImageMathFUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathFUS3_Pointer":
        """Clone(tubeImageMathFUS3 self) -> tubeImageMathFUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathFUS3_Clone(self)


    def SetInput(self, input: 'itkImageF3') -> "void":
        """SetInput(tubeImageMathFUS3 self, itkImageF3 input)"""
        return _tubeImageMathPython.tubeImageMathFUS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathFUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetInput(self)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeImageMathFUS3 self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathFUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathFUS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathFUS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathFUS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathFUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathFUS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathFUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathFUS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathFUS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathFUS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathFUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageF3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathFUS3 self, itkImageF3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathFUS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageF3') -> "void":
        """MultiplyImages(tubeImageMathFUS3 self, itkImageF3 input2)"""
        return _tubeImageMathPython.tubeImageMathFUS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathFUS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathFUS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathFUS3 self)"""
        return _tubeImageMathPython.tubeImageMathFUS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathFUS3 self)"""
        return _tubeImageMathPython.tubeImageMathFUS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathFUS3 self)"""
        return _tubeImageMathPython.tubeImageMathFUS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageF3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathFUS3 self, itkImageF3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathFUS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathFUS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathFUS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathFUS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathFUS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathFUS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathFUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathFUS3 self)"""
        return _tubeImageMathPython.tubeImageMathFUS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathFUS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathFUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathFUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathFUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathFUS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageF3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathFUS3 self, itkImageF3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathFUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathFUS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathFUS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathFUS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathFUS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathFUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathFUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathFUS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathFUS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathFUS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathFUS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathFUS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathFUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageF3') -> "void":
        """IntensityCorrection(tubeImageMathFUS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathFUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathFUS3 self, double factor)
        Resize(tubeImageMathFUS3 self, itkImageF3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathFUS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathFUS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathFUS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathFUS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathFUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathFUS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathFUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathFUS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathFUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathFUS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathFUS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathFUS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathFUS3 *":
        """cast(itkLightObject obj) -> tubeImageMathFUS3"""
        return _tubeImageMathPython.tubeImageMathFUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathFUS3

        Create a new object of the class tubeImageMathFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathFUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathFUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathFUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathFUS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Clone, None, tubeImageMathFUS3)
tubeImageMathFUS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_SetInput, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetInput, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetOutput, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetOutputFloat, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetOutputUChar, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetOutputShort, None, tubeImageMathFUS3)
tubeImageMathFUS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_IntensityWindow, None, tubeImageMathFUS3)
tubeImageMathFUS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathFUS3)
tubeImageMathFUS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Resample, None, tubeImageMathFUS3)
tubeImageMathFUS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_AddUniformNoise, None, tubeImageMathFUS3)
tubeImageMathFUS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_AddGaussianNoise, None, tubeImageMathFUS3)
tubeImageMathFUS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_AddImages, None, tubeImageMathFUS3)
tubeImageMathFUS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_MultiplyImages, None, tubeImageMathFUS3)
tubeImageMathFUS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_PadUsingMirroring, None, tubeImageMathFUS3)
tubeImageMathFUS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_NormalizeMeanStdDev, None, tubeImageMathFUS3)
tubeImageMathFUS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_NormalizeFWHM, None, tubeImageMathFUS3)
tubeImageMathFUS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_NormalizeMeanShift, None, tubeImageMathFUS3)
tubeImageMathFUS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_FuseUsingMax, None, tubeImageMathFUS3)
tubeImageMathFUS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_MedianFilter, None, tubeImageMathFUS3)
tubeImageMathFUS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Threshold, None, tubeImageMathFUS3)
tubeImageMathFUS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_MeanWithinMaskRange, None, tubeImageMathFUS3)
tubeImageMathFUS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_StdDevWithinMaskRange, None, tubeImageMathFUS3)
tubeImageMathFUS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_AbsoluteValue, None, tubeImageMathFUS3)
tubeImageMathFUS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathFUS3)
tubeImageMathFUS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Erode, None, tubeImageMathFUS3)
tubeImageMathFUS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Dilate, None, tubeImageMathFUS3)
tubeImageMathFUS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_ReplaceValueWithinMaskRange, None, tubeImageMathFUS3)
tubeImageMathFUS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Blur, None, tubeImageMathFUS3)
tubeImageMathFUS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_BlurOrder, None, tubeImageMathFUS3)
tubeImageMathFUS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_HistogramBinMin, None, tubeImageMathFUS3)
tubeImageMathFUS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_HistogramBinSize, None, tubeImageMathFUS3)
tubeImageMathFUS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Histogram, None, tubeImageMathFUS3)
tubeImageMathFUS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_IntensityCorrectionBySlice, None, tubeImageMathFUS3)
tubeImageMathFUS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_IntensityCorrection, None, tubeImageMathFUS3)
tubeImageMathFUS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_Resize, None, tubeImageMathFUS3)
tubeImageMathFUS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_ExtractSlice, None, tubeImageMathFUS3)
tubeImageMathFUS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_EnhanceVessels, None, tubeImageMathFUS3)
tubeImageMathFUS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_ConnectedComponents, None, tubeImageMathFUS3)
tubeImageMathFUS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_VoronoiTessellation, None, tubeImageMathFUS3)
tubeImageMathFUS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathFUS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathFUS3)
tubeImageMathFUS3_swigregister = _tubeImageMathPython.tubeImageMathFUS3_swigregister
tubeImageMathFUS3_swigregister(tubeImageMathFUS3)

def tubeImageMathFUS3___New_orig__() -> "tubeImageMathFUS3_Pointer":
    """tubeImageMathFUS3___New_orig__() -> tubeImageMathFUS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathFUS3___New_orig__()

def tubeImageMathFUS3_cast(obj: 'itkLightObject') -> "tubeImageMathFUS3 *":
    """tubeImageMathFUS3_cast(itkLightObject obj) -> tubeImageMathFUS3"""
    return _tubeImageMathPython.tubeImageMathFUS3_cast(obj)

class tubeImageMathSSD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSD2_Pointer":
        """__New_orig__() -> tubeImageMathSSD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSD2_Pointer":
        """Clone(tubeImageMathSSD2 self) -> tubeImageMathSSD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSD2_Clone(self)


    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(tubeImageMathSSD2 self, itkImageSS2 input)"""
        return _tubeImageMathPython.tubeImageMathSSD2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathSSD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeImageMathSSD2 self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathSSD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathSSD2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathSSD2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSD2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSD2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathSSD2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSD2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSD2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSD2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSD2 self, itkImageSS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSD2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS2') -> "void":
        """MultiplyImages(tubeImageMathSSD2 self, itkImageSS2 input2)"""
        return _tubeImageMathPython.tubeImageMathSSD2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSD2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSD2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSD2 self)"""
        return _tubeImageMathPython.tubeImageMathSSD2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSD2 self)"""
        return _tubeImageMathPython.tubeImageMathSSD2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSD2 self)"""
        return _tubeImageMathPython.tubeImageMathSSD2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSD2 self, itkImageSS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSD2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSD2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSD2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSD2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSD2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSD2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSD2 self)"""
        return _tubeImageMathPython.tubeImageMathSSD2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSD2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSD2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSD2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSD2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSD2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSD2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSD2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSD2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSD2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSD2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSD2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSD2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSD2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSD2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS2') -> "void":
        """IntensityCorrection(tubeImageMathSSD2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSD2 self, double factor)
        Resize(tubeImageMathSSD2 self, itkImageSS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSD2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSD2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSD2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSD2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSD2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathSSD2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathSSD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSD2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSD2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSD2

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSD2 *":
        """cast(itkLightObject obj) -> tubeImageMathSSD2"""
        return _tubeImageMathPython.tubeImageMathSSD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSD2

        Create a new object of the class tubeImageMathSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSD2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Clone, None, tubeImageMathSSD2)
tubeImageMathSSD2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_SetInput, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetInput, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetOutput, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetOutputFloat, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetOutputUChar, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetOutputShort, None, tubeImageMathSSD2)
tubeImageMathSSD2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_IntensityWindow, None, tubeImageMathSSD2)
tubeImageMathSSD2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSD2)
tubeImageMathSSD2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Resample, None, tubeImageMathSSD2)
tubeImageMathSSD2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_AddUniformNoise, None, tubeImageMathSSD2)
tubeImageMathSSD2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_AddGaussianNoise, None, tubeImageMathSSD2)
tubeImageMathSSD2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_AddImages, None, tubeImageMathSSD2)
tubeImageMathSSD2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_MultiplyImages, None, tubeImageMathSSD2)
tubeImageMathSSD2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_PadUsingMirroring, None, tubeImageMathSSD2)
tubeImageMathSSD2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_NormalizeMeanStdDev, None, tubeImageMathSSD2)
tubeImageMathSSD2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_NormalizeFWHM, None, tubeImageMathSSD2)
tubeImageMathSSD2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_NormalizeMeanShift, None, tubeImageMathSSD2)
tubeImageMathSSD2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_FuseUsingMax, None, tubeImageMathSSD2)
tubeImageMathSSD2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_MedianFilter, None, tubeImageMathSSD2)
tubeImageMathSSD2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Threshold, None, tubeImageMathSSD2)
tubeImageMathSSD2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_MeanWithinMaskRange, None, tubeImageMathSSD2)
tubeImageMathSSD2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_StdDevWithinMaskRange, None, tubeImageMathSSD2)
tubeImageMathSSD2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_AbsoluteValue, None, tubeImageMathSSD2)
tubeImageMathSSD2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSD2)
tubeImageMathSSD2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Erode, None, tubeImageMathSSD2)
tubeImageMathSSD2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Dilate, None, tubeImageMathSSD2)
tubeImageMathSSD2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_ReplaceValueWithinMaskRange, None, tubeImageMathSSD2)
tubeImageMathSSD2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Blur, None, tubeImageMathSSD2)
tubeImageMathSSD2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_BlurOrder, None, tubeImageMathSSD2)
tubeImageMathSSD2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_HistogramBinMin, None, tubeImageMathSSD2)
tubeImageMathSSD2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_HistogramBinSize, None, tubeImageMathSSD2)
tubeImageMathSSD2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Histogram, None, tubeImageMathSSD2)
tubeImageMathSSD2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_IntensityCorrectionBySlice, None, tubeImageMathSSD2)
tubeImageMathSSD2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_IntensityCorrection, None, tubeImageMathSSD2)
tubeImageMathSSD2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_Resize, None, tubeImageMathSSD2)
tubeImageMathSSD2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_ExtractSlice, None, tubeImageMathSSD2)
tubeImageMathSSD2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_EnhanceVessels, None, tubeImageMathSSD2)
tubeImageMathSSD2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_ConnectedComponents, None, tubeImageMathSSD2)
tubeImageMathSSD2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_VoronoiTessellation, None, tubeImageMathSSD2)
tubeImageMathSSD2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSD2)
tubeImageMathSSD2_swigregister = _tubeImageMathPython.tubeImageMathSSD2_swigregister
tubeImageMathSSD2_swigregister(tubeImageMathSSD2)

def tubeImageMathSSD2___New_orig__() -> "tubeImageMathSSD2_Pointer":
    """tubeImageMathSSD2___New_orig__() -> tubeImageMathSSD2_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSD2___New_orig__()

def tubeImageMathSSD2_cast(obj: 'itkLightObject') -> "tubeImageMathSSD2 *":
    """tubeImageMathSSD2_cast(itkLightObject obj) -> tubeImageMathSSD2"""
    return _tubeImageMathPython.tubeImageMathSSD2_cast(obj)

class tubeImageMathSSD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSD3_Pointer":
        """__New_orig__() -> tubeImageMathSSD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSD3_Pointer":
        """Clone(tubeImageMathSSD3 self) -> tubeImageMathSSD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSD3_Clone(self)


    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(tubeImageMathSSD3 self, itkImageSS3 input)"""
        return _tubeImageMathPython.tubeImageMathSSD3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathSSD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetInput(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeImageMathSSD3 self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathSSD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathSSD3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathSSD3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSD3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSD3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathSSD3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSD3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSD3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSD3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSD3 self, itkImageSS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSD3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS3') -> "void":
        """MultiplyImages(tubeImageMathSSD3 self, itkImageSS3 input2)"""
        return _tubeImageMathPython.tubeImageMathSSD3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSD3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSD3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSD3 self)"""
        return _tubeImageMathPython.tubeImageMathSSD3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSD3 self)"""
        return _tubeImageMathPython.tubeImageMathSSD3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSD3 self)"""
        return _tubeImageMathPython.tubeImageMathSSD3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSD3 self, itkImageSS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSD3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSD3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSD3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSD3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSD3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSD3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSD3 self)"""
        return _tubeImageMathPython.tubeImageMathSSD3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSD3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSD3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSD3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSD3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSD3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSD3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSD3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSD3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSD3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSD3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSD3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSD3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSD3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSD3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS3') -> "void":
        """IntensityCorrection(tubeImageMathSSD3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSD3 self, double factor)
        Resize(tubeImageMathSSD3 self, itkImageSS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSD3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSD3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSD3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSD3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSD3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathSSD3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathSSD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSD3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSD3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSD3

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSD3 *":
        """cast(itkLightObject obj) -> tubeImageMathSSD3"""
        return _tubeImageMathPython.tubeImageMathSSD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSD3

        Create a new object of the class tubeImageMathSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSD3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Clone, None, tubeImageMathSSD3)
tubeImageMathSSD3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_SetInput, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetInput, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetOutput, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetOutputFloat, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetOutputUChar, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetOutputShort, None, tubeImageMathSSD3)
tubeImageMathSSD3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_IntensityWindow, None, tubeImageMathSSD3)
tubeImageMathSSD3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSD3)
tubeImageMathSSD3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Resample, None, tubeImageMathSSD3)
tubeImageMathSSD3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_AddUniformNoise, None, tubeImageMathSSD3)
tubeImageMathSSD3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_AddGaussianNoise, None, tubeImageMathSSD3)
tubeImageMathSSD3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_AddImages, None, tubeImageMathSSD3)
tubeImageMathSSD3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_MultiplyImages, None, tubeImageMathSSD3)
tubeImageMathSSD3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_PadUsingMirroring, None, tubeImageMathSSD3)
tubeImageMathSSD3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_NormalizeMeanStdDev, None, tubeImageMathSSD3)
tubeImageMathSSD3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_NormalizeFWHM, None, tubeImageMathSSD3)
tubeImageMathSSD3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_NormalizeMeanShift, None, tubeImageMathSSD3)
tubeImageMathSSD3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_FuseUsingMax, None, tubeImageMathSSD3)
tubeImageMathSSD3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_MedianFilter, None, tubeImageMathSSD3)
tubeImageMathSSD3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Threshold, None, tubeImageMathSSD3)
tubeImageMathSSD3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_MeanWithinMaskRange, None, tubeImageMathSSD3)
tubeImageMathSSD3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_StdDevWithinMaskRange, None, tubeImageMathSSD3)
tubeImageMathSSD3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_AbsoluteValue, None, tubeImageMathSSD3)
tubeImageMathSSD3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSD3)
tubeImageMathSSD3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Erode, None, tubeImageMathSSD3)
tubeImageMathSSD3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Dilate, None, tubeImageMathSSD3)
tubeImageMathSSD3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_ReplaceValueWithinMaskRange, None, tubeImageMathSSD3)
tubeImageMathSSD3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Blur, None, tubeImageMathSSD3)
tubeImageMathSSD3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_BlurOrder, None, tubeImageMathSSD3)
tubeImageMathSSD3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_HistogramBinMin, None, tubeImageMathSSD3)
tubeImageMathSSD3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_HistogramBinSize, None, tubeImageMathSSD3)
tubeImageMathSSD3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Histogram, None, tubeImageMathSSD3)
tubeImageMathSSD3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_IntensityCorrectionBySlice, None, tubeImageMathSSD3)
tubeImageMathSSD3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_IntensityCorrection, None, tubeImageMathSSD3)
tubeImageMathSSD3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_Resize, None, tubeImageMathSSD3)
tubeImageMathSSD3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_ExtractSlice, None, tubeImageMathSSD3)
tubeImageMathSSD3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_EnhanceVessels, None, tubeImageMathSSD3)
tubeImageMathSSD3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_ConnectedComponents, None, tubeImageMathSSD3)
tubeImageMathSSD3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_VoronoiTessellation, None, tubeImageMathSSD3)
tubeImageMathSSD3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSD3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSD3)
tubeImageMathSSD3_swigregister = _tubeImageMathPython.tubeImageMathSSD3_swigregister
tubeImageMathSSD3_swigregister(tubeImageMathSSD3)

def tubeImageMathSSD3___New_orig__() -> "tubeImageMathSSD3_Pointer":
    """tubeImageMathSSD3___New_orig__() -> tubeImageMathSSD3_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSD3___New_orig__()

def tubeImageMathSSD3_cast(obj: 'itkLightObject') -> "tubeImageMathSSD3 *":
    """tubeImageMathSSD3_cast(itkLightObject obj) -> tubeImageMathSSD3"""
    return _tubeImageMathPython.tubeImageMathSSD3_cast(obj)

class tubeImageMathSSF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSF2_Pointer":
        """__New_orig__() -> tubeImageMathSSF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSF2_Pointer":
        """Clone(tubeImageMathSSF2 self) -> tubeImageMathSSF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSF2_Clone(self)


    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(tubeImageMathSSF2 self, itkImageSS2 input)"""
        return _tubeImageMathPython.tubeImageMathSSF2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathSSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeImageMathSSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathSSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathSSF2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathSSF2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSF2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSF2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathSSF2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSF2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSF2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSF2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSF2 self, itkImageSS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSF2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS2') -> "void":
        """MultiplyImages(tubeImageMathSSF2 self, itkImageSS2 input2)"""
        return _tubeImageMathPython.tubeImageMathSSF2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSF2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSF2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSF2 self)"""
        return _tubeImageMathPython.tubeImageMathSSF2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSF2 self)"""
        return _tubeImageMathPython.tubeImageMathSSF2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSF2 self)"""
        return _tubeImageMathPython.tubeImageMathSSF2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSF2 self, itkImageSS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSF2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSF2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSF2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSF2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSF2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSF2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSF2 self)"""
        return _tubeImageMathPython.tubeImageMathSSF2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSF2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSF2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSF2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSF2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSF2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSF2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSF2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSF2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSF2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSF2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSF2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSF2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSF2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSF2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS2') -> "void":
        """IntensityCorrection(tubeImageMathSSF2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSF2 self, double factor)
        Resize(tubeImageMathSSF2 self, itkImageSS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSF2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSF2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSF2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSF2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSF2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathSSF2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathSSF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSF2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSF2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSF2

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSF2 *":
        """cast(itkLightObject obj) -> tubeImageMathSSF2"""
        return _tubeImageMathPython.tubeImageMathSSF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSF2

        Create a new object of the class tubeImageMathSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSF2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Clone, None, tubeImageMathSSF2)
tubeImageMathSSF2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_SetInput, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetInput, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetOutput, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetOutputFloat, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetOutputUChar, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetOutputShort, None, tubeImageMathSSF2)
tubeImageMathSSF2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_IntensityWindow, None, tubeImageMathSSF2)
tubeImageMathSSF2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSF2)
tubeImageMathSSF2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Resample, None, tubeImageMathSSF2)
tubeImageMathSSF2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_AddUniformNoise, None, tubeImageMathSSF2)
tubeImageMathSSF2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_AddGaussianNoise, None, tubeImageMathSSF2)
tubeImageMathSSF2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_AddImages, None, tubeImageMathSSF2)
tubeImageMathSSF2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_MultiplyImages, None, tubeImageMathSSF2)
tubeImageMathSSF2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_PadUsingMirroring, None, tubeImageMathSSF2)
tubeImageMathSSF2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_NormalizeMeanStdDev, None, tubeImageMathSSF2)
tubeImageMathSSF2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_NormalizeFWHM, None, tubeImageMathSSF2)
tubeImageMathSSF2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_NormalizeMeanShift, None, tubeImageMathSSF2)
tubeImageMathSSF2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_FuseUsingMax, None, tubeImageMathSSF2)
tubeImageMathSSF2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_MedianFilter, None, tubeImageMathSSF2)
tubeImageMathSSF2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Threshold, None, tubeImageMathSSF2)
tubeImageMathSSF2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_MeanWithinMaskRange, None, tubeImageMathSSF2)
tubeImageMathSSF2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_StdDevWithinMaskRange, None, tubeImageMathSSF2)
tubeImageMathSSF2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_AbsoluteValue, None, tubeImageMathSSF2)
tubeImageMathSSF2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSF2)
tubeImageMathSSF2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Erode, None, tubeImageMathSSF2)
tubeImageMathSSF2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Dilate, None, tubeImageMathSSF2)
tubeImageMathSSF2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_ReplaceValueWithinMaskRange, None, tubeImageMathSSF2)
tubeImageMathSSF2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Blur, None, tubeImageMathSSF2)
tubeImageMathSSF2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_BlurOrder, None, tubeImageMathSSF2)
tubeImageMathSSF2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_HistogramBinMin, None, tubeImageMathSSF2)
tubeImageMathSSF2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_HistogramBinSize, None, tubeImageMathSSF2)
tubeImageMathSSF2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Histogram, None, tubeImageMathSSF2)
tubeImageMathSSF2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_IntensityCorrectionBySlice, None, tubeImageMathSSF2)
tubeImageMathSSF2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_IntensityCorrection, None, tubeImageMathSSF2)
tubeImageMathSSF2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_Resize, None, tubeImageMathSSF2)
tubeImageMathSSF2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_ExtractSlice, None, tubeImageMathSSF2)
tubeImageMathSSF2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_EnhanceVessels, None, tubeImageMathSSF2)
tubeImageMathSSF2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_ConnectedComponents, None, tubeImageMathSSF2)
tubeImageMathSSF2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_VoronoiTessellation, None, tubeImageMathSSF2)
tubeImageMathSSF2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSF2)
tubeImageMathSSF2_swigregister = _tubeImageMathPython.tubeImageMathSSF2_swigregister
tubeImageMathSSF2_swigregister(tubeImageMathSSF2)

def tubeImageMathSSF2___New_orig__() -> "tubeImageMathSSF2_Pointer":
    """tubeImageMathSSF2___New_orig__() -> tubeImageMathSSF2_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSF2___New_orig__()

def tubeImageMathSSF2_cast(obj: 'itkLightObject') -> "tubeImageMathSSF2 *":
    """tubeImageMathSSF2_cast(itkLightObject obj) -> tubeImageMathSSF2"""
    return _tubeImageMathPython.tubeImageMathSSF2_cast(obj)

class tubeImageMathSSF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSF3_Pointer":
        """__New_orig__() -> tubeImageMathSSF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSF3_Pointer":
        """Clone(tubeImageMathSSF3 self) -> tubeImageMathSSF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSF3_Clone(self)


    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(tubeImageMathSSF3 self, itkImageSS3 input)"""
        return _tubeImageMathPython.tubeImageMathSSF3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathSSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeImageMathSSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathSSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathSSF3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathSSF3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSF3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSF3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathSSF3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSF3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSF3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSF3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSF3 self, itkImageSS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSF3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS3') -> "void":
        """MultiplyImages(tubeImageMathSSF3 self, itkImageSS3 input2)"""
        return _tubeImageMathPython.tubeImageMathSSF3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSF3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSF3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSF3 self)"""
        return _tubeImageMathPython.tubeImageMathSSF3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSF3 self)"""
        return _tubeImageMathPython.tubeImageMathSSF3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSF3 self)"""
        return _tubeImageMathPython.tubeImageMathSSF3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSF3 self, itkImageSS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSF3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSF3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSF3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSF3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSF3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSF3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSF3 self)"""
        return _tubeImageMathPython.tubeImageMathSSF3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSF3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSF3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSF3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSF3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSF3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSF3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSF3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSF3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSF3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSF3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSF3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSF3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSF3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSF3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS3') -> "void":
        """IntensityCorrection(tubeImageMathSSF3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSF3 self, double factor)
        Resize(tubeImageMathSSF3 self, itkImageSS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSF3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSF3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSF3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSF3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSF3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathSSF3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathSSF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSF3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSF3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSF3

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSF3 *":
        """cast(itkLightObject obj) -> tubeImageMathSSF3"""
        return _tubeImageMathPython.tubeImageMathSSF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSF3

        Create a new object of the class tubeImageMathSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSF3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Clone, None, tubeImageMathSSF3)
tubeImageMathSSF3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_SetInput, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetInput, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetOutput, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetOutputFloat, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetOutputUChar, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetOutputShort, None, tubeImageMathSSF3)
tubeImageMathSSF3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_IntensityWindow, None, tubeImageMathSSF3)
tubeImageMathSSF3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSF3)
tubeImageMathSSF3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Resample, None, tubeImageMathSSF3)
tubeImageMathSSF3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_AddUniformNoise, None, tubeImageMathSSF3)
tubeImageMathSSF3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_AddGaussianNoise, None, tubeImageMathSSF3)
tubeImageMathSSF3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_AddImages, None, tubeImageMathSSF3)
tubeImageMathSSF3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_MultiplyImages, None, tubeImageMathSSF3)
tubeImageMathSSF3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_PadUsingMirroring, None, tubeImageMathSSF3)
tubeImageMathSSF3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_NormalizeMeanStdDev, None, tubeImageMathSSF3)
tubeImageMathSSF3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_NormalizeFWHM, None, tubeImageMathSSF3)
tubeImageMathSSF3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_NormalizeMeanShift, None, tubeImageMathSSF3)
tubeImageMathSSF3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_FuseUsingMax, None, tubeImageMathSSF3)
tubeImageMathSSF3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_MedianFilter, None, tubeImageMathSSF3)
tubeImageMathSSF3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Threshold, None, tubeImageMathSSF3)
tubeImageMathSSF3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_MeanWithinMaskRange, None, tubeImageMathSSF3)
tubeImageMathSSF3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_StdDevWithinMaskRange, None, tubeImageMathSSF3)
tubeImageMathSSF3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_AbsoluteValue, None, tubeImageMathSSF3)
tubeImageMathSSF3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSF3)
tubeImageMathSSF3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Erode, None, tubeImageMathSSF3)
tubeImageMathSSF3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Dilate, None, tubeImageMathSSF3)
tubeImageMathSSF3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_ReplaceValueWithinMaskRange, None, tubeImageMathSSF3)
tubeImageMathSSF3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Blur, None, tubeImageMathSSF3)
tubeImageMathSSF3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_BlurOrder, None, tubeImageMathSSF3)
tubeImageMathSSF3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_HistogramBinMin, None, tubeImageMathSSF3)
tubeImageMathSSF3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_HistogramBinSize, None, tubeImageMathSSF3)
tubeImageMathSSF3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Histogram, None, tubeImageMathSSF3)
tubeImageMathSSF3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_IntensityCorrectionBySlice, None, tubeImageMathSSF3)
tubeImageMathSSF3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_IntensityCorrection, None, tubeImageMathSSF3)
tubeImageMathSSF3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_Resize, None, tubeImageMathSSF3)
tubeImageMathSSF3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_ExtractSlice, None, tubeImageMathSSF3)
tubeImageMathSSF3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_EnhanceVessels, None, tubeImageMathSSF3)
tubeImageMathSSF3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_ConnectedComponents, None, tubeImageMathSSF3)
tubeImageMathSSF3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_VoronoiTessellation, None, tubeImageMathSSF3)
tubeImageMathSSF3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSF3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSF3)
tubeImageMathSSF3_swigregister = _tubeImageMathPython.tubeImageMathSSF3_swigregister
tubeImageMathSSF3_swigregister(tubeImageMathSSF3)

def tubeImageMathSSF3___New_orig__() -> "tubeImageMathSSF3_Pointer":
    """tubeImageMathSSF3___New_orig__() -> tubeImageMathSSF3_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSF3___New_orig__()

def tubeImageMathSSF3_cast(obj: 'itkLightObject') -> "tubeImageMathSSF3 *":
    """tubeImageMathSSF3_cast(itkLightObject obj) -> tubeImageMathSSF3"""
    return _tubeImageMathPython.tubeImageMathSSF3_cast(obj)

class tubeImageMathSSSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSSS2_Pointer":
        """__New_orig__() -> tubeImageMathSSSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSSS2_Pointer":
        """Clone(tubeImageMathSSSS2 self) -> tubeImageMathSSSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Clone(self)


    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(tubeImageMathSSSS2 self, itkImageSS2 input)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathSSSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeImageMathSSSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathSSSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathSSSS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathSSSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSSS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSSS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathSSSS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSSS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSSS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSSS2 self, itkImageSS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS2') -> "void":
        """MultiplyImages(tubeImageMathSSSS2 self, itkImageSS2 input2)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSSS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSSS2 self, itkImageSS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSSS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSSS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSSS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSSS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSSS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSSS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSSS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSSS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSSS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSSS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSSS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSSS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSSS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSSS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS2') -> "void":
        """IntensityCorrection(tubeImageMathSSSS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSSS2 self, double factor)
        Resize(tubeImageMathSSSS2 self, itkImageSS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSSS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSSS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSSS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSSS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathSSSS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathSSSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSSS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSSS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSSS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSSS2 *":
        """cast(itkLightObject obj) -> tubeImageMathSSSS2"""
        return _tubeImageMathPython.tubeImageMathSSSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSSS2

        Create a new object of the class tubeImageMathSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSSS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Clone, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_SetInput, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetInput, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetOutput, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetOutputFloat, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetOutputUChar, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetOutputShort, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_IntensityWindow, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Resample, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_AddUniformNoise, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_AddGaussianNoise, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_AddImages, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_MultiplyImages, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_PadUsingMirroring, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_NormalizeMeanStdDev, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_NormalizeFWHM, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_NormalizeMeanShift, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_FuseUsingMax, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_MedianFilter, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Threshold, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_MeanWithinMaskRange, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_StdDevWithinMaskRange, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_AbsoluteValue, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Erode, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Dilate, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_ReplaceValueWithinMaskRange, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Blur, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_BlurOrder, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_HistogramBinMin, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_HistogramBinSize, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Histogram, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_IntensityCorrectionBySlice, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_IntensityCorrection, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_Resize, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_ExtractSlice, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_EnhanceVessels, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_ConnectedComponents, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_VoronoiTessellation, None, tubeImageMathSSSS2)
tubeImageMathSSSS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSSS2)
tubeImageMathSSSS2_swigregister = _tubeImageMathPython.tubeImageMathSSSS2_swigregister
tubeImageMathSSSS2_swigregister(tubeImageMathSSSS2)

def tubeImageMathSSSS2___New_orig__() -> "tubeImageMathSSSS2_Pointer":
    """tubeImageMathSSSS2___New_orig__() -> tubeImageMathSSSS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSSS2___New_orig__()

def tubeImageMathSSSS2_cast(obj: 'itkLightObject') -> "tubeImageMathSSSS2 *":
    """tubeImageMathSSSS2_cast(itkLightObject obj) -> tubeImageMathSSSS2"""
    return _tubeImageMathPython.tubeImageMathSSSS2_cast(obj)

class tubeImageMathSSSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSSS3_Pointer":
        """__New_orig__() -> tubeImageMathSSSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSSS3_Pointer":
        """Clone(tubeImageMathSSSS3 self) -> tubeImageMathSSSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Clone(self)


    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(tubeImageMathSSSS3 self, itkImageSS3 input)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathSSSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetInput(self)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeImageMathSSSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathSSSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathSSSS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathSSSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSSS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSSS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathSSSS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSSS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSSS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSSS3 self, itkImageSS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS3') -> "void":
        """MultiplyImages(tubeImageMathSSSS3 self, itkImageSS3 input2)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSSS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSSS3 self, itkImageSS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSSS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSSS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSSS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSSS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSSS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSSS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSSS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSSS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSSS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSSS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSSS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSSS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSSS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSSS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS3') -> "void":
        """IntensityCorrection(tubeImageMathSSSS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSSS3 self, double factor)
        Resize(tubeImageMathSSSS3 self, itkImageSS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSSS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSSS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSSS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSSS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathSSSS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathSSSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSSS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSSS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSSS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSSS3 *":
        """cast(itkLightObject obj) -> tubeImageMathSSSS3"""
        return _tubeImageMathPython.tubeImageMathSSSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSSS3

        Create a new object of the class tubeImageMathSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSSS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Clone, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_SetInput, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetInput, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetOutput, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetOutputFloat, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetOutputUChar, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetOutputShort, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_IntensityWindow, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Resample, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_AddUniformNoise, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_AddGaussianNoise, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_AddImages, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_MultiplyImages, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_PadUsingMirroring, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_NormalizeMeanStdDev, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_NormalizeFWHM, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_NormalizeMeanShift, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_FuseUsingMax, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_MedianFilter, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Threshold, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_MeanWithinMaskRange, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_StdDevWithinMaskRange, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_AbsoluteValue, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Erode, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Dilate, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_ReplaceValueWithinMaskRange, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Blur, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_BlurOrder, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_HistogramBinMin, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_HistogramBinSize, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Histogram, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_IntensityCorrectionBySlice, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_IntensityCorrection, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_Resize, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_ExtractSlice, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_EnhanceVessels, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_ConnectedComponents, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_VoronoiTessellation, None, tubeImageMathSSSS3)
tubeImageMathSSSS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSSS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSSS3)
tubeImageMathSSSS3_swigregister = _tubeImageMathPython.tubeImageMathSSSS3_swigregister
tubeImageMathSSSS3_swigregister(tubeImageMathSSSS3)

def tubeImageMathSSSS3___New_orig__() -> "tubeImageMathSSSS3_Pointer":
    """tubeImageMathSSSS3___New_orig__() -> tubeImageMathSSSS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSSS3___New_orig__()

def tubeImageMathSSSS3_cast(obj: 'itkLightObject') -> "tubeImageMathSSSS3 *":
    """tubeImageMathSSSS3_cast(itkLightObject obj) -> tubeImageMathSSSS3"""
    return _tubeImageMathPython.tubeImageMathSSSS3_cast(obj)

class tubeImageMathSSUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSUC2_Pointer":
        """__New_orig__() -> tubeImageMathSSUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSUC2_Pointer":
        """Clone(tubeImageMathSSUC2 self) -> tubeImageMathSSUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Clone(self)


    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(tubeImageMathSSUC2 self, itkImageSS2 input)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathSSUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeImageMathSSUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathSSUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathSSUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathSSUC2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSUC2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSUC2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathSSUC2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSUC2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSUC2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSUC2 self, itkImageSS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS2') -> "void":
        """MultiplyImages(tubeImageMathSSUC2 self, itkImageSS2 input2)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSUC2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSUC2 self, itkImageSS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSUC2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSUC2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSUC2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSUC2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSUC2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSUC2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSUC2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSUC2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUC2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUC2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSUC2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSUC2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSUC2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSUC2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS2') -> "void":
        """IntensityCorrection(tubeImageMathSSUC2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSUC2 self, double factor)
        Resize(tubeImageMathSSUC2 self, itkImageSS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSUC2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSUC2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSUC2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSUC2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathSSUC2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathSSUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSUC2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSUC2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSUC2

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSUC2 *":
        """cast(itkLightObject obj) -> tubeImageMathSSUC2"""
        return _tubeImageMathPython.tubeImageMathSSUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSUC2

        Create a new object of the class tubeImageMathSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSUC2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Clone, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_SetInput, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetInput, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetOutput, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetOutputFloat, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetOutputUChar, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetOutputShort, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_IntensityWindow, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Resample, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_AddUniformNoise, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_AddGaussianNoise, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_AddImages, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_MultiplyImages, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_PadUsingMirroring, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_NormalizeMeanStdDev, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_NormalizeFWHM, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_NormalizeMeanShift, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_FuseUsingMax, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_MedianFilter, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Threshold, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_MeanWithinMaskRange, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_StdDevWithinMaskRange, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_AbsoluteValue, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Erode, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Dilate, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_ReplaceValueWithinMaskRange, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Blur, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_BlurOrder, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_HistogramBinMin, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_HistogramBinSize, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Histogram, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_IntensityCorrectionBySlice, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_IntensityCorrection, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_Resize, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_ExtractSlice, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_EnhanceVessels, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_ConnectedComponents, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_VoronoiTessellation, None, tubeImageMathSSUC2)
tubeImageMathSSUC2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSUC2)
tubeImageMathSSUC2_swigregister = _tubeImageMathPython.tubeImageMathSSUC2_swigregister
tubeImageMathSSUC2_swigregister(tubeImageMathSSUC2)

def tubeImageMathSSUC2___New_orig__() -> "tubeImageMathSSUC2_Pointer":
    """tubeImageMathSSUC2___New_orig__() -> tubeImageMathSSUC2_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSUC2___New_orig__()

def tubeImageMathSSUC2_cast(obj: 'itkLightObject') -> "tubeImageMathSSUC2 *":
    """tubeImageMathSSUC2_cast(itkLightObject obj) -> tubeImageMathSSUC2"""
    return _tubeImageMathPython.tubeImageMathSSUC2_cast(obj)

class tubeImageMathSSUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSUC3_Pointer":
        """__New_orig__() -> tubeImageMathSSUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSUC3_Pointer":
        """Clone(tubeImageMathSSUC3 self) -> tubeImageMathSSUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Clone(self)


    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(tubeImageMathSSUC3 self, itkImageSS3 input)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathSSUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetInput(self)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeImageMathSSUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathSSUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathSSUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathSSUC3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSUC3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSUC3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathSSUC3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSUC3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSUC3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSUC3 self, itkImageSS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS3') -> "void":
        """MultiplyImages(tubeImageMathSSUC3 self, itkImageSS3 input2)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSUC3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSUC3 self, itkImageSS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSUC3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSUC3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSUC3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSUC3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSUC3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSUC3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSUC3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSUC3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUC3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUC3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSUC3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSUC3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSUC3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSUC3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS3') -> "void":
        """IntensityCorrection(tubeImageMathSSUC3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSUC3 self, double factor)
        Resize(tubeImageMathSSUC3 self, itkImageSS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSUC3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSUC3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSUC3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSUC3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathSSUC3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathSSUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSUC3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSUC3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSUC3

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSUC3 *":
        """cast(itkLightObject obj) -> tubeImageMathSSUC3"""
        return _tubeImageMathPython.tubeImageMathSSUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSUC3

        Create a new object of the class tubeImageMathSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSUC3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Clone, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_SetInput, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetInput, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetOutput, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetOutputFloat, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetOutputUChar, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetOutputShort, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_IntensityWindow, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Resample, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_AddUniformNoise, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_AddGaussianNoise, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_AddImages, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_MultiplyImages, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_PadUsingMirroring, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_NormalizeMeanStdDev, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_NormalizeFWHM, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_NormalizeMeanShift, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_FuseUsingMax, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_MedianFilter, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Threshold, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_MeanWithinMaskRange, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_StdDevWithinMaskRange, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_AbsoluteValue, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Erode, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Dilate, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_ReplaceValueWithinMaskRange, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Blur, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_BlurOrder, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_HistogramBinMin, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_HistogramBinSize, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Histogram, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_IntensityCorrectionBySlice, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_IntensityCorrection, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_Resize, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_ExtractSlice, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_EnhanceVessels, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_ConnectedComponents, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_VoronoiTessellation, None, tubeImageMathSSUC3)
tubeImageMathSSUC3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUC3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSUC3)
tubeImageMathSSUC3_swigregister = _tubeImageMathPython.tubeImageMathSSUC3_swigregister
tubeImageMathSSUC3_swigregister(tubeImageMathSSUC3)

def tubeImageMathSSUC3___New_orig__() -> "tubeImageMathSSUC3_Pointer":
    """tubeImageMathSSUC3___New_orig__() -> tubeImageMathSSUC3_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSUC3___New_orig__()

def tubeImageMathSSUC3_cast(obj: 'itkLightObject') -> "tubeImageMathSSUC3 *":
    """tubeImageMathSSUC3_cast(itkLightObject obj) -> tubeImageMathSSUC3"""
    return _tubeImageMathPython.tubeImageMathSSUC3_cast(obj)

class tubeImageMathSSUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSUS2_Pointer":
        """__New_orig__() -> tubeImageMathSSUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSUS2_Pointer":
        """Clone(tubeImageMathSSUS2 self) -> tubeImageMathSSUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Clone(self)


    def SetInput(self, input: 'itkImageSS2') -> "void":
        """SetInput(tubeImageMathSSUS2 self, itkImageSS2 input)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathSSUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeImageMathSSUS2 self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathSSUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathSSUS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathSSUS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSUS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSUS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathSSUS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSUS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSUS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSUS2 self, itkImageSS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS2') -> "void":
        """MultiplyImages(tubeImageMathSSUS2 self, itkImageSS2 input2)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSUS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSUS2 self, itkImageSS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSUS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSUS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSUS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSUS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSUS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSUS2 self, itkImageSS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSUS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSUS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSUS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSUS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSUS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSUS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS2') -> "void":
        """IntensityCorrection(tubeImageMathSSUS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSUS2 self, double factor)
        Resize(tubeImageMathSSUS2 self, itkImageSS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSUS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSUS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSUS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSUS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathSSUS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathSSUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSUS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSUS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSUS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSUS2 *":
        """cast(itkLightObject obj) -> tubeImageMathSSUS2"""
        return _tubeImageMathPython.tubeImageMathSSUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSUS2

        Create a new object of the class tubeImageMathSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSUS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Clone, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_SetInput, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetInput, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetOutput, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetOutputFloat, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetOutputUChar, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetOutputShort, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_IntensityWindow, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Resample, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_AddUniformNoise, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_AddGaussianNoise, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_AddImages, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_MultiplyImages, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_PadUsingMirroring, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_NormalizeMeanStdDev, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_NormalizeFWHM, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_NormalizeMeanShift, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_FuseUsingMax, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_MedianFilter, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Threshold, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_MeanWithinMaskRange, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_StdDevWithinMaskRange, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_AbsoluteValue, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Erode, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Dilate, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_ReplaceValueWithinMaskRange, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Blur, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_BlurOrder, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_HistogramBinMin, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_HistogramBinSize, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Histogram, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_IntensityCorrectionBySlice, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_IntensityCorrection, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_Resize, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_ExtractSlice, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_EnhanceVessels, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_ConnectedComponents, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_VoronoiTessellation, None, tubeImageMathSSUS2)
tubeImageMathSSUS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSUS2)
tubeImageMathSSUS2_swigregister = _tubeImageMathPython.tubeImageMathSSUS2_swigregister
tubeImageMathSSUS2_swigregister(tubeImageMathSSUS2)

def tubeImageMathSSUS2___New_orig__() -> "tubeImageMathSSUS2_Pointer":
    """tubeImageMathSSUS2___New_orig__() -> tubeImageMathSSUS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSUS2___New_orig__()

def tubeImageMathSSUS2_cast(obj: 'itkLightObject') -> "tubeImageMathSSUS2 *":
    """tubeImageMathSSUS2_cast(itkLightObject obj) -> tubeImageMathSSUS2"""
    return _tubeImageMathPython.tubeImageMathSSUS2_cast(obj)

class tubeImageMathSSUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathSSUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathSSUS3_Pointer":
        """__New_orig__() -> tubeImageMathSSUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathSSUS3_Pointer":
        """Clone(tubeImageMathSSUS3 self) -> tubeImageMathSSUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Clone(self)


    def SetInput(self, input: 'itkImageSS3') -> "void":
        """SetInput(tubeImageMathSSUS3 self, itkImageSS3 input)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathSSUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetInput(self)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeImageMathSSUS3 self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathSSUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathSSUS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathSSUS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathSSUS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathSSUS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathSSUS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathSSUS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathSSUS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageSS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathSSUS3 self, itkImageSS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageSS3') -> "void":
        """MultiplyImages(tubeImageMathSSUS3 self, itkImageSS3 input2)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathSSUS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathSSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathSSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathSSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageSS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathSSUS3 self, itkImageSS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathSSUS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathSSUS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathSSUS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathSSUS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathSSUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathSSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathSSUS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathSSUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathSSUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageSS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathSSUS3 self, itkImageSS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathSSUS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathSSUS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathSSUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathSSUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathSSUS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathSSUS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathSSUS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathSSUS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathSSUS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageSS3') -> "void":
        """IntensityCorrection(tubeImageMathSSUS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageSS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathSSUS3 self, double factor)
        Resize(tubeImageMathSSUS3 self, itkImageSS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathSSUS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathSSUS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathSSUS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathSSUS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathSSUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathSSUS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathSSUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathSSUS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSSUS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSSUS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathSSUS3 *":
        """cast(itkLightObject obj) -> tubeImageMathSSUS3"""
        return _tubeImageMathPython.tubeImageMathSSUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathSSUS3

        Create a new object of the class tubeImageMathSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSSUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathSSUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathSSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathSSUS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Clone, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_SetInput, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetInput, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetOutput, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetOutputFloat, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetOutputUChar, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetOutputShort, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_IntensityWindow, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Resample, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_AddUniformNoise, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_AddGaussianNoise, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_AddImages, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_MultiplyImages, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_PadUsingMirroring, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_NormalizeMeanStdDev, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_NormalizeFWHM, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_NormalizeMeanShift, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_FuseUsingMax, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_MedianFilter, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Threshold, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_MeanWithinMaskRange, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_StdDevWithinMaskRange, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_AbsoluteValue, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Erode, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Dilate, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_ReplaceValueWithinMaskRange, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Blur, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_BlurOrder, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_HistogramBinMin, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_HistogramBinSize, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Histogram, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_IntensityCorrectionBySlice, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_IntensityCorrection, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_Resize, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_ExtractSlice, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_EnhanceVessels, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_ConnectedComponents, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_VoronoiTessellation, None, tubeImageMathSSUS3)
tubeImageMathSSUS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathSSUS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathSSUS3)
tubeImageMathSSUS3_swigregister = _tubeImageMathPython.tubeImageMathSSUS3_swigregister
tubeImageMathSSUS3_swigregister(tubeImageMathSSUS3)

def tubeImageMathSSUS3___New_orig__() -> "tubeImageMathSSUS3_Pointer":
    """tubeImageMathSSUS3___New_orig__() -> tubeImageMathSSUS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathSSUS3___New_orig__()

def tubeImageMathSSUS3_cast(obj: 'itkLightObject') -> "tubeImageMathSSUS3 *":
    """tubeImageMathSSUS3_cast(itkLightObject obj) -> tubeImageMathSSUS3"""
    return _tubeImageMathPython.tubeImageMathSSUS3_cast(obj)

class tubeImageMathUCD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCD2_Pointer":
        """__New_orig__() -> tubeImageMathUCD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCD2_Pointer":
        """Clone(tubeImageMathUCD2 self) -> tubeImageMathUCD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCD2_Clone(self)


    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(tubeImageMathUCD2 self, itkImageUC2 input)"""
        return _tubeImageMathPython.tubeImageMathUCD2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUCD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeImageMathUCD2 self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUCD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUCD2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUCD2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCD2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCD2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUCD2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCD2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCD2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCD2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCD2 self, itkImageUC2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCD2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC2') -> "void":
        """MultiplyImages(tubeImageMathUCD2 self, itkImageUC2 input2)"""
        return _tubeImageMathPython.tubeImageMathUCD2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCD2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCD2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCD2 self)"""
        return _tubeImageMathPython.tubeImageMathUCD2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCD2 self)"""
        return _tubeImageMathPython.tubeImageMathUCD2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCD2 self)"""
        return _tubeImageMathPython.tubeImageMathUCD2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCD2 self, itkImageUC2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCD2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCD2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCD2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCD2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCD2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCD2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCD2 self)"""
        return _tubeImageMathPython.tubeImageMathUCD2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCD2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCD2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCD2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCD2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCD2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCD2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCD2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCD2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCD2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCD2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCD2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCD2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCD2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCD2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC2') -> "void":
        """IntensityCorrection(tubeImageMathUCD2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCD2 self, double factor)
        Resize(tubeImageMathUCD2 self, itkImageUC2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCD2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCD2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCD2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCD2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCD2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUCD2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUCD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCD2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCD2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCD2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCD2 *":
        """cast(itkLightObject obj) -> tubeImageMathUCD2"""
        return _tubeImageMathPython.tubeImageMathUCD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCD2

        Create a new object of the class tubeImageMathUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCD2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Clone, None, tubeImageMathUCD2)
tubeImageMathUCD2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_SetInput, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetInput, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetOutput, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetOutputFloat, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetOutputUChar, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetOutputShort, None, tubeImageMathUCD2)
tubeImageMathUCD2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_IntensityWindow, None, tubeImageMathUCD2)
tubeImageMathUCD2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCD2)
tubeImageMathUCD2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Resample, None, tubeImageMathUCD2)
tubeImageMathUCD2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_AddUniformNoise, None, tubeImageMathUCD2)
tubeImageMathUCD2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_AddGaussianNoise, None, tubeImageMathUCD2)
tubeImageMathUCD2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_AddImages, None, tubeImageMathUCD2)
tubeImageMathUCD2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_MultiplyImages, None, tubeImageMathUCD2)
tubeImageMathUCD2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_PadUsingMirroring, None, tubeImageMathUCD2)
tubeImageMathUCD2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_NormalizeMeanStdDev, None, tubeImageMathUCD2)
tubeImageMathUCD2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_NormalizeFWHM, None, tubeImageMathUCD2)
tubeImageMathUCD2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_NormalizeMeanShift, None, tubeImageMathUCD2)
tubeImageMathUCD2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_FuseUsingMax, None, tubeImageMathUCD2)
tubeImageMathUCD2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_MedianFilter, None, tubeImageMathUCD2)
tubeImageMathUCD2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Threshold, None, tubeImageMathUCD2)
tubeImageMathUCD2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_MeanWithinMaskRange, None, tubeImageMathUCD2)
tubeImageMathUCD2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_StdDevWithinMaskRange, None, tubeImageMathUCD2)
tubeImageMathUCD2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_AbsoluteValue, None, tubeImageMathUCD2)
tubeImageMathUCD2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCD2)
tubeImageMathUCD2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Erode, None, tubeImageMathUCD2)
tubeImageMathUCD2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Dilate, None, tubeImageMathUCD2)
tubeImageMathUCD2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_ReplaceValueWithinMaskRange, None, tubeImageMathUCD2)
tubeImageMathUCD2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Blur, None, tubeImageMathUCD2)
tubeImageMathUCD2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_BlurOrder, None, tubeImageMathUCD2)
tubeImageMathUCD2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_HistogramBinMin, None, tubeImageMathUCD2)
tubeImageMathUCD2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_HistogramBinSize, None, tubeImageMathUCD2)
tubeImageMathUCD2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Histogram, None, tubeImageMathUCD2)
tubeImageMathUCD2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_IntensityCorrectionBySlice, None, tubeImageMathUCD2)
tubeImageMathUCD2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_IntensityCorrection, None, tubeImageMathUCD2)
tubeImageMathUCD2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_Resize, None, tubeImageMathUCD2)
tubeImageMathUCD2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_ExtractSlice, None, tubeImageMathUCD2)
tubeImageMathUCD2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_EnhanceVessels, None, tubeImageMathUCD2)
tubeImageMathUCD2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_ConnectedComponents, None, tubeImageMathUCD2)
tubeImageMathUCD2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_VoronoiTessellation, None, tubeImageMathUCD2)
tubeImageMathUCD2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCD2)
tubeImageMathUCD2_swigregister = _tubeImageMathPython.tubeImageMathUCD2_swigregister
tubeImageMathUCD2_swigregister(tubeImageMathUCD2)

def tubeImageMathUCD2___New_orig__() -> "tubeImageMathUCD2_Pointer":
    """tubeImageMathUCD2___New_orig__() -> tubeImageMathUCD2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCD2___New_orig__()

def tubeImageMathUCD2_cast(obj: 'itkLightObject') -> "tubeImageMathUCD2 *":
    """tubeImageMathUCD2_cast(itkLightObject obj) -> tubeImageMathUCD2"""
    return _tubeImageMathPython.tubeImageMathUCD2_cast(obj)

class tubeImageMathUCD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCD3_Pointer":
        """__New_orig__() -> tubeImageMathUCD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCD3_Pointer":
        """Clone(tubeImageMathUCD3 self) -> tubeImageMathUCD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCD3_Clone(self)


    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(tubeImageMathUCD3 self, itkImageUC3 input)"""
        return _tubeImageMathPython.tubeImageMathUCD3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUCD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetInput(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeImageMathUCD3 self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUCD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUCD3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUCD3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCD3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCD3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUCD3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCD3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCD3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCD3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCD3 self, itkImageUC3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCD3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC3') -> "void":
        """MultiplyImages(tubeImageMathUCD3 self, itkImageUC3 input2)"""
        return _tubeImageMathPython.tubeImageMathUCD3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCD3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCD3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCD3 self)"""
        return _tubeImageMathPython.tubeImageMathUCD3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCD3 self)"""
        return _tubeImageMathPython.tubeImageMathUCD3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCD3 self)"""
        return _tubeImageMathPython.tubeImageMathUCD3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCD3 self, itkImageUC3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCD3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCD3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCD3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCD3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCD3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCD3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCD3 self)"""
        return _tubeImageMathPython.tubeImageMathUCD3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCD3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCD3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCD3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCD3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCD3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCD3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCD3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCD3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCD3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCD3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCD3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCD3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCD3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCD3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC3') -> "void":
        """IntensityCorrection(tubeImageMathUCD3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCD3 self, double factor)
        Resize(tubeImageMathUCD3 self, itkImageUC3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCD3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCD3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCD3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCD3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCD3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUCD3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUCD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCD3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCD3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCD3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCD3 *":
        """cast(itkLightObject obj) -> tubeImageMathUCD3"""
        return _tubeImageMathPython.tubeImageMathUCD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCD3

        Create a new object of the class tubeImageMathUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCD3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Clone, None, tubeImageMathUCD3)
tubeImageMathUCD3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_SetInput, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetInput, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetOutput, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetOutputFloat, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetOutputUChar, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetOutputShort, None, tubeImageMathUCD3)
tubeImageMathUCD3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_IntensityWindow, None, tubeImageMathUCD3)
tubeImageMathUCD3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCD3)
tubeImageMathUCD3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Resample, None, tubeImageMathUCD3)
tubeImageMathUCD3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_AddUniformNoise, None, tubeImageMathUCD3)
tubeImageMathUCD3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_AddGaussianNoise, None, tubeImageMathUCD3)
tubeImageMathUCD3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_AddImages, None, tubeImageMathUCD3)
tubeImageMathUCD3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_MultiplyImages, None, tubeImageMathUCD3)
tubeImageMathUCD3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_PadUsingMirroring, None, tubeImageMathUCD3)
tubeImageMathUCD3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_NormalizeMeanStdDev, None, tubeImageMathUCD3)
tubeImageMathUCD3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_NormalizeFWHM, None, tubeImageMathUCD3)
tubeImageMathUCD3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_NormalizeMeanShift, None, tubeImageMathUCD3)
tubeImageMathUCD3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_FuseUsingMax, None, tubeImageMathUCD3)
tubeImageMathUCD3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_MedianFilter, None, tubeImageMathUCD3)
tubeImageMathUCD3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Threshold, None, tubeImageMathUCD3)
tubeImageMathUCD3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_MeanWithinMaskRange, None, tubeImageMathUCD3)
tubeImageMathUCD3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_StdDevWithinMaskRange, None, tubeImageMathUCD3)
tubeImageMathUCD3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_AbsoluteValue, None, tubeImageMathUCD3)
tubeImageMathUCD3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCD3)
tubeImageMathUCD3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Erode, None, tubeImageMathUCD3)
tubeImageMathUCD3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Dilate, None, tubeImageMathUCD3)
tubeImageMathUCD3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_ReplaceValueWithinMaskRange, None, tubeImageMathUCD3)
tubeImageMathUCD3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Blur, None, tubeImageMathUCD3)
tubeImageMathUCD3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_BlurOrder, None, tubeImageMathUCD3)
tubeImageMathUCD3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_HistogramBinMin, None, tubeImageMathUCD3)
tubeImageMathUCD3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_HistogramBinSize, None, tubeImageMathUCD3)
tubeImageMathUCD3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Histogram, None, tubeImageMathUCD3)
tubeImageMathUCD3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_IntensityCorrectionBySlice, None, tubeImageMathUCD3)
tubeImageMathUCD3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_IntensityCorrection, None, tubeImageMathUCD3)
tubeImageMathUCD3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_Resize, None, tubeImageMathUCD3)
tubeImageMathUCD3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_ExtractSlice, None, tubeImageMathUCD3)
tubeImageMathUCD3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_EnhanceVessels, None, tubeImageMathUCD3)
tubeImageMathUCD3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_ConnectedComponents, None, tubeImageMathUCD3)
tubeImageMathUCD3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_VoronoiTessellation, None, tubeImageMathUCD3)
tubeImageMathUCD3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCD3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCD3)
tubeImageMathUCD3_swigregister = _tubeImageMathPython.tubeImageMathUCD3_swigregister
tubeImageMathUCD3_swigregister(tubeImageMathUCD3)

def tubeImageMathUCD3___New_orig__() -> "tubeImageMathUCD3_Pointer":
    """tubeImageMathUCD3___New_orig__() -> tubeImageMathUCD3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCD3___New_orig__()

def tubeImageMathUCD3_cast(obj: 'itkLightObject') -> "tubeImageMathUCD3 *":
    """tubeImageMathUCD3_cast(itkLightObject obj) -> tubeImageMathUCD3"""
    return _tubeImageMathPython.tubeImageMathUCD3_cast(obj)

class tubeImageMathUCF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCF2_Pointer":
        """__New_orig__() -> tubeImageMathUCF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCF2_Pointer":
        """Clone(tubeImageMathUCF2 self) -> tubeImageMathUCF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCF2_Clone(self)


    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(tubeImageMathUCF2 self, itkImageUC2 input)"""
        return _tubeImageMathPython.tubeImageMathUCF2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUCF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeImageMathUCF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUCF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUCF2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUCF2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCF2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCF2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUCF2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCF2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCF2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCF2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCF2 self, itkImageUC2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCF2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC2') -> "void":
        """MultiplyImages(tubeImageMathUCF2 self, itkImageUC2 input2)"""
        return _tubeImageMathPython.tubeImageMathUCF2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCF2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCF2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCF2 self)"""
        return _tubeImageMathPython.tubeImageMathUCF2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCF2 self)"""
        return _tubeImageMathPython.tubeImageMathUCF2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCF2 self)"""
        return _tubeImageMathPython.tubeImageMathUCF2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCF2 self, itkImageUC2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCF2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCF2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCF2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCF2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCF2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCF2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCF2 self)"""
        return _tubeImageMathPython.tubeImageMathUCF2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCF2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCF2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCF2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCF2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCF2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCF2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCF2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCF2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCF2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCF2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCF2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCF2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCF2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCF2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC2') -> "void":
        """IntensityCorrection(tubeImageMathUCF2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCF2 self, double factor)
        Resize(tubeImageMathUCF2 self, itkImageUC2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCF2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCF2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCF2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCF2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCF2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUCF2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUCF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCF2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCF2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCF2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCF2 *":
        """cast(itkLightObject obj) -> tubeImageMathUCF2"""
        return _tubeImageMathPython.tubeImageMathUCF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCF2

        Create a new object of the class tubeImageMathUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCF2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Clone, None, tubeImageMathUCF2)
tubeImageMathUCF2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_SetInput, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetInput, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetOutput, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetOutputFloat, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetOutputUChar, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetOutputShort, None, tubeImageMathUCF2)
tubeImageMathUCF2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_IntensityWindow, None, tubeImageMathUCF2)
tubeImageMathUCF2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCF2)
tubeImageMathUCF2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Resample, None, tubeImageMathUCF2)
tubeImageMathUCF2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_AddUniformNoise, None, tubeImageMathUCF2)
tubeImageMathUCF2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_AddGaussianNoise, None, tubeImageMathUCF2)
tubeImageMathUCF2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_AddImages, None, tubeImageMathUCF2)
tubeImageMathUCF2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_MultiplyImages, None, tubeImageMathUCF2)
tubeImageMathUCF2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_PadUsingMirroring, None, tubeImageMathUCF2)
tubeImageMathUCF2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_NormalizeMeanStdDev, None, tubeImageMathUCF2)
tubeImageMathUCF2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_NormalizeFWHM, None, tubeImageMathUCF2)
tubeImageMathUCF2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_NormalizeMeanShift, None, tubeImageMathUCF2)
tubeImageMathUCF2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_FuseUsingMax, None, tubeImageMathUCF2)
tubeImageMathUCF2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_MedianFilter, None, tubeImageMathUCF2)
tubeImageMathUCF2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Threshold, None, tubeImageMathUCF2)
tubeImageMathUCF2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_MeanWithinMaskRange, None, tubeImageMathUCF2)
tubeImageMathUCF2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_StdDevWithinMaskRange, None, tubeImageMathUCF2)
tubeImageMathUCF2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_AbsoluteValue, None, tubeImageMathUCF2)
tubeImageMathUCF2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCF2)
tubeImageMathUCF2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Erode, None, tubeImageMathUCF2)
tubeImageMathUCF2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Dilate, None, tubeImageMathUCF2)
tubeImageMathUCF2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_ReplaceValueWithinMaskRange, None, tubeImageMathUCF2)
tubeImageMathUCF2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Blur, None, tubeImageMathUCF2)
tubeImageMathUCF2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_BlurOrder, None, tubeImageMathUCF2)
tubeImageMathUCF2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_HistogramBinMin, None, tubeImageMathUCF2)
tubeImageMathUCF2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_HistogramBinSize, None, tubeImageMathUCF2)
tubeImageMathUCF2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Histogram, None, tubeImageMathUCF2)
tubeImageMathUCF2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_IntensityCorrectionBySlice, None, tubeImageMathUCF2)
tubeImageMathUCF2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_IntensityCorrection, None, tubeImageMathUCF2)
tubeImageMathUCF2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_Resize, None, tubeImageMathUCF2)
tubeImageMathUCF2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_ExtractSlice, None, tubeImageMathUCF2)
tubeImageMathUCF2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_EnhanceVessels, None, tubeImageMathUCF2)
tubeImageMathUCF2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_ConnectedComponents, None, tubeImageMathUCF2)
tubeImageMathUCF2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_VoronoiTessellation, None, tubeImageMathUCF2)
tubeImageMathUCF2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCF2)
tubeImageMathUCF2_swigregister = _tubeImageMathPython.tubeImageMathUCF2_swigregister
tubeImageMathUCF2_swigregister(tubeImageMathUCF2)

def tubeImageMathUCF2___New_orig__() -> "tubeImageMathUCF2_Pointer":
    """tubeImageMathUCF2___New_orig__() -> tubeImageMathUCF2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCF2___New_orig__()

def tubeImageMathUCF2_cast(obj: 'itkLightObject') -> "tubeImageMathUCF2 *":
    """tubeImageMathUCF2_cast(itkLightObject obj) -> tubeImageMathUCF2"""
    return _tubeImageMathPython.tubeImageMathUCF2_cast(obj)

class tubeImageMathUCF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCF3_Pointer":
        """__New_orig__() -> tubeImageMathUCF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCF3_Pointer":
        """Clone(tubeImageMathUCF3 self) -> tubeImageMathUCF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCF3_Clone(self)


    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(tubeImageMathUCF3 self, itkImageUC3 input)"""
        return _tubeImageMathPython.tubeImageMathUCF3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUCF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeImageMathUCF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUCF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUCF3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUCF3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCF3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCF3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUCF3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCF3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCF3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCF3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCF3 self, itkImageUC3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCF3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC3') -> "void":
        """MultiplyImages(tubeImageMathUCF3 self, itkImageUC3 input2)"""
        return _tubeImageMathPython.tubeImageMathUCF3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCF3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCF3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCF3 self)"""
        return _tubeImageMathPython.tubeImageMathUCF3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCF3 self)"""
        return _tubeImageMathPython.tubeImageMathUCF3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCF3 self)"""
        return _tubeImageMathPython.tubeImageMathUCF3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCF3 self, itkImageUC3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCF3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCF3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCF3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCF3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCF3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCF3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCF3 self)"""
        return _tubeImageMathPython.tubeImageMathUCF3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCF3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCF3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCF3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCF3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCF3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCF3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCF3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCF3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCF3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCF3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCF3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCF3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCF3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCF3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC3') -> "void":
        """IntensityCorrection(tubeImageMathUCF3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCF3 self, double factor)
        Resize(tubeImageMathUCF3 self, itkImageUC3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCF3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCF3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCF3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCF3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCF3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUCF3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUCF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCF3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCF3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCF3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCF3 *":
        """cast(itkLightObject obj) -> tubeImageMathUCF3"""
        return _tubeImageMathPython.tubeImageMathUCF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCF3

        Create a new object of the class tubeImageMathUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCF3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Clone, None, tubeImageMathUCF3)
tubeImageMathUCF3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_SetInput, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetInput, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetOutput, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetOutputFloat, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetOutputUChar, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetOutputShort, None, tubeImageMathUCF3)
tubeImageMathUCF3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_IntensityWindow, None, tubeImageMathUCF3)
tubeImageMathUCF3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCF3)
tubeImageMathUCF3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Resample, None, tubeImageMathUCF3)
tubeImageMathUCF3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_AddUniformNoise, None, tubeImageMathUCF3)
tubeImageMathUCF3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_AddGaussianNoise, None, tubeImageMathUCF3)
tubeImageMathUCF3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_AddImages, None, tubeImageMathUCF3)
tubeImageMathUCF3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_MultiplyImages, None, tubeImageMathUCF3)
tubeImageMathUCF3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_PadUsingMirroring, None, tubeImageMathUCF3)
tubeImageMathUCF3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_NormalizeMeanStdDev, None, tubeImageMathUCF3)
tubeImageMathUCF3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_NormalizeFWHM, None, tubeImageMathUCF3)
tubeImageMathUCF3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_NormalizeMeanShift, None, tubeImageMathUCF3)
tubeImageMathUCF3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_FuseUsingMax, None, tubeImageMathUCF3)
tubeImageMathUCF3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_MedianFilter, None, tubeImageMathUCF3)
tubeImageMathUCF3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Threshold, None, tubeImageMathUCF3)
tubeImageMathUCF3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_MeanWithinMaskRange, None, tubeImageMathUCF3)
tubeImageMathUCF3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_StdDevWithinMaskRange, None, tubeImageMathUCF3)
tubeImageMathUCF3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_AbsoluteValue, None, tubeImageMathUCF3)
tubeImageMathUCF3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCF3)
tubeImageMathUCF3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Erode, None, tubeImageMathUCF3)
tubeImageMathUCF3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Dilate, None, tubeImageMathUCF3)
tubeImageMathUCF3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_ReplaceValueWithinMaskRange, None, tubeImageMathUCF3)
tubeImageMathUCF3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Blur, None, tubeImageMathUCF3)
tubeImageMathUCF3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_BlurOrder, None, tubeImageMathUCF3)
tubeImageMathUCF3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_HistogramBinMin, None, tubeImageMathUCF3)
tubeImageMathUCF3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_HistogramBinSize, None, tubeImageMathUCF3)
tubeImageMathUCF3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Histogram, None, tubeImageMathUCF3)
tubeImageMathUCF3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_IntensityCorrectionBySlice, None, tubeImageMathUCF3)
tubeImageMathUCF3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_IntensityCorrection, None, tubeImageMathUCF3)
tubeImageMathUCF3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_Resize, None, tubeImageMathUCF3)
tubeImageMathUCF3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_ExtractSlice, None, tubeImageMathUCF3)
tubeImageMathUCF3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_EnhanceVessels, None, tubeImageMathUCF3)
tubeImageMathUCF3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_ConnectedComponents, None, tubeImageMathUCF3)
tubeImageMathUCF3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_VoronoiTessellation, None, tubeImageMathUCF3)
tubeImageMathUCF3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCF3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCF3)
tubeImageMathUCF3_swigregister = _tubeImageMathPython.tubeImageMathUCF3_swigregister
tubeImageMathUCF3_swigregister(tubeImageMathUCF3)

def tubeImageMathUCF3___New_orig__() -> "tubeImageMathUCF3_Pointer":
    """tubeImageMathUCF3___New_orig__() -> tubeImageMathUCF3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCF3___New_orig__()

def tubeImageMathUCF3_cast(obj: 'itkLightObject') -> "tubeImageMathUCF3 *":
    """tubeImageMathUCF3_cast(itkLightObject obj) -> tubeImageMathUCF3"""
    return _tubeImageMathPython.tubeImageMathUCF3_cast(obj)

class tubeImageMathUCSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCSS2_Pointer":
        """__New_orig__() -> tubeImageMathUCSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCSS2_Pointer":
        """Clone(tubeImageMathUCSS2 self) -> tubeImageMathUCSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Clone(self)


    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(tubeImageMathUCSS2 self, itkImageUC2 input)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUCSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeImageMathUCSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUCSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUCSS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUCSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCSS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCSS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUCSS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCSS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCSS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCSS2 self, itkImageUC2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC2') -> "void":
        """MultiplyImages(tubeImageMathUCSS2 self, itkImageUC2 input2)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCSS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCSS2 self, itkImageUC2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCSS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCSS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCSS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCSS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCSS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCSS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCSS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCSS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCSS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCSS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCSS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCSS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCSS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCSS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC2') -> "void":
        """IntensityCorrection(tubeImageMathUCSS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCSS2 self, double factor)
        Resize(tubeImageMathUCSS2 self, itkImageUC2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCSS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCSS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCSS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCSS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUCSS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUCSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCSS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCSS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCSS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCSS2 *":
        """cast(itkLightObject obj) -> tubeImageMathUCSS2"""
        return _tubeImageMathPython.tubeImageMathUCSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCSS2

        Create a new object of the class tubeImageMathUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCSS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Clone, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_SetInput, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetInput, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetOutput, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetOutputFloat, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetOutputUChar, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetOutputShort, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_IntensityWindow, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Resample, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_AddUniformNoise, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_AddGaussianNoise, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_AddImages, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_MultiplyImages, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_PadUsingMirroring, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_NormalizeMeanStdDev, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_NormalizeFWHM, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_NormalizeMeanShift, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_FuseUsingMax, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_MedianFilter, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Threshold, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_MeanWithinMaskRange, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_StdDevWithinMaskRange, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_AbsoluteValue, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Erode, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Dilate, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_ReplaceValueWithinMaskRange, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Blur, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_BlurOrder, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_HistogramBinMin, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_HistogramBinSize, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Histogram, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_IntensityCorrectionBySlice, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_IntensityCorrection, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_Resize, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_ExtractSlice, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_EnhanceVessels, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_ConnectedComponents, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_VoronoiTessellation, None, tubeImageMathUCSS2)
tubeImageMathUCSS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCSS2)
tubeImageMathUCSS2_swigregister = _tubeImageMathPython.tubeImageMathUCSS2_swigregister
tubeImageMathUCSS2_swigregister(tubeImageMathUCSS2)

def tubeImageMathUCSS2___New_orig__() -> "tubeImageMathUCSS2_Pointer":
    """tubeImageMathUCSS2___New_orig__() -> tubeImageMathUCSS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCSS2___New_orig__()

def tubeImageMathUCSS2_cast(obj: 'itkLightObject') -> "tubeImageMathUCSS2 *":
    """tubeImageMathUCSS2_cast(itkLightObject obj) -> tubeImageMathUCSS2"""
    return _tubeImageMathPython.tubeImageMathUCSS2_cast(obj)

class tubeImageMathUCSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCSS3_Pointer":
        """__New_orig__() -> tubeImageMathUCSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCSS3_Pointer":
        """Clone(tubeImageMathUCSS3 self) -> tubeImageMathUCSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Clone(self)


    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(tubeImageMathUCSS3 self, itkImageUC3 input)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUCSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetInput(self)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeImageMathUCSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUCSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUCSS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUCSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCSS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCSS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUCSS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCSS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCSS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCSS3 self, itkImageUC3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC3') -> "void":
        """MultiplyImages(tubeImageMathUCSS3 self, itkImageUC3 input2)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCSS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCSS3 self, itkImageUC3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCSS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCSS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCSS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCSS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCSS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCSS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCSS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCSS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCSS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCSS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCSS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCSS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCSS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCSS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC3') -> "void":
        """IntensityCorrection(tubeImageMathUCSS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCSS3 self, double factor)
        Resize(tubeImageMathUCSS3 self, itkImageUC3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCSS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCSS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCSS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCSS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUCSS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUCSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCSS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCSS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCSS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCSS3 *":
        """cast(itkLightObject obj) -> tubeImageMathUCSS3"""
        return _tubeImageMathPython.tubeImageMathUCSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCSS3

        Create a new object of the class tubeImageMathUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCSS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Clone, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_SetInput, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetInput, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetOutput, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetOutputFloat, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetOutputUChar, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetOutputShort, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_IntensityWindow, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Resample, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_AddUniformNoise, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_AddGaussianNoise, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_AddImages, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_MultiplyImages, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_PadUsingMirroring, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_NormalizeMeanStdDev, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_NormalizeFWHM, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_NormalizeMeanShift, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_FuseUsingMax, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_MedianFilter, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Threshold, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_MeanWithinMaskRange, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_StdDevWithinMaskRange, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_AbsoluteValue, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Erode, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Dilate, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_ReplaceValueWithinMaskRange, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Blur, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_BlurOrder, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_HistogramBinMin, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_HistogramBinSize, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Histogram, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_IntensityCorrectionBySlice, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_IntensityCorrection, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_Resize, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_ExtractSlice, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_EnhanceVessels, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_ConnectedComponents, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_VoronoiTessellation, None, tubeImageMathUCSS3)
tubeImageMathUCSS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCSS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCSS3)
tubeImageMathUCSS3_swigregister = _tubeImageMathPython.tubeImageMathUCSS3_swigregister
tubeImageMathUCSS3_swigregister(tubeImageMathUCSS3)

def tubeImageMathUCSS3___New_orig__() -> "tubeImageMathUCSS3_Pointer":
    """tubeImageMathUCSS3___New_orig__() -> tubeImageMathUCSS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCSS3___New_orig__()

def tubeImageMathUCSS3_cast(obj: 'itkLightObject') -> "tubeImageMathUCSS3 *":
    """tubeImageMathUCSS3_cast(itkLightObject obj) -> tubeImageMathUCSS3"""
    return _tubeImageMathPython.tubeImageMathUCSS3_cast(obj)

class tubeImageMathUCUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCUC2_Pointer":
        """__New_orig__() -> tubeImageMathUCUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCUC2_Pointer":
        """Clone(tubeImageMathUCUC2 self) -> tubeImageMathUCUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Clone(self)


    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(tubeImageMathUCUC2 self, itkImageUC2 input)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUCUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeImageMathUCUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUCUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUCUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUCUC2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCUC2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCUC2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUCUC2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCUC2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCUC2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCUC2 self, itkImageUC2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC2') -> "void":
        """MultiplyImages(tubeImageMathUCUC2 self, itkImageUC2 input2)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCUC2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCUC2 self, itkImageUC2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCUC2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCUC2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCUC2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCUC2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCUC2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCUC2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCUC2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCUC2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUC2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUC2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCUC2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCUC2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCUC2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCUC2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC2') -> "void":
        """IntensityCorrection(tubeImageMathUCUC2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCUC2 self, double factor)
        Resize(tubeImageMathUCUC2 self, itkImageUC2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCUC2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCUC2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCUC2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCUC2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUCUC2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUCUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCUC2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCUC2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCUC2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCUC2 *":
        """cast(itkLightObject obj) -> tubeImageMathUCUC2"""
        return _tubeImageMathPython.tubeImageMathUCUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCUC2

        Create a new object of the class tubeImageMathUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCUC2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Clone, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_SetInput, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetInput, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetOutput, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetOutputFloat, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetOutputUChar, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetOutputShort, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_IntensityWindow, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Resample, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_AddUniformNoise, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_AddGaussianNoise, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_AddImages, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_MultiplyImages, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_PadUsingMirroring, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_NormalizeMeanStdDev, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_NormalizeFWHM, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_NormalizeMeanShift, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_FuseUsingMax, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_MedianFilter, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Threshold, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_MeanWithinMaskRange, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_StdDevWithinMaskRange, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_AbsoluteValue, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Erode, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Dilate, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_ReplaceValueWithinMaskRange, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Blur, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_BlurOrder, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_HistogramBinMin, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_HistogramBinSize, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Histogram, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_IntensityCorrectionBySlice, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_IntensityCorrection, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_Resize, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_ExtractSlice, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_EnhanceVessels, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_ConnectedComponents, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_VoronoiTessellation, None, tubeImageMathUCUC2)
tubeImageMathUCUC2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCUC2)
tubeImageMathUCUC2_swigregister = _tubeImageMathPython.tubeImageMathUCUC2_swigregister
tubeImageMathUCUC2_swigregister(tubeImageMathUCUC2)

def tubeImageMathUCUC2___New_orig__() -> "tubeImageMathUCUC2_Pointer":
    """tubeImageMathUCUC2___New_orig__() -> tubeImageMathUCUC2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCUC2___New_orig__()

def tubeImageMathUCUC2_cast(obj: 'itkLightObject') -> "tubeImageMathUCUC2 *":
    """tubeImageMathUCUC2_cast(itkLightObject obj) -> tubeImageMathUCUC2"""
    return _tubeImageMathPython.tubeImageMathUCUC2_cast(obj)

class tubeImageMathUCUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCUC3_Pointer":
        """__New_orig__() -> tubeImageMathUCUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCUC3_Pointer":
        """Clone(tubeImageMathUCUC3 self) -> tubeImageMathUCUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Clone(self)


    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(tubeImageMathUCUC3 self, itkImageUC3 input)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUCUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetInput(self)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeImageMathUCUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUCUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUCUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUCUC3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCUC3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCUC3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUCUC3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCUC3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCUC3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCUC3 self, itkImageUC3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC3') -> "void":
        """MultiplyImages(tubeImageMathUCUC3 self, itkImageUC3 input2)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCUC3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCUC3 self, itkImageUC3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCUC3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCUC3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCUC3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCUC3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCUC3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCUC3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCUC3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCUC3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUC3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUC3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCUC3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCUC3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCUC3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCUC3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC3') -> "void":
        """IntensityCorrection(tubeImageMathUCUC3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCUC3 self, double factor)
        Resize(tubeImageMathUCUC3 self, itkImageUC3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCUC3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCUC3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCUC3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCUC3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUCUC3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUCUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCUC3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCUC3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCUC3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCUC3 *":
        """cast(itkLightObject obj) -> tubeImageMathUCUC3"""
        return _tubeImageMathPython.tubeImageMathUCUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCUC3

        Create a new object of the class tubeImageMathUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCUC3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Clone, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_SetInput, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetInput, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetOutput, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetOutputFloat, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetOutputUChar, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetOutputShort, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_IntensityWindow, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Resample, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_AddUniformNoise, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_AddGaussianNoise, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_AddImages, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_MultiplyImages, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_PadUsingMirroring, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_NormalizeMeanStdDev, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_NormalizeFWHM, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_NormalizeMeanShift, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_FuseUsingMax, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_MedianFilter, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Threshold, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_MeanWithinMaskRange, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_StdDevWithinMaskRange, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_AbsoluteValue, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Erode, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Dilate, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_ReplaceValueWithinMaskRange, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Blur, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_BlurOrder, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_HistogramBinMin, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_HistogramBinSize, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Histogram, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_IntensityCorrectionBySlice, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_IntensityCorrection, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_Resize, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_ExtractSlice, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_EnhanceVessels, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_ConnectedComponents, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_VoronoiTessellation, None, tubeImageMathUCUC3)
tubeImageMathUCUC3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUC3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCUC3)
tubeImageMathUCUC3_swigregister = _tubeImageMathPython.tubeImageMathUCUC3_swigregister
tubeImageMathUCUC3_swigregister(tubeImageMathUCUC3)

def tubeImageMathUCUC3___New_orig__() -> "tubeImageMathUCUC3_Pointer":
    """tubeImageMathUCUC3___New_orig__() -> tubeImageMathUCUC3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCUC3___New_orig__()

def tubeImageMathUCUC3_cast(obj: 'itkLightObject') -> "tubeImageMathUCUC3 *":
    """tubeImageMathUCUC3_cast(itkLightObject obj) -> tubeImageMathUCUC3"""
    return _tubeImageMathPython.tubeImageMathUCUC3_cast(obj)

class tubeImageMathUCUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCUS2_Pointer":
        """__New_orig__() -> tubeImageMathUCUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCUS2_Pointer":
        """Clone(tubeImageMathUCUS2 self) -> tubeImageMathUCUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Clone(self)


    def SetInput(self, input: 'itkImageUC2') -> "void":
        """SetInput(tubeImageMathUCUS2 self, itkImageUC2 input)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUCUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeImageMathUCUS2 self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUCUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUCUS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUCUS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCUS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCUS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUCUS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCUS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCUS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCUS2 self, itkImageUC2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC2') -> "void":
        """MultiplyImages(tubeImageMathUCUS2 self, itkImageUC2 input2)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCUS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCUS2 self, itkImageUC2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCUS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCUS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCUS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCUS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCUS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCUS2 self, itkImageUC2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCUS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCUS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCUS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCUS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCUS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCUS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC2') -> "void":
        """IntensityCorrection(tubeImageMathUCUS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCUS2 self, double factor)
        Resize(tubeImageMathUCUS2 self, itkImageUC2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCUS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCUS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCUS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCUS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUCUS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUCUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCUS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCUS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCUS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCUS2 *":
        """cast(itkLightObject obj) -> tubeImageMathUCUS2"""
        return _tubeImageMathPython.tubeImageMathUCUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCUS2

        Create a new object of the class tubeImageMathUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCUS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Clone, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_SetInput, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetInput, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetOutput, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetOutputFloat, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetOutputUChar, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetOutputShort, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_IntensityWindow, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Resample, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_AddUniformNoise, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_AddGaussianNoise, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_AddImages, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_MultiplyImages, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_PadUsingMirroring, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_NormalizeMeanStdDev, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_NormalizeFWHM, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_NormalizeMeanShift, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_FuseUsingMax, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_MedianFilter, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Threshold, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_MeanWithinMaskRange, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_StdDevWithinMaskRange, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_AbsoluteValue, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Erode, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Dilate, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_ReplaceValueWithinMaskRange, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Blur, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_BlurOrder, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_HistogramBinMin, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_HistogramBinSize, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Histogram, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_IntensityCorrectionBySlice, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_IntensityCorrection, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_Resize, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_ExtractSlice, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_EnhanceVessels, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_ConnectedComponents, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_VoronoiTessellation, None, tubeImageMathUCUS2)
tubeImageMathUCUS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCUS2)
tubeImageMathUCUS2_swigregister = _tubeImageMathPython.tubeImageMathUCUS2_swigregister
tubeImageMathUCUS2_swigregister(tubeImageMathUCUS2)

def tubeImageMathUCUS2___New_orig__() -> "tubeImageMathUCUS2_Pointer":
    """tubeImageMathUCUS2___New_orig__() -> tubeImageMathUCUS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCUS2___New_orig__()

def tubeImageMathUCUS2_cast(obj: 'itkLightObject') -> "tubeImageMathUCUS2 *":
    """tubeImageMathUCUS2_cast(itkLightObject obj) -> tubeImageMathUCUS2"""
    return _tubeImageMathPython.tubeImageMathUCUS2_cast(obj)

class tubeImageMathUCUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUCUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUCUS3_Pointer":
        """__New_orig__() -> tubeImageMathUCUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUCUS3_Pointer":
        """Clone(tubeImageMathUCUS3 self) -> tubeImageMathUCUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Clone(self)


    def SetInput(self, input: 'itkImageUC3') -> "void":
        """SetInput(tubeImageMathUCUS3 self, itkImageUC3 input)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUCUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetInput(self)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeImageMathUCUS3 self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUCUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUCUS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUCUS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUCUS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUCUS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUCUS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUCUS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUCUS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUC3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUCUS3 self, itkImageUC3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUC3') -> "void":
        """MultiplyImages(tubeImageMathUCUS3 self, itkImageUC3 input2)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUCUS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUCUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUCUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUCUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUC3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUCUS3 self, itkImageUC3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUCUS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUCUS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUCUS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUCUS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUCUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUCUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUCUS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUCUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUCUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUC3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUCUS3 self, itkImageUC3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUCUS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUCUS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUCUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUCUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUCUS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUCUS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUCUS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUCUS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUCUS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUC3') -> "void":
        """IntensityCorrection(tubeImageMathUCUS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUC3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUCUS3 self, double factor)
        Resize(tubeImageMathUCUS3 self, itkImageUC3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUCUS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUCUS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUCUS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUCUS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUCUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUCUS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUCUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUCUS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUCUS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUCUS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUCUS3 *":
        """cast(itkLightObject obj) -> tubeImageMathUCUS3"""
        return _tubeImageMathPython.tubeImageMathUCUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUCUS3

        Create a new object of the class tubeImageMathUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUCUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUCUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUCUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUCUS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Clone, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_SetInput, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetInput, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetOutput, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetOutputFloat, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetOutputUChar, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetOutputShort, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_IntensityWindow, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Resample, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_AddUniformNoise, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_AddGaussianNoise, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_AddImages, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_MultiplyImages, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_PadUsingMirroring, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_NormalizeMeanStdDev, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_NormalizeFWHM, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_NormalizeMeanShift, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_FuseUsingMax, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_MedianFilter, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Threshold, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_MeanWithinMaskRange, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_StdDevWithinMaskRange, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_AbsoluteValue, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Erode, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Dilate, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_ReplaceValueWithinMaskRange, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Blur, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_BlurOrder, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_HistogramBinMin, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_HistogramBinSize, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Histogram, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_IntensityCorrectionBySlice, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_IntensityCorrection, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_Resize, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_ExtractSlice, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_EnhanceVessels, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_ConnectedComponents, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_VoronoiTessellation, None, tubeImageMathUCUS3)
tubeImageMathUCUS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUCUS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUCUS3)
tubeImageMathUCUS3_swigregister = _tubeImageMathPython.tubeImageMathUCUS3_swigregister
tubeImageMathUCUS3_swigregister(tubeImageMathUCUS3)

def tubeImageMathUCUS3___New_orig__() -> "tubeImageMathUCUS3_Pointer":
    """tubeImageMathUCUS3___New_orig__() -> tubeImageMathUCUS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUCUS3___New_orig__()

def tubeImageMathUCUS3_cast(obj: 'itkLightObject') -> "tubeImageMathUCUS3 *":
    """tubeImageMathUCUS3_cast(itkLightObject obj) -> tubeImageMathUCUS3"""
    return _tubeImageMathPython.tubeImageMathUCUS3_cast(obj)

class tubeImageMathUSD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSD2_Pointer":
        """__New_orig__() -> tubeImageMathUSD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSD2_Pointer":
        """Clone(tubeImageMathUSD2 self) -> tubeImageMathUSD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSD2_Clone(self)


    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(tubeImageMathUSD2 self, itkImageUS2 input)"""
        return _tubeImageMathPython.tubeImageMathUSD2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUSD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeImageMathUSD2 self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUSD2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUSD2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUSD2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSD2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSD2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUSD2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSD2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSD2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSD2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSD2 self, itkImageUS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSD2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS2') -> "void":
        """MultiplyImages(tubeImageMathUSD2 self, itkImageUS2 input2)"""
        return _tubeImageMathPython.tubeImageMathUSD2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSD2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSD2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSD2 self)"""
        return _tubeImageMathPython.tubeImageMathUSD2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSD2 self)"""
        return _tubeImageMathPython.tubeImageMathUSD2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSD2 self)"""
        return _tubeImageMathPython.tubeImageMathUSD2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSD2 self, itkImageUS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSD2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSD2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSD2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSD2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSD2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSD2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSD2 self)"""
        return _tubeImageMathPython.tubeImageMathUSD2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSD2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSD2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSD2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSD2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSD2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSD2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSD2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSD2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSD2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSD2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSD2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSD2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSD2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSD2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSD2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSD2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS2') -> "void":
        """IntensityCorrection(tubeImageMathUSD2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSD2 self, double factor)
        Resize(tubeImageMathUSD2 self, itkImageUS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSD2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSD2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSD2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSD2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSD2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUSD2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUSD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSD2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSD2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSD2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSD2 *":
        """cast(itkLightObject obj) -> tubeImageMathUSD2"""
        return _tubeImageMathPython.tubeImageMathUSD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSD2

        Create a new object of the class tubeImageMathUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSD2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Clone, None, tubeImageMathUSD2)
tubeImageMathUSD2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_SetInput, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetInput, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetOutput, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetOutputFloat, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetOutputUChar, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetOutputShort, None, tubeImageMathUSD2)
tubeImageMathUSD2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_IntensityWindow, None, tubeImageMathUSD2)
tubeImageMathUSD2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSD2)
tubeImageMathUSD2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Resample, None, tubeImageMathUSD2)
tubeImageMathUSD2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_AddUniformNoise, None, tubeImageMathUSD2)
tubeImageMathUSD2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_AddGaussianNoise, None, tubeImageMathUSD2)
tubeImageMathUSD2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_AddImages, None, tubeImageMathUSD2)
tubeImageMathUSD2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_MultiplyImages, None, tubeImageMathUSD2)
tubeImageMathUSD2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_PadUsingMirroring, None, tubeImageMathUSD2)
tubeImageMathUSD2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_NormalizeMeanStdDev, None, tubeImageMathUSD2)
tubeImageMathUSD2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_NormalizeFWHM, None, tubeImageMathUSD2)
tubeImageMathUSD2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_NormalizeMeanShift, None, tubeImageMathUSD2)
tubeImageMathUSD2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_FuseUsingMax, None, tubeImageMathUSD2)
tubeImageMathUSD2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_MedianFilter, None, tubeImageMathUSD2)
tubeImageMathUSD2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Threshold, None, tubeImageMathUSD2)
tubeImageMathUSD2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_MeanWithinMaskRange, None, tubeImageMathUSD2)
tubeImageMathUSD2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_StdDevWithinMaskRange, None, tubeImageMathUSD2)
tubeImageMathUSD2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_AbsoluteValue, None, tubeImageMathUSD2)
tubeImageMathUSD2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSD2)
tubeImageMathUSD2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Erode, None, tubeImageMathUSD2)
tubeImageMathUSD2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Dilate, None, tubeImageMathUSD2)
tubeImageMathUSD2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_ReplaceValueWithinMaskRange, None, tubeImageMathUSD2)
tubeImageMathUSD2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Blur, None, tubeImageMathUSD2)
tubeImageMathUSD2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_BlurOrder, None, tubeImageMathUSD2)
tubeImageMathUSD2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_HistogramBinMin, None, tubeImageMathUSD2)
tubeImageMathUSD2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_HistogramBinSize, None, tubeImageMathUSD2)
tubeImageMathUSD2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Histogram, None, tubeImageMathUSD2)
tubeImageMathUSD2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_IntensityCorrectionBySlice, None, tubeImageMathUSD2)
tubeImageMathUSD2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_IntensityCorrection, None, tubeImageMathUSD2)
tubeImageMathUSD2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_Resize, None, tubeImageMathUSD2)
tubeImageMathUSD2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_ExtractSlice, None, tubeImageMathUSD2)
tubeImageMathUSD2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_EnhanceVessels, None, tubeImageMathUSD2)
tubeImageMathUSD2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_ConnectedComponents, None, tubeImageMathUSD2)
tubeImageMathUSD2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_VoronoiTessellation, None, tubeImageMathUSD2)
tubeImageMathUSD2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSD2)
tubeImageMathUSD2_swigregister = _tubeImageMathPython.tubeImageMathUSD2_swigregister
tubeImageMathUSD2_swigregister(tubeImageMathUSD2)

def tubeImageMathUSD2___New_orig__() -> "tubeImageMathUSD2_Pointer":
    """tubeImageMathUSD2___New_orig__() -> tubeImageMathUSD2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSD2___New_orig__()

def tubeImageMathUSD2_cast(obj: 'itkLightObject') -> "tubeImageMathUSD2 *":
    """tubeImageMathUSD2_cast(itkLightObject obj) -> tubeImageMathUSD2"""
    return _tubeImageMathPython.tubeImageMathUSD2_cast(obj)

class tubeImageMathUSD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSD3_Pointer":
        """__New_orig__() -> tubeImageMathUSD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSD3_Pointer":
        """Clone(tubeImageMathUSD3 self) -> tubeImageMathUSD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSD3_Clone(self)


    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(tubeImageMathUSD3 self, itkImageUS3 input)"""
        return _tubeImageMathPython.tubeImageMathUSD3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUSD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetInput(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeImageMathUSD3 self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUSD3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUSD3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUSD3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSD3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSD3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUSD3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSD3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSD3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSD3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSD3 self, itkImageUS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSD3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS3') -> "void":
        """MultiplyImages(tubeImageMathUSD3 self, itkImageUS3 input2)"""
        return _tubeImageMathPython.tubeImageMathUSD3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSD3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSD3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSD3 self)"""
        return _tubeImageMathPython.tubeImageMathUSD3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSD3 self)"""
        return _tubeImageMathPython.tubeImageMathUSD3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSD3 self)"""
        return _tubeImageMathPython.tubeImageMathUSD3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSD3 self, itkImageUS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSD3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSD3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSD3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSD3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSD3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSD3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSD3 self)"""
        return _tubeImageMathPython.tubeImageMathUSD3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSD3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSD3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSD3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSD3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSD3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSD3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSD3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSD3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSD3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSD3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSD3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSD3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSD3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSD3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSD3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSD3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS3') -> "void":
        """IntensityCorrection(tubeImageMathUSD3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSD3 self, double factor)
        Resize(tubeImageMathUSD3 self, itkImageUS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSD3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSD3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSD3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSD3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSD3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUSD3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUSD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSD3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSD3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSD3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSD3 *":
        """cast(itkLightObject obj) -> tubeImageMathUSD3"""
        return _tubeImageMathPython.tubeImageMathUSD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSD3

        Create a new object of the class tubeImageMathUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSD3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Clone, None, tubeImageMathUSD3)
tubeImageMathUSD3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_SetInput, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetInput, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetOutput, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetOutputFloat, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetOutputUChar, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetOutputShort, None, tubeImageMathUSD3)
tubeImageMathUSD3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_IntensityWindow, None, tubeImageMathUSD3)
tubeImageMathUSD3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSD3)
tubeImageMathUSD3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Resample, None, tubeImageMathUSD3)
tubeImageMathUSD3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_AddUniformNoise, None, tubeImageMathUSD3)
tubeImageMathUSD3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_AddGaussianNoise, None, tubeImageMathUSD3)
tubeImageMathUSD3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_AddImages, None, tubeImageMathUSD3)
tubeImageMathUSD3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_MultiplyImages, None, tubeImageMathUSD3)
tubeImageMathUSD3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_PadUsingMirroring, None, tubeImageMathUSD3)
tubeImageMathUSD3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_NormalizeMeanStdDev, None, tubeImageMathUSD3)
tubeImageMathUSD3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_NormalizeFWHM, None, tubeImageMathUSD3)
tubeImageMathUSD3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_NormalizeMeanShift, None, tubeImageMathUSD3)
tubeImageMathUSD3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_FuseUsingMax, None, tubeImageMathUSD3)
tubeImageMathUSD3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_MedianFilter, None, tubeImageMathUSD3)
tubeImageMathUSD3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Threshold, None, tubeImageMathUSD3)
tubeImageMathUSD3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_MeanWithinMaskRange, None, tubeImageMathUSD3)
tubeImageMathUSD3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_StdDevWithinMaskRange, None, tubeImageMathUSD3)
tubeImageMathUSD3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_AbsoluteValue, None, tubeImageMathUSD3)
tubeImageMathUSD3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSD3)
tubeImageMathUSD3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Erode, None, tubeImageMathUSD3)
tubeImageMathUSD3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Dilate, None, tubeImageMathUSD3)
tubeImageMathUSD3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_ReplaceValueWithinMaskRange, None, tubeImageMathUSD3)
tubeImageMathUSD3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Blur, None, tubeImageMathUSD3)
tubeImageMathUSD3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_BlurOrder, None, tubeImageMathUSD3)
tubeImageMathUSD3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_HistogramBinMin, None, tubeImageMathUSD3)
tubeImageMathUSD3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_HistogramBinSize, None, tubeImageMathUSD3)
tubeImageMathUSD3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Histogram, None, tubeImageMathUSD3)
tubeImageMathUSD3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_IntensityCorrectionBySlice, None, tubeImageMathUSD3)
tubeImageMathUSD3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_IntensityCorrection, None, tubeImageMathUSD3)
tubeImageMathUSD3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_Resize, None, tubeImageMathUSD3)
tubeImageMathUSD3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_ExtractSlice, None, tubeImageMathUSD3)
tubeImageMathUSD3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_EnhanceVessels, None, tubeImageMathUSD3)
tubeImageMathUSD3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_ConnectedComponents, None, tubeImageMathUSD3)
tubeImageMathUSD3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_VoronoiTessellation, None, tubeImageMathUSD3)
tubeImageMathUSD3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSD3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSD3)
tubeImageMathUSD3_swigregister = _tubeImageMathPython.tubeImageMathUSD3_swigregister
tubeImageMathUSD3_swigregister(tubeImageMathUSD3)

def tubeImageMathUSD3___New_orig__() -> "tubeImageMathUSD3_Pointer":
    """tubeImageMathUSD3___New_orig__() -> tubeImageMathUSD3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSD3___New_orig__()

def tubeImageMathUSD3_cast(obj: 'itkLightObject') -> "tubeImageMathUSD3 *":
    """tubeImageMathUSD3_cast(itkLightObject obj) -> tubeImageMathUSD3"""
    return _tubeImageMathPython.tubeImageMathUSD3_cast(obj)

class tubeImageMathUSF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSF2_Pointer":
        """__New_orig__() -> tubeImageMathUSF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSF2_Pointer":
        """Clone(tubeImageMathUSF2 self) -> tubeImageMathUSF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSF2_Clone(self)


    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(tubeImageMathUSF2 self, itkImageUS2 input)"""
        return _tubeImageMathPython.tubeImageMathUSF2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeImageMathUSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUSF2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUSF2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUSF2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSF2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSF2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUSF2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSF2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSF2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSF2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSF2 self, itkImageUS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSF2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS2') -> "void":
        """MultiplyImages(tubeImageMathUSF2 self, itkImageUS2 input2)"""
        return _tubeImageMathPython.tubeImageMathUSF2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSF2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSF2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSF2 self)"""
        return _tubeImageMathPython.tubeImageMathUSF2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSF2 self)"""
        return _tubeImageMathPython.tubeImageMathUSF2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSF2 self)"""
        return _tubeImageMathPython.tubeImageMathUSF2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSF2 self, itkImageUS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSF2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSF2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSF2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSF2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSF2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSF2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSF2 self)"""
        return _tubeImageMathPython.tubeImageMathUSF2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSF2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSF2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSF2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSF2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSF2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSF2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSF2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSF2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSF2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSF2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSF2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSF2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSF2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSF2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSF2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSF2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS2') -> "void":
        """IntensityCorrection(tubeImageMathUSF2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSF2 self, double factor)
        Resize(tubeImageMathUSF2 self, itkImageUS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSF2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSF2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSF2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSF2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSF2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUSF2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUSF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSF2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSF2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSF2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSF2 *":
        """cast(itkLightObject obj) -> tubeImageMathUSF2"""
        return _tubeImageMathPython.tubeImageMathUSF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSF2

        Create a new object of the class tubeImageMathUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSF2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Clone, None, tubeImageMathUSF2)
tubeImageMathUSF2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_SetInput, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetInput, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetOutput, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetOutputFloat, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetOutputUChar, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetOutputShort, None, tubeImageMathUSF2)
tubeImageMathUSF2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_IntensityWindow, None, tubeImageMathUSF2)
tubeImageMathUSF2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSF2)
tubeImageMathUSF2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Resample, None, tubeImageMathUSF2)
tubeImageMathUSF2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_AddUniformNoise, None, tubeImageMathUSF2)
tubeImageMathUSF2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_AddGaussianNoise, None, tubeImageMathUSF2)
tubeImageMathUSF2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_AddImages, None, tubeImageMathUSF2)
tubeImageMathUSF2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_MultiplyImages, None, tubeImageMathUSF2)
tubeImageMathUSF2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_PadUsingMirroring, None, tubeImageMathUSF2)
tubeImageMathUSF2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_NormalizeMeanStdDev, None, tubeImageMathUSF2)
tubeImageMathUSF2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_NormalizeFWHM, None, tubeImageMathUSF2)
tubeImageMathUSF2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_NormalizeMeanShift, None, tubeImageMathUSF2)
tubeImageMathUSF2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_FuseUsingMax, None, tubeImageMathUSF2)
tubeImageMathUSF2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_MedianFilter, None, tubeImageMathUSF2)
tubeImageMathUSF2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Threshold, None, tubeImageMathUSF2)
tubeImageMathUSF2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_MeanWithinMaskRange, None, tubeImageMathUSF2)
tubeImageMathUSF2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_StdDevWithinMaskRange, None, tubeImageMathUSF2)
tubeImageMathUSF2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_AbsoluteValue, None, tubeImageMathUSF2)
tubeImageMathUSF2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSF2)
tubeImageMathUSF2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Erode, None, tubeImageMathUSF2)
tubeImageMathUSF2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Dilate, None, tubeImageMathUSF2)
tubeImageMathUSF2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_ReplaceValueWithinMaskRange, None, tubeImageMathUSF2)
tubeImageMathUSF2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Blur, None, tubeImageMathUSF2)
tubeImageMathUSF2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_BlurOrder, None, tubeImageMathUSF2)
tubeImageMathUSF2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_HistogramBinMin, None, tubeImageMathUSF2)
tubeImageMathUSF2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_HistogramBinSize, None, tubeImageMathUSF2)
tubeImageMathUSF2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Histogram, None, tubeImageMathUSF2)
tubeImageMathUSF2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_IntensityCorrectionBySlice, None, tubeImageMathUSF2)
tubeImageMathUSF2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_IntensityCorrection, None, tubeImageMathUSF2)
tubeImageMathUSF2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_Resize, None, tubeImageMathUSF2)
tubeImageMathUSF2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_ExtractSlice, None, tubeImageMathUSF2)
tubeImageMathUSF2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_EnhanceVessels, None, tubeImageMathUSF2)
tubeImageMathUSF2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_ConnectedComponents, None, tubeImageMathUSF2)
tubeImageMathUSF2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_VoronoiTessellation, None, tubeImageMathUSF2)
tubeImageMathUSF2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSF2)
tubeImageMathUSF2_swigregister = _tubeImageMathPython.tubeImageMathUSF2_swigregister
tubeImageMathUSF2_swigregister(tubeImageMathUSF2)

def tubeImageMathUSF2___New_orig__() -> "tubeImageMathUSF2_Pointer":
    """tubeImageMathUSF2___New_orig__() -> tubeImageMathUSF2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSF2___New_orig__()

def tubeImageMathUSF2_cast(obj: 'itkLightObject') -> "tubeImageMathUSF2 *":
    """tubeImageMathUSF2_cast(itkLightObject obj) -> tubeImageMathUSF2"""
    return _tubeImageMathPython.tubeImageMathUSF2_cast(obj)

class tubeImageMathUSF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSF3_Pointer":
        """__New_orig__() -> tubeImageMathUSF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSF3_Pointer":
        """Clone(tubeImageMathUSF3 self) -> tubeImageMathUSF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSF3_Clone(self)


    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(tubeImageMathUSF3 self, itkImageUS3 input)"""
        return _tubeImageMathPython.tubeImageMathUSF3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeImageMathUSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUSF3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUSF3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUSF3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSF3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSF3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUSF3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSF3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSF3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSF3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSF3 self, itkImageUS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSF3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS3') -> "void":
        """MultiplyImages(tubeImageMathUSF3 self, itkImageUS3 input2)"""
        return _tubeImageMathPython.tubeImageMathUSF3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSF3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSF3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSF3 self)"""
        return _tubeImageMathPython.tubeImageMathUSF3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSF3 self)"""
        return _tubeImageMathPython.tubeImageMathUSF3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSF3 self)"""
        return _tubeImageMathPython.tubeImageMathUSF3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSF3 self, itkImageUS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSF3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSF3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSF3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSF3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSF3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSF3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSF3 self)"""
        return _tubeImageMathPython.tubeImageMathUSF3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSF3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSF3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSF3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSF3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSF3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSF3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSF3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSF3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSF3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSF3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSF3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSF3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSF3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSF3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSF3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSF3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS3') -> "void":
        """IntensityCorrection(tubeImageMathUSF3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSF3 self, double factor)
        Resize(tubeImageMathUSF3 self, itkImageUS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSF3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSF3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSF3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSF3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSF3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUSF3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUSF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSF3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSF3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSF3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSF3 *":
        """cast(itkLightObject obj) -> tubeImageMathUSF3"""
        return _tubeImageMathPython.tubeImageMathUSF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSF3

        Create a new object of the class tubeImageMathUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSF3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Clone, None, tubeImageMathUSF3)
tubeImageMathUSF3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_SetInput, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetInput, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetOutput, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetOutputFloat, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetOutputUChar, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetOutputShort, None, tubeImageMathUSF3)
tubeImageMathUSF3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_IntensityWindow, None, tubeImageMathUSF3)
tubeImageMathUSF3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSF3)
tubeImageMathUSF3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Resample, None, tubeImageMathUSF3)
tubeImageMathUSF3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_AddUniformNoise, None, tubeImageMathUSF3)
tubeImageMathUSF3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_AddGaussianNoise, None, tubeImageMathUSF3)
tubeImageMathUSF3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_AddImages, None, tubeImageMathUSF3)
tubeImageMathUSF3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_MultiplyImages, None, tubeImageMathUSF3)
tubeImageMathUSF3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_PadUsingMirroring, None, tubeImageMathUSF3)
tubeImageMathUSF3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_NormalizeMeanStdDev, None, tubeImageMathUSF3)
tubeImageMathUSF3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_NormalizeFWHM, None, tubeImageMathUSF3)
tubeImageMathUSF3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_NormalizeMeanShift, None, tubeImageMathUSF3)
tubeImageMathUSF3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_FuseUsingMax, None, tubeImageMathUSF3)
tubeImageMathUSF3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_MedianFilter, None, tubeImageMathUSF3)
tubeImageMathUSF3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Threshold, None, tubeImageMathUSF3)
tubeImageMathUSF3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_MeanWithinMaskRange, None, tubeImageMathUSF3)
tubeImageMathUSF3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_StdDevWithinMaskRange, None, tubeImageMathUSF3)
tubeImageMathUSF3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_AbsoluteValue, None, tubeImageMathUSF3)
tubeImageMathUSF3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSF3)
tubeImageMathUSF3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Erode, None, tubeImageMathUSF3)
tubeImageMathUSF3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Dilate, None, tubeImageMathUSF3)
tubeImageMathUSF3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_ReplaceValueWithinMaskRange, None, tubeImageMathUSF3)
tubeImageMathUSF3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Blur, None, tubeImageMathUSF3)
tubeImageMathUSF3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_BlurOrder, None, tubeImageMathUSF3)
tubeImageMathUSF3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_HistogramBinMin, None, tubeImageMathUSF3)
tubeImageMathUSF3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_HistogramBinSize, None, tubeImageMathUSF3)
tubeImageMathUSF3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Histogram, None, tubeImageMathUSF3)
tubeImageMathUSF3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_IntensityCorrectionBySlice, None, tubeImageMathUSF3)
tubeImageMathUSF3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_IntensityCorrection, None, tubeImageMathUSF3)
tubeImageMathUSF3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_Resize, None, tubeImageMathUSF3)
tubeImageMathUSF3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_ExtractSlice, None, tubeImageMathUSF3)
tubeImageMathUSF3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_EnhanceVessels, None, tubeImageMathUSF3)
tubeImageMathUSF3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_ConnectedComponents, None, tubeImageMathUSF3)
tubeImageMathUSF3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_VoronoiTessellation, None, tubeImageMathUSF3)
tubeImageMathUSF3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSF3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSF3)
tubeImageMathUSF3_swigregister = _tubeImageMathPython.tubeImageMathUSF3_swigregister
tubeImageMathUSF3_swigregister(tubeImageMathUSF3)

def tubeImageMathUSF3___New_orig__() -> "tubeImageMathUSF3_Pointer":
    """tubeImageMathUSF3___New_orig__() -> tubeImageMathUSF3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSF3___New_orig__()

def tubeImageMathUSF3_cast(obj: 'itkLightObject') -> "tubeImageMathUSF3 *":
    """tubeImageMathUSF3_cast(itkLightObject obj) -> tubeImageMathUSF3"""
    return _tubeImageMathPython.tubeImageMathUSF3_cast(obj)

class tubeImageMathUSSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSSS2_Pointer":
        """__New_orig__() -> tubeImageMathUSSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSSS2_Pointer":
        """Clone(tubeImageMathUSSS2 self) -> tubeImageMathUSSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Clone(self)


    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(tubeImageMathUSSS2 self, itkImageUS2 input)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUSSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeImageMathUSSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUSSS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUSSS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUSSS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSSS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSSS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUSSS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSSS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSSS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSSS2 self, itkImageUS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS2') -> "void":
        """MultiplyImages(tubeImageMathUSSS2 self, itkImageUS2 input2)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSSS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSSS2 self, itkImageUS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSSS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSSS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSSS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSSS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSSS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSSS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSSS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSSS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSSS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSSS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSSS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSSS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSSS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSSS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSSS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSSS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSSS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS2') -> "void":
        """IntensityCorrection(tubeImageMathUSSS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSSS2 self, double factor)
        Resize(tubeImageMathUSSS2 self, itkImageUS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSSS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSSS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSSS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSSS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUSSS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUSSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSSS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSSS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSSS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSSS2 *":
        """cast(itkLightObject obj) -> tubeImageMathUSSS2"""
        return _tubeImageMathPython.tubeImageMathUSSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSSS2

        Create a new object of the class tubeImageMathUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSSS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Clone, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_SetInput, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetInput, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetOutput, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetOutputFloat, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetOutputUChar, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetOutputShort, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_IntensityWindow, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Resample, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_AddUniformNoise, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_AddGaussianNoise, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_AddImages, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_MultiplyImages, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_PadUsingMirroring, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_NormalizeMeanStdDev, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_NormalizeFWHM, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_NormalizeMeanShift, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_FuseUsingMax, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_MedianFilter, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Threshold, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_MeanWithinMaskRange, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_StdDevWithinMaskRange, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_AbsoluteValue, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Erode, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Dilate, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_ReplaceValueWithinMaskRange, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Blur, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_BlurOrder, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_HistogramBinMin, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_HistogramBinSize, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Histogram, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_IntensityCorrectionBySlice, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_IntensityCorrection, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_Resize, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_ExtractSlice, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_EnhanceVessels, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_ConnectedComponents, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_VoronoiTessellation, None, tubeImageMathUSSS2)
tubeImageMathUSSS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSSS2)
tubeImageMathUSSS2_swigregister = _tubeImageMathPython.tubeImageMathUSSS2_swigregister
tubeImageMathUSSS2_swigregister(tubeImageMathUSSS2)

def tubeImageMathUSSS2___New_orig__() -> "tubeImageMathUSSS2_Pointer":
    """tubeImageMathUSSS2___New_orig__() -> tubeImageMathUSSS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSSS2___New_orig__()

def tubeImageMathUSSS2_cast(obj: 'itkLightObject') -> "tubeImageMathUSSS2 *":
    """tubeImageMathUSSS2_cast(itkLightObject obj) -> tubeImageMathUSSS2"""
    return _tubeImageMathPython.tubeImageMathUSSS2_cast(obj)

class tubeImageMathUSSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSSS3_Pointer":
        """__New_orig__() -> tubeImageMathUSSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSSS3_Pointer":
        """Clone(tubeImageMathUSSS3 self) -> tubeImageMathUSSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Clone(self)


    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(tubeImageMathUSSS3 self, itkImageUS3 input)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUSSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetInput(self)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeImageMathUSSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUSSS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUSSS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUSSS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSSS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSSS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUSSS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSSS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSSS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSSS3 self, itkImageUS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS3') -> "void":
        """MultiplyImages(tubeImageMathUSSS3 self, itkImageUS3 input2)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSSS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSSS3 self, itkImageUS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSSS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSSS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSSS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSSS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSSS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSSS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSSS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSSS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSSS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSSS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSSS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSSS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSSS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSSS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSSS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSSS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSSS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS3') -> "void":
        """IntensityCorrection(tubeImageMathUSSS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSSS3 self, double factor)
        Resize(tubeImageMathUSSS3 self, itkImageUS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSSS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSSS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSSS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSSS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUSSS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUSSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSSS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSSS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSSS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSSS3 *":
        """cast(itkLightObject obj) -> tubeImageMathUSSS3"""
        return _tubeImageMathPython.tubeImageMathUSSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSSS3

        Create a new object of the class tubeImageMathUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSSS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Clone, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_SetInput, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetInput, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetOutput, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetOutputFloat, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetOutputUChar, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetOutputShort, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_IntensityWindow, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Resample, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_AddUniformNoise, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_AddGaussianNoise, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_AddImages, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_MultiplyImages, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_PadUsingMirroring, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_NormalizeMeanStdDev, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_NormalizeFWHM, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_NormalizeMeanShift, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_FuseUsingMax, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_MedianFilter, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Threshold, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_MeanWithinMaskRange, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_StdDevWithinMaskRange, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_AbsoluteValue, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Erode, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Dilate, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_ReplaceValueWithinMaskRange, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Blur, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_BlurOrder, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_HistogramBinMin, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_HistogramBinSize, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Histogram, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_IntensityCorrectionBySlice, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_IntensityCorrection, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_Resize, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_ExtractSlice, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_EnhanceVessels, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_ConnectedComponents, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_VoronoiTessellation, None, tubeImageMathUSSS3)
tubeImageMathUSSS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSSS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSSS3)
tubeImageMathUSSS3_swigregister = _tubeImageMathPython.tubeImageMathUSSS3_swigregister
tubeImageMathUSSS3_swigregister(tubeImageMathUSSS3)

def tubeImageMathUSSS3___New_orig__() -> "tubeImageMathUSSS3_Pointer":
    """tubeImageMathUSSS3___New_orig__() -> tubeImageMathUSSS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSSS3___New_orig__()

def tubeImageMathUSSS3_cast(obj: 'itkLightObject') -> "tubeImageMathUSSS3 *":
    """tubeImageMathUSSS3_cast(itkLightObject obj) -> tubeImageMathUSSS3"""
    return _tubeImageMathPython.tubeImageMathUSSS3_cast(obj)

class tubeImageMathUSUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSUC2_Pointer":
        """__New_orig__() -> tubeImageMathUSUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSUC2_Pointer":
        """Clone(tubeImageMathUSUC2 self) -> tubeImageMathUSUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Clone(self)


    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(tubeImageMathUSUC2 self, itkImageUS2 input)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUSUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeImageMathUSUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUSUC2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUSUC2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUSUC2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSUC2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSUC2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUSUC2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSUC2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSUC2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSUC2 self, itkImageUS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS2') -> "void":
        """MultiplyImages(tubeImageMathUSUC2 self, itkImageUS2 input2)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSUC2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSUC2 self, itkImageUS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSUC2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSUC2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSUC2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSUC2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSUC2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSUC2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSUC2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSUC2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSUC2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSUC2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUC2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSUC2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUC2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSUC2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSUC2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSUC2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSUC2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS2') -> "void":
        """IntensityCorrection(tubeImageMathUSUC2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSUC2 self, double factor)
        Resize(tubeImageMathUSUC2 self, itkImageUS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSUC2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSUC2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSUC2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSUC2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUSUC2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUSUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSUC2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSUC2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSUC2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSUC2 *":
        """cast(itkLightObject obj) -> tubeImageMathUSUC2"""
        return _tubeImageMathPython.tubeImageMathUSUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSUC2

        Create a new object of the class tubeImageMathUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSUC2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Clone, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_SetInput, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetInput, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetOutput, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetOutputFloat, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetOutputUChar, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetOutputShort, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_IntensityWindow, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Resample, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_AddUniformNoise, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_AddGaussianNoise, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_AddImages, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_MultiplyImages, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_PadUsingMirroring, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_NormalizeMeanStdDev, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_NormalizeFWHM, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_NormalizeMeanShift, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_FuseUsingMax, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_MedianFilter, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Threshold, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_MeanWithinMaskRange, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_StdDevWithinMaskRange, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_AbsoluteValue, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Erode, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Dilate, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_ReplaceValueWithinMaskRange, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Blur, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_BlurOrder, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_HistogramBinMin, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_HistogramBinSize, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Histogram, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_IntensityCorrectionBySlice, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_IntensityCorrection, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_Resize, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_ExtractSlice, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_EnhanceVessels, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_ConnectedComponents, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_VoronoiTessellation, None, tubeImageMathUSUC2)
tubeImageMathUSUC2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSUC2)
tubeImageMathUSUC2_swigregister = _tubeImageMathPython.tubeImageMathUSUC2_swigregister
tubeImageMathUSUC2_swigregister(tubeImageMathUSUC2)

def tubeImageMathUSUC2___New_orig__() -> "tubeImageMathUSUC2_Pointer":
    """tubeImageMathUSUC2___New_orig__() -> tubeImageMathUSUC2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSUC2___New_orig__()

def tubeImageMathUSUC2_cast(obj: 'itkLightObject') -> "tubeImageMathUSUC2 *":
    """tubeImageMathUSUC2_cast(itkLightObject obj) -> tubeImageMathUSUC2"""
    return _tubeImageMathPython.tubeImageMathUSUC2_cast(obj)

class tubeImageMathUSUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSUC3_Pointer":
        """__New_orig__() -> tubeImageMathUSUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSUC3_Pointer":
        """Clone(tubeImageMathUSUC3 self) -> tubeImageMathUSUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Clone(self)


    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(tubeImageMathUSUC3 self, itkImageUS3 input)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUSUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetInput(self)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeImageMathUSUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUSUC3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUSUC3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUSUC3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSUC3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSUC3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUSUC3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSUC3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSUC3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSUC3 self, itkImageUS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS3') -> "void":
        """MultiplyImages(tubeImageMathUSUC3 self, itkImageUS3 input2)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSUC3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSUC3 self, itkImageUS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSUC3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSUC3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSUC3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSUC3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSUC3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSUC3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSUC3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSUC3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSUC3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSUC3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUC3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSUC3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUC3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSUC3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSUC3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSUC3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSUC3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS3') -> "void":
        """IntensityCorrection(tubeImageMathUSUC3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSUC3 self, double factor)
        Resize(tubeImageMathUSUC3 self, itkImageUS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSUC3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSUC3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSUC3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSUC3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUSUC3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUSUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSUC3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSUC3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSUC3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSUC3 *":
        """cast(itkLightObject obj) -> tubeImageMathUSUC3"""
        return _tubeImageMathPython.tubeImageMathUSUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSUC3

        Create a new object of the class tubeImageMathUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSUC3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Clone, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_SetInput, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetInput, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetOutput, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetOutputFloat, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetOutputUChar, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetOutputShort, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_IntensityWindow, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Resample, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_AddUniformNoise, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_AddGaussianNoise, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_AddImages, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_MultiplyImages, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_PadUsingMirroring, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_NormalizeMeanStdDev, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_NormalizeFWHM, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_NormalizeMeanShift, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_FuseUsingMax, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_MedianFilter, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Threshold, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_MeanWithinMaskRange, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_StdDevWithinMaskRange, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_AbsoluteValue, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Erode, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Dilate, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_ReplaceValueWithinMaskRange, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Blur, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_BlurOrder, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_HistogramBinMin, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_HistogramBinSize, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Histogram, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_IntensityCorrectionBySlice, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_IntensityCorrection, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_Resize, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_ExtractSlice, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_EnhanceVessels, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_ConnectedComponents, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_VoronoiTessellation, None, tubeImageMathUSUC3)
tubeImageMathUSUC3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUC3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSUC3)
tubeImageMathUSUC3_swigregister = _tubeImageMathPython.tubeImageMathUSUC3_swigregister
tubeImageMathUSUC3_swigregister(tubeImageMathUSUC3)

def tubeImageMathUSUC3___New_orig__() -> "tubeImageMathUSUC3_Pointer":
    """tubeImageMathUSUC3___New_orig__() -> tubeImageMathUSUC3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSUC3___New_orig__()

def tubeImageMathUSUC3_cast(obj: 'itkLightObject') -> "tubeImageMathUSUC3 *":
    """tubeImageMathUSUC3_cast(itkLightObject obj) -> tubeImageMathUSUC3"""
    return _tubeImageMathPython.tubeImageMathUSUC3_cast(obj)

class tubeImageMathUSUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSUS2_Pointer":
        """__New_orig__() -> tubeImageMathUSUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSUS2_Pointer":
        """Clone(tubeImageMathUSUS2 self) -> tubeImageMathUSUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Clone(self)


    def SetInput(self, input: 'itkImageUS2') -> "void":
        """SetInput(tubeImageMathUSUS2 self, itkImageUS2 input)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_SetInput(self, input)


    def GetInput(self) -> "itkImageF2 *":
        """GetInput(tubeImageMathUSUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeImageMathUSUS2 self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF2 *":
        """GetOutputFloat(tubeImageMathUSUS2 self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC2 *":
        """GetOutputUChar(tubeImageMathUSUS2 self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS2 *":
        """GetOutputShort(tubeImageMathUSUS2 self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSUS2 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF2') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSUS2 self, itkImageF2 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF2') -> "void":
        """Resample(tubeImageMathUSUS2 self, itkImageF2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSUS2 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSUS2 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS2', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSUS2 self, itkImageUS2 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS2') -> "void":
        """MultiplyImages(tubeImageMathUSUS2 self, itkImageUS2 input2)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSUS2 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS2', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSUS2 self, itkImageUS2 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSUS2 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSUS2 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSUS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSUS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSUS2 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSUS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSUS2 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS2', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSUS2 self, itkImageUS2 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSUS2 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSUS2 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUS2_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSUS2 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUS2_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSUS2 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSUS2 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSUS2_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSUS2 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS2') -> "void":
        """IntensityCorrection(tubeImageMathUSUS2 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS2 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSUS2 self, double factor)
        Resize(tubeImageMathUSUS2 self, itkImageUS2 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSUS2_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSUS2 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSUS2 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSUS2 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >":
        """VoronoiTessellation(tubeImageMathUSUS2 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >"""
        return _tubeImageMathPython.tubeImageMathUSUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSUS2 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSUS2_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSUS2

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSUS2 *":
        """cast(itkLightObject obj) -> tubeImageMathUSUS2"""
        return _tubeImageMathPython.tubeImageMathUSUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSUS2

        Create a new object of the class tubeImageMathUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSUS2.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Clone, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_SetInput, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetInput, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetOutput, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetOutputFloat, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetOutputUChar, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetOutputShort, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_IntensityWindow, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Resample, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_AddUniformNoise, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_AddGaussianNoise, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_AddImages, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_MultiplyImages, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_PadUsingMirroring, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_NormalizeMeanStdDev, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_NormalizeFWHM, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_NormalizeMeanShift, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_FuseUsingMax, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_MedianFilter, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Threshold, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_MeanWithinMaskRange, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_StdDevWithinMaskRange, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_AbsoluteValue, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Erode, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Dilate, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_ReplaceValueWithinMaskRange, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Blur, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_BlurOrder, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_HistogramBinMin, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_HistogramBinSize, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Histogram, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_IntensityCorrectionBySlice, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_IntensityCorrection, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_Resize, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_ExtractSlice, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_EnhanceVessels, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_ConnectedComponents, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_VoronoiTessellation, None, tubeImageMathUSUS2)
tubeImageMathUSUS2.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS2_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSUS2)
tubeImageMathUSUS2_swigregister = _tubeImageMathPython.tubeImageMathUSUS2_swigregister
tubeImageMathUSUS2_swigregister(tubeImageMathUSUS2)

def tubeImageMathUSUS2___New_orig__() -> "tubeImageMathUSUS2_Pointer":
    """tubeImageMathUSUS2___New_orig__() -> tubeImageMathUSUS2_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSUS2___New_orig__()

def tubeImageMathUSUS2_cast(obj: 'itkLightObject') -> "tubeImageMathUSUS2 *":
    """tubeImageMathUSUS2_cast(itkLightObject obj) -> tubeImageMathUSUS2"""
    return _tubeImageMathPython.tubeImageMathUSUS2_cast(obj)

class tubeImageMathUSUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeImageMathUSUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeImageMathUSUS3_Pointer":
        """__New_orig__() -> tubeImageMathUSUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeImageMathUSUS3_Pointer":
        """Clone(tubeImageMathUSUS3 self) -> tubeImageMathUSUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Clone(self)


    def SetInput(self, input: 'itkImageUS3') -> "void":
        """SetInput(tubeImageMathUSUS3 self, itkImageUS3 input)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_SetInput(self, input)


    def GetInput(self) -> "itkImageF3 *":
        """GetInput(tubeImageMathUSUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetInput(self)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeImageMathUSUS3 self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetOutput(self)


    def GetOutputFloat(self) -> "itkImageF3 *":
        """GetOutputFloat(tubeImageMathUSUS3 self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetOutputFloat(self)


    def GetOutputUChar(self) -> "itkImageUC3 *":
        """GetOutputUChar(tubeImageMathUSUS3 self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetOutputUChar(self)


    def GetOutputShort(self) -> "itkImageSS3 *":
        """GetOutputShort(tubeImageMathUSUS3 self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetOutputShort(self)


    def IntensityWindow(self, inValMin: 'float', inValMax: 'float', outMin: 'float', outMax: 'float') -> "void":
        """IntensityWindow(tubeImageMathUSUS3 self, float inValMin, float inValMax, float outMin, float outMax)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)


    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage: 'itkImageF3') -> "void":
        """IntensityMultiplicativeBiasCorrection(tubeImageMathUSUS3 self, itkImageF3 inMeanFieldImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)


    def Resample(self, referenceImage: 'itkImageF3') -> "void":
        """Resample(tubeImageMathUSUS3 self, itkImageF3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Resample(self, referenceImage)


    def AddUniformNoise(self, valMin: 'float', valMax: 'float', noiseMin: 'float', noiseMax: 'float', seed: 'int') -> "void":
        """AddUniformNoise(tubeImageMathUSUS3 self, float valMin, float valMax, float noiseMin, float noiseMax, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)


    def AddGaussianNoise(self, valMin: 'float', valMax: 'float', noiseMean: 'float', noiseRange: 'float', seed: 'int') -> "void":
        """AddGaussianNoise(tubeImageMathUSUS3 self, float valMin, float valMax, float noiseMean, float noiseRange, int seed)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)


    def AddImages(self, input2: 'itkImageUS3', weight1: 'float', weight2: 'float') -> "void":
        """AddImages(tubeImageMathUSUS3 self, itkImageUS3 input2, float weight1, float weight2)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_AddImages(self, input2, weight1, weight2)


    def MultiplyImages(self, input2: 'itkImageUS3') -> "void":
        """MultiplyImages(tubeImageMathUSUS3 self, itkImageUS3 input2)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_MultiplyImages(self, input2)


    def PadUsingMirroring(self, numPadVoxels: 'int') -> "void":
        """PadUsingMirroring(tubeImageMathUSUS3 self, int numPadVoxels)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_PadUsingMirroring(self, numPadVoxels)


    def NormalizeMeanStdDev(self) -> "void":
        """NormalizeMeanStdDev(tubeImageMathUSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_NormalizeMeanStdDev(self)


    def NormalizeFWHM(self) -> "void":
        """NormalizeFWHM(tubeImageMathUSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_NormalizeFWHM(self)


    def NormalizeMeanShift(self) -> "void":
        """NormalizeMeanShift(tubeImageMathUSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_NormalizeMeanShift(self)


    def FuseUsingMax(self, input2: 'itkImageUS3', offset2: 'float') -> "void":
        """FuseUsingMax(tubeImageMathUSUS3 self, itkImageUS3 input2, float offset2)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_FuseUsingMax(self, input2, offset2)


    def MedianFilter(self, size: 'int') -> "void":
        """MedianFilter(tubeImageMathUSUS3 self, int size)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_MedianFilter(self, size)


    def Threshold(self, threshLow: 'float', threshHigh: 'float', valTrue: 'float', valFalse: 'float') -> "void":
        """Threshold(tubeImageMathUSUS3 self, float threshLow, float threshHigh, float valTrue, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)


    def MeanWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """MeanWithinMaskRange(tubeImageMathUSUS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def StdDevWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float') -> "double":
        """StdDevWithinMaskRange(tubeImageMathUSUS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh) -> double"""
        return _tubeImageMathPython.tubeImageMathUSUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)


    def AbsoluteValue(self) -> "void":
        """AbsoluteValue(tubeImageMathUSUS3 self)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_AbsoluteValue(self)


    def ReplaceValuesOutsideMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', valFalse: 'float') -> "void":
        """ReplaceValuesOutsideMaskRange(tubeImageMathUSUS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float valFalse)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)


    def Erode(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Erode(tubeImageMathUSUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Erode(self, radius, fgVal, bkgVal)


    def Dilate(self, radius: 'int', fgVal: 'float', bkgVal: 'float') -> "void":
        """Dilate(tubeImageMathUSUS3 self, int radius, float fgVal, float bkgVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Dilate(self, radius, fgVal, bkgVal)


    def ReplaceValueWithinMaskRange(self, mask: 'itkImageUS3', maskThreshLow: 'float', maskThreshHigh: 'float', imageVal: 'float', newImageVal: 'float') -> "void":
        """ReplaceValueWithinMaskRange(tubeImageMathUSUS3 self, itkImageUS3 mask, float maskThreshLow, float maskThreshHigh, float imageVal, float newImageVal)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)


    def Blur(self, sigma: 'float') -> "void":
        """Blur(tubeImageMathUSUS3 self, float sigma)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_Blur(self, sigma)


    def BlurOrder(self, sigma: 'float', order: 'int', direction: 'int') -> "void":
        """BlurOrder(tubeImageMathUSUS3 self, float sigma, int order, int direction)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_BlurOrder(self, sigma, order, direction)


    def HistogramBinMin(self) -> "float":
        """HistogramBinMin(tubeImageMathUSUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUS3_HistogramBinMin(self)


    def HistogramBinSize(self) -> "float":
        """HistogramBinSize(tubeImageMathUSUS3 self) -> float"""
        return _tubeImageMathPython.tubeImageMathUSUS3_HistogramBinSize(self)


    def Histogram(self, *args) -> "std::vector< double,std::allocator< double > >":
        """
        Histogram(tubeImageMathUSUS3 self, unsigned int nBins) -> vectorD
        Histogram(tubeImageMathUSUS3 self, unsigned int nBins, float binMin, float binSize) -> vectorD
        """
        return _tubeImageMathPython.tubeImageMathUSUS3_Histogram(self, *args)


    def IntensityCorrectionBySlice(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int') -> "void":
        """IntensityCorrectionBySlice(tubeImageMathUSUS3 self, unsigned int nBins, unsigned int nMatchPoints)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)


    def IntensityCorrection(self, nBins: 'unsigned int', nMatchPoints: 'unsigned int', referenceImage: 'itkImageUS3') -> "void":
        """IntensityCorrection(tubeImageMathUSUS3 self, unsigned int nBins, unsigned int nMatchPoints, itkImageUS3 referenceImage)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)


    def Resize(self, *args) -> "void":
        """
        Resize(tubeImageMathUSUS3 self, double factor)
        Resize(tubeImageMathUSUS3 self, itkImageUS3 referenceImage)
        """
        return _tubeImageMathPython.tubeImageMathUSUS3_Resize(self, *args)


    def ExtractSlice(self, dimension: 'unsigned int', slice: 'unsigned int') -> "void":
        """ExtractSlice(tubeImageMathUSUS3 self, unsigned int dimension, unsigned int slice)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_ExtractSlice(self, dimension, slice)


    def EnhanceVessels(self, scaleMin: 'double', scaleMax: 'double', numScales: 'int') -> "void":
        """EnhanceVessels(tubeImageMathUSUS3 self, double scaleMin, double scaleMax, int numScales)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)


    def ConnectedComponents(self, threshLow: 'float', threshHigh: 'float', labelVal: 'float', x: 'float', y: 'float', z: 'float') -> "void":
        """ConnectedComponents(tubeImageMathUSUS3 self, float threshLow, float threshHigh, float labelVal, float x, float y, float z)"""
        return _tubeImageMathPython.tubeImageMathUSUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)


    def VoronoiTessellation(self, nCentroids: 'unsigned int', nIters: 'unsigned int', nSamples: 'unsigned int') -> "std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >":
        """VoronoiTessellation(tubeImageMathUSUS3 self, unsigned int nCentroids, unsigned int nIters, unsigned int nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >"""
        return _tubeImageMathPython.tubeImageMathUSUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)


    def GetVoronoiTessellationAdjacencyMatrix(self) -> "itkVariableSizeMatrixD":
        """GetVoronoiTessellationAdjacencyMatrix(tubeImageMathUSUS3 self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUSUS3_GetVoronoiTessellationAdjacencyMatrix(self)

    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUSUS3

    def cast(obj: 'itkLightObject') -> "tubeImageMathUSUS3 *":
        """cast(itkLightObject obj) -> tubeImageMathUSUS3"""
        return _tubeImageMathPython.tubeImageMathUSUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeImageMathUSUS3

        Create a new object of the class tubeImageMathUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUSUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeImageMathUSUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeImageMathUSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeImageMathUSUS3.Clone = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Clone, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.SetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_SetInput, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetInput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetInput, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetOutput = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetOutput, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetOutputFloat = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetOutputFloat, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetOutputUChar = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetOutputUChar, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetOutputShort = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetOutputShort, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.IntensityWindow = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_IntensityWindow, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.IntensityMultiplicativeBiasCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_IntensityMultiplicativeBiasCorrection, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Resample = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Resample, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.AddUniformNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_AddUniformNoise, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.AddGaussianNoise = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_AddGaussianNoise, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.AddImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_AddImages, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.MultiplyImages = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_MultiplyImages, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.PadUsingMirroring = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_PadUsingMirroring, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.NormalizeMeanStdDev = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_NormalizeMeanStdDev, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.NormalizeFWHM = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_NormalizeFWHM, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.NormalizeMeanShift = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_NormalizeMeanShift, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.FuseUsingMax = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_FuseUsingMax, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.MedianFilter = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_MedianFilter, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Threshold = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Threshold, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.MeanWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_MeanWithinMaskRange, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.StdDevWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_StdDevWithinMaskRange, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.AbsoluteValue = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_AbsoluteValue, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.ReplaceValuesOutsideMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_ReplaceValuesOutsideMaskRange, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Erode = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Erode, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Dilate = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Dilate, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.ReplaceValueWithinMaskRange = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_ReplaceValueWithinMaskRange, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Blur = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Blur, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.BlurOrder = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_BlurOrder, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.HistogramBinMin = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_HistogramBinMin, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.HistogramBinSize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_HistogramBinSize, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Histogram = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Histogram, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.IntensityCorrectionBySlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_IntensityCorrectionBySlice, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.IntensityCorrection = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_IntensityCorrection, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.Resize = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_Resize, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.ExtractSlice = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_ExtractSlice, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.EnhanceVessels = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_EnhanceVessels, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.ConnectedComponents = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_ConnectedComponents, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.VoronoiTessellation = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_VoronoiTessellation, None, tubeImageMathUSUS3)
tubeImageMathUSUS3.GetVoronoiTessellationAdjacencyMatrix = new_instancemethod(_tubeImageMathPython.tubeImageMathUSUS3_GetVoronoiTessellationAdjacencyMatrix, None, tubeImageMathUSUS3)
tubeImageMathUSUS3_swigregister = _tubeImageMathPython.tubeImageMathUSUS3_swigregister
tubeImageMathUSUS3_swigregister(tubeImageMathUSUS3)

def tubeImageMathUSUS3___New_orig__() -> "tubeImageMathUSUS3_Pointer":
    """tubeImageMathUSUS3___New_orig__() -> tubeImageMathUSUS3_Pointer"""
    return _tubeImageMathPython.tubeImageMathUSUS3___New_orig__()

def tubeImageMathUSUS3_cast(obj: 'itkLightObject') -> "tubeImageMathUSUS3 *":
    """tubeImageMathUSUS3_cast(itkLightObject obj) -> tubeImageMathUSUS3"""
    return _tubeImageMathPython.tubeImageMathUSUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_math(*args, **kwargs):
    """Procedural interface for ImageMath"""
    import itk
    instance = itk.ImageMath.New(*args, **kwargs)
    return instance.__internal_call__()

def image_math_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageMath, itkTemplate.itkTemplate):
        filter_object = itk.ImageMath.values()[0]
    else:
        filter_object = itk.ImageMath

    image_math.__doc__ = filter_object.__doc__
    image_math.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_math.__doc__ += "Available Keyword Arguments:\n"
    image_math.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



