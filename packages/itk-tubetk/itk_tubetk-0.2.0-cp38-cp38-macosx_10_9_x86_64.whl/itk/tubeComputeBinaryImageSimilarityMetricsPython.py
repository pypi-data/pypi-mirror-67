# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeComputeBinaryImageSimilarityMetricsPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeComputeBinaryImageSimilarityMetricsPython', [dirname(__file__)])
        except ImportError:
            import _tubeComputeBinaryImageSimilarityMetricsPython
            return _tubeComputeBinaryImageSimilarityMetricsPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeComputeBinaryImageSimilarityMetricsPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeComputeBinaryImageSimilarityMetricsPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeComputeBinaryImageSimilarityMetricsPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython

def tubeComputeBinaryImageSimilarityMetricsIUS3_New():
  return tubeComputeBinaryImageSimilarityMetricsIUS3.New()


def tubeComputeBinaryImageSimilarityMetricsIUC3_New():
  return tubeComputeBinaryImageSimilarityMetricsIUC3.New()


def tubeComputeBinaryImageSimilarityMetricsISS3_New():
  return tubeComputeBinaryImageSimilarityMetricsISS3.New()


def tubeComputeBinaryImageSimilarityMetricsIUS2_New():
  return tubeComputeBinaryImageSimilarityMetricsIUS2.New()


def tubeComputeBinaryImageSimilarityMetricsIUC2_New():
  return tubeComputeBinaryImageSimilarityMetricsIUC2.New()


def tubeComputeBinaryImageSimilarityMetricsISS2_New():
  return tubeComputeBinaryImageSimilarityMetricsISS2.New()

class tubeComputeBinaryImageSimilarityMetricsISS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsISS2_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsISS2_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> tubeComputeBinaryImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_Clone(self)


    def SetSourceImage(self, value: 'itkImageSS2') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsISS2 self, itkImageSS2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageSS2') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsISS2 self, itkImageSS2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsISS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS2

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsISS2 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsISS2"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsISS2.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_Clone, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsISS2)
tubeComputeBinaryImageSimilarityMetricsISS2_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_swigregister
tubeComputeBinaryImageSimilarityMetricsISS2_swigregister(tubeComputeBinaryImageSimilarityMetricsISS2)

def tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsISS2_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS2_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsISS2_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsISS2 *":
    """tubeComputeBinaryImageSimilarityMetricsISS2_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsISS2"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_cast(obj)

class tubeComputeBinaryImageSimilarityMetricsISS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsISS3_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsISS3_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> tubeComputeBinaryImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_Clone(self)


    def SetSourceImage(self, value: 'itkImageSS3') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsISS3 self, itkImageSS3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageSS3') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsISS3 self, itkImageSS3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsISS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS3

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsISS3 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsISS3"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsISS3.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_Clone, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsISS3)
tubeComputeBinaryImageSimilarityMetricsISS3_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_swigregister
tubeComputeBinaryImageSimilarityMetricsISS3_swigregister(tubeComputeBinaryImageSimilarityMetricsISS3)

def tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsISS3_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS3_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsISS3_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsISS3 *":
    """tubeComputeBinaryImageSimilarityMetricsISS3_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsISS3"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_cast(obj)

class tubeComputeBinaryImageSimilarityMetricsIUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_Clone(self)


    def SetSourceImage(self, value: 'itkImageUC2') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsIUC2 self, itkImageUC2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageUC2') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsIUC2 self, itkImageUC2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsIUC2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUC2 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUC2"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsIUC2.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_Clone, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsIUC2)
tubeComputeBinaryImageSimilarityMetricsIUC2_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_swigregister
tubeComputeBinaryImageSimilarityMetricsIUC2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC2)

def tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsIUC2_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUC2 *":
    """tubeComputeBinaryImageSimilarityMetricsIUC2_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUC2"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_cast(obj)

class tubeComputeBinaryImageSimilarityMetricsIUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_Clone(self)


    def SetSourceImage(self, value: 'itkImageUC3') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsIUC3 self, itkImageUC3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageUC3') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsIUC3 self, itkImageUC3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsIUC3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUC3 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUC3"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsIUC3.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_Clone, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsIUC3)
tubeComputeBinaryImageSimilarityMetricsIUC3_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_swigregister
tubeComputeBinaryImageSimilarityMetricsIUC3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC3)

def tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsIUC3_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUC3 *":
    """tubeComputeBinaryImageSimilarityMetricsIUC3_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUC3"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_cast(obj)

class tubeComputeBinaryImageSimilarityMetricsIUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_Clone(self)


    def SetSourceImage(self, value: 'itkImageUS2') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsIUS2 self, itkImageUS2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageUS2') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsIUS2 self, itkImageUS2 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsIUS2 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUS2 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUS2"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsIUS2.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_Clone, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsIUS2)
tubeComputeBinaryImageSimilarityMetricsIUS2_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_swigregister
tubeComputeBinaryImageSimilarityMetricsIUS2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS2)

def tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsIUS2_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUS2 *":
    """tubeComputeBinaryImageSimilarityMetricsIUS2_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUS2"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_cast(obj)

class tubeComputeBinaryImageSimilarityMetricsIUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer":
        """__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer":
        """Clone(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_Clone(self)


    def SetSourceImage(self, value: 'itkImageUS3') -> "void":
        """SetSourceImage(tubeComputeBinaryImageSimilarityMetricsIUS3 self, itkImageUS3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetSourceImage(self, value)


    def SetTargetImage(self, value: 'itkImageUS3') -> "void":
        """SetTargetImage(tubeComputeBinaryImageSimilarityMetricsIUS3 self, itkImageUS3 value)"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetTargetImage(self, value)


    def GetTotalOverlap(self) -> "float":
        """GetTotalOverlap(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetTotalOverlap(self)


    def GetUnionOverlap(self) -> "float":
        """GetUnionOverlap(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetUnionOverlap(self)


    def GetMeanOverlap(self) -> "float":
        """GetMeanOverlap(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetMeanOverlap(self)


    def GetVolumeSimilarity(self) -> "float":
        """GetVolumeSimilarity(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetVolumeSimilarity(self)


    def GetFalseNegativeError(self) -> "float":
        """GetFalseNegativeError(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalseNegativeError(self)


    def GetFalsePositiveError(self) -> "float":
        """GetFalsePositiveError(tubeComputeBinaryImageSimilarityMetricsIUS3 self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalsePositiveError(self)

    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUS3 *":
        """cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUS3"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeBinaryImageSimilarityMetricsIUS3.Clone = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_Clone, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.SetSourceImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetSourceImage, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.SetTargetImage = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetTargetImage, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetTotalOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetTotalOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetUnionOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetUnionOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetMeanOverlap = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetMeanOverlap, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetVolumeSimilarity = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetVolumeSimilarity, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetFalseNegativeError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalseNegativeError, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3.GetFalsePositiveError = new_instancemethod(_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalsePositiveError, None, tubeComputeBinaryImageSimilarityMetricsIUS3)
tubeComputeBinaryImageSimilarityMetricsIUS3_swigregister = _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_swigregister
tubeComputeBinaryImageSimilarityMetricsIUS3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS3)

def tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__() -> "tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer":
    """tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__()

def tubeComputeBinaryImageSimilarityMetricsIUS3_cast(obj: 'itkLightObject') -> "tubeComputeBinaryImageSimilarityMetricsIUS3 *":
    """tubeComputeBinaryImageSimilarityMetricsIUS3_cast(itkLightObject obj) -> tubeComputeBinaryImageSimilarityMetricsIUS3"""
    return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_binary_image_similarity_metrics(*args, **kwargs):
    """Procedural interface for ComputeBinaryImageSimilarityMetrics"""
    import itk
    instance = itk.ComputeBinaryImageSimilarityMetrics.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_binary_image_similarity_metrics_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeBinaryImageSimilarityMetrics, itkTemplate.itkTemplate):
        filter_object = itk.ComputeBinaryImageSimilarityMetrics.values()[0]
    else:
        filter_object = itk.ComputeBinaryImageSimilarityMetrics

    compute_binary_image_similarity_metrics.__doc__ = filter_object.__doc__
    compute_binary_image_similarity_metrics.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_binary_image_similarity_metrics.__doc__ += "Available Keyword Arguments:\n"
    compute_binary_image_similarity_metrics.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



