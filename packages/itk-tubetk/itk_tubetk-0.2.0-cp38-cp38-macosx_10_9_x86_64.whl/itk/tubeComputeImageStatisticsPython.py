# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeComputeImageStatisticsPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeComputeImageStatisticsPython', [dirname(__file__)])
        except ImportError:
            import _tubeComputeImageStatisticsPython
            return _tubeComputeImageStatisticsPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeComputeImageStatisticsPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeComputeImageStatisticsPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeComputeImageStatisticsPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import ITKCommonBasePython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkPointPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkIndexPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython

def tubeComputeImageStatisticsD3_New():
  return tubeComputeImageStatisticsD3.New()


def tubeComputeImageStatisticsF3_New():
  return tubeComputeImageStatisticsF3.New()


def tubeComputeImageStatisticsUS3_New():
  return tubeComputeImageStatisticsUS3.New()


def tubeComputeImageStatisticsUC3_New():
  return tubeComputeImageStatisticsUC3.New()


def tubeComputeImageStatisticsSS3_New():
  return tubeComputeImageStatisticsSS3.New()


def tubeComputeImageStatisticsD2_New():
  return tubeComputeImageStatisticsD2.New()


def tubeComputeImageStatisticsF2_New():
  return tubeComputeImageStatisticsF2.New()


def tubeComputeImageStatisticsUS2_New():
  return tubeComputeImageStatisticsUS2.New()


def tubeComputeImageStatisticsUC2_New():
  return tubeComputeImageStatisticsUC2.New()


def tubeComputeImageStatisticsSS2_New():
  return tubeComputeImageStatisticsSS2.New()

class tubeComputeImageStatisticsD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsD2_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsD2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsD2_Pointer":
        """Clone(tubeComputeImageStatisticsD2 self) -> tubeComputeImageStatisticsD2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompValue(tubeComputeImageStatisticsD2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsD2 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsD2 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsD2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageD2') -> "void":
        """SetInputMask(tubeComputeImageStatisticsD2 self, itkImageD2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageD2 *":
        """GetInputMask(tubeComputeImageStatisticsD2 self) -> itkImageD2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsD2 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeImageStatisticsD2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeComputeImageStatisticsD2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeImageStatisticsD2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD2

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsD2 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsD2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD2

        Create a new object of the class tubeComputeImageStatisticsD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsD2.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_Clone, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMean, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMin, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMax, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompStdDev, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompCount, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompValue, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetNumberOfComponents, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetQuantiles, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetQuantiles, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInputMask, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInputMask, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_WriteCSVStatistics, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInput, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInput, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetOutput, None, tubeComputeImageStatisticsD2)
tubeComputeImageStatisticsD2_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_swigregister
tubeComputeImageStatisticsD2_swigregister(tubeComputeImageStatisticsD2)

def tubeComputeImageStatisticsD2___New_orig__() -> "tubeComputeImageStatisticsD2_Pointer":
    """tubeComputeImageStatisticsD2___New_orig__() -> tubeComputeImageStatisticsD2_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2___New_orig__()

def tubeComputeImageStatisticsD2_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsD2 *":
    """tubeComputeImageStatisticsD2_cast(itkLightObject obj) -> tubeComputeImageStatisticsD2"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_cast(obj)

class tubeComputeImageStatisticsD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsD3_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsD3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsD3_Pointer":
        """Clone(tubeComputeImageStatisticsD3 self) -> tubeComputeImageStatisticsD3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompValue(tubeComputeImageStatisticsD3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsD3 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsD3 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsD3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageD3') -> "void":
        """SetInputMask(tubeComputeImageStatisticsD3 self, itkImageD3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageD3 *":
        """GetInputMask(tubeComputeImageStatisticsD3 self) -> itkImageD3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsD3 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeImageStatisticsD3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeComputeImageStatisticsD3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeImageStatisticsD3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD3

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsD3 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsD3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD3

        Create a new object of the class tubeComputeImageStatisticsD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsD3.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_Clone, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMean, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMin, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMax, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompStdDev, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompCount, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompValue, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetNumberOfComponents, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetQuantiles, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetQuantiles, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInputMask, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInputMask, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_WriteCSVStatistics, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInput, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInput, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetOutput, None, tubeComputeImageStatisticsD3)
tubeComputeImageStatisticsD3_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_swigregister
tubeComputeImageStatisticsD3_swigregister(tubeComputeImageStatisticsD3)

def tubeComputeImageStatisticsD3___New_orig__() -> "tubeComputeImageStatisticsD3_Pointer":
    """tubeComputeImageStatisticsD3___New_orig__() -> tubeComputeImageStatisticsD3_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3___New_orig__()

def tubeComputeImageStatisticsD3_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsD3 *":
    """tubeComputeImageStatisticsD3_cast(itkLightObject obj) -> tubeComputeImageStatisticsD3"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_cast(obj)

class tubeComputeImageStatisticsF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsF2_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsF2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsF2_Pointer":
        """Clone(tubeComputeImageStatisticsF2 self) -> tubeComputeImageStatisticsF2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsF2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsF2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsF2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsF2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsF2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< float,std::allocator< float > >":
        """GetCompValue(tubeComputeImageStatisticsF2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsF2 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsF2 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsF2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageF2') -> "void":
        """SetInputMask(tubeComputeImageStatisticsF2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageF2 *":
        """GetInputMask(tubeComputeImageStatisticsF2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsF2 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeImageStatisticsF2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeComputeImageStatisticsF2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeImageStatisticsF2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF2

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsF2 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF2

        Create a new object of the class tubeComputeImageStatisticsF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsF2.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_Clone, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMean, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMin, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMax, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompStdDev, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompCount, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompValue, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetNumberOfComponents, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetQuantiles, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetQuantiles, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInputMask, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInputMask, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_WriteCSVStatistics, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInput, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInput, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetOutput, None, tubeComputeImageStatisticsF2)
tubeComputeImageStatisticsF2_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_swigregister
tubeComputeImageStatisticsF2_swigregister(tubeComputeImageStatisticsF2)

def tubeComputeImageStatisticsF2___New_orig__() -> "tubeComputeImageStatisticsF2_Pointer":
    """tubeComputeImageStatisticsF2___New_orig__() -> tubeComputeImageStatisticsF2_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2___New_orig__()

def tubeComputeImageStatisticsF2_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsF2 *":
    """tubeComputeImageStatisticsF2_cast(itkLightObject obj) -> tubeComputeImageStatisticsF2"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_cast(obj)

class tubeComputeImageStatisticsF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsF3_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsF3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsF3_Pointer":
        """Clone(tubeComputeImageStatisticsF3 self) -> tubeComputeImageStatisticsF3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsF3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsF3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsF3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsF3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsF3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< float,std::allocator< float > >":
        """GetCompValue(tubeComputeImageStatisticsF3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsF3 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsF3 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsF3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageF3') -> "void":
        """SetInputMask(tubeComputeImageStatisticsF3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageF3 *":
        """GetInputMask(tubeComputeImageStatisticsF3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsF3 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeImageStatisticsF3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeComputeImageStatisticsF3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeImageStatisticsF3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF3

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsF3 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF3

        Create a new object of the class tubeComputeImageStatisticsF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsF3.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_Clone, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMean, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMin, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMax, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompStdDev, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompCount, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompValue, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetNumberOfComponents, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetQuantiles, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetQuantiles, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInputMask, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInputMask, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_WriteCSVStatistics, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInput, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInput, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetOutput, None, tubeComputeImageStatisticsF3)
tubeComputeImageStatisticsF3_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_swigregister
tubeComputeImageStatisticsF3_swigregister(tubeComputeImageStatisticsF3)

def tubeComputeImageStatisticsF3___New_orig__() -> "tubeComputeImageStatisticsF3_Pointer":
    """tubeComputeImageStatisticsF3___New_orig__() -> tubeComputeImageStatisticsF3_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3___New_orig__()

def tubeComputeImageStatisticsF3_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsF3 *":
    """tubeComputeImageStatisticsF3_cast(itkLightObject obj) -> tubeComputeImageStatisticsF3"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_cast(obj)

class tubeComputeImageStatisticsSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsSS2_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsSS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsSS2_Pointer":
        """Clone(tubeComputeImageStatisticsSS2 self) -> tubeComputeImageStatisticsSS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsSS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsSS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsSS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsSS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsSS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< short,std::allocator< short > >":
        """GetCompValue(tubeComputeImageStatisticsSS2 self) -> vectorSS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsSS2 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsSS2 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsSS2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageSS2') -> "void":
        """SetInputMask(tubeComputeImageStatisticsSS2 self, itkImageSS2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageSS2 *":
        """GetInputMask(tubeComputeImageStatisticsSS2 self) -> itkImageSS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsSS2 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeImageStatisticsSS2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeComputeImageStatisticsSS2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeImageStatisticsSS2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsSS2 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsSS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS2

        Create a new object of the class tubeComputeImageStatisticsSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsSS2.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_Clone, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMean, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMin, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMax, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompStdDev, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompCount, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompValue, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetNumberOfComponents, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetQuantiles, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetQuantiles, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInputMask, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInputMask, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_WriteCSVStatistics, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInput, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInput, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetOutput, None, tubeComputeImageStatisticsSS2)
tubeComputeImageStatisticsSS2_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_swigregister
tubeComputeImageStatisticsSS2_swigregister(tubeComputeImageStatisticsSS2)

def tubeComputeImageStatisticsSS2___New_orig__() -> "tubeComputeImageStatisticsSS2_Pointer":
    """tubeComputeImageStatisticsSS2___New_orig__() -> tubeComputeImageStatisticsSS2_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2___New_orig__()

def tubeComputeImageStatisticsSS2_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsSS2 *":
    """tubeComputeImageStatisticsSS2_cast(itkLightObject obj) -> tubeComputeImageStatisticsSS2"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_cast(obj)

class tubeComputeImageStatisticsSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsSS3_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsSS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsSS3_Pointer":
        """Clone(tubeComputeImageStatisticsSS3 self) -> tubeComputeImageStatisticsSS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsSS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsSS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsSS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsSS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsSS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< short,std::allocator< short > >":
        """GetCompValue(tubeComputeImageStatisticsSS3 self) -> vectorSS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsSS3 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsSS3 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsSS3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageSS3') -> "void":
        """SetInputMask(tubeComputeImageStatisticsSS3 self, itkImageSS3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageSS3 *":
        """GetInputMask(tubeComputeImageStatisticsSS3 self) -> itkImageSS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsSS3 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeImageStatisticsSS3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeComputeImageStatisticsSS3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeImageStatisticsSS3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsSS3 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsSS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS3

        Create a new object of the class tubeComputeImageStatisticsSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsSS3.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_Clone, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMean, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMin, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMax, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompStdDev, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompCount, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompValue, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetNumberOfComponents, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetQuantiles, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetQuantiles, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInputMask, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInputMask, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_WriteCSVStatistics, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInput, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInput, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetOutput, None, tubeComputeImageStatisticsSS3)
tubeComputeImageStatisticsSS3_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_swigregister
tubeComputeImageStatisticsSS3_swigregister(tubeComputeImageStatisticsSS3)

def tubeComputeImageStatisticsSS3___New_orig__() -> "tubeComputeImageStatisticsSS3_Pointer":
    """tubeComputeImageStatisticsSS3___New_orig__() -> tubeComputeImageStatisticsSS3_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3___New_orig__()

def tubeComputeImageStatisticsSS3_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsSS3 *":
    """tubeComputeImageStatisticsSS3_cast(itkLightObject obj) -> tubeComputeImageStatisticsSS3"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_cast(obj)

class tubeComputeImageStatisticsUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsUC2_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsUC2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsUC2_Pointer":
        """Clone(tubeComputeImageStatisticsUC2 self) -> tubeComputeImageStatisticsUC2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsUC2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsUC2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsUC2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsUC2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsUC2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< unsigned char,std::allocator< unsigned char > >":
        """GetCompValue(tubeComputeImageStatisticsUC2 self) -> vectorUC"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsUC2 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsUC2 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsUC2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageUC2') -> "void":
        """SetInputMask(tubeComputeImageStatisticsUC2 self, itkImageUC2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageUC2 *":
        """GetInputMask(tubeComputeImageStatisticsUC2 self) -> itkImageUC2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsUC2 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeImageStatisticsUC2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeComputeImageStatisticsUC2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeImageStatisticsUC2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUC2 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsUC2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC2

        Create a new object of the class tubeComputeImageStatisticsUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsUC2.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_Clone, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMean, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMin, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMax, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompStdDev, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompCount, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompValue, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetNumberOfComponents, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetQuantiles, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetQuantiles, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInputMask, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInputMask, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_WriteCSVStatistics, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInput, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInput, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetOutput, None, tubeComputeImageStatisticsUC2)
tubeComputeImageStatisticsUC2_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_swigregister
tubeComputeImageStatisticsUC2_swigregister(tubeComputeImageStatisticsUC2)

def tubeComputeImageStatisticsUC2___New_orig__() -> "tubeComputeImageStatisticsUC2_Pointer":
    """tubeComputeImageStatisticsUC2___New_orig__() -> tubeComputeImageStatisticsUC2_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2___New_orig__()

def tubeComputeImageStatisticsUC2_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUC2 *":
    """tubeComputeImageStatisticsUC2_cast(itkLightObject obj) -> tubeComputeImageStatisticsUC2"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_cast(obj)

class tubeComputeImageStatisticsUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsUC3_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsUC3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsUC3_Pointer":
        """Clone(tubeComputeImageStatisticsUC3 self) -> tubeComputeImageStatisticsUC3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsUC3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsUC3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsUC3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsUC3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsUC3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< unsigned char,std::allocator< unsigned char > >":
        """GetCompValue(tubeComputeImageStatisticsUC3 self) -> vectorUC"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsUC3 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsUC3 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsUC3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageUC3') -> "void":
        """SetInputMask(tubeComputeImageStatisticsUC3 self, itkImageUC3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageUC3 *":
        """GetInputMask(tubeComputeImageStatisticsUC3 self) -> itkImageUC3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsUC3 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeImageStatisticsUC3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeComputeImageStatisticsUC3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeImageStatisticsUC3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUC3 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsUC3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC3

        Create a new object of the class tubeComputeImageStatisticsUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsUC3.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_Clone, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMean, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMin, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMax, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompStdDev, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompCount, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompValue, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetNumberOfComponents, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetQuantiles, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetQuantiles, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInputMask, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInputMask, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_WriteCSVStatistics, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInput, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInput, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetOutput, None, tubeComputeImageStatisticsUC3)
tubeComputeImageStatisticsUC3_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_swigregister
tubeComputeImageStatisticsUC3_swigregister(tubeComputeImageStatisticsUC3)

def tubeComputeImageStatisticsUC3___New_orig__() -> "tubeComputeImageStatisticsUC3_Pointer":
    """tubeComputeImageStatisticsUC3___New_orig__() -> tubeComputeImageStatisticsUC3_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3___New_orig__()

def tubeComputeImageStatisticsUC3_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUC3 *":
    """tubeComputeImageStatisticsUC3_cast(itkLightObject obj) -> tubeComputeImageStatisticsUC3"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_cast(obj)

class tubeComputeImageStatisticsUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsUS2_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsUS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsUS2_Pointer":
        """Clone(tubeComputeImageStatisticsUS2 self) -> tubeComputeImageStatisticsUS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsUS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsUS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsUS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsUS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsUS2 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< unsigned short,std::allocator< unsigned short > >":
        """GetCompValue(tubeComputeImageStatisticsUS2 self) -> vectorUS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsUS2 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsUS2 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsUS2 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageUS2') -> "void":
        """SetInputMask(tubeComputeImageStatisticsUS2 self, itkImageUS2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageUS2 *":
        """GetInputMask(tubeComputeImageStatisticsUS2 self) -> itkImageUS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsUS2 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeImageStatisticsUS2 self, itkImageF2 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeComputeImageStatisticsUS2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeImageStatisticsUS2 self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUS2 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsUS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS2

        Create a new object of the class tubeComputeImageStatisticsUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsUS2.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_Clone, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMean, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMin, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMax, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompStdDev, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompCount, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompValue, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetNumberOfComponents, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetQuantiles, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetQuantiles, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInputMask, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInputMask, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_WriteCSVStatistics, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInput, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInput, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetOutput, None, tubeComputeImageStatisticsUS2)
tubeComputeImageStatisticsUS2_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_swigregister
tubeComputeImageStatisticsUS2_swigregister(tubeComputeImageStatisticsUS2)

def tubeComputeImageStatisticsUS2___New_orig__() -> "tubeComputeImageStatisticsUS2_Pointer":
    """tubeComputeImageStatisticsUS2___New_orig__() -> tubeComputeImageStatisticsUS2_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2___New_orig__()

def tubeComputeImageStatisticsUS2_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUS2 *":
    """tubeComputeImageStatisticsUS2_cast(itkLightObject obj) -> tubeComputeImageStatisticsUS2"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_cast(obj)

class tubeComputeImageStatisticsUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeImageStatisticsUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeImageStatisticsUS3_Pointer":
        """__New_orig__() -> tubeComputeImageStatisticsUS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeImageStatisticsUS3_Pointer":
        """Clone(tubeComputeImageStatisticsUS3 self) -> tubeComputeImageStatisticsUS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_Clone(self)


    def GetCompMean(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMean(tubeComputeImageStatisticsUS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMean(self)


    def GetCompMin(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMin(tubeComputeImageStatisticsUS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMin(self)


    def GetCompMax(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompMax(tubeComputeImageStatisticsUS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMax(self)


    def GetCompStdDev(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompStdDev(tubeComputeImageStatisticsUS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompStdDev(self)


    def GetCompCount(self) -> "std::vector< double,std::allocator< double > >":
        """GetCompCount(tubeComputeImageStatisticsUS3 self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompCount(self)


    def GetCompValue(self) -> "std::vector< unsigned short,std::allocator< unsigned short > >":
        """GetCompValue(tubeComputeImageStatisticsUS3 self) -> vectorUS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompValue(self)


    def GetNumberOfComponents(self) -> "unsigned int":
        """GetNumberOfComponents(tubeComputeImageStatisticsUS3 self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetNumberOfComponents(self)


    def SetQuantiles(self, value: 'vectorF') -> "void":
        """SetQuantiles(tubeComputeImageStatisticsUS3 self, vectorF value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetQuantiles(self, value)


    def GetQuantiles(self) -> "std::vector< float,std::allocator< float > >":
        """GetQuantiles(tubeComputeImageStatisticsUS3 self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetQuantiles(self)


    def SetInputMask(self, value: 'itkImageUS3') -> "void":
        """SetInputMask(tubeComputeImageStatisticsUS3 self, itkImageUS3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInputMask(self, value)


    def GetInputMask(self) -> "itkImageUS3 *":
        """GetInputMask(tubeComputeImageStatisticsUS3 self) -> itkImageUS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInputMask(self)


    def WriteCSVStatistics(self, csvStatisticsFile: 'std::string') -> "void":
        """WriteCSVStatistics(tubeComputeImageStatisticsUS3 self, std::string csvStatisticsFile)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_WriteCSVStatistics(self, csvStatisticsFile)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeImageStatisticsUS3 self, itkImageF3 value)"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeComputeImageStatisticsUS3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInput(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeImageStatisticsUS3 self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUS3 *":
        """cast(itkLightObject obj) -> tubeComputeImageStatisticsUS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS3

        Create a new object of the class tubeComputeImageStatisticsUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeImageStatisticsUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeImageStatisticsUS3.Clone = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_Clone, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompMean = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMean, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompMin = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMin, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompMax = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMax, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompStdDev = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompStdDev, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompCount = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompCount, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetCompValue = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompValue, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetNumberOfComponents = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetNumberOfComponents, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.SetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetQuantiles, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetQuantiles = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetQuantiles, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.SetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInputMask, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetInputMask = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInputMask, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.WriteCSVStatistics = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_WriteCSVStatistics, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.SetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInput, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetInput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInput, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3.GetOutput = new_instancemethod(_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetOutput, None, tubeComputeImageStatisticsUS3)
tubeComputeImageStatisticsUS3_swigregister = _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_swigregister
tubeComputeImageStatisticsUS3_swigregister(tubeComputeImageStatisticsUS3)

def tubeComputeImageStatisticsUS3___New_orig__() -> "tubeComputeImageStatisticsUS3_Pointer":
    """tubeComputeImageStatisticsUS3___New_orig__() -> tubeComputeImageStatisticsUS3_Pointer"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3___New_orig__()

def tubeComputeImageStatisticsUS3_cast(obj: 'itkLightObject') -> "tubeComputeImageStatisticsUS3 *":
    """tubeComputeImageStatisticsUS3_cast(itkLightObject obj) -> tubeComputeImageStatisticsUS3"""
    return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_image_statistics(*args, **kwargs):
    """Procedural interface for ComputeImageStatistics"""
    import itk
    instance = itk.ComputeImageStatistics.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_image_statistics_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeImageStatistics, itkTemplate.itkTemplate):
        filter_object = itk.ComputeImageStatistics.values()[0]
    else:
        filter_object = itk.ComputeImageStatistics

    compute_image_statistics.__doc__ = filter_object.__doc__
    compute_image_statistics.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_image_statistics.__doc__ += "Available Keyword Arguments:\n"
    compute_image_statistics.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



