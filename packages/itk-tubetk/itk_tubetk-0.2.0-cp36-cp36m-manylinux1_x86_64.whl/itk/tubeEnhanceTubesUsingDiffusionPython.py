# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeEnhanceTubesUsingDiffusionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeEnhanceTubesUsingDiffusionPython', [dirname(__file__)])
        except ImportError:
            import _tubeEnhanceTubesUsingDiffusionPython
            return _tubeEnhanceTubesUsingDiffusionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeEnhanceTubesUsingDiffusionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeEnhanceTubesUsingDiffusionPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeEnhanceTubesUsingDiffusionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkRGBAPixelPython
import ITKCommonBasePython
import itkImageRegionPython
import itkRGBPixelPython

def tubeEnhanceTubesUsingDiffusionD2_New():
  return tubeEnhanceTubesUsingDiffusionD2.New()


def tubeEnhanceTubesUsingDiffusionF2_New():
  return tubeEnhanceTubesUsingDiffusionF2.New()


def tubeEnhanceTubesUsingDiffusionUS2_New():
  return tubeEnhanceTubesUsingDiffusionUS2.New()


def tubeEnhanceTubesUsingDiffusionUC2_New():
  return tubeEnhanceTubesUsingDiffusionUC2.New()


def tubeEnhanceTubesUsingDiffusionSS2_New():
  return tubeEnhanceTubesUsingDiffusionSS2.New()

class tubeEnhanceTubesUsingDiffusionD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceTubesUsingDiffusionD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceTubesUsingDiffusionD2_Pointer":
        """__New_orig__() -> tubeEnhanceTubesUsingDiffusionD2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceTubesUsingDiffusionD2_Pointer":
        """Clone(tubeEnhanceTubesUsingDiffusionD2 self) -> tubeEnhanceTubesUsingDiffusionD2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_Clone(self)


    def SetMinSigma(self, _arg: 'double const') -> "void":
        """SetMinSigma(tubeEnhanceTubesUsingDiffusionD2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMinSigma(self, _arg)


    def GetMinSigma(self) -> "double":
        """GetMinSigma(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMinSigma(self)


    def SetMaxSigma(self, _arg: 'double const') -> "void":
        """SetMaxSigma(tubeEnhanceTubesUsingDiffusionD2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMaxSigma(self, _arg)


    def GetMaxSigma(self) -> "double":
        """GetMaxSigma(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMaxSigma(self)


    def SetNumSigmaSteps(self, _arg: 'unsigned int const') -> "void":
        """SetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionD2 self, unsigned int const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetNumSigmaSteps(self, _arg)


    def GetNumSigmaSteps(self) -> "unsigned int":
        """GetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionD2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetNumSigmaSteps(self)


    def SetRecalculateTubeness(self, value: 'unsigned int') -> "void":
        """SetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionD2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetRecalculateTubeness(self, value)


    def GetRecalculateTubeness(self) -> "unsigned int":
        """GetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionD2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetRecalculateTubeness(self)


    def SetBeta(self, value: 'double') -> "void":
        """SetBeta(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetBeta(self, value)


    def GetBeta(self) -> "double":
        """GetBeta(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetBeta(self)


    def SetGamma(self, value: 'double') -> "void":
        """SetGamma(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetGamma(self, value)


    def GetGamma(self) -> "double":
        """GetGamma(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetGamma(self)


    def SetEpsilon(self, value: 'double') -> "void":
        """SetEpsilon(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetEpsilon(self, value)


    def GetEpsilon(self) -> "double":
        """GetEpsilon(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetEpsilon(self)


    def SetOmega(self, value: 'double') -> "void":
        """SetOmega(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetOmega(self, value)


    def GetOmega(self) -> "double":
        """GetOmega(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOmega(self)


    def SetSensitivity(self, value: 'double') -> "void":
        """SetSensitivity(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetSensitivity(self, value)


    def GetSensitivity(self) -> "double":
        """GetSensitivity(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetSensitivity(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceTubesUsingDiffusionD2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceTubesUsingDiffusionD2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetTimeStep(self)


    def SetIterations(self, value: 'unsigned int') -> "void":
        """SetIterations(tubeEnhanceTubesUsingDiffusionD2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetIterations(self, value)


    def GetIterations(self) -> "unsigned int":
        """GetIterations(tubeEnhanceTubesUsingDiffusionD2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetIterations(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeEnhanceTubesUsingDiffusionD2 self, itkImageD2 value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetInput(self, value)


    def GetInput(self) -> "itkImageD2 const *":
        """GetInput(tubeEnhanceTubesUsingDiffusionD2 self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetInput(self)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeEnhanceTubesUsingDiffusionD2 self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionD2

    def cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionD2 *":
        """cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionD2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionD2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceTubesUsingDiffusionD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceTubesUsingDiffusionD2.Clone = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_Clone, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMinSigma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMinSigma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMaxSigma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMaxSigma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetBeta, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetBeta, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetGamma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetGamma, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetEpsilon, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetEpsilon, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetOmega, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOmega, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetSensitivity, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetSensitivity, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetTimeStep, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetTimeStep, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetIterations, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetIterations, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.SetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetInput, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetInput, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2.GetOutput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOutput, None, tubeEnhanceTubesUsingDiffusionD2)
tubeEnhanceTubesUsingDiffusionD2_swigregister = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_swigregister
tubeEnhanceTubesUsingDiffusionD2_swigregister(tubeEnhanceTubesUsingDiffusionD2)

def tubeEnhanceTubesUsingDiffusionD2___New_orig__() -> "tubeEnhanceTubesUsingDiffusionD2_Pointer":
    """tubeEnhanceTubesUsingDiffusionD2___New_orig__() -> tubeEnhanceTubesUsingDiffusionD2_Pointer"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2___New_orig__()

def tubeEnhanceTubesUsingDiffusionD2_cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionD2 *":
    """tubeEnhanceTubesUsingDiffusionD2_cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionD2"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_cast(obj)

class tubeEnhanceTubesUsingDiffusionF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceTubesUsingDiffusionF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceTubesUsingDiffusionF2_Pointer":
        """__New_orig__() -> tubeEnhanceTubesUsingDiffusionF2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceTubesUsingDiffusionF2_Pointer":
        """Clone(tubeEnhanceTubesUsingDiffusionF2 self) -> tubeEnhanceTubesUsingDiffusionF2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_Clone(self)


    def SetMinSigma(self, _arg: 'double const') -> "void":
        """SetMinSigma(tubeEnhanceTubesUsingDiffusionF2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMinSigma(self, _arg)


    def GetMinSigma(self) -> "double":
        """GetMinSigma(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMinSigma(self)


    def SetMaxSigma(self, _arg: 'double const') -> "void":
        """SetMaxSigma(tubeEnhanceTubesUsingDiffusionF2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMaxSigma(self, _arg)


    def GetMaxSigma(self) -> "double":
        """GetMaxSigma(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMaxSigma(self)


    def SetNumSigmaSteps(self, _arg: 'unsigned int const') -> "void":
        """SetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionF2 self, unsigned int const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetNumSigmaSteps(self, _arg)


    def GetNumSigmaSteps(self) -> "unsigned int":
        """GetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionF2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetNumSigmaSteps(self)


    def SetRecalculateTubeness(self, value: 'unsigned int') -> "void":
        """SetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionF2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetRecalculateTubeness(self, value)


    def GetRecalculateTubeness(self) -> "unsigned int":
        """GetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionF2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetRecalculateTubeness(self)


    def SetBeta(self, value: 'double') -> "void":
        """SetBeta(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetBeta(self, value)


    def GetBeta(self) -> "double":
        """GetBeta(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetBeta(self)


    def SetGamma(self, value: 'double') -> "void":
        """SetGamma(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetGamma(self, value)


    def GetGamma(self) -> "double":
        """GetGamma(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetGamma(self)


    def SetEpsilon(self, value: 'double') -> "void":
        """SetEpsilon(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetEpsilon(self, value)


    def GetEpsilon(self) -> "double":
        """GetEpsilon(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetEpsilon(self)


    def SetOmega(self, value: 'double') -> "void":
        """SetOmega(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetOmega(self, value)


    def GetOmega(self) -> "double":
        """GetOmega(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOmega(self)


    def SetSensitivity(self, value: 'double') -> "void":
        """SetSensitivity(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetSensitivity(self, value)


    def GetSensitivity(self) -> "double":
        """GetSensitivity(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetSensitivity(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceTubesUsingDiffusionF2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceTubesUsingDiffusionF2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetTimeStep(self)


    def SetIterations(self, value: 'unsigned int') -> "void":
        """SetIterations(tubeEnhanceTubesUsingDiffusionF2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetIterations(self, value)


    def GetIterations(self) -> "unsigned int":
        """GetIterations(tubeEnhanceTubesUsingDiffusionF2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetIterations(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeEnhanceTubesUsingDiffusionF2 self, itkImageF2 value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetInput(self, value)


    def GetInput(self) -> "itkImageF2 const *":
        """GetInput(tubeEnhanceTubesUsingDiffusionF2 self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetInput(self)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeEnhanceTubesUsingDiffusionF2 self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionF2

    def cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionF2 *":
        """cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionF2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionF2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceTubesUsingDiffusionF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceTubesUsingDiffusionF2.Clone = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_Clone, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMinSigma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMinSigma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMaxSigma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMaxSigma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetBeta, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetBeta, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetGamma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetGamma, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetEpsilon, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetEpsilon, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetOmega, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOmega, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetSensitivity, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetSensitivity, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetTimeStep, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetTimeStep, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetIterations, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetIterations, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.SetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetInput, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetInput, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2.GetOutput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOutput, None, tubeEnhanceTubesUsingDiffusionF2)
tubeEnhanceTubesUsingDiffusionF2_swigregister = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_swigregister
tubeEnhanceTubesUsingDiffusionF2_swigregister(tubeEnhanceTubesUsingDiffusionF2)

def tubeEnhanceTubesUsingDiffusionF2___New_orig__() -> "tubeEnhanceTubesUsingDiffusionF2_Pointer":
    """tubeEnhanceTubesUsingDiffusionF2___New_orig__() -> tubeEnhanceTubesUsingDiffusionF2_Pointer"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2___New_orig__()

def tubeEnhanceTubesUsingDiffusionF2_cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionF2 *":
    """tubeEnhanceTubesUsingDiffusionF2_cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionF2"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_cast(obj)

class tubeEnhanceTubesUsingDiffusionSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceTubesUsingDiffusionSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceTubesUsingDiffusionSS2_Pointer":
        """__New_orig__() -> tubeEnhanceTubesUsingDiffusionSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceTubesUsingDiffusionSS2_Pointer":
        """Clone(tubeEnhanceTubesUsingDiffusionSS2 self) -> tubeEnhanceTubesUsingDiffusionSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_Clone(self)


    def SetMinSigma(self, _arg: 'double const') -> "void":
        """SetMinSigma(tubeEnhanceTubesUsingDiffusionSS2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMinSigma(self, _arg)


    def GetMinSigma(self) -> "double":
        """GetMinSigma(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMinSigma(self)


    def SetMaxSigma(self, _arg: 'double const') -> "void":
        """SetMaxSigma(tubeEnhanceTubesUsingDiffusionSS2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMaxSigma(self, _arg)


    def GetMaxSigma(self) -> "double":
        """GetMaxSigma(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMaxSigma(self)


    def SetNumSigmaSteps(self, _arg: 'unsigned int const') -> "void":
        """SetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionSS2 self, unsigned int const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetNumSigmaSteps(self, _arg)


    def GetNumSigmaSteps(self) -> "unsigned int":
        """GetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionSS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetNumSigmaSteps(self)


    def SetRecalculateTubeness(self, value: 'unsigned int') -> "void":
        """SetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionSS2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetRecalculateTubeness(self, value)


    def GetRecalculateTubeness(self) -> "unsigned int":
        """GetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionSS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetRecalculateTubeness(self)


    def SetBeta(self, value: 'double') -> "void":
        """SetBeta(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetBeta(self, value)


    def GetBeta(self) -> "double":
        """GetBeta(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetBeta(self)


    def SetGamma(self, value: 'double') -> "void":
        """SetGamma(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetGamma(self, value)


    def GetGamma(self) -> "double":
        """GetGamma(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetGamma(self)


    def SetEpsilon(self, value: 'double') -> "void":
        """SetEpsilon(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetEpsilon(self, value)


    def GetEpsilon(self) -> "double":
        """GetEpsilon(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetEpsilon(self)


    def SetOmega(self, value: 'double') -> "void":
        """SetOmega(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetOmega(self, value)


    def GetOmega(self) -> "double":
        """GetOmega(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOmega(self)


    def SetSensitivity(self, value: 'double') -> "void":
        """SetSensitivity(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetSensitivity(self, value)


    def GetSensitivity(self) -> "double":
        """GetSensitivity(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetSensitivity(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceTubesUsingDiffusionSS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceTubesUsingDiffusionSS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetTimeStep(self)


    def SetIterations(self, value: 'unsigned int') -> "void":
        """SetIterations(tubeEnhanceTubesUsingDiffusionSS2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetIterations(self, value)


    def GetIterations(self) -> "unsigned int":
        """GetIterations(tubeEnhanceTubesUsingDiffusionSS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetIterations(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeEnhanceTubesUsingDiffusionSS2 self, itkImageSS2 value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetInput(self, value)


    def GetInput(self) -> "itkImageSS2 const *":
        """GetInput(tubeEnhanceTubesUsingDiffusionSS2 self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetInput(self)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeEnhanceTubesUsingDiffusionSS2 self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionSS2

    def cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionSS2 *":
        """cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionSS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionSS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceTubesUsingDiffusionSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceTubesUsingDiffusionSS2.Clone = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_Clone, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMinSigma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMinSigma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMaxSigma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMaxSigma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetBeta, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetBeta, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetGamma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetGamma, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetEpsilon, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetEpsilon, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetOmega, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOmega, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetSensitivity, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetSensitivity, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetTimeStep, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetTimeStep, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetIterations, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetIterations, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.SetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetInput, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetInput, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2.GetOutput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOutput, None, tubeEnhanceTubesUsingDiffusionSS2)
tubeEnhanceTubesUsingDiffusionSS2_swigregister = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_swigregister
tubeEnhanceTubesUsingDiffusionSS2_swigregister(tubeEnhanceTubesUsingDiffusionSS2)

def tubeEnhanceTubesUsingDiffusionSS2___New_orig__() -> "tubeEnhanceTubesUsingDiffusionSS2_Pointer":
    """tubeEnhanceTubesUsingDiffusionSS2___New_orig__() -> tubeEnhanceTubesUsingDiffusionSS2_Pointer"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2___New_orig__()

def tubeEnhanceTubesUsingDiffusionSS2_cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionSS2 *":
    """tubeEnhanceTubesUsingDiffusionSS2_cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionSS2"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_cast(obj)

class tubeEnhanceTubesUsingDiffusionUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceTubesUsingDiffusionUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceTubesUsingDiffusionUC2_Pointer":
        """__New_orig__() -> tubeEnhanceTubesUsingDiffusionUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceTubesUsingDiffusionUC2_Pointer":
        """Clone(tubeEnhanceTubesUsingDiffusionUC2 self) -> tubeEnhanceTubesUsingDiffusionUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_Clone(self)


    def SetMinSigma(self, _arg: 'double const') -> "void":
        """SetMinSigma(tubeEnhanceTubesUsingDiffusionUC2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMinSigma(self, _arg)


    def GetMinSigma(self) -> "double":
        """GetMinSigma(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMinSigma(self)


    def SetMaxSigma(self, _arg: 'double const') -> "void":
        """SetMaxSigma(tubeEnhanceTubesUsingDiffusionUC2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMaxSigma(self, _arg)


    def GetMaxSigma(self) -> "double":
        """GetMaxSigma(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMaxSigma(self)


    def SetNumSigmaSteps(self, _arg: 'unsigned int const') -> "void":
        """SetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionUC2 self, unsigned int const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetNumSigmaSteps(self, _arg)


    def GetNumSigmaSteps(self) -> "unsigned int":
        """GetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionUC2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetNumSigmaSteps(self)


    def SetRecalculateTubeness(self, value: 'unsigned int') -> "void":
        """SetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionUC2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetRecalculateTubeness(self, value)


    def GetRecalculateTubeness(self) -> "unsigned int":
        """GetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionUC2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetRecalculateTubeness(self)


    def SetBeta(self, value: 'double') -> "void":
        """SetBeta(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetBeta(self, value)


    def GetBeta(self) -> "double":
        """GetBeta(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetBeta(self)


    def SetGamma(self, value: 'double') -> "void":
        """SetGamma(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetGamma(self, value)


    def GetGamma(self) -> "double":
        """GetGamma(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetGamma(self)


    def SetEpsilon(self, value: 'double') -> "void":
        """SetEpsilon(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetEpsilon(self, value)


    def GetEpsilon(self) -> "double":
        """GetEpsilon(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetEpsilon(self)


    def SetOmega(self, value: 'double') -> "void":
        """SetOmega(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetOmega(self, value)


    def GetOmega(self) -> "double":
        """GetOmega(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOmega(self)


    def SetSensitivity(self, value: 'double') -> "void":
        """SetSensitivity(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetSensitivity(self, value)


    def GetSensitivity(self) -> "double":
        """GetSensitivity(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetSensitivity(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceTubesUsingDiffusionUC2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceTubesUsingDiffusionUC2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetTimeStep(self)


    def SetIterations(self, value: 'unsigned int') -> "void":
        """SetIterations(tubeEnhanceTubesUsingDiffusionUC2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetIterations(self, value)


    def GetIterations(self) -> "unsigned int":
        """GetIterations(tubeEnhanceTubesUsingDiffusionUC2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetIterations(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeEnhanceTubesUsingDiffusionUC2 self, itkImageUC2 value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetInput(self, value)


    def GetInput(self) -> "itkImageUC2 const *":
        """GetInput(tubeEnhanceTubesUsingDiffusionUC2 self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetInput(self)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeEnhanceTubesUsingDiffusionUC2 self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUC2

    def cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionUC2 *":
        """cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionUC2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUC2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceTubesUsingDiffusionUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceTubesUsingDiffusionUC2.Clone = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_Clone, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMinSigma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMinSigma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMaxSigma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMaxSigma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetBeta, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetBeta, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetGamma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetGamma, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetEpsilon, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetEpsilon, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetOmega, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOmega, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetSensitivity, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetSensitivity, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetTimeStep, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetTimeStep, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetIterations, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetIterations, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.SetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetInput, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetInput, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2.GetOutput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOutput, None, tubeEnhanceTubesUsingDiffusionUC2)
tubeEnhanceTubesUsingDiffusionUC2_swigregister = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_swigregister
tubeEnhanceTubesUsingDiffusionUC2_swigregister(tubeEnhanceTubesUsingDiffusionUC2)

def tubeEnhanceTubesUsingDiffusionUC2___New_orig__() -> "tubeEnhanceTubesUsingDiffusionUC2_Pointer":
    """tubeEnhanceTubesUsingDiffusionUC2___New_orig__() -> tubeEnhanceTubesUsingDiffusionUC2_Pointer"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2___New_orig__()

def tubeEnhanceTubesUsingDiffusionUC2_cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionUC2 *":
    """tubeEnhanceTubesUsingDiffusionUC2_cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionUC2"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_cast(obj)

class tubeEnhanceTubesUsingDiffusionUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceTubesUsingDiffusionUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceTubesUsingDiffusionUS2_Pointer":
        """__New_orig__() -> tubeEnhanceTubesUsingDiffusionUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceTubesUsingDiffusionUS2_Pointer":
        """Clone(tubeEnhanceTubesUsingDiffusionUS2 self) -> tubeEnhanceTubesUsingDiffusionUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_Clone(self)


    def SetMinSigma(self, _arg: 'double const') -> "void":
        """SetMinSigma(tubeEnhanceTubesUsingDiffusionUS2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMinSigma(self, _arg)


    def GetMinSigma(self) -> "double":
        """GetMinSigma(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMinSigma(self)


    def SetMaxSigma(self, _arg: 'double const') -> "void":
        """SetMaxSigma(tubeEnhanceTubesUsingDiffusionUS2 self, double const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMaxSigma(self, _arg)


    def GetMaxSigma(self) -> "double":
        """GetMaxSigma(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMaxSigma(self)


    def SetNumSigmaSteps(self, _arg: 'unsigned int const') -> "void":
        """SetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionUS2 self, unsigned int const _arg)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetNumSigmaSteps(self, _arg)


    def GetNumSigmaSteps(self) -> "unsigned int":
        """GetNumSigmaSteps(tubeEnhanceTubesUsingDiffusionUS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetNumSigmaSteps(self)


    def SetRecalculateTubeness(self, value: 'unsigned int') -> "void":
        """SetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionUS2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetRecalculateTubeness(self, value)


    def GetRecalculateTubeness(self) -> "unsigned int":
        """GetRecalculateTubeness(tubeEnhanceTubesUsingDiffusionUS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetRecalculateTubeness(self)


    def SetBeta(self, value: 'double') -> "void":
        """SetBeta(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetBeta(self, value)


    def GetBeta(self) -> "double":
        """GetBeta(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetBeta(self)


    def SetGamma(self, value: 'double') -> "void":
        """SetGamma(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetGamma(self, value)


    def GetGamma(self) -> "double":
        """GetGamma(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetGamma(self)


    def SetEpsilon(self, value: 'double') -> "void":
        """SetEpsilon(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetEpsilon(self, value)


    def GetEpsilon(self) -> "double":
        """GetEpsilon(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetEpsilon(self)


    def SetOmega(self, value: 'double') -> "void":
        """SetOmega(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetOmega(self, value)


    def GetOmega(self) -> "double":
        """GetOmega(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOmega(self)


    def SetSensitivity(self, value: 'double') -> "void":
        """SetSensitivity(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetSensitivity(self, value)


    def GetSensitivity(self) -> "double":
        """GetSensitivity(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetSensitivity(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceTubesUsingDiffusionUS2 self, double value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceTubesUsingDiffusionUS2 self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetTimeStep(self)


    def SetIterations(self, value: 'unsigned int') -> "void":
        """SetIterations(tubeEnhanceTubesUsingDiffusionUS2 self, unsigned int value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetIterations(self, value)


    def GetIterations(self) -> "unsigned int":
        """GetIterations(tubeEnhanceTubesUsingDiffusionUS2 self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetIterations(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeEnhanceTubesUsingDiffusionUS2 self, itkImageUS2 value)"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetInput(self, value)


    def GetInput(self) -> "itkImageUS2 const *":
        """GetInput(tubeEnhanceTubesUsingDiffusionUS2 self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetInput(self)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeEnhanceTubesUsingDiffusionUS2 self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUS2

    def cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionUS2 *":
        """cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionUS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceTubesUsingDiffusionUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceTubesUsingDiffusionUS2.Clone = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_Clone, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMinSigma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetMinSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMinSigma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMaxSigma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetMaxSigma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMaxSigma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetNumSigmaSteps = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetNumSigmaSteps, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetRecalculateTubeness = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetRecalculateTubeness, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetBeta, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetBeta = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetBeta, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetGamma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetGamma = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetGamma, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetEpsilon, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetEpsilon = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetEpsilon, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetOmega, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetOmega = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOmega, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetSensitivity, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetSensitivity = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetSensitivity, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetTimeStep, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetTimeStep = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetTimeStep, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetIterations, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetIterations = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetIterations, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.SetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetInput, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetInput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetInput, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2.GetOutput = new_instancemethod(_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOutput, None, tubeEnhanceTubesUsingDiffusionUS2)
tubeEnhanceTubesUsingDiffusionUS2_swigregister = _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_swigregister
tubeEnhanceTubesUsingDiffusionUS2_swigregister(tubeEnhanceTubesUsingDiffusionUS2)

def tubeEnhanceTubesUsingDiffusionUS2___New_orig__() -> "tubeEnhanceTubesUsingDiffusionUS2_Pointer":
    """tubeEnhanceTubesUsingDiffusionUS2___New_orig__() -> tubeEnhanceTubesUsingDiffusionUS2_Pointer"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2___New_orig__()

def tubeEnhanceTubesUsingDiffusionUS2_cast(obj: 'itkLightObject') -> "tubeEnhanceTubesUsingDiffusionUS2 *":
    """tubeEnhanceTubesUsingDiffusionUS2_cast(itkLightObject obj) -> tubeEnhanceTubesUsingDiffusionUS2"""
    return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def enhance_tubes_using_diffusion(*args, **kwargs):
    """Procedural interface for EnhanceTubesUsingDiffusion"""
    import itk
    instance = itk.EnhanceTubesUsingDiffusion.New(*args, **kwargs)
    return instance.__internal_call__()

def enhance_tubes_using_diffusion_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.EnhanceTubesUsingDiffusion, itkTemplate.itkTemplate):
        filter_object = itk.EnhanceTubesUsingDiffusion.values()[0]
    else:
        filter_object = itk.EnhanceTubesUsingDiffusion

    enhance_tubes_using_diffusion.__doc__ = filter_object.__doc__
    enhance_tubes_using_diffusion.__doc__ += "\n Args are Input(s) to the filter.\n"
    enhance_tubes_using_diffusion.__doc__ += "Available Keyword Arguments:\n"
    enhance_tubes_using_diffusion.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



