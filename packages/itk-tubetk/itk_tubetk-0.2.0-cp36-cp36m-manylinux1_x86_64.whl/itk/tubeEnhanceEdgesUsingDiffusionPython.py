# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeEnhanceEdgesUsingDiffusionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeEnhanceEdgesUsingDiffusionPython', [dirname(__file__)])
        except ImportError:
            import _tubeEnhanceEdgesUsingDiffusionPython
            return _tubeEnhanceEdgesUsingDiffusionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeEnhanceEdgesUsingDiffusionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeEnhanceEdgesUsingDiffusionPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeEnhanceEdgesUsingDiffusionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import itkCovariantVectorPython
import vnl_vector_refPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkRGBAPixelPython
import ITKCommonBasePython
import itkImageRegionPython
import itkRGBPixelPython

def tubeEnhanceEdgesUsingDiffusionID3ID3_New():
  return tubeEnhanceEdgesUsingDiffusionID3ID3.New()


def tubeEnhanceEdgesUsingDiffusionIF3IF3_New():
  return tubeEnhanceEdgesUsingDiffusionIF3IF3.New()

class tubeEnhanceEdgesUsingDiffusionID3ID3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceEdgesUsingDiffusionID3ID3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer":
        """__New_orig__() -> tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer":
        """Clone(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_Clone(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeEnhanceEdgesUsingDiffusionID3ID3 self, itkImageD3 value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetInput(self, value)


    def GetInput(self) -> "itkImageD3 const *":
        """GetInput(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> itkImageD3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetInput(self)


    def SetSigma(self, value: 'double') -> "void":
        """SetSigma(tubeEnhanceEdgesUsingDiffusionID3ID3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetSigma(self, value)


    def GetSigma(self) -> "double":
        """GetSigma(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetSigma(self)


    def SetContrastParameterLambdaE(self, value: 'double') -> "void":
        """SetContrastParameterLambdaE(tubeEnhanceEdgesUsingDiffusionID3ID3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetContrastParameterLambdaE(self, value)


    def GetContrastParameterLambdaE(self) -> "double":
        """GetContrastParameterLambdaE(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetContrastParameterLambdaE(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceEdgesUsingDiffusionID3ID3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetTimeStep(self)


    def SetNumberOfIterations(self, value: 'unsigned long') -> "void":
        """SetNumberOfIterations(tubeEnhanceEdgesUsingDiffusionID3ID3 self, unsigned long value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetNumberOfIterations(self, value)


    def GetNumberOfIterations(self) -> "unsigned long":
        """GetNumberOfIterations(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> unsigned long"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetNumberOfIterations(self)


    def GetSigmaOuter(self) -> "double":
        """GetSigmaOuter(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetSigmaOuter(self)


    def GetThresholdParameterC(self) -> "double":
        """GetThresholdParameterC(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetThresholdParameterC(self)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeEnhanceEdgesUsingDiffusionID3ID3 self) -> itkImageD3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceEdgesUsingDiffusionPython.delete_tubeEnhanceEdgesUsingDiffusionID3ID3

    def cast(obj: 'itkLightObject') -> "tubeEnhanceEdgesUsingDiffusionID3ID3 *":
        """cast(itkLightObject obj) -> tubeEnhanceEdgesUsingDiffusionID3ID3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceEdgesUsingDiffusionID3ID3

        Create a new object of the class tubeEnhanceEdgesUsingDiffusionID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceEdgesUsingDiffusionID3ID3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceEdgesUsingDiffusionID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceEdgesUsingDiffusionID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceEdgesUsingDiffusionID3ID3.Clone = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_Clone, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.SetInput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetInput, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetInput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetInput, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.SetSigma = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetSigma, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetSigma = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetSigma, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.SetContrastParameterLambdaE = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetContrastParameterLambdaE, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetContrastParameterLambdaE = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetContrastParameterLambdaE, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.SetTimeStep = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetTimeStep, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetTimeStep = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetTimeStep, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.SetNumberOfIterations = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_SetNumberOfIterations, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetNumberOfIterations = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetNumberOfIterations, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetSigmaOuter = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetSigmaOuter, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetThresholdParameterC = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetThresholdParameterC, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3.GetOutput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_GetOutput, None, tubeEnhanceEdgesUsingDiffusionID3ID3)
tubeEnhanceEdgesUsingDiffusionID3ID3_swigregister = _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_swigregister
tubeEnhanceEdgesUsingDiffusionID3ID3_swigregister(tubeEnhanceEdgesUsingDiffusionID3ID3)

def tubeEnhanceEdgesUsingDiffusionID3ID3___New_orig__() -> "tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer":
    """tubeEnhanceEdgesUsingDiffusionID3ID3___New_orig__() -> tubeEnhanceEdgesUsingDiffusionID3ID3_Pointer"""
    return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3___New_orig__()

def tubeEnhanceEdgesUsingDiffusionID3ID3_cast(obj: 'itkLightObject') -> "tubeEnhanceEdgesUsingDiffusionID3ID3 *":
    """tubeEnhanceEdgesUsingDiffusionID3ID3_cast(itkLightObject obj) -> tubeEnhanceEdgesUsingDiffusionID3ID3"""
    return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionID3ID3_cast(obj)

class tubeEnhanceEdgesUsingDiffusionIF3IF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeEnhanceEdgesUsingDiffusionIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer":
        """__New_orig__() -> tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer":
        """Clone(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_Clone(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeEnhanceEdgesUsingDiffusionIF3IF3 self, itkImageF3 value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetInput(self, value)


    def GetInput(self) -> "itkImageF3 const *":
        """GetInput(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> itkImageF3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetInput(self)


    def SetSigma(self, value: 'double') -> "void":
        """SetSigma(tubeEnhanceEdgesUsingDiffusionIF3IF3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetSigma(self, value)


    def GetSigma(self) -> "double":
        """GetSigma(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetSigma(self)


    def SetContrastParameterLambdaE(self, value: 'double') -> "void":
        """SetContrastParameterLambdaE(tubeEnhanceEdgesUsingDiffusionIF3IF3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetContrastParameterLambdaE(self, value)


    def GetContrastParameterLambdaE(self) -> "double":
        """GetContrastParameterLambdaE(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetContrastParameterLambdaE(self)


    def SetTimeStep(self, value: 'double') -> "void":
        """SetTimeStep(tubeEnhanceEdgesUsingDiffusionIF3IF3 self, double value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetTimeStep(self, value)


    def GetTimeStep(self) -> "double":
        """GetTimeStep(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetTimeStep(self)


    def SetNumberOfIterations(self, value: 'unsigned long') -> "void":
        """SetNumberOfIterations(tubeEnhanceEdgesUsingDiffusionIF3IF3 self, unsigned long value)"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetNumberOfIterations(self, value)


    def GetNumberOfIterations(self) -> "unsigned long":
        """GetNumberOfIterations(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> unsigned long"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetNumberOfIterations(self)


    def GetSigmaOuter(self) -> "double":
        """GetSigmaOuter(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetSigmaOuter(self)


    def GetThresholdParameterC(self) -> "double":
        """GetThresholdParameterC(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> double"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetThresholdParameterC(self)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeEnhanceEdgesUsingDiffusionIF3IF3 self) -> itkImageF3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetOutput(self)

    __swig_destroy__ = _tubeEnhanceEdgesUsingDiffusionPython.delete_tubeEnhanceEdgesUsingDiffusionIF3IF3

    def cast(obj: 'itkLightObject') -> "tubeEnhanceEdgesUsingDiffusionIF3IF3 *":
        """cast(itkLightObject obj) -> tubeEnhanceEdgesUsingDiffusionIF3IF3"""
        return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeEnhanceEdgesUsingDiffusionIF3IF3

        Create a new object of the class tubeEnhanceEdgesUsingDiffusionIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceEdgesUsingDiffusionIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeEnhanceEdgesUsingDiffusionIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeEnhanceEdgesUsingDiffusionIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeEnhanceEdgesUsingDiffusionIF3IF3.Clone = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_Clone, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.SetInput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetInput, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetInput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetInput, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.SetSigma = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetSigma, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetSigma = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetSigma, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.SetContrastParameterLambdaE = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetContrastParameterLambdaE, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetContrastParameterLambdaE = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetContrastParameterLambdaE, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.SetTimeStep = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetTimeStep, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetTimeStep = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetTimeStep, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.SetNumberOfIterations = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_SetNumberOfIterations, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetNumberOfIterations = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetNumberOfIterations, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetSigmaOuter = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetSigmaOuter, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetThresholdParameterC = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetThresholdParameterC, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3.GetOutput = new_instancemethod(_tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_GetOutput, None, tubeEnhanceEdgesUsingDiffusionIF3IF3)
tubeEnhanceEdgesUsingDiffusionIF3IF3_swigregister = _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_swigregister
tubeEnhanceEdgesUsingDiffusionIF3IF3_swigregister(tubeEnhanceEdgesUsingDiffusionIF3IF3)

def tubeEnhanceEdgesUsingDiffusionIF3IF3___New_orig__() -> "tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer":
    """tubeEnhanceEdgesUsingDiffusionIF3IF3___New_orig__() -> tubeEnhanceEdgesUsingDiffusionIF3IF3_Pointer"""
    return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3___New_orig__()

def tubeEnhanceEdgesUsingDiffusionIF3IF3_cast(obj: 'itkLightObject') -> "tubeEnhanceEdgesUsingDiffusionIF3IF3 *":
    """tubeEnhanceEdgesUsingDiffusionIF3IF3_cast(itkLightObject obj) -> tubeEnhanceEdgesUsingDiffusionIF3IF3"""
    return _tubeEnhanceEdgesUsingDiffusionPython.tubeEnhanceEdgesUsingDiffusionIF3IF3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def enhance_edges_using_diffusion(*args, **kwargs):
    """Procedural interface for EnhanceEdgesUsingDiffusion"""
    import itk
    instance = itk.EnhanceEdgesUsingDiffusion.New(*args, **kwargs)
    return instance.__internal_call__()

def enhance_edges_using_diffusion_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.EnhanceEdgesUsingDiffusion, itkTemplate.itkTemplate):
        filter_object = itk.EnhanceEdgesUsingDiffusion.values()[0]
    else:
        filter_object = itk.EnhanceEdgesUsingDiffusion

    enhance_edges_using_diffusion.__doc__ = filter_object.__doc__
    enhance_edges_using_diffusion.__doc__ += "\n Args are Input(s) to the filter.\n"
    enhance_edges_using_diffusion.__doc__ += "Available Keyword Arguments:\n"
    enhance_edges_using_diffusion.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



