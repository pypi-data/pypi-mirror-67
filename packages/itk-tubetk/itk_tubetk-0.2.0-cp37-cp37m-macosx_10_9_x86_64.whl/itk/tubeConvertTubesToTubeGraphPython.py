# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeConvertTubesToTubeGraphPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeConvertTubesToTubeGraphPython', [dirname(__file__)])
        except ImportError:
            import _tubeConvertTubesToTubeGraphPython
            return _tubeConvertTubesToTubeGraphPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeConvertTubesToTubeGraphPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeConvertTubesToTubeGraphPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeConvertTubesToTubeGraphPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython
import itkGroupSpatialObjectPython
import itkSpatialObjectBasePython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkDiffusionTensor3DPython
import itkArray2DPython
import itkOptimizerParametersPython
import itkArrayPython
import itkVariableLengthVectorPython
import itkTransformBasePython
import itkBoundingBoxPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkMapContainerPython
import itkSpatialObjectPropertyPython

def tubeConvertTubesToTubeGraphD3_New():
  return tubeConvertTubesToTubeGraphD3.New()


def tubeConvertTubesToTubeGraphF3_New():
  return tubeConvertTubesToTubeGraphF3.New()


def tubeConvertTubesToTubeGraphUS3_New():
  return tubeConvertTubesToTubeGraphUS3.New()


def tubeConvertTubesToTubeGraphUC3_New():
  return tubeConvertTubesToTubeGraphUC3.New()


def tubeConvertTubesToTubeGraphSS3_New():
  return tubeConvertTubesToTubeGraphSS3.New()


def tubeConvertTubesToTubeGraphD2_New():
  return tubeConvertTubesToTubeGraphD2.New()


def tubeConvertTubesToTubeGraphF2_New():
  return tubeConvertTubesToTubeGraphF2.New()


def tubeConvertTubesToTubeGraphUS2_New():
  return tubeConvertTubesToTubeGraphUS2.New()


def tubeConvertTubesToTubeGraphUC2_New():
  return tubeConvertTubesToTubeGraphUC2.New()


def tubeConvertTubesToTubeGraphSS2_New():
  return tubeConvertTubesToTubeGraphSS2.New()

class tubeConvertTubesToTubeGraphD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphD2_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphD2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphD2_Pointer":
        """Clone(tubeConvertTubesToTubeGraphD2 self) -> tubeConvertTubesToTubeGraphD2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphD2 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphD2 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageD2') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphD2 self, itkImageD2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageD2 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphD2 self) -> itkImageD2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject2') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphD2 self, itkGroupSpatialObject2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject2 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphD2 self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphD2 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphD2 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphD2 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD2

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphD2 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphD2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD2

        Create a new object of the class tubeConvertTubesToTubeGraphD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphD2.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_Clone, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetCVTImage, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetCVTImage, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetRootNodes, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetBranchNodes, None, tubeConvertTubesToTubeGraphD2)
tubeConvertTubesToTubeGraphD2_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_swigregister
tubeConvertTubesToTubeGraphD2_swigregister(tubeConvertTubesToTubeGraphD2)

def tubeConvertTubesToTubeGraphD2___New_orig__() -> "tubeConvertTubesToTubeGraphD2_Pointer":
    """tubeConvertTubesToTubeGraphD2___New_orig__() -> tubeConvertTubesToTubeGraphD2_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2___New_orig__()

def tubeConvertTubesToTubeGraphD2_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphD2 *":
    """tubeConvertTubesToTubeGraphD2_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphD2"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_cast(obj)

class tubeConvertTubesToTubeGraphD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphD3_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphD3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphD3_Pointer":
        """Clone(tubeConvertTubesToTubeGraphD3 self) -> tubeConvertTubesToTubeGraphD3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphD3 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphD3 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageD3') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphD3 self, itkImageD3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageD3 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphD3 self) -> itkImageD3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject3') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphD3 self, itkGroupSpatialObject3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject3 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphD3 self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphD3 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphD3 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphD3 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD3

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphD3 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphD3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD3

        Create a new object of the class tubeConvertTubesToTubeGraphD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphD3.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_Clone, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetCVTImage, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetCVTImage, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetRootNodes, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetBranchNodes, None, tubeConvertTubesToTubeGraphD3)
tubeConvertTubesToTubeGraphD3_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_swigregister
tubeConvertTubesToTubeGraphD3_swigregister(tubeConvertTubesToTubeGraphD3)

def tubeConvertTubesToTubeGraphD3___New_orig__() -> "tubeConvertTubesToTubeGraphD3_Pointer":
    """tubeConvertTubesToTubeGraphD3___New_orig__() -> tubeConvertTubesToTubeGraphD3_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3___New_orig__()

def tubeConvertTubesToTubeGraphD3_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphD3 *":
    """tubeConvertTubesToTubeGraphD3_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphD3"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_cast(obj)

class tubeConvertTubesToTubeGraphF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphF2_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphF2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphF2_Pointer":
        """Clone(tubeConvertTubesToTubeGraphF2 self) -> tubeConvertTubesToTubeGraphF2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphF2 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphF2 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageF2') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphF2 self, itkImageF2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageF2 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphF2 self) -> itkImageF2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject2') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphF2 self, itkGroupSpatialObject2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject2 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphF2 self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphF2 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphF2 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphF2 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF2

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphF2 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphF2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF2

        Create a new object of the class tubeConvertTubesToTubeGraphF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphF2.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_Clone, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetCVTImage, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetCVTImage, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetRootNodes, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetBranchNodes, None, tubeConvertTubesToTubeGraphF2)
tubeConvertTubesToTubeGraphF2_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_swigregister
tubeConvertTubesToTubeGraphF2_swigregister(tubeConvertTubesToTubeGraphF2)

def tubeConvertTubesToTubeGraphF2___New_orig__() -> "tubeConvertTubesToTubeGraphF2_Pointer":
    """tubeConvertTubesToTubeGraphF2___New_orig__() -> tubeConvertTubesToTubeGraphF2_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2___New_orig__()

def tubeConvertTubesToTubeGraphF2_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphF2 *":
    """tubeConvertTubesToTubeGraphF2_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphF2"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_cast(obj)

class tubeConvertTubesToTubeGraphF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphF3_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphF3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphF3_Pointer":
        """Clone(tubeConvertTubesToTubeGraphF3 self) -> tubeConvertTubesToTubeGraphF3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphF3 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphF3 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageF3') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphF3 self, itkImageF3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageF3 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphF3 self) -> itkImageF3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject3') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphF3 self, itkGroupSpatialObject3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject3 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphF3 self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphF3 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphF3 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphF3 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF3

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphF3 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphF3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF3

        Create a new object of the class tubeConvertTubesToTubeGraphF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphF3.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_Clone, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetCVTImage, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetCVTImage, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetRootNodes, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetBranchNodes, None, tubeConvertTubesToTubeGraphF3)
tubeConvertTubesToTubeGraphF3_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_swigregister
tubeConvertTubesToTubeGraphF3_swigregister(tubeConvertTubesToTubeGraphF3)

def tubeConvertTubesToTubeGraphF3___New_orig__() -> "tubeConvertTubesToTubeGraphF3_Pointer":
    """tubeConvertTubesToTubeGraphF3___New_orig__() -> tubeConvertTubesToTubeGraphF3_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3___New_orig__()

def tubeConvertTubesToTubeGraphF3_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphF3 *":
    """tubeConvertTubesToTubeGraphF3_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphF3"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_cast(obj)

class tubeConvertTubesToTubeGraphSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphSS2_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphSS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphSS2_Pointer":
        """Clone(tubeConvertTubesToTubeGraphSS2 self) -> tubeConvertTubesToTubeGraphSS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphSS2 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphSS2 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageSS2') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphSS2 self, itkImageSS2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageSS2 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphSS2 self) -> itkImageSS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject2') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphSS2 self, itkGroupSpatialObject2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject2 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphSS2 self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphSS2 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphSS2 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphSS2 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS2

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphSS2 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphSS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS2

        Create a new object of the class tubeConvertTubesToTubeGraphSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphSS2.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_Clone, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetCVTImage, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetCVTImage, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetRootNodes, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetBranchNodes, None, tubeConvertTubesToTubeGraphSS2)
tubeConvertTubesToTubeGraphSS2_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_swigregister
tubeConvertTubesToTubeGraphSS2_swigregister(tubeConvertTubesToTubeGraphSS2)

def tubeConvertTubesToTubeGraphSS2___New_orig__() -> "tubeConvertTubesToTubeGraphSS2_Pointer":
    """tubeConvertTubesToTubeGraphSS2___New_orig__() -> tubeConvertTubesToTubeGraphSS2_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2___New_orig__()

def tubeConvertTubesToTubeGraphSS2_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphSS2 *":
    """tubeConvertTubesToTubeGraphSS2_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphSS2"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_cast(obj)

class tubeConvertTubesToTubeGraphSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphSS3_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphSS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphSS3_Pointer":
        """Clone(tubeConvertTubesToTubeGraphSS3 self) -> tubeConvertTubesToTubeGraphSS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphSS3 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphSS3 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageSS3') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphSS3 self, itkImageSS3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageSS3 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphSS3 self) -> itkImageSS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject3') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphSS3 self, itkGroupSpatialObject3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject3 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphSS3 self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphSS3 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphSS3 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphSS3 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS3

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphSS3 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphSS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS3

        Create a new object of the class tubeConvertTubesToTubeGraphSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphSS3.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_Clone, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetCVTImage, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetCVTImage, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetRootNodes, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetBranchNodes, None, tubeConvertTubesToTubeGraphSS3)
tubeConvertTubesToTubeGraphSS3_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_swigregister
tubeConvertTubesToTubeGraphSS3_swigregister(tubeConvertTubesToTubeGraphSS3)

def tubeConvertTubesToTubeGraphSS3___New_orig__() -> "tubeConvertTubesToTubeGraphSS3_Pointer":
    """tubeConvertTubesToTubeGraphSS3___New_orig__() -> tubeConvertTubesToTubeGraphSS3_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3___New_orig__()

def tubeConvertTubesToTubeGraphSS3_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphSS3 *":
    """tubeConvertTubesToTubeGraphSS3_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphSS3"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_cast(obj)

class tubeConvertTubesToTubeGraphUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphUC2_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphUC2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphUC2_Pointer":
        """Clone(tubeConvertTubesToTubeGraphUC2 self) -> tubeConvertTubesToTubeGraphUC2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphUC2 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphUC2 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageUC2') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphUC2 self, itkImageUC2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageUC2 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphUC2 self) -> itkImageUC2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject2') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphUC2 self, itkGroupSpatialObject2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject2 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphUC2 self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphUC2 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphUC2 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphUC2 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC2

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUC2 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUC2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC2

        Create a new object of the class tubeConvertTubesToTubeGraphUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphUC2.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_Clone, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetCVTImage, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetCVTImage, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetRootNodes, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetBranchNodes, None, tubeConvertTubesToTubeGraphUC2)
tubeConvertTubesToTubeGraphUC2_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_swigregister
tubeConvertTubesToTubeGraphUC2_swigregister(tubeConvertTubesToTubeGraphUC2)

def tubeConvertTubesToTubeGraphUC2___New_orig__() -> "tubeConvertTubesToTubeGraphUC2_Pointer":
    """tubeConvertTubesToTubeGraphUC2___New_orig__() -> tubeConvertTubesToTubeGraphUC2_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2___New_orig__()

def tubeConvertTubesToTubeGraphUC2_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUC2 *":
    """tubeConvertTubesToTubeGraphUC2_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUC2"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_cast(obj)

class tubeConvertTubesToTubeGraphUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphUC3_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphUC3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphUC3_Pointer":
        """Clone(tubeConvertTubesToTubeGraphUC3 self) -> tubeConvertTubesToTubeGraphUC3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphUC3 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphUC3 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageUC3') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphUC3 self, itkImageUC3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageUC3 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphUC3 self) -> itkImageUC3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject3') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphUC3 self, itkGroupSpatialObject3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject3 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphUC3 self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphUC3 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphUC3 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphUC3 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC3

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUC3 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUC3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC3

        Create a new object of the class tubeConvertTubesToTubeGraphUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphUC3.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_Clone, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetCVTImage, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetCVTImage, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetRootNodes, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetBranchNodes, None, tubeConvertTubesToTubeGraphUC3)
tubeConvertTubesToTubeGraphUC3_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_swigregister
tubeConvertTubesToTubeGraphUC3_swigregister(tubeConvertTubesToTubeGraphUC3)

def tubeConvertTubesToTubeGraphUC3___New_orig__() -> "tubeConvertTubesToTubeGraphUC3_Pointer":
    """tubeConvertTubesToTubeGraphUC3___New_orig__() -> tubeConvertTubesToTubeGraphUC3_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3___New_orig__()

def tubeConvertTubesToTubeGraphUC3_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUC3 *":
    """tubeConvertTubesToTubeGraphUC3_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUC3"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_cast(obj)

class tubeConvertTubesToTubeGraphUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphUS2_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphUS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphUS2_Pointer":
        """Clone(tubeConvertTubesToTubeGraphUS2 self) -> tubeConvertTubesToTubeGraphUS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphUS2 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphUS2 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageUS2') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphUS2 self, itkImageUS2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageUS2 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphUS2 self) -> itkImageUS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject2') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphUS2 self, itkGroupSpatialObject2 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject2 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphUS2 self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphUS2 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphUS2 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphUS2 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS2

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUS2 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS2

        Create a new object of the class tubeConvertTubesToTubeGraphUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphUS2.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_Clone, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetCVTImage, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetCVTImage, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetRootNodes, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetBranchNodes, None, tubeConvertTubesToTubeGraphUS2)
tubeConvertTubesToTubeGraphUS2_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_swigregister
tubeConvertTubesToTubeGraphUS2_swigregister(tubeConvertTubesToTubeGraphUS2)

def tubeConvertTubesToTubeGraphUS2___New_orig__() -> "tubeConvertTubesToTubeGraphUS2_Pointer":
    """tubeConvertTubesToTubeGraphUS2___New_orig__() -> tubeConvertTubesToTubeGraphUS2_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2___New_orig__()

def tubeConvertTubesToTubeGraphUS2_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUS2 *":
    """tubeConvertTubesToTubeGraphUS2_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUS2"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_cast(obj)

class tubeConvertTubesToTubeGraphUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeConvertTubesToTubeGraphUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeConvertTubesToTubeGraphUS3_Pointer":
        """__New_orig__() -> tubeConvertTubesToTubeGraphUS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeConvertTubesToTubeGraphUS3_Pointer":
        """Clone(tubeConvertTubesToTubeGraphUS3 self) -> tubeConvertTubesToTubeGraphUS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_Clone(self)


    def SetNumberOfCenteroids(self, value: 'int') -> "void":
        """SetNumberOfCenteroids(tubeConvertTubesToTubeGraphUS3 self, int value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetNumberOfCenteroids(self, value)


    def GetNumberOfCenteroids(self) -> "int":
        """GetNumberOfCenteroids(tubeConvertTubesToTubeGraphUS3 self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetNumberOfCenteroids(self)


    def SetCVTImage(self, value: 'itkImageUS3') -> "void":
        """SetCVTImage(tubeConvertTubesToTubeGraphUS3 self, itkImageUS3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetCVTImage(self, value)


    def GetCVTImage(self) -> "itkImageUS3 *":
        """GetCVTImage(tubeConvertTubesToTubeGraphUS3 self) -> itkImageUS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetCVTImage(self)


    def SetInputTubeGroup(self, value: 'itkGroupSpatialObject3') -> "void":
        """SetInputTubeGroup(tubeConvertTubesToTubeGraphUS3 self, itkGroupSpatialObject3 value)"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetInputTubeGroup(self, value)


    def GetInputTubeGroup(self) -> "itkGroupSpatialObject3 *":
        """GetInputTubeGroup(tubeConvertTubesToTubeGraphUS3 self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetInputTubeGroup(self)


    def GetAdjacencyMatrix(self) -> "vnl_matrixD":
        """GetAdjacencyMatrix(tubeConvertTubesToTubeGraphUS3 self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetAdjacencyMatrix(self)


    def GetRootNodes(self) -> "vnl_vectorSI":
        """GetRootNodes(tubeConvertTubesToTubeGraphUS3 self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetRootNodes(self)


    def GetBranchNodes(self) -> "vnl_vectorD":
        """GetBranchNodes(tubeConvertTubesToTubeGraphUS3 self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetBranchNodes(self)

    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS3

    def cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUS3 *":
        """cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS3

        Create a new object of the class tubeConvertTubesToTubeGraphUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeConvertTubesToTubeGraphUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeConvertTubesToTubeGraphUS3.Clone = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_Clone, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.SetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetNumberOfCenteroids = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetNumberOfCenteroids, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.SetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetCVTImage, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetCVTImage = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetCVTImage, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.SetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetInputTubeGroup, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetInputTubeGroup = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetInputTubeGroup, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetAdjacencyMatrix = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetAdjacencyMatrix, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetRootNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetRootNodes, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3.GetBranchNodes = new_instancemethod(_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetBranchNodes, None, tubeConvertTubesToTubeGraphUS3)
tubeConvertTubesToTubeGraphUS3_swigregister = _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_swigregister
tubeConvertTubesToTubeGraphUS3_swigregister(tubeConvertTubesToTubeGraphUS3)

def tubeConvertTubesToTubeGraphUS3___New_orig__() -> "tubeConvertTubesToTubeGraphUS3_Pointer":
    """tubeConvertTubesToTubeGraphUS3___New_orig__() -> tubeConvertTubesToTubeGraphUS3_Pointer"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3___New_orig__()

def tubeConvertTubesToTubeGraphUS3_cast(obj: 'itkLightObject') -> "tubeConvertTubesToTubeGraphUS3 *":
    """tubeConvertTubesToTubeGraphUS3_cast(itkLightObject obj) -> tubeConvertTubesToTubeGraphUS3"""
    return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def convert_tubes_to_tube_graph(*args, **kwargs):
    """Procedural interface for ConvertTubesToTubeGraph"""
    import itk
    instance = itk.ConvertTubesToTubeGraph.New(*args, **kwargs)
    return instance.__internal_call__()

def convert_tubes_to_tube_graph_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConvertTubesToTubeGraph, itkTemplate.itkTemplate):
        filter_object = itk.ConvertTubesToTubeGraph.values()[0]
    else:
        filter_object = itk.ConvertTubesToTubeGraph

    convert_tubes_to_tube_graph.__doc__ = filter_object.__doc__
    convert_tubes_to_tube_graph.__doc__ += "\n Args are Input(s) to the filter.\n"
    convert_tubes_to_tube_graph.__doc__ += "Available Keyword Arguments:\n"
    convert_tubes_to_tube_graph.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



