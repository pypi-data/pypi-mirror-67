# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeComputeTubeMeasuresPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeComputeTubeMeasuresPython', [dirname(__file__)])
        except ImportError:
            import _tubeComputeTubeMeasuresPython
            return _tubeComputeTubeMeasuresPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeComputeTubeMeasuresPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeComputeTubeMeasuresPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeComputeTubeMeasuresPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkRGBPixelPython

def tubeComputeTubeMeasuresD3_New():
  return tubeComputeTubeMeasuresD3.New()


def tubeComputeTubeMeasuresD2_New():
  return tubeComputeTubeMeasuresD2.New()


def tubeComputeTubeMeasuresF3_New():
  return tubeComputeTubeMeasuresF3.New()


def tubeComputeTubeMeasuresF2_New():
  return tubeComputeTubeMeasuresF2.New()


def tubeComputeTubeMeasuresUS3_New():
  return tubeComputeTubeMeasuresUS3.New()


def tubeComputeTubeMeasuresUS2_New():
  return tubeComputeTubeMeasuresUS2.New()


def tubeComputeTubeMeasuresUC3_New():
  return tubeComputeTubeMeasuresUC3.New()


def tubeComputeTubeMeasuresUC2_New():
  return tubeComputeTubeMeasuresUC2.New()


def tubeComputeTubeMeasuresSS3_New():
  return tubeComputeTubeMeasuresSS3.New()


def tubeComputeTubeMeasuresSS2_New():
  return tubeComputeTubeMeasuresSS2.New()

class tubeComputeTubeMeasuresD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresD2_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresD2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresD2_Pointer":
        """Clone(tubeComputeTubeMeasuresD2 self) -> tubeComputeTubeMeasuresD2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresD2 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresD2 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetScale(self)


    def SetInputImage(self, value: 'itkImageD2') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresD2 self, itkImageD2 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageD2 const *":
        """GetInputImage(tubeComputeTubeMeasuresD2 self) -> itkImageD2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF2 *":
        """GetRidgeness(tubeComputeTubeMeasuresD2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF2 *":
        """GetRoundness(tubeComputeTubeMeasuresD2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF2 *":
        """GetCurvature(tubeComputeTubeMeasuresD2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF2 *":
        """GetLevelness(tubeComputeTubeMeasuresD2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresD2 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresD2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD2

        Create a new object of the class tubeComputeTubeMeasuresD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresD2.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_Clone, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetScale, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetScale, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetInputImage, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetInputImage, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRidgeness, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRoundness, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetCurvature, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetLevelness, None, tubeComputeTubeMeasuresD2)
tubeComputeTubeMeasuresD2_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_swigregister
tubeComputeTubeMeasuresD2_swigregister(tubeComputeTubeMeasuresD2)

def tubeComputeTubeMeasuresD2___New_orig__() -> "tubeComputeTubeMeasuresD2_Pointer":
    """tubeComputeTubeMeasuresD2___New_orig__() -> tubeComputeTubeMeasuresD2_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2___New_orig__()

def tubeComputeTubeMeasuresD2_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresD2 *":
    """tubeComputeTubeMeasuresD2_cast(itkLightObject obj) -> tubeComputeTubeMeasuresD2"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_cast(obj)

class tubeComputeTubeMeasuresD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresD3_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresD3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresD3_Pointer":
        """Clone(tubeComputeTubeMeasuresD3 self) -> tubeComputeTubeMeasuresD3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresD3 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresD3 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetScale(self)


    def SetInputImage(self, value: 'itkImageD3') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresD3 self, itkImageD3 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageD3 const *":
        """GetInputImage(tubeComputeTubeMeasuresD3 self) -> itkImageD3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF3 *":
        """GetRidgeness(tubeComputeTubeMeasuresD3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF3 *":
        """GetRoundness(tubeComputeTubeMeasuresD3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF3 *":
        """GetCurvature(tubeComputeTubeMeasuresD3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF3 *":
        """GetLevelness(tubeComputeTubeMeasuresD3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresD3 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresD3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD3

        Create a new object of the class tubeComputeTubeMeasuresD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresD3.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_Clone, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetScale, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetScale, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetInputImage, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetInputImage, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRidgeness, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRoundness, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetCurvature, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetLevelness, None, tubeComputeTubeMeasuresD3)
tubeComputeTubeMeasuresD3_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_swigregister
tubeComputeTubeMeasuresD3_swigregister(tubeComputeTubeMeasuresD3)

def tubeComputeTubeMeasuresD3___New_orig__() -> "tubeComputeTubeMeasuresD3_Pointer":
    """tubeComputeTubeMeasuresD3___New_orig__() -> tubeComputeTubeMeasuresD3_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3___New_orig__()

def tubeComputeTubeMeasuresD3_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresD3 *":
    """tubeComputeTubeMeasuresD3_cast(itkLightObject obj) -> tubeComputeTubeMeasuresD3"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_cast(obj)

class tubeComputeTubeMeasuresF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresF2_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresF2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresF2_Pointer":
        """Clone(tubeComputeTubeMeasuresF2 self) -> tubeComputeTubeMeasuresF2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresF2 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresF2 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetScale(self)


    def SetInputImage(self, value: 'itkImageF2') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresF2 self, itkImageF2 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageF2 const *":
        """GetInputImage(tubeComputeTubeMeasuresF2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF2 *":
        """GetRidgeness(tubeComputeTubeMeasuresF2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF2 *":
        """GetRoundness(tubeComputeTubeMeasuresF2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF2 *":
        """GetCurvature(tubeComputeTubeMeasuresF2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF2 *":
        """GetLevelness(tubeComputeTubeMeasuresF2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresF2 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF2

        Create a new object of the class tubeComputeTubeMeasuresF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresF2.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_Clone, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetScale, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetScale, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetInputImage, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetInputImage, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRidgeness, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRoundness, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetCurvature, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetLevelness, None, tubeComputeTubeMeasuresF2)
tubeComputeTubeMeasuresF2_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_swigregister
tubeComputeTubeMeasuresF2_swigregister(tubeComputeTubeMeasuresF2)

def tubeComputeTubeMeasuresF2___New_orig__() -> "tubeComputeTubeMeasuresF2_Pointer":
    """tubeComputeTubeMeasuresF2___New_orig__() -> tubeComputeTubeMeasuresF2_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2___New_orig__()

def tubeComputeTubeMeasuresF2_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresF2 *":
    """tubeComputeTubeMeasuresF2_cast(itkLightObject obj) -> tubeComputeTubeMeasuresF2"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_cast(obj)

class tubeComputeTubeMeasuresF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresF3_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresF3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresF3_Pointer":
        """Clone(tubeComputeTubeMeasuresF3 self) -> tubeComputeTubeMeasuresF3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresF3 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresF3 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetScale(self)


    def SetInputImage(self, value: 'itkImageF3') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresF3 self, itkImageF3 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageF3 const *":
        """GetInputImage(tubeComputeTubeMeasuresF3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF3 *":
        """GetRidgeness(tubeComputeTubeMeasuresF3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF3 *":
        """GetRoundness(tubeComputeTubeMeasuresF3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF3 *":
        """GetCurvature(tubeComputeTubeMeasuresF3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF3 *":
        """GetLevelness(tubeComputeTubeMeasuresF3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresF3 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF3

        Create a new object of the class tubeComputeTubeMeasuresF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresF3.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_Clone, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetScale, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetScale, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetInputImage, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetInputImage, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRidgeness, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRoundness, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetCurvature, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetLevelness, None, tubeComputeTubeMeasuresF3)
tubeComputeTubeMeasuresF3_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_swigregister
tubeComputeTubeMeasuresF3_swigregister(tubeComputeTubeMeasuresF3)

def tubeComputeTubeMeasuresF3___New_orig__() -> "tubeComputeTubeMeasuresF3_Pointer":
    """tubeComputeTubeMeasuresF3___New_orig__() -> tubeComputeTubeMeasuresF3_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3___New_orig__()

def tubeComputeTubeMeasuresF3_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresF3 *":
    """tubeComputeTubeMeasuresF3_cast(itkLightObject obj) -> tubeComputeTubeMeasuresF3"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_cast(obj)

class tubeComputeTubeMeasuresSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresSS2_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresSS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresSS2_Pointer":
        """Clone(tubeComputeTubeMeasuresSS2 self) -> tubeComputeTubeMeasuresSS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresSS2 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresSS2 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetScale(self)


    def SetInputImage(self, value: 'itkImageSS2') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresSS2 self, itkImageSS2 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageSS2 const *":
        """GetInputImage(tubeComputeTubeMeasuresSS2 self) -> itkImageSS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF2 *":
        """GetRidgeness(tubeComputeTubeMeasuresSS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF2 *":
        """GetRoundness(tubeComputeTubeMeasuresSS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF2 *":
        """GetCurvature(tubeComputeTubeMeasuresSS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF2 *":
        """GetLevelness(tubeComputeTubeMeasuresSS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresSS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS2

        Create a new object of the class tubeComputeTubeMeasuresSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresSS2.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_Clone, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetScale, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetScale, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetInputImage, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetInputImage, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRidgeness, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRoundness, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetCurvature, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetLevelness, None, tubeComputeTubeMeasuresSS2)
tubeComputeTubeMeasuresSS2_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_swigregister
tubeComputeTubeMeasuresSS2_swigregister(tubeComputeTubeMeasuresSS2)

def tubeComputeTubeMeasuresSS2___New_orig__() -> "tubeComputeTubeMeasuresSS2_Pointer":
    """tubeComputeTubeMeasuresSS2___New_orig__() -> tubeComputeTubeMeasuresSS2_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2___New_orig__()

def tubeComputeTubeMeasuresSS2_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresSS2 *":
    """tubeComputeTubeMeasuresSS2_cast(itkLightObject obj) -> tubeComputeTubeMeasuresSS2"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_cast(obj)

class tubeComputeTubeMeasuresSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresSS3_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresSS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresSS3_Pointer":
        """Clone(tubeComputeTubeMeasuresSS3 self) -> tubeComputeTubeMeasuresSS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresSS3 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresSS3 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetScale(self)


    def SetInputImage(self, value: 'itkImageSS3') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresSS3 self, itkImageSS3 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageSS3 const *":
        """GetInputImage(tubeComputeTubeMeasuresSS3 self) -> itkImageSS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF3 *":
        """GetRidgeness(tubeComputeTubeMeasuresSS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF3 *":
        """GetRoundness(tubeComputeTubeMeasuresSS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF3 *":
        """GetCurvature(tubeComputeTubeMeasuresSS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF3 *":
        """GetLevelness(tubeComputeTubeMeasuresSS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresSS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS3

        Create a new object of the class tubeComputeTubeMeasuresSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresSS3.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_Clone, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetScale, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetScale, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetInputImage, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetInputImage, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRidgeness, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRoundness, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetCurvature, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetLevelness, None, tubeComputeTubeMeasuresSS3)
tubeComputeTubeMeasuresSS3_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_swigregister
tubeComputeTubeMeasuresSS3_swigregister(tubeComputeTubeMeasuresSS3)

def tubeComputeTubeMeasuresSS3___New_orig__() -> "tubeComputeTubeMeasuresSS3_Pointer":
    """tubeComputeTubeMeasuresSS3___New_orig__() -> tubeComputeTubeMeasuresSS3_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3___New_orig__()

def tubeComputeTubeMeasuresSS3_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresSS3 *":
    """tubeComputeTubeMeasuresSS3_cast(itkLightObject obj) -> tubeComputeTubeMeasuresSS3"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_cast(obj)

class tubeComputeTubeMeasuresUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresUC2_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresUC2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresUC2_Pointer":
        """Clone(tubeComputeTubeMeasuresUC2 self) -> tubeComputeTubeMeasuresUC2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresUC2 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresUC2 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetScale(self)


    def SetInputImage(self, value: 'itkImageUC2') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresUC2 self, itkImageUC2 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageUC2 const *":
        """GetInputImage(tubeComputeTubeMeasuresUC2 self) -> itkImageUC2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF2 *":
        """GetRidgeness(tubeComputeTubeMeasuresUC2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF2 *":
        """GetRoundness(tubeComputeTubeMeasuresUC2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF2 *":
        """GetCurvature(tubeComputeTubeMeasuresUC2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF2 *":
        """GetLevelness(tubeComputeTubeMeasuresUC2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresUC2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC2

        Create a new object of the class tubeComputeTubeMeasuresUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresUC2.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_Clone, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetScale, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetScale, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetInputImage, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetInputImage, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRidgeness, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRoundness, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetCurvature, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetLevelness, None, tubeComputeTubeMeasuresUC2)
tubeComputeTubeMeasuresUC2_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_swigregister
tubeComputeTubeMeasuresUC2_swigregister(tubeComputeTubeMeasuresUC2)

def tubeComputeTubeMeasuresUC2___New_orig__() -> "tubeComputeTubeMeasuresUC2_Pointer":
    """tubeComputeTubeMeasuresUC2___New_orig__() -> tubeComputeTubeMeasuresUC2_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2___New_orig__()

def tubeComputeTubeMeasuresUC2_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUC2 *":
    """tubeComputeTubeMeasuresUC2_cast(itkLightObject obj) -> tubeComputeTubeMeasuresUC2"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_cast(obj)

class tubeComputeTubeMeasuresUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresUC3_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresUC3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresUC3_Pointer":
        """Clone(tubeComputeTubeMeasuresUC3 self) -> tubeComputeTubeMeasuresUC3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresUC3 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresUC3 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetScale(self)


    def SetInputImage(self, value: 'itkImageUC3') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresUC3 self, itkImageUC3 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageUC3 const *":
        """GetInputImage(tubeComputeTubeMeasuresUC3 self) -> itkImageUC3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF3 *":
        """GetRidgeness(tubeComputeTubeMeasuresUC3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF3 *":
        """GetRoundness(tubeComputeTubeMeasuresUC3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF3 *":
        """GetCurvature(tubeComputeTubeMeasuresUC3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF3 *":
        """GetLevelness(tubeComputeTubeMeasuresUC3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresUC3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC3

        Create a new object of the class tubeComputeTubeMeasuresUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresUC3.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_Clone, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetScale, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetScale, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetInputImage, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetInputImage, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRidgeness, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRoundness, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetCurvature, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetLevelness, None, tubeComputeTubeMeasuresUC3)
tubeComputeTubeMeasuresUC3_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_swigregister
tubeComputeTubeMeasuresUC3_swigregister(tubeComputeTubeMeasuresUC3)

def tubeComputeTubeMeasuresUC3___New_orig__() -> "tubeComputeTubeMeasuresUC3_Pointer":
    """tubeComputeTubeMeasuresUC3___New_orig__() -> tubeComputeTubeMeasuresUC3_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3___New_orig__()

def tubeComputeTubeMeasuresUC3_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUC3 *":
    """tubeComputeTubeMeasuresUC3_cast(itkLightObject obj) -> tubeComputeTubeMeasuresUC3"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_cast(obj)

class tubeComputeTubeMeasuresUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresUS2_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresUS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresUS2_Pointer":
        """Clone(tubeComputeTubeMeasuresUS2 self) -> tubeComputeTubeMeasuresUS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresUS2 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresUS2 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetScale(self)


    def SetInputImage(self, value: 'itkImageUS2') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresUS2 self, itkImageUS2 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageUS2 const *":
        """GetInputImage(tubeComputeTubeMeasuresUS2 self) -> itkImageUS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF2 *":
        """GetRidgeness(tubeComputeTubeMeasuresUS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF2 *":
        """GetRoundness(tubeComputeTubeMeasuresUS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF2 *":
        """GetCurvature(tubeComputeTubeMeasuresUS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF2 *":
        """GetLevelness(tubeComputeTubeMeasuresUS2 self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresUS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS2

        Create a new object of the class tubeComputeTubeMeasuresUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresUS2.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_Clone, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetScale, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetScale, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetInputImage, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetInputImage, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRidgeness, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRoundness, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetCurvature, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetLevelness, None, tubeComputeTubeMeasuresUS2)
tubeComputeTubeMeasuresUS2_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_swigregister
tubeComputeTubeMeasuresUS2_swigregister(tubeComputeTubeMeasuresUS2)

def tubeComputeTubeMeasuresUS2___New_orig__() -> "tubeComputeTubeMeasuresUS2_Pointer":
    """tubeComputeTubeMeasuresUS2___New_orig__() -> tubeComputeTubeMeasuresUS2_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2___New_orig__()

def tubeComputeTubeMeasuresUS2_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUS2 *":
    """tubeComputeTubeMeasuresUS2_cast(itkLightObject obj) -> tubeComputeTubeMeasuresUS2"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_cast(obj)

class tubeComputeTubeMeasuresUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTubeMeasuresUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTubeMeasuresUS3_Pointer":
        """__New_orig__() -> tubeComputeTubeMeasuresUS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTubeMeasuresUS3_Pointer":
        """Clone(tubeComputeTubeMeasuresUS3 self) -> tubeComputeTubeMeasuresUS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_Clone(self)


    def SetScale(self, value: 'int') -> "void":
        """SetScale(tubeComputeTubeMeasuresUS3 self, int value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetScale(self, value)


    def GetScale(self) -> "int":
        """GetScale(tubeComputeTubeMeasuresUS3 self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetScale(self)


    def SetInputImage(self, value: 'itkImageUS3') -> "void":
        """SetInputImage(tubeComputeTubeMeasuresUS3 self, itkImageUS3 value)"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetInputImage(self, value)


    def GetInputImage(self) -> "itkImageUS3 const *":
        """GetInputImage(tubeComputeTubeMeasuresUS3 self) -> itkImageUS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetInputImage(self)


    def GetRidgeness(self) -> "itkImageF3 *":
        """GetRidgeness(tubeComputeTubeMeasuresUS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRidgeness(self)


    def GetRoundness(self) -> "itkImageF3 *":
        """GetRoundness(tubeComputeTubeMeasuresUS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRoundness(self)


    def GetCurvature(self) -> "itkImageF3 *":
        """GetCurvature(tubeComputeTubeMeasuresUS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetCurvature(self)


    def GetLevelness(self) -> "itkImageF3 *":
        """GetLevelness(tubeComputeTubeMeasuresUS3 self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetLevelness(self)

    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTubeMeasuresUS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS3

        Create a new object of the class tubeComputeTubeMeasuresUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTubeMeasuresUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTubeMeasuresUS3.Clone = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_Clone, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.SetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetScale, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetScale = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetScale, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.SetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetInputImage, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetInputImage = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetInputImage, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetRidgeness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRidgeness, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetRoundness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRoundness, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetCurvature = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetCurvature, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3.GetLevelness = new_instancemethod(_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetLevelness, None, tubeComputeTubeMeasuresUS3)
tubeComputeTubeMeasuresUS3_swigregister = _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_swigregister
tubeComputeTubeMeasuresUS3_swigregister(tubeComputeTubeMeasuresUS3)

def tubeComputeTubeMeasuresUS3___New_orig__() -> "tubeComputeTubeMeasuresUS3_Pointer":
    """tubeComputeTubeMeasuresUS3___New_orig__() -> tubeComputeTubeMeasuresUS3_Pointer"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3___New_orig__()

def tubeComputeTubeMeasuresUS3_cast(obj: 'itkLightObject') -> "tubeComputeTubeMeasuresUS3 *":
    """tubeComputeTubeMeasuresUS3_cast(itkLightObject obj) -> tubeComputeTubeMeasuresUS3"""
    return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_tube_measures(*args, **kwargs):
    """Procedural interface for ComputeTubeMeasures"""
    import itk
    instance = itk.ComputeTubeMeasures.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_tube_measures_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeTubeMeasures, itkTemplate.itkTemplate):
        filter_object = itk.ComputeTubeMeasures.values()[0]
    else:
        filter_object = itk.ComputeTubeMeasures

    compute_tube_measures.__doc__ = filter_object.__doc__
    compute_tube_measures.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_tube_measures.__doc__ += "Available Keyword Arguments:\n"
    compute_tube_measures.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



