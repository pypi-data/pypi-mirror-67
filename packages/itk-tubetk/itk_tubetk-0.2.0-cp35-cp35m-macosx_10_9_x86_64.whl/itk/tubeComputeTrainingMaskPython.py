# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeComputeTrainingMaskPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeComputeTrainingMaskPython', [dirname(__file__)])
        except ImportError:
            import _tubeComputeTrainingMaskPython
            return _tubeComputeTrainingMaskPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeComputeTrainingMaskPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeComputeTrainingMaskPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeComputeTrainingMaskPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkImageRegionPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkRGBAPixelPython
import itkFixedArrayPython
import stdcomplexPython
import itkRGBPixelPython
import itkMatrixPython
import vnl_matrix_fixedPython
import vnl_matrixPython
import vnl_vectorPython
import itkVectorPython
import vnl_vector_refPython
import itkCovariantVectorPython
import itkPointPython
import itkSymmetricSecondRankTensorPython

def tubeComputeTrainingMaskDD3_New():
  return tubeComputeTrainingMaskDD3.New()


def tubeComputeTrainingMaskDF3_New():
  return tubeComputeTrainingMaskDF3.New()


def tubeComputeTrainingMaskDUS3_New():
  return tubeComputeTrainingMaskDUS3.New()


def tubeComputeTrainingMaskDUC3_New():
  return tubeComputeTrainingMaskDUC3.New()


def tubeComputeTrainingMaskDSS3_New():
  return tubeComputeTrainingMaskDSS3.New()


def tubeComputeTrainingMaskFD3_New():
  return tubeComputeTrainingMaskFD3.New()


def tubeComputeTrainingMaskFF3_New():
  return tubeComputeTrainingMaskFF3.New()


def tubeComputeTrainingMaskFUS3_New():
  return tubeComputeTrainingMaskFUS3.New()


def tubeComputeTrainingMaskFUC3_New():
  return tubeComputeTrainingMaskFUC3.New()


def tubeComputeTrainingMaskFSS3_New():
  return tubeComputeTrainingMaskFSS3.New()


def tubeComputeTrainingMaskUSD3_New():
  return tubeComputeTrainingMaskUSD3.New()


def tubeComputeTrainingMaskUSF3_New():
  return tubeComputeTrainingMaskUSF3.New()


def tubeComputeTrainingMaskUSUS3_New():
  return tubeComputeTrainingMaskUSUS3.New()


def tubeComputeTrainingMaskUSUC3_New():
  return tubeComputeTrainingMaskUSUC3.New()


def tubeComputeTrainingMaskUSSS3_New():
  return tubeComputeTrainingMaskUSSS3.New()


def tubeComputeTrainingMaskUCD3_New():
  return tubeComputeTrainingMaskUCD3.New()


def tubeComputeTrainingMaskUCF3_New():
  return tubeComputeTrainingMaskUCF3.New()


def tubeComputeTrainingMaskUCUS3_New():
  return tubeComputeTrainingMaskUCUS3.New()


def tubeComputeTrainingMaskUCUC3_New():
  return tubeComputeTrainingMaskUCUC3.New()


def tubeComputeTrainingMaskUCSS3_New():
  return tubeComputeTrainingMaskUCSS3.New()


def tubeComputeTrainingMaskSSD3_New():
  return tubeComputeTrainingMaskSSD3.New()


def tubeComputeTrainingMaskSSF3_New():
  return tubeComputeTrainingMaskSSF3.New()


def tubeComputeTrainingMaskSSUS3_New():
  return tubeComputeTrainingMaskSSUS3.New()


def tubeComputeTrainingMaskSSUC3_New():
  return tubeComputeTrainingMaskSSUC3.New()


def tubeComputeTrainingMaskSSSS3_New():
  return tubeComputeTrainingMaskSSSS3.New()


def tubeComputeTrainingMaskDD2_New():
  return tubeComputeTrainingMaskDD2.New()


def tubeComputeTrainingMaskDF2_New():
  return tubeComputeTrainingMaskDF2.New()


def tubeComputeTrainingMaskDUS2_New():
  return tubeComputeTrainingMaskDUS2.New()


def tubeComputeTrainingMaskDUC2_New():
  return tubeComputeTrainingMaskDUC2.New()


def tubeComputeTrainingMaskDSS2_New():
  return tubeComputeTrainingMaskDSS2.New()


def tubeComputeTrainingMaskFD2_New():
  return tubeComputeTrainingMaskFD2.New()


def tubeComputeTrainingMaskFF2_New():
  return tubeComputeTrainingMaskFF2.New()


def tubeComputeTrainingMaskFUS2_New():
  return tubeComputeTrainingMaskFUS2.New()


def tubeComputeTrainingMaskFUC2_New():
  return tubeComputeTrainingMaskFUC2.New()


def tubeComputeTrainingMaskFSS2_New():
  return tubeComputeTrainingMaskFSS2.New()


def tubeComputeTrainingMaskUSD2_New():
  return tubeComputeTrainingMaskUSD2.New()


def tubeComputeTrainingMaskUSF2_New():
  return tubeComputeTrainingMaskUSF2.New()


def tubeComputeTrainingMaskUSUS2_New():
  return tubeComputeTrainingMaskUSUS2.New()


def tubeComputeTrainingMaskUSUC2_New():
  return tubeComputeTrainingMaskUSUC2.New()


def tubeComputeTrainingMaskUSSS2_New():
  return tubeComputeTrainingMaskUSSS2.New()


def tubeComputeTrainingMaskUCD2_New():
  return tubeComputeTrainingMaskUCD2.New()


def tubeComputeTrainingMaskUCF2_New():
  return tubeComputeTrainingMaskUCF2.New()


def tubeComputeTrainingMaskUCUS2_New():
  return tubeComputeTrainingMaskUCUS2.New()


def tubeComputeTrainingMaskUCUC2_New():
  return tubeComputeTrainingMaskUCUC2.New()


def tubeComputeTrainingMaskUCSS2_New():
  return tubeComputeTrainingMaskUCSS2.New()


def tubeComputeTrainingMaskSSD2_New():
  return tubeComputeTrainingMaskSSD2.New()


def tubeComputeTrainingMaskSSF2_New():
  return tubeComputeTrainingMaskSSF2.New()


def tubeComputeTrainingMaskSSUS2_New():
  return tubeComputeTrainingMaskSSUS2.New()


def tubeComputeTrainingMaskSSUC2_New():
  return tubeComputeTrainingMaskSSUC2.New()


def tubeComputeTrainingMaskSSSS2_New():
  return tubeComputeTrainingMaskSSSS2.New()

class tubeComputeTrainingMaskDD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDD2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDD2_Pointer":
        """Clone(tubeComputeTrainingMaskDD2 self) -> tubeComputeTrainingMaskDD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD2 const *":
        """GetObjectMask(tubeComputeTrainingMaskDD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeComputeTrainingMaskDD2 self, itkImageD2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetInput(self, value)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeComputeTrainingMaskDD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDD2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD2

        Create a new object of the class tubeComputeTrainingMaskDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDD2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_Clone, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetGap, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetGap, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetNotObjectWidth, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectWidth, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetObjectMask, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectMask, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetInput, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetOutput, None, tubeComputeTrainingMaskDD2)
tubeComputeTrainingMaskDD2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_swigregister
tubeComputeTrainingMaskDD2_swigregister(tubeComputeTrainingMaskDD2)

def tubeComputeTrainingMaskDD2___New_orig__() -> "tubeComputeTrainingMaskDD2_Pointer":
    """tubeComputeTrainingMaskDD2___New_orig__() -> tubeComputeTrainingMaskDD2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2___New_orig__()

def tubeComputeTrainingMaskDD2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDD2 *":
    """tubeComputeTrainingMaskDD2_cast(itkLightObject obj) -> tubeComputeTrainingMaskDD2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_cast(obj)

class tubeComputeTrainingMaskDD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDD3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDD3_Pointer":
        """Clone(tubeComputeTrainingMaskDD3 self) -> tubeComputeTrainingMaskDD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD3 const *":
        """GetObjectMask(tubeComputeTrainingMaskDD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeComputeTrainingMaskDD3 self, itkImageD3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetInput(self, value)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeComputeTrainingMaskDD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDD3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD3

        Create a new object of the class tubeComputeTrainingMaskDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDD3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_Clone, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetGap, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetGap, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetNotObjectWidth, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectWidth, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetObjectMask, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectMask, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetInput, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetOutput, None, tubeComputeTrainingMaskDD3)
tubeComputeTrainingMaskDD3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_swigregister
tubeComputeTrainingMaskDD3_swigregister(tubeComputeTrainingMaskDD3)

def tubeComputeTrainingMaskDD3___New_orig__() -> "tubeComputeTrainingMaskDD3_Pointer":
    """tubeComputeTrainingMaskDD3___New_orig__() -> tubeComputeTrainingMaskDD3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3___New_orig__()

def tubeComputeTrainingMaskDD3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDD3 *":
    """tubeComputeTrainingMaskDD3_cast(itkLightObject obj) -> tubeComputeTrainingMaskDD3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_cast(obj)

class tubeComputeTrainingMaskDF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDF2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDF2_Pointer":
        """Clone(tubeComputeTrainingMaskDF2 self) -> tubeComputeTrainingMaskDF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF2 const *":
        """GetObjectMask(tubeComputeTrainingMaskDF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeComputeTrainingMaskDF2 self, itkImageD2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetInput(self, value)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeTrainingMaskDF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDF2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF2

        Create a new object of the class tubeComputeTrainingMaskDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDF2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_Clone, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetGap, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetGap, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetNotObjectWidth, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectWidth, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetObjectMask, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectMask, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetInput, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetOutput, None, tubeComputeTrainingMaskDF2)
tubeComputeTrainingMaskDF2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_swigregister
tubeComputeTrainingMaskDF2_swigregister(tubeComputeTrainingMaskDF2)

def tubeComputeTrainingMaskDF2___New_orig__() -> "tubeComputeTrainingMaskDF2_Pointer":
    """tubeComputeTrainingMaskDF2___New_orig__() -> tubeComputeTrainingMaskDF2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2___New_orig__()

def tubeComputeTrainingMaskDF2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDF2 *":
    """tubeComputeTrainingMaskDF2_cast(itkLightObject obj) -> tubeComputeTrainingMaskDF2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_cast(obj)

class tubeComputeTrainingMaskDF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDF3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDF3_Pointer":
        """Clone(tubeComputeTrainingMaskDF3 self) -> tubeComputeTrainingMaskDF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF3 const *":
        """GetObjectMask(tubeComputeTrainingMaskDF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeComputeTrainingMaskDF3 self, itkImageD3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetInput(self, value)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeTrainingMaskDF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDF3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF3

        Create a new object of the class tubeComputeTrainingMaskDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDF3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_Clone, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetGap, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetGap, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetNotObjectWidth, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectWidth, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetObjectMask, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectMask, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetInput, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetOutput, None, tubeComputeTrainingMaskDF3)
tubeComputeTrainingMaskDF3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_swigregister
tubeComputeTrainingMaskDF3_swigregister(tubeComputeTrainingMaskDF3)

def tubeComputeTrainingMaskDF3___New_orig__() -> "tubeComputeTrainingMaskDF3_Pointer":
    """tubeComputeTrainingMaskDF3___New_orig__() -> tubeComputeTrainingMaskDF3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3___New_orig__()

def tubeComputeTrainingMaskDF3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDF3 *":
    """tubeComputeTrainingMaskDF3_cast(itkLightObject obj) -> tubeComputeTrainingMaskDF3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_cast(obj)

class tubeComputeTrainingMaskDSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDSS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDSS2_Pointer":
        """Clone(tubeComputeTrainingMaskDSS2 self) -> tubeComputeTrainingMaskDSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskDSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeComputeTrainingMaskDSS2 self, itkImageD2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeComputeTrainingMaskDSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS2

        Create a new object of the class tubeComputeTrainingMaskDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDSS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_Clone, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetGap, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetGap, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetNotObjectWidth, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectWidth, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetObjectMask, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectMask, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetInput, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetOutput, None, tubeComputeTrainingMaskDSS2)
tubeComputeTrainingMaskDSS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_swigregister
tubeComputeTrainingMaskDSS2_swigregister(tubeComputeTrainingMaskDSS2)

def tubeComputeTrainingMaskDSS2___New_orig__() -> "tubeComputeTrainingMaskDSS2_Pointer":
    """tubeComputeTrainingMaskDSS2___New_orig__() -> tubeComputeTrainingMaskDSS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2___New_orig__()

def tubeComputeTrainingMaskDSS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDSS2 *":
    """tubeComputeTrainingMaskDSS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskDSS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_cast(obj)

class tubeComputeTrainingMaskDSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDSS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDSS3_Pointer":
        """Clone(tubeComputeTrainingMaskDSS3 self) -> tubeComputeTrainingMaskDSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskDSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeComputeTrainingMaskDSS3 self, itkImageD3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeComputeTrainingMaskDSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS3

        Create a new object of the class tubeComputeTrainingMaskDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDSS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_Clone, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetGap, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetGap, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetNotObjectWidth, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectWidth, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetObjectMask, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectMask, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetInput, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetOutput, None, tubeComputeTrainingMaskDSS3)
tubeComputeTrainingMaskDSS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_swigregister
tubeComputeTrainingMaskDSS3_swigregister(tubeComputeTrainingMaskDSS3)

def tubeComputeTrainingMaskDSS3___New_orig__() -> "tubeComputeTrainingMaskDSS3_Pointer":
    """tubeComputeTrainingMaskDSS3___New_orig__() -> tubeComputeTrainingMaskDSS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3___New_orig__()

def tubeComputeTrainingMaskDSS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDSS3 *":
    """tubeComputeTrainingMaskDSS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskDSS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_cast(obj)

class tubeComputeTrainingMaskDUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDUC2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDUC2_Pointer":
        """Clone(tubeComputeTrainingMaskDUC2 self) -> tubeComputeTrainingMaskDUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC2 const *":
        """GetObjectMask(tubeComputeTrainingMaskDUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeComputeTrainingMaskDUC2 self, itkImageD2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeComputeTrainingMaskDUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC2

        Create a new object of the class tubeComputeTrainingMaskDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDUC2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_Clone, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetGap, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetGap, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetNotObjectWidth, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectWidth, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetObjectMask, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectMask, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetInput, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetOutput, None, tubeComputeTrainingMaskDUC2)
tubeComputeTrainingMaskDUC2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_swigregister
tubeComputeTrainingMaskDUC2_swigregister(tubeComputeTrainingMaskDUC2)

def tubeComputeTrainingMaskDUC2___New_orig__() -> "tubeComputeTrainingMaskDUC2_Pointer":
    """tubeComputeTrainingMaskDUC2___New_orig__() -> tubeComputeTrainingMaskDUC2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2___New_orig__()

def tubeComputeTrainingMaskDUC2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUC2 *":
    """tubeComputeTrainingMaskDUC2_cast(itkLightObject obj) -> tubeComputeTrainingMaskDUC2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_cast(obj)

class tubeComputeTrainingMaskDUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDUC3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDUC3_Pointer":
        """Clone(tubeComputeTrainingMaskDUC3 self) -> tubeComputeTrainingMaskDUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC3 const *":
        """GetObjectMask(tubeComputeTrainingMaskDUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeComputeTrainingMaskDUC3 self, itkImageD3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeComputeTrainingMaskDUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC3

        Create a new object of the class tubeComputeTrainingMaskDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDUC3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_Clone, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetGap, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetGap, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetNotObjectWidth, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectWidth, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetObjectMask, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectMask, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetInput, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetOutput, None, tubeComputeTrainingMaskDUC3)
tubeComputeTrainingMaskDUC3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_swigregister
tubeComputeTrainingMaskDUC3_swigregister(tubeComputeTrainingMaskDUC3)

def tubeComputeTrainingMaskDUC3___New_orig__() -> "tubeComputeTrainingMaskDUC3_Pointer":
    """tubeComputeTrainingMaskDUC3___New_orig__() -> tubeComputeTrainingMaskDUC3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3___New_orig__()

def tubeComputeTrainingMaskDUC3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUC3 *":
    """tubeComputeTrainingMaskDUC3_cast(itkLightObject obj) -> tubeComputeTrainingMaskDUC3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_cast(obj)

class tubeComputeTrainingMaskDUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDUS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDUS2_Pointer":
        """Clone(tubeComputeTrainingMaskDUS2 self) -> tubeComputeTrainingMaskDUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskDUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD2') -> "void":
        """SetInput(tubeComputeTrainingMaskDUS2 self, itkImageD2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeComputeTrainingMaskDUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS2

        Create a new object of the class tubeComputeTrainingMaskDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDUS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_Clone, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetGap, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetGap, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetNotObjectWidth, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectWidth, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetObjectMask, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectMask, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetInput, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetOutput, None, tubeComputeTrainingMaskDUS2)
tubeComputeTrainingMaskDUS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_swigregister
tubeComputeTrainingMaskDUS2_swigregister(tubeComputeTrainingMaskDUS2)

def tubeComputeTrainingMaskDUS2___New_orig__() -> "tubeComputeTrainingMaskDUS2_Pointer":
    """tubeComputeTrainingMaskDUS2___New_orig__() -> tubeComputeTrainingMaskDUS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2___New_orig__()

def tubeComputeTrainingMaskDUS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUS2 *":
    """tubeComputeTrainingMaskDUS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskDUS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_cast(obj)

class tubeComputeTrainingMaskDUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskDUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskDUS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskDUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskDUS3_Pointer":
        """Clone(tubeComputeTrainingMaskDUS3 self) -> tubeComputeTrainingMaskDUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskDUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskDUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskDUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskDUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskDUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskDUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageD3') -> "void":
        """SetInput(tubeComputeTrainingMaskDUS3 self, itkImageD3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeComputeTrainingMaskDUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskDUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS3

        Create a new object of the class tubeComputeTrainingMaskDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskDUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskDUS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_Clone, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetGap, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetGap, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetNotObjectWidth, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectWidth, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetObjectMask, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectMask, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetInput, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetOutput, None, tubeComputeTrainingMaskDUS3)
tubeComputeTrainingMaskDUS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_swigregister
tubeComputeTrainingMaskDUS3_swigregister(tubeComputeTrainingMaskDUS3)

def tubeComputeTrainingMaskDUS3___New_orig__() -> "tubeComputeTrainingMaskDUS3_Pointer":
    """tubeComputeTrainingMaskDUS3___New_orig__() -> tubeComputeTrainingMaskDUS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3___New_orig__()

def tubeComputeTrainingMaskDUS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskDUS3 *":
    """tubeComputeTrainingMaskDUS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskDUS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_cast(obj)

class tubeComputeTrainingMaskFD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFD2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFD2_Pointer":
        """Clone(tubeComputeTrainingMaskFD2 self) -> tubeComputeTrainingMaskFD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD2 const *":
        """GetObjectMask(tubeComputeTrainingMaskFD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeTrainingMaskFD2 self, itkImageF2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetInput(self, value)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeComputeTrainingMaskFD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFD2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD2

        Create a new object of the class tubeComputeTrainingMaskFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFD2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_Clone, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetGap, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetGap, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetNotObjectWidth, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectWidth, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetObjectMask, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectMask, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetInput, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetOutput, None, tubeComputeTrainingMaskFD2)
tubeComputeTrainingMaskFD2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_swigregister
tubeComputeTrainingMaskFD2_swigregister(tubeComputeTrainingMaskFD2)

def tubeComputeTrainingMaskFD2___New_orig__() -> "tubeComputeTrainingMaskFD2_Pointer":
    """tubeComputeTrainingMaskFD2___New_orig__() -> tubeComputeTrainingMaskFD2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2___New_orig__()

def tubeComputeTrainingMaskFD2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFD2 *":
    """tubeComputeTrainingMaskFD2_cast(itkLightObject obj) -> tubeComputeTrainingMaskFD2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_cast(obj)

class tubeComputeTrainingMaskFD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFD3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFD3_Pointer":
        """Clone(tubeComputeTrainingMaskFD3 self) -> tubeComputeTrainingMaskFD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD3 const *":
        """GetObjectMask(tubeComputeTrainingMaskFD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeTrainingMaskFD3 self, itkImageF3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetInput(self, value)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeComputeTrainingMaskFD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFD3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD3

        Create a new object of the class tubeComputeTrainingMaskFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFD3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_Clone, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetGap, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetGap, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetNotObjectWidth, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectWidth, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetObjectMask, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectMask, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetInput, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetOutput, None, tubeComputeTrainingMaskFD3)
tubeComputeTrainingMaskFD3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_swigregister
tubeComputeTrainingMaskFD3_swigregister(tubeComputeTrainingMaskFD3)

def tubeComputeTrainingMaskFD3___New_orig__() -> "tubeComputeTrainingMaskFD3_Pointer":
    """tubeComputeTrainingMaskFD3___New_orig__() -> tubeComputeTrainingMaskFD3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3___New_orig__()

def tubeComputeTrainingMaskFD3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFD3 *":
    """tubeComputeTrainingMaskFD3_cast(itkLightObject obj) -> tubeComputeTrainingMaskFD3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_cast(obj)

class tubeComputeTrainingMaskFF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFF2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFF2_Pointer":
        """Clone(tubeComputeTrainingMaskFF2 self) -> tubeComputeTrainingMaskFF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF2 const *":
        """GetObjectMask(tubeComputeTrainingMaskFF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeTrainingMaskFF2 self, itkImageF2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetInput(self, value)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeTrainingMaskFF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFF2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF2

        Create a new object of the class tubeComputeTrainingMaskFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFF2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_Clone, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetGap, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetGap, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetNotObjectWidth, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectWidth, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetObjectMask, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectMask, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetInput, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetOutput, None, tubeComputeTrainingMaskFF2)
tubeComputeTrainingMaskFF2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_swigregister
tubeComputeTrainingMaskFF2_swigregister(tubeComputeTrainingMaskFF2)

def tubeComputeTrainingMaskFF2___New_orig__() -> "tubeComputeTrainingMaskFF2_Pointer":
    """tubeComputeTrainingMaskFF2___New_orig__() -> tubeComputeTrainingMaskFF2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2___New_orig__()

def tubeComputeTrainingMaskFF2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFF2 *":
    """tubeComputeTrainingMaskFF2_cast(itkLightObject obj) -> tubeComputeTrainingMaskFF2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_cast(obj)

class tubeComputeTrainingMaskFF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFF3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFF3_Pointer":
        """Clone(tubeComputeTrainingMaskFF3 self) -> tubeComputeTrainingMaskFF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF3 const *":
        """GetObjectMask(tubeComputeTrainingMaskFF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeTrainingMaskFF3 self, itkImageF3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetInput(self, value)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeTrainingMaskFF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFF3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF3

        Create a new object of the class tubeComputeTrainingMaskFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFF3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_Clone, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetGap, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetGap, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetNotObjectWidth, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectWidth, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetObjectMask, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectMask, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetInput, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetOutput, None, tubeComputeTrainingMaskFF3)
tubeComputeTrainingMaskFF3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_swigregister
tubeComputeTrainingMaskFF3_swigregister(tubeComputeTrainingMaskFF3)

def tubeComputeTrainingMaskFF3___New_orig__() -> "tubeComputeTrainingMaskFF3_Pointer":
    """tubeComputeTrainingMaskFF3___New_orig__() -> tubeComputeTrainingMaskFF3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3___New_orig__()

def tubeComputeTrainingMaskFF3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFF3 *":
    """tubeComputeTrainingMaskFF3_cast(itkLightObject obj) -> tubeComputeTrainingMaskFF3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_cast(obj)

class tubeComputeTrainingMaskFSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFSS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFSS2_Pointer":
        """Clone(tubeComputeTrainingMaskFSS2 self) -> tubeComputeTrainingMaskFSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskFSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeTrainingMaskFSS2 self, itkImageF2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeComputeTrainingMaskFSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS2

        Create a new object of the class tubeComputeTrainingMaskFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFSS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_Clone, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetGap, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetGap, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetNotObjectWidth, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectWidth, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetObjectMask, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectMask, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetInput, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetOutput, None, tubeComputeTrainingMaskFSS2)
tubeComputeTrainingMaskFSS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_swigregister
tubeComputeTrainingMaskFSS2_swigregister(tubeComputeTrainingMaskFSS2)

def tubeComputeTrainingMaskFSS2___New_orig__() -> "tubeComputeTrainingMaskFSS2_Pointer":
    """tubeComputeTrainingMaskFSS2___New_orig__() -> tubeComputeTrainingMaskFSS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2___New_orig__()

def tubeComputeTrainingMaskFSS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFSS2 *":
    """tubeComputeTrainingMaskFSS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskFSS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_cast(obj)

class tubeComputeTrainingMaskFSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFSS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFSS3_Pointer":
        """Clone(tubeComputeTrainingMaskFSS3 self) -> tubeComputeTrainingMaskFSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskFSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeTrainingMaskFSS3 self, itkImageF3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeComputeTrainingMaskFSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS3

        Create a new object of the class tubeComputeTrainingMaskFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFSS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_Clone, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetGap, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetGap, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetNotObjectWidth, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectWidth, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetObjectMask, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectMask, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetInput, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetOutput, None, tubeComputeTrainingMaskFSS3)
tubeComputeTrainingMaskFSS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_swigregister
tubeComputeTrainingMaskFSS3_swigregister(tubeComputeTrainingMaskFSS3)

def tubeComputeTrainingMaskFSS3___New_orig__() -> "tubeComputeTrainingMaskFSS3_Pointer":
    """tubeComputeTrainingMaskFSS3___New_orig__() -> tubeComputeTrainingMaskFSS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3___New_orig__()

def tubeComputeTrainingMaskFSS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFSS3 *":
    """tubeComputeTrainingMaskFSS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskFSS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_cast(obj)

class tubeComputeTrainingMaskFUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFUC2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFUC2_Pointer":
        """Clone(tubeComputeTrainingMaskFUC2 self) -> tubeComputeTrainingMaskFUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC2 const *":
        """GetObjectMask(tubeComputeTrainingMaskFUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeTrainingMaskFUC2 self, itkImageF2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeComputeTrainingMaskFUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC2

        Create a new object of the class tubeComputeTrainingMaskFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFUC2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_Clone, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetGap, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetGap, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetNotObjectWidth, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectWidth, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetObjectMask, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectMask, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetInput, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetOutput, None, tubeComputeTrainingMaskFUC2)
tubeComputeTrainingMaskFUC2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_swigregister
tubeComputeTrainingMaskFUC2_swigregister(tubeComputeTrainingMaskFUC2)

def tubeComputeTrainingMaskFUC2___New_orig__() -> "tubeComputeTrainingMaskFUC2_Pointer":
    """tubeComputeTrainingMaskFUC2___New_orig__() -> tubeComputeTrainingMaskFUC2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2___New_orig__()

def tubeComputeTrainingMaskFUC2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUC2 *":
    """tubeComputeTrainingMaskFUC2_cast(itkLightObject obj) -> tubeComputeTrainingMaskFUC2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_cast(obj)

class tubeComputeTrainingMaskFUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFUC3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFUC3_Pointer":
        """Clone(tubeComputeTrainingMaskFUC3 self) -> tubeComputeTrainingMaskFUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC3 const *":
        """GetObjectMask(tubeComputeTrainingMaskFUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeTrainingMaskFUC3 self, itkImageF3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeComputeTrainingMaskFUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC3

        Create a new object of the class tubeComputeTrainingMaskFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFUC3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_Clone, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetGap, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetGap, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetNotObjectWidth, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectWidth, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetObjectMask, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectMask, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetInput, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetOutput, None, tubeComputeTrainingMaskFUC3)
tubeComputeTrainingMaskFUC3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_swigregister
tubeComputeTrainingMaskFUC3_swigregister(tubeComputeTrainingMaskFUC3)

def tubeComputeTrainingMaskFUC3___New_orig__() -> "tubeComputeTrainingMaskFUC3_Pointer":
    """tubeComputeTrainingMaskFUC3___New_orig__() -> tubeComputeTrainingMaskFUC3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3___New_orig__()

def tubeComputeTrainingMaskFUC3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUC3 *":
    """tubeComputeTrainingMaskFUC3_cast(itkLightObject obj) -> tubeComputeTrainingMaskFUC3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_cast(obj)

class tubeComputeTrainingMaskFUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFUS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFUS2_Pointer":
        """Clone(tubeComputeTrainingMaskFUS2 self) -> tubeComputeTrainingMaskFUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskFUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF2') -> "void":
        """SetInput(tubeComputeTrainingMaskFUS2 self, itkImageF2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeComputeTrainingMaskFUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS2

        Create a new object of the class tubeComputeTrainingMaskFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFUS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_Clone, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetGap, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetGap, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetNotObjectWidth, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectWidth, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetObjectMask, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectMask, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetInput, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetOutput, None, tubeComputeTrainingMaskFUS2)
tubeComputeTrainingMaskFUS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_swigregister
tubeComputeTrainingMaskFUS2_swigregister(tubeComputeTrainingMaskFUS2)

def tubeComputeTrainingMaskFUS2___New_orig__() -> "tubeComputeTrainingMaskFUS2_Pointer":
    """tubeComputeTrainingMaskFUS2___New_orig__() -> tubeComputeTrainingMaskFUS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2___New_orig__()

def tubeComputeTrainingMaskFUS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUS2 *":
    """tubeComputeTrainingMaskFUS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskFUS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_cast(obj)

class tubeComputeTrainingMaskFUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskFUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskFUS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskFUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskFUS3_Pointer":
        """Clone(tubeComputeTrainingMaskFUS3 self) -> tubeComputeTrainingMaskFUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskFUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskFUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskFUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskFUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskFUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskFUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageF3') -> "void":
        """SetInput(tubeComputeTrainingMaskFUS3 self, itkImageF3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeComputeTrainingMaskFUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskFUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS3

        Create a new object of the class tubeComputeTrainingMaskFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskFUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskFUS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_Clone, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetGap, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetGap, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetNotObjectWidth, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectWidth, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetObjectMask, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectMask, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetInput, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetOutput, None, tubeComputeTrainingMaskFUS3)
tubeComputeTrainingMaskFUS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_swigregister
tubeComputeTrainingMaskFUS3_swigregister(tubeComputeTrainingMaskFUS3)

def tubeComputeTrainingMaskFUS3___New_orig__() -> "tubeComputeTrainingMaskFUS3_Pointer":
    """tubeComputeTrainingMaskFUS3___New_orig__() -> tubeComputeTrainingMaskFUS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3___New_orig__()

def tubeComputeTrainingMaskFUS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskFUS3 *":
    """tubeComputeTrainingMaskFUS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskFUS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_cast(obj)

class tubeComputeTrainingMaskSSD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSD2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSD2_Pointer":
        """Clone(tubeComputeTrainingMaskSSD2 self) -> tubeComputeTrainingMaskSSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD2 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeComputeTrainingMaskSSD2 self, itkImageSS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetInput(self, value)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeComputeTrainingMaskSSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSD2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD2

        Create a new object of the class tubeComputeTrainingMaskSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSD2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_Clone, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetGap, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetGap, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetNotObjectWidth, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectWidth, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetObjectMask, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectMask, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetInput, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetOutput, None, tubeComputeTrainingMaskSSD2)
tubeComputeTrainingMaskSSD2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_swigregister
tubeComputeTrainingMaskSSD2_swigregister(tubeComputeTrainingMaskSSD2)

def tubeComputeTrainingMaskSSD2___New_orig__() -> "tubeComputeTrainingMaskSSD2_Pointer":
    """tubeComputeTrainingMaskSSD2___New_orig__() -> tubeComputeTrainingMaskSSD2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2___New_orig__()

def tubeComputeTrainingMaskSSD2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSD2 *":
    """tubeComputeTrainingMaskSSD2_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSD2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_cast(obj)

class tubeComputeTrainingMaskSSD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSD3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSD3_Pointer":
        """Clone(tubeComputeTrainingMaskSSD3 self) -> tubeComputeTrainingMaskSSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD3 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS3') -> "void":
        """SetInput(tubeComputeTrainingMaskSSD3 self, itkImageSS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetInput(self, value)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeComputeTrainingMaskSSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSD3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD3

        Create a new object of the class tubeComputeTrainingMaskSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSD3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_Clone, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetGap, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetGap, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetNotObjectWidth, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectWidth, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetObjectMask, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectMask, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetInput, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetOutput, None, tubeComputeTrainingMaskSSD3)
tubeComputeTrainingMaskSSD3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_swigregister
tubeComputeTrainingMaskSSD3_swigregister(tubeComputeTrainingMaskSSD3)

def tubeComputeTrainingMaskSSD3___New_orig__() -> "tubeComputeTrainingMaskSSD3_Pointer":
    """tubeComputeTrainingMaskSSD3___New_orig__() -> tubeComputeTrainingMaskSSD3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3___New_orig__()

def tubeComputeTrainingMaskSSD3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSD3 *":
    """tubeComputeTrainingMaskSSD3_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSD3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_cast(obj)

class tubeComputeTrainingMaskSSF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSF2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSF2_Pointer":
        """Clone(tubeComputeTrainingMaskSSF2 self) -> tubeComputeTrainingMaskSSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF2 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeComputeTrainingMaskSSF2 self, itkImageSS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetInput(self, value)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeTrainingMaskSSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSF2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF2

        Create a new object of the class tubeComputeTrainingMaskSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSF2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_Clone, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetGap, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetGap, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetNotObjectWidth, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectWidth, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetObjectMask, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectMask, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetInput, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetOutput, None, tubeComputeTrainingMaskSSF2)
tubeComputeTrainingMaskSSF2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_swigregister
tubeComputeTrainingMaskSSF2_swigregister(tubeComputeTrainingMaskSSF2)

def tubeComputeTrainingMaskSSF2___New_orig__() -> "tubeComputeTrainingMaskSSF2_Pointer":
    """tubeComputeTrainingMaskSSF2___New_orig__() -> tubeComputeTrainingMaskSSF2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2___New_orig__()

def tubeComputeTrainingMaskSSF2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSF2 *":
    """tubeComputeTrainingMaskSSF2_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSF2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_cast(obj)

class tubeComputeTrainingMaskSSF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSF3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSF3_Pointer":
        """Clone(tubeComputeTrainingMaskSSF3 self) -> tubeComputeTrainingMaskSSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF3 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS3') -> "void":
        """SetInput(tubeComputeTrainingMaskSSF3 self, itkImageSS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetInput(self, value)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeTrainingMaskSSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSF3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF3

        Create a new object of the class tubeComputeTrainingMaskSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSF3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_Clone, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetGap, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetGap, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetNotObjectWidth, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectWidth, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetObjectMask, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectMask, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetInput, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetOutput, None, tubeComputeTrainingMaskSSF3)
tubeComputeTrainingMaskSSF3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_swigregister
tubeComputeTrainingMaskSSF3_swigregister(tubeComputeTrainingMaskSSF3)

def tubeComputeTrainingMaskSSF3___New_orig__() -> "tubeComputeTrainingMaskSSF3_Pointer":
    """tubeComputeTrainingMaskSSF3___New_orig__() -> tubeComputeTrainingMaskSSF3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3___New_orig__()

def tubeComputeTrainingMaskSSF3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSF3 *":
    """tubeComputeTrainingMaskSSF3_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSF3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_cast(obj)

class tubeComputeTrainingMaskSSSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSSS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSSS2_Pointer":
        """Clone(tubeComputeTrainingMaskSSSS2 self) -> tubeComputeTrainingMaskSSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeComputeTrainingMaskSSSS2 self, itkImageSS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeComputeTrainingMaskSSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS2

        Create a new object of the class tubeComputeTrainingMaskSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSSS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_Clone, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetGap, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetGap, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetNotObjectWidth, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectWidth, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetObjectMask, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectMask, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetInput, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetOutput, None, tubeComputeTrainingMaskSSSS2)
tubeComputeTrainingMaskSSSS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_swigregister
tubeComputeTrainingMaskSSSS2_swigregister(tubeComputeTrainingMaskSSSS2)

def tubeComputeTrainingMaskSSSS2___New_orig__() -> "tubeComputeTrainingMaskSSSS2_Pointer":
    """tubeComputeTrainingMaskSSSS2___New_orig__() -> tubeComputeTrainingMaskSSSS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2___New_orig__()

def tubeComputeTrainingMaskSSSS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSSS2 *":
    """tubeComputeTrainingMaskSSSS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSSS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_cast(obj)

class tubeComputeTrainingMaskSSSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSSS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSSS3_Pointer":
        """Clone(tubeComputeTrainingMaskSSSS3 self) -> tubeComputeTrainingMaskSSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS3') -> "void":
        """SetInput(tubeComputeTrainingMaskSSSS3 self, itkImageSS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeComputeTrainingMaskSSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS3

        Create a new object of the class tubeComputeTrainingMaskSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSSS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_Clone, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetGap, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetGap, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetNotObjectWidth, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectWidth, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetObjectMask, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectMask, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetInput, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetOutput, None, tubeComputeTrainingMaskSSSS3)
tubeComputeTrainingMaskSSSS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_swigregister
tubeComputeTrainingMaskSSSS3_swigregister(tubeComputeTrainingMaskSSSS3)

def tubeComputeTrainingMaskSSSS3___New_orig__() -> "tubeComputeTrainingMaskSSSS3_Pointer":
    """tubeComputeTrainingMaskSSSS3___New_orig__() -> tubeComputeTrainingMaskSSSS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3___New_orig__()

def tubeComputeTrainingMaskSSSS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSSS3 *":
    """tubeComputeTrainingMaskSSSS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSSS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_cast(obj)

class tubeComputeTrainingMaskSSUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSUC2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSUC2_Pointer":
        """Clone(tubeComputeTrainingMaskSSUC2 self) -> tubeComputeTrainingMaskSSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC2 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeComputeTrainingMaskSSUC2 self, itkImageSS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeComputeTrainingMaskSSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC2

        Create a new object of the class tubeComputeTrainingMaskSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSUC2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_Clone, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetGap, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetGap, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetNotObjectWidth, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectWidth, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetObjectMask, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectMask, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetInput, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetOutput, None, tubeComputeTrainingMaskSSUC2)
tubeComputeTrainingMaskSSUC2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_swigregister
tubeComputeTrainingMaskSSUC2_swigregister(tubeComputeTrainingMaskSSUC2)

def tubeComputeTrainingMaskSSUC2___New_orig__() -> "tubeComputeTrainingMaskSSUC2_Pointer":
    """tubeComputeTrainingMaskSSUC2___New_orig__() -> tubeComputeTrainingMaskSSUC2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2___New_orig__()

def tubeComputeTrainingMaskSSUC2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUC2 *":
    """tubeComputeTrainingMaskSSUC2_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUC2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_cast(obj)

class tubeComputeTrainingMaskSSUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSUC3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSUC3_Pointer":
        """Clone(tubeComputeTrainingMaskSSUC3 self) -> tubeComputeTrainingMaskSSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC3 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS3') -> "void":
        """SetInput(tubeComputeTrainingMaskSSUC3 self, itkImageSS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeComputeTrainingMaskSSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC3

        Create a new object of the class tubeComputeTrainingMaskSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSUC3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_Clone, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetGap, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetGap, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetNotObjectWidth, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectWidth, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetObjectMask, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectMask, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetInput, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetOutput, None, tubeComputeTrainingMaskSSUC3)
tubeComputeTrainingMaskSSUC3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_swigregister
tubeComputeTrainingMaskSSUC3_swigregister(tubeComputeTrainingMaskSSUC3)

def tubeComputeTrainingMaskSSUC3___New_orig__() -> "tubeComputeTrainingMaskSSUC3_Pointer":
    """tubeComputeTrainingMaskSSUC3___New_orig__() -> tubeComputeTrainingMaskSSUC3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3___New_orig__()

def tubeComputeTrainingMaskSSUC3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUC3 *":
    """tubeComputeTrainingMaskSSUC3_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUC3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_cast(obj)

class tubeComputeTrainingMaskSSUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSUS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSUS2_Pointer":
        """Clone(tubeComputeTrainingMaskSSUS2 self) -> tubeComputeTrainingMaskSSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS2') -> "void":
        """SetInput(tubeComputeTrainingMaskSSUS2 self, itkImageSS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeComputeTrainingMaskSSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS2

        Create a new object of the class tubeComputeTrainingMaskSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSUS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_Clone, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetGap, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetGap, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetNotObjectWidth, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectWidth, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetObjectMask, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectMask, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetInput, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetOutput, None, tubeComputeTrainingMaskSSUS2)
tubeComputeTrainingMaskSSUS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_swigregister
tubeComputeTrainingMaskSSUS2_swigregister(tubeComputeTrainingMaskSSUS2)

def tubeComputeTrainingMaskSSUS2___New_orig__() -> "tubeComputeTrainingMaskSSUS2_Pointer":
    """tubeComputeTrainingMaskSSUS2___New_orig__() -> tubeComputeTrainingMaskSSUS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2___New_orig__()

def tubeComputeTrainingMaskSSUS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUS2 *":
    """tubeComputeTrainingMaskSSUS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_cast(obj)

class tubeComputeTrainingMaskSSUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskSSUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskSSUS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskSSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskSSUS3_Pointer":
        """Clone(tubeComputeTrainingMaskSSUS3 self) -> tubeComputeTrainingMaskSSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskSSUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskSSUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskSSUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskSSUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskSSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskSSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageSS3') -> "void":
        """SetInput(tubeComputeTrainingMaskSSUS3 self, itkImageSS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeComputeTrainingMaskSSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS3

        Create a new object of the class tubeComputeTrainingMaskSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskSSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskSSUS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_Clone, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetGap, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetGap, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetNotObjectWidth, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectWidth, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetObjectMask, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectMask, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetInput, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetOutput, None, tubeComputeTrainingMaskSSUS3)
tubeComputeTrainingMaskSSUS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_swigregister
tubeComputeTrainingMaskSSUS3_swigregister(tubeComputeTrainingMaskSSUS3)

def tubeComputeTrainingMaskSSUS3___New_orig__() -> "tubeComputeTrainingMaskSSUS3_Pointer":
    """tubeComputeTrainingMaskSSUS3___New_orig__() -> tubeComputeTrainingMaskSSUS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3___New_orig__()

def tubeComputeTrainingMaskSSUS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskSSUS3 *":
    """tubeComputeTrainingMaskSSUS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskSSUS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_cast(obj)

class tubeComputeTrainingMaskUCD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCD2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCD2_Pointer":
        """Clone(tubeComputeTrainingMaskUCD2 self) -> tubeComputeTrainingMaskUCD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeComputeTrainingMaskUCD2 self, itkImageUC2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetInput(self, value)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeComputeTrainingMaskUCD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCD2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD2

        Create a new object of the class tubeComputeTrainingMaskUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCD2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_Clone, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetGap, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetGap, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetNotObjectWidth, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectWidth, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetObjectMask, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectMask, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetInput, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetOutput, None, tubeComputeTrainingMaskUCD2)
tubeComputeTrainingMaskUCD2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_swigregister
tubeComputeTrainingMaskUCD2_swigregister(tubeComputeTrainingMaskUCD2)

def tubeComputeTrainingMaskUCD2___New_orig__() -> "tubeComputeTrainingMaskUCD2_Pointer":
    """tubeComputeTrainingMaskUCD2___New_orig__() -> tubeComputeTrainingMaskUCD2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2___New_orig__()

def tubeComputeTrainingMaskUCD2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCD2 *":
    """tubeComputeTrainingMaskUCD2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCD2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_cast(obj)

class tubeComputeTrainingMaskUCD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCD3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCD3_Pointer":
        """Clone(tubeComputeTrainingMaskUCD3 self) -> tubeComputeTrainingMaskUCD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC3') -> "void":
        """SetInput(tubeComputeTrainingMaskUCD3 self, itkImageUC3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetInput(self, value)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeComputeTrainingMaskUCD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCD3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD3

        Create a new object of the class tubeComputeTrainingMaskUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCD3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_Clone, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetGap, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetGap, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetNotObjectWidth, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectWidth, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetObjectMask, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectMask, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetInput, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetOutput, None, tubeComputeTrainingMaskUCD3)
tubeComputeTrainingMaskUCD3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_swigregister
tubeComputeTrainingMaskUCD3_swigregister(tubeComputeTrainingMaskUCD3)

def tubeComputeTrainingMaskUCD3___New_orig__() -> "tubeComputeTrainingMaskUCD3_Pointer":
    """tubeComputeTrainingMaskUCD3___New_orig__() -> tubeComputeTrainingMaskUCD3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3___New_orig__()

def tubeComputeTrainingMaskUCD3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCD3 *":
    """tubeComputeTrainingMaskUCD3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCD3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_cast(obj)

class tubeComputeTrainingMaskUCF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCF2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCF2_Pointer":
        """Clone(tubeComputeTrainingMaskUCF2 self) -> tubeComputeTrainingMaskUCF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeComputeTrainingMaskUCF2 self, itkImageUC2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetInput(self, value)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeTrainingMaskUCF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCF2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF2

        Create a new object of the class tubeComputeTrainingMaskUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCF2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_Clone, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetGap, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetGap, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetNotObjectWidth, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectWidth, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetObjectMask, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectMask, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetInput, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetOutput, None, tubeComputeTrainingMaskUCF2)
tubeComputeTrainingMaskUCF2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_swigregister
tubeComputeTrainingMaskUCF2_swigregister(tubeComputeTrainingMaskUCF2)

def tubeComputeTrainingMaskUCF2___New_orig__() -> "tubeComputeTrainingMaskUCF2_Pointer":
    """tubeComputeTrainingMaskUCF2___New_orig__() -> tubeComputeTrainingMaskUCF2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2___New_orig__()

def tubeComputeTrainingMaskUCF2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCF2 *":
    """tubeComputeTrainingMaskUCF2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCF2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_cast(obj)

class tubeComputeTrainingMaskUCF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCF3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCF3_Pointer":
        """Clone(tubeComputeTrainingMaskUCF3 self) -> tubeComputeTrainingMaskUCF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC3') -> "void":
        """SetInput(tubeComputeTrainingMaskUCF3 self, itkImageUC3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetInput(self, value)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeTrainingMaskUCF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCF3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF3

        Create a new object of the class tubeComputeTrainingMaskUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCF3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_Clone, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetGap, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetGap, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetNotObjectWidth, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectWidth, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetObjectMask, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectMask, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetInput, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetOutput, None, tubeComputeTrainingMaskUCF3)
tubeComputeTrainingMaskUCF3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_swigregister
tubeComputeTrainingMaskUCF3_swigregister(tubeComputeTrainingMaskUCF3)

def tubeComputeTrainingMaskUCF3___New_orig__() -> "tubeComputeTrainingMaskUCF3_Pointer":
    """tubeComputeTrainingMaskUCF3___New_orig__() -> tubeComputeTrainingMaskUCF3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3___New_orig__()

def tubeComputeTrainingMaskUCF3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCF3 *":
    """tubeComputeTrainingMaskUCF3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCF3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_cast(obj)

class tubeComputeTrainingMaskUCSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCSS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCSS2_Pointer":
        """Clone(tubeComputeTrainingMaskUCSS2 self) -> tubeComputeTrainingMaskUCSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeComputeTrainingMaskUCSS2 self, itkImageUC2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeComputeTrainingMaskUCSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS2

        Create a new object of the class tubeComputeTrainingMaskUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCSS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_Clone, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetGap, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetGap, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetNotObjectWidth, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectWidth, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetObjectMask, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectMask, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetInput, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetOutput, None, tubeComputeTrainingMaskUCSS2)
tubeComputeTrainingMaskUCSS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_swigregister
tubeComputeTrainingMaskUCSS2_swigregister(tubeComputeTrainingMaskUCSS2)

def tubeComputeTrainingMaskUCSS2___New_orig__() -> "tubeComputeTrainingMaskUCSS2_Pointer":
    """tubeComputeTrainingMaskUCSS2___New_orig__() -> tubeComputeTrainingMaskUCSS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2___New_orig__()

def tubeComputeTrainingMaskUCSS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCSS2 *":
    """tubeComputeTrainingMaskUCSS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCSS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_cast(obj)

class tubeComputeTrainingMaskUCSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCSS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCSS3_Pointer":
        """Clone(tubeComputeTrainingMaskUCSS3 self) -> tubeComputeTrainingMaskUCSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC3') -> "void":
        """SetInput(tubeComputeTrainingMaskUCSS3 self, itkImageUC3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeComputeTrainingMaskUCSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS3

        Create a new object of the class tubeComputeTrainingMaskUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCSS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_Clone, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetGap, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetGap, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetNotObjectWidth, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectWidth, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetObjectMask, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectMask, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetInput, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetOutput, None, tubeComputeTrainingMaskUCSS3)
tubeComputeTrainingMaskUCSS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_swigregister
tubeComputeTrainingMaskUCSS3_swigregister(tubeComputeTrainingMaskUCSS3)

def tubeComputeTrainingMaskUCSS3___New_orig__() -> "tubeComputeTrainingMaskUCSS3_Pointer":
    """tubeComputeTrainingMaskUCSS3___New_orig__() -> tubeComputeTrainingMaskUCSS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3___New_orig__()

def tubeComputeTrainingMaskUCSS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCSS3 *":
    """tubeComputeTrainingMaskUCSS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCSS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_cast(obj)

class tubeComputeTrainingMaskUCUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCUC2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCUC2_Pointer":
        """Clone(tubeComputeTrainingMaskUCUC2 self) -> tubeComputeTrainingMaskUCUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeComputeTrainingMaskUCUC2 self, itkImageUC2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeComputeTrainingMaskUCUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC2

        Create a new object of the class tubeComputeTrainingMaskUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCUC2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_Clone, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetGap, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetGap, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetNotObjectWidth, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectWidth, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetObjectMask, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectMask, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetInput, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetOutput, None, tubeComputeTrainingMaskUCUC2)
tubeComputeTrainingMaskUCUC2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_swigregister
tubeComputeTrainingMaskUCUC2_swigregister(tubeComputeTrainingMaskUCUC2)

def tubeComputeTrainingMaskUCUC2___New_orig__() -> "tubeComputeTrainingMaskUCUC2_Pointer":
    """tubeComputeTrainingMaskUCUC2___New_orig__() -> tubeComputeTrainingMaskUCUC2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2___New_orig__()

def tubeComputeTrainingMaskUCUC2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUC2 *":
    """tubeComputeTrainingMaskUCUC2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUC2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_cast(obj)

class tubeComputeTrainingMaskUCUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCUC3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCUC3_Pointer":
        """Clone(tubeComputeTrainingMaskUCUC3 self) -> tubeComputeTrainingMaskUCUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC3') -> "void":
        """SetInput(tubeComputeTrainingMaskUCUC3 self, itkImageUC3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeComputeTrainingMaskUCUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC3

        Create a new object of the class tubeComputeTrainingMaskUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCUC3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_Clone, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetGap, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetGap, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetNotObjectWidth, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectWidth, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetObjectMask, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectMask, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetInput, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetOutput, None, tubeComputeTrainingMaskUCUC3)
tubeComputeTrainingMaskUCUC3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_swigregister
tubeComputeTrainingMaskUCUC3_swigregister(tubeComputeTrainingMaskUCUC3)

def tubeComputeTrainingMaskUCUC3___New_orig__() -> "tubeComputeTrainingMaskUCUC3_Pointer":
    """tubeComputeTrainingMaskUCUC3___New_orig__() -> tubeComputeTrainingMaskUCUC3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3___New_orig__()

def tubeComputeTrainingMaskUCUC3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUC3 *":
    """tubeComputeTrainingMaskUCUC3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUC3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_cast(obj)

class tubeComputeTrainingMaskUCUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCUS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCUS2_Pointer":
        """Clone(tubeComputeTrainingMaskUCUS2 self) -> tubeComputeTrainingMaskUCUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC2') -> "void":
        """SetInput(tubeComputeTrainingMaskUCUS2 self, itkImageUC2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeComputeTrainingMaskUCUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS2

        Create a new object of the class tubeComputeTrainingMaskUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCUS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_Clone, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetGap, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetGap, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetNotObjectWidth, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectWidth, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetObjectMask, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectMask, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetInput, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetOutput, None, tubeComputeTrainingMaskUCUS2)
tubeComputeTrainingMaskUCUS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_swigregister
tubeComputeTrainingMaskUCUS2_swigregister(tubeComputeTrainingMaskUCUS2)

def tubeComputeTrainingMaskUCUS2___New_orig__() -> "tubeComputeTrainingMaskUCUS2_Pointer":
    """tubeComputeTrainingMaskUCUS2___New_orig__() -> tubeComputeTrainingMaskUCUS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2___New_orig__()

def tubeComputeTrainingMaskUCUS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUS2 *":
    """tubeComputeTrainingMaskUCUS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_cast(obj)

class tubeComputeTrainingMaskUCUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUCUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUCUS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUCUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUCUS3_Pointer":
        """Clone(tubeComputeTrainingMaskUCUS3 self) -> tubeComputeTrainingMaskUCUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUCUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUCUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUCUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUCUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUCUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUCUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUC3') -> "void":
        """SetInput(tubeComputeTrainingMaskUCUS3 self, itkImageUC3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeComputeTrainingMaskUCUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS3

        Create a new object of the class tubeComputeTrainingMaskUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUCUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUCUS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_Clone, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetGap, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetGap, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetNotObjectWidth, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectWidth, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetObjectMask, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectMask, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetInput, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetOutput, None, tubeComputeTrainingMaskUCUS3)
tubeComputeTrainingMaskUCUS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_swigregister
tubeComputeTrainingMaskUCUS3_swigregister(tubeComputeTrainingMaskUCUS3)

def tubeComputeTrainingMaskUCUS3___New_orig__() -> "tubeComputeTrainingMaskUCUS3_Pointer":
    """tubeComputeTrainingMaskUCUS3___New_orig__() -> tubeComputeTrainingMaskUCUS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3___New_orig__()

def tubeComputeTrainingMaskUCUS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUCUS3 *":
    """tubeComputeTrainingMaskUCUS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUCUS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_cast(obj)

class tubeComputeTrainingMaskUSD2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSD2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSD2_Pointer":
        """Clone(tubeComputeTrainingMaskUSD2 self) -> tubeComputeTrainingMaskUSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSD2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSD2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeComputeTrainingMaskUSD2 self, itkImageUS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetInput(self, value)


    def GetOutput(self) -> "itkImageD2 *":
        """GetOutput(tubeComputeTrainingMaskUSD2 self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSD2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD2

        Create a new object of the class tubeComputeTrainingMaskUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSD2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_Clone, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetGap, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetGap, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetNotObjectWidth, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectWidth, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetObjectMask, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectMask, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetInput, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetOutput, None, tubeComputeTrainingMaskUSD2)
tubeComputeTrainingMaskUSD2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_swigregister
tubeComputeTrainingMaskUSD2_swigregister(tubeComputeTrainingMaskUSD2)

def tubeComputeTrainingMaskUSD2___New_orig__() -> "tubeComputeTrainingMaskUSD2_Pointer":
    """tubeComputeTrainingMaskUSD2___New_orig__() -> tubeComputeTrainingMaskUSD2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2___New_orig__()

def tubeComputeTrainingMaskUSD2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSD2 *":
    """tubeComputeTrainingMaskUSD2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSD2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_cast(obj)

class tubeComputeTrainingMaskUSD3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSD3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSD3_Pointer":
        """Clone(tubeComputeTrainingMaskUSD3 self) -> tubeComputeTrainingMaskUSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSD3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSD3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageD3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageD3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS3') -> "void":
        """SetInput(tubeComputeTrainingMaskUSD3 self, itkImageUS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetInput(self, value)


    def GetOutput(self) -> "itkImageD3 *":
        """GetOutput(tubeComputeTrainingMaskUSD3 self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSD3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD3

        Create a new object of the class tubeComputeTrainingMaskUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSD3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_Clone, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetGap, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetGap, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetNotObjectWidth, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectWidth, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetObjectMask, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectMask, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetInput, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetOutput, None, tubeComputeTrainingMaskUSD3)
tubeComputeTrainingMaskUSD3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_swigregister
tubeComputeTrainingMaskUSD3_swigregister(tubeComputeTrainingMaskUSD3)

def tubeComputeTrainingMaskUSD3___New_orig__() -> "tubeComputeTrainingMaskUSD3_Pointer":
    """tubeComputeTrainingMaskUSD3___New_orig__() -> tubeComputeTrainingMaskUSD3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3___New_orig__()

def tubeComputeTrainingMaskUSD3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSD3 *":
    """tubeComputeTrainingMaskUSD3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSD3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_cast(obj)

class tubeComputeTrainingMaskUSF2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSF2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSF2_Pointer":
        """Clone(tubeComputeTrainingMaskUSF2 self) -> tubeComputeTrainingMaskUSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSF2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSF2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeComputeTrainingMaskUSF2 self, itkImageUS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetInput(self, value)


    def GetOutput(self) -> "itkImageF2 *":
        """GetOutput(tubeComputeTrainingMaskUSF2 self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSF2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF2

        Create a new object of the class tubeComputeTrainingMaskUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSF2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_Clone, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetGap, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetGap, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetNotObjectWidth, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectWidth, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetObjectMask, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectMask, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetInput, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetOutput, None, tubeComputeTrainingMaskUSF2)
tubeComputeTrainingMaskUSF2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_swigregister
tubeComputeTrainingMaskUSF2_swigregister(tubeComputeTrainingMaskUSF2)

def tubeComputeTrainingMaskUSF2___New_orig__() -> "tubeComputeTrainingMaskUSF2_Pointer":
    """tubeComputeTrainingMaskUSF2___New_orig__() -> tubeComputeTrainingMaskUSF2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2___New_orig__()

def tubeComputeTrainingMaskUSF2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSF2 *":
    """tubeComputeTrainingMaskUSF2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSF2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_cast(obj)

class tubeComputeTrainingMaskUSF3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSF3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSF3_Pointer":
        """Clone(tubeComputeTrainingMaskUSF3 self) -> tubeComputeTrainingMaskUSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSF3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSF3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageF3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageF3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS3') -> "void":
        """SetInput(tubeComputeTrainingMaskUSF3 self, itkImageUS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetInput(self, value)


    def GetOutput(self) -> "itkImageF3 *":
        """GetOutput(tubeComputeTrainingMaskUSF3 self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSF3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF3

        Create a new object of the class tubeComputeTrainingMaskUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSF3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_Clone, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetGap, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetGap, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetNotObjectWidth, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectWidth, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetObjectMask, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectMask, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetInput, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetOutput, None, tubeComputeTrainingMaskUSF3)
tubeComputeTrainingMaskUSF3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_swigregister
tubeComputeTrainingMaskUSF3_swigregister(tubeComputeTrainingMaskUSF3)

def tubeComputeTrainingMaskUSF3___New_orig__() -> "tubeComputeTrainingMaskUSF3_Pointer":
    """tubeComputeTrainingMaskUSF3___New_orig__() -> tubeComputeTrainingMaskUSF3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3___New_orig__()

def tubeComputeTrainingMaskUSF3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSF3 *":
    """tubeComputeTrainingMaskUSF3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSF3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_cast(obj)

class tubeComputeTrainingMaskUSSS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSSS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSSS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSSS2_Pointer":
        """Clone(tubeComputeTrainingMaskUSSS2 self) -> tubeComputeTrainingMaskUSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSSS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSSS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeComputeTrainingMaskUSSS2 self, itkImageUS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS2 *":
        """GetOutput(tubeComputeTrainingMaskUSSS2 self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSSS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS2

        Create a new object of the class tubeComputeTrainingMaskUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSSS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSSS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_Clone, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetGap, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetGap, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetNotObjectWidth, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectWidth, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetObjectMask, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectMask, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetInput, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetOutput, None, tubeComputeTrainingMaskUSSS2)
tubeComputeTrainingMaskUSSS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_swigregister
tubeComputeTrainingMaskUSSS2_swigregister(tubeComputeTrainingMaskUSSS2)

def tubeComputeTrainingMaskUSSS2___New_orig__() -> "tubeComputeTrainingMaskUSSS2_Pointer":
    """tubeComputeTrainingMaskUSSS2___New_orig__() -> tubeComputeTrainingMaskUSSS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2___New_orig__()

def tubeComputeTrainingMaskUSSS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSSS2 *":
    """tubeComputeTrainingMaskUSSS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSSS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_cast(obj)

class tubeComputeTrainingMaskUSSS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSSS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSSS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSSS3_Pointer":
        """Clone(tubeComputeTrainingMaskUSSS3 self) -> tubeComputeTrainingMaskUSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSSS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSSS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageSS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageSS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS3') -> "void":
        """SetInput(tubeComputeTrainingMaskUSSS3 self, itkImageUS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageSS3 *":
        """GetOutput(tubeComputeTrainingMaskUSSS3 self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSSS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS3

        Create a new object of the class tubeComputeTrainingMaskUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSSS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_Clone, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetGap, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetGap, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetNotObjectWidth, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectWidth, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetObjectMask, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectMask, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetInput, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetOutput, None, tubeComputeTrainingMaskUSSS3)
tubeComputeTrainingMaskUSSS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_swigregister
tubeComputeTrainingMaskUSSS3_swigregister(tubeComputeTrainingMaskUSSS3)

def tubeComputeTrainingMaskUSSS3___New_orig__() -> "tubeComputeTrainingMaskUSSS3_Pointer":
    """tubeComputeTrainingMaskUSSS3___New_orig__() -> tubeComputeTrainingMaskUSSS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3___New_orig__()

def tubeComputeTrainingMaskUSSS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSSS3 *":
    """tubeComputeTrainingMaskUSSS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSSS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_cast(obj)

class tubeComputeTrainingMaskUSUC2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSUC2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSUC2_Pointer":
        """Clone(tubeComputeTrainingMaskUSUC2 self) -> tubeComputeTrainingMaskUSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSUC2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSUC2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeComputeTrainingMaskUSUC2 self, itkImageUS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC2 *":
        """GetOutput(tubeComputeTrainingMaskUSUC2 self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUC2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC2

        Create a new object of the class tubeComputeTrainingMaskUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSUC2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_Clone, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetGap, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetGap, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetNotObjectWidth, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectWidth, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetObjectMask, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectMask, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetInput, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetOutput, None, tubeComputeTrainingMaskUSUC2)
tubeComputeTrainingMaskUSUC2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_swigregister
tubeComputeTrainingMaskUSUC2_swigregister(tubeComputeTrainingMaskUSUC2)

def tubeComputeTrainingMaskUSUC2___New_orig__() -> "tubeComputeTrainingMaskUSUC2_Pointer":
    """tubeComputeTrainingMaskUSUC2___New_orig__() -> tubeComputeTrainingMaskUSUC2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2___New_orig__()

def tubeComputeTrainingMaskUSUC2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUC2 *":
    """tubeComputeTrainingMaskUSUC2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUC2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_cast(obj)

class tubeComputeTrainingMaskUSUC3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSUC3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSUC3_Pointer":
        """Clone(tubeComputeTrainingMaskUSUC3 self) -> tubeComputeTrainingMaskUSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSUC3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSUC3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUC3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUC3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS3') -> "void":
        """SetInput(tubeComputeTrainingMaskUSUC3 self, itkImageUS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUC3 *":
        """GetOutput(tubeComputeTrainingMaskUSUC3 self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUC3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC3

        Create a new object of the class tubeComputeTrainingMaskUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSUC3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_Clone, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetGap, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetGap, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetNotObjectWidth, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectWidth, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetObjectMask, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectMask, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetInput, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetOutput, None, tubeComputeTrainingMaskUSUC3)
tubeComputeTrainingMaskUSUC3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_swigregister
tubeComputeTrainingMaskUSUC3_swigregister(tubeComputeTrainingMaskUSUC3)

def tubeComputeTrainingMaskUSUC3___New_orig__() -> "tubeComputeTrainingMaskUSUC3_Pointer":
    """tubeComputeTrainingMaskUSUC3___New_orig__() -> tubeComputeTrainingMaskUSUC3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3___New_orig__()

def tubeComputeTrainingMaskUSUC3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUC3 *":
    """tubeComputeTrainingMaskUSUC3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUC3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_cast(obj)

class tubeComputeTrainingMaskUSUS2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSUS2_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSUS2_Pointer":
        """Clone(tubeComputeTrainingMaskUSUS2 self) -> tubeComputeTrainingMaskUSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSUS2 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSUS2 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS2 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS2 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS2') -> "void":
        """SetInput(tubeComputeTrainingMaskUSUS2 self, itkImageUS2 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS2 *":
        """GetOutput(tubeComputeTrainingMaskUSUS2 self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS2

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUS2 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS2

        Create a new object of the class tubeComputeTrainingMaskUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSUS2.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_Clone, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetGap, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetGap, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetNotObjectWidth, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectWidth, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetObjectMask, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectMask, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetInput, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetOutput, None, tubeComputeTrainingMaskUSUS2)
tubeComputeTrainingMaskUSUS2_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_swigregister
tubeComputeTrainingMaskUSUS2_swigregister(tubeComputeTrainingMaskUSUS2)

def tubeComputeTrainingMaskUSUS2___New_orig__() -> "tubeComputeTrainingMaskUSUS2_Pointer":
    """tubeComputeTrainingMaskUSUS2___New_orig__() -> tubeComputeTrainingMaskUSUS2_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2___New_orig__()

def tubeComputeTrainingMaskUSUS2_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUS2 *":
    """tubeComputeTrainingMaskUSUS2_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUS2"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_cast(obj)

class tubeComputeTrainingMaskUSUS3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeComputeTrainingMaskUSUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeComputeTrainingMaskUSUS3_Pointer":
        """__New_orig__() -> tubeComputeTrainingMaskUSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeComputeTrainingMaskUSUS3_Pointer":
        """Clone(tubeComputeTrainingMaskUSUS3 self) -> tubeComputeTrainingMaskUSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_Clone(self)


    def SetGap(self, value: 'double') -> "void":
        """SetGap(tubeComputeTrainingMaskUSUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetGap(self, value)


    def GetGap(self) -> "double":
        """GetGap(tubeComputeTrainingMaskUSUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetGap(self)


    def SetNotObjectWidth(self, value: 'double') -> "void":
        """SetNotObjectWidth(tubeComputeTrainingMaskUSUS3 self, double value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetNotObjectWidth(self, value)


    def GetNotObjectWidth(self) -> "double":
        """GetNotObjectWidth(tubeComputeTrainingMaskUSUS3 self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectWidth(self)


    def GetObjectMask(self) -> "itkImageUS3 const *":
        """GetObjectMask(tubeComputeTrainingMaskUSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetObjectMask(self)


    def GetNotObjectMask(self) -> "itkImageUS3 const *":
        """GetNotObjectMask(tubeComputeTrainingMaskUSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectMask(self)


    def SetInput(self, value: 'itkImageUS3') -> "void":
        """SetInput(tubeComputeTrainingMaskUSUS3 self, itkImageUS3 value)"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetInput(self, value)


    def GetOutput(self) -> "itkImageUS3 *":
        """GetOutput(tubeComputeTrainingMaskUSUS3 self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetOutput(self)

    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS3

    def cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUS3 *":
        """cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS3

        Create a new object of the class tubeComputeTrainingMaskUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeComputeTrainingMaskUSUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeComputeTrainingMaskUSUS3.Clone = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_Clone, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.SetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetGap, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.GetGap = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetGap, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.SetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetNotObjectWidth, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.GetNotObjectWidth = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectWidth, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.GetObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetObjectMask, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.GetNotObjectMask = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectMask, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.SetInput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetInput, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3.GetOutput = new_instancemethod(_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetOutput, None, tubeComputeTrainingMaskUSUS3)
tubeComputeTrainingMaskUSUS3_swigregister = _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_swigregister
tubeComputeTrainingMaskUSUS3_swigregister(tubeComputeTrainingMaskUSUS3)

def tubeComputeTrainingMaskUSUS3___New_orig__() -> "tubeComputeTrainingMaskUSUS3_Pointer":
    """tubeComputeTrainingMaskUSUS3___New_orig__() -> tubeComputeTrainingMaskUSUS3_Pointer"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3___New_orig__()

def tubeComputeTrainingMaskUSUS3_cast(obj: 'itkLightObject') -> "tubeComputeTrainingMaskUSUS3 *":
    """tubeComputeTrainingMaskUSUS3_cast(itkLightObject obj) -> tubeComputeTrainingMaskUSUS3"""
    return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def compute_training_mask(*args, **kwargs):
    """Procedural interface for ComputeTrainingMask"""
    import itk
    instance = itk.ComputeTrainingMask.New(*args, **kwargs)
    return instance.__internal_call__()

def compute_training_mask_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ComputeTrainingMask, itkTemplate.itkTemplate):
        filter_object = itk.ComputeTrainingMask.values()[0]
    else:
        filter_object = itk.ComputeTrainingMask

    compute_training_mask.__doc__ = filter_object.__doc__
    compute_training_mask.__doc__ += "\n Args are Input(s) to the filter.\n"
    compute_training_mask.__doc__ += "Available Keyword Arguments:\n"
    compute_training_mask.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



