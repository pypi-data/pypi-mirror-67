# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeSegmentTubeUsingMinimalPathPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeSegmentTubeUsingMinimalPathPython', [dirname(__file__)])
        except ImportError:
            import _tubeSegmentTubeUsingMinimalPathPython
            return _tubeSegmentTubeUsingMinimalPathPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeSegmentTubeUsingMinimalPathPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeSegmentTubeUsingMinimalPathPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeSegmentTubeUsingMinimalPathPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkPointPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkVectorPython
import itkGroupSpatialObjectPython
import itkSpatialObjectBasePython
import itkCovariantVectorPython
import itkAffineTransformPython
import itkTransformBasePython
import itkArrayPython
import itkDiffusionTensor3DPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkOptimizerParametersPython
import itkMatrixOffsetTransformBasePython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import itkContinuousIndexPython
import itkIndexPython
import itkSpatialObjectPropertyPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkImagePython
import itkRGBPixelPython

def tubeSegmentTubeUsingMinimalPath3D_New():
  return tubeSegmentTubeUsingMinimalPath3D.New()


def tubeSegmentTubeUsingMinimalPath3F_New():
  return tubeSegmentTubeUsingMinimalPath3F.New()


def tubeSegmentTubeUsingMinimalPath3US_New():
  return tubeSegmentTubeUsingMinimalPath3US.New()


def tubeSegmentTubeUsingMinimalPath3UC_New():
  return tubeSegmentTubeUsingMinimalPath3UC.New()


def tubeSegmentTubeUsingMinimalPath3SS_New():
  return tubeSegmentTubeUsingMinimalPath3SS.New()


def tubeSegmentTubeUsingMinimalPath2D_New():
  return tubeSegmentTubeUsingMinimalPath2D.New()


def tubeSegmentTubeUsingMinimalPath2F_New():
  return tubeSegmentTubeUsingMinimalPath2F.New()


def tubeSegmentTubeUsingMinimalPath2US_New():
  return tubeSegmentTubeUsingMinimalPath2US.New()


def tubeSegmentTubeUsingMinimalPath2UC_New():
  return tubeSegmentTubeUsingMinimalPath2UC.New()


def tubeSegmentTubeUsingMinimalPath2SS_New():
  return tubeSegmentTubeUsingMinimalPath2SS.New()

class tubeSegmentTubeUsingMinimalPath2D(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath2D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath2D_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath2D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath2D_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath2D self) -> tubeSegmentTubeUsingMinimalPath2D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath2D self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageD2_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath2D self, itkImageD2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageD2_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath2D self) -> itkImageD2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageD2_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath2D self, itkImageD2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageD2_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath2D self) -> itkImageD2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD2') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath2D self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD2') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath2D self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath2D self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath2D self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath2D self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath2D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath2D self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath2D self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD2') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath2D self, vectoritkPointD2 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2D

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2D *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2D"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath2D.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_Clone, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetOutput, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath2D)
tubeSegmentTubeUsingMinimalPath2D_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_swigregister
tubeSegmentTubeUsingMinimalPath2D_swigregister(tubeSegmentTubeUsingMinimalPath2D)

def tubeSegmentTubeUsingMinimalPath2D___New_orig__() -> "tubeSegmentTubeUsingMinimalPath2D_Pointer":
    """tubeSegmentTubeUsingMinimalPath2D___New_orig__() -> tubeSegmentTubeUsingMinimalPath2D_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D___New_orig__()

def tubeSegmentTubeUsingMinimalPath2D_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2D *":
    """tubeSegmentTubeUsingMinimalPath2D_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2D"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_cast(obj)

class tubeSegmentTubeUsingMinimalPath2F(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath2F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath2F_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath2F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath2F_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath2F self) -> tubeSegmentTubeUsingMinimalPath2F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath2F self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageF2_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath2F self, itkImageF2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageF2_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath2F self) -> itkImageF2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageF2_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath2F self, itkImageF2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageF2_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath2F self) -> itkImageF2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD2') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath2F self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD2') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath2F self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath2F self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath2F self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath2F self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath2F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath2F self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath2F self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD2') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath2F self, vectoritkPointD2 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2F

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2F *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2F"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath2F.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_Clone, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetOutput, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath2F)
tubeSegmentTubeUsingMinimalPath2F_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_swigregister
tubeSegmentTubeUsingMinimalPath2F_swigregister(tubeSegmentTubeUsingMinimalPath2F)

def tubeSegmentTubeUsingMinimalPath2F___New_orig__() -> "tubeSegmentTubeUsingMinimalPath2F_Pointer":
    """tubeSegmentTubeUsingMinimalPath2F___New_orig__() -> tubeSegmentTubeUsingMinimalPath2F_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F___New_orig__()

def tubeSegmentTubeUsingMinimalPath2F_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2F *":
    """tubeSegmentTubeUsingMinimalPath2F_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2F"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_cast(obj)

class tubeSegmentTubeUsingMinimalPath2SS(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath2SS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath2SS_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath2SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath2SS_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath2SS self) -> tubeSegmentTubeUsingMinimalPath2SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath2SS self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageSS2_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath2SS self, itkImageSS2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageSS2_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath2SS self) -> itkImageSS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageSS2_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath2SS self, itkImageSS2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageSS2_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath2SS self) -> itkImageSS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD2') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath2SS self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD2') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath2SS self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath2SS self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath2SS self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath2SS self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath2SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath2SS self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath2SS self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD2') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath2SS self, vectoritkPointD2 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2SS

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2SS *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2SS"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath2SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath2SS.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_Clone, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetOutput, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath2SS)
tubeSegmentTubeUsingMinimalPath2SS_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_swigregister
tubeSegmentTubeUsingMinimalPath2SS_swigregister(tubeSegmentTubeUsingMinimalPath2SS)

def tubeSegmentTubeUsingMinimalPath2SS___New_orig__() -> "tubeSegmentTubeUsingMinimalPath2SS_Pointer":
    """tubeSegmentTubeUsingMinimalPath2SS___New_orig__() -> tubeSegmentTubeUsingMinimalPath2SS_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS___New_orig__()

def tubeSegmentTubeUsingMinimalPath2SS_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2SS *":
    """tubeSegmentTubeUsingMinimalPath2SS_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2SS"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_cast(obj)

class tubeSegmentTubeUsingMinimalPath2UC(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath2UC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath2UC_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath2UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath2UC_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath2UC self) -> tubeSegmentTubeUsingMinimalPath2UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath2UC self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageUC2_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath2UC self, itkImageUC2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageUC2_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath2UC self) -> itkImageUC2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageUC2_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath2UC self, itkImageUC2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageUC2_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath2UC self) -> itkImageUC2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD2') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath2UC self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD2') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath2UC self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath2UC self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath2UC self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath2UC self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath2UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath2UC self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath2UC self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD2') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath2UC self, vectoritkPointD2 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2UC

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2UC *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2UC"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath2UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath2UC.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_Clone, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetOutput, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath2UC)
tubeSegmentTubeUsingMinimalPath2UC_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_swigregister
tubeSegmentTubeUsingMinimalPath2UC_swigregister(tubeSegmentTubeUsingMinimalPath2UC)

def tubeSegmentTubeUsingMinimalPath2UC___New_orig__() -> "tubeSegmentTubeUsingMinimalPath2UC_Pointer":
    """tubeSegmentTubeUsingMinimalPath2UC___New_orig__() -> tubeSegmentTubeUsingMinimalPath2UC_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC___New_orig__()

def tubeSegmentTubeUsingMinimalPath2UC_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2UC *":
    """tubeSegmentTubeUsingMinimalPath2UC_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2UC"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_cast(obj)

class tubeSegmentTubeUsingMinimalPath2US(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath2US class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath2US_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath2US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath2US_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath2US self) -> tubeSegmentTubeUsingMinimalPath2US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath2US self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageUS2_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath2US self, itkImageUS2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageUS2_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath2US self) -> itkImageUS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageUS2_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath2US self, itkImageUS2_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageUS2_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath2US self) -> itkImageUS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD2') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath2US self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD2') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath2US self, itkPointD2 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath2US self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath2US self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath2US self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath2US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath2US self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath2US self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD2') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath2US self, vectoritkPointD2 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2US

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2US *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2US"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath2US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath2US.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_Clone, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetOutput, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath2US)
tubeSegmentTubeUsingMinimalPath2US_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_swigregister
tubeSegmentTubeUsingMinimalPath2US_swigregister(tubeSegmentTubeUsingMinimalPath2US)

def tubeSegmentTubeUsingMinimalPath2US___New_orig__() -> "tubeSegmentTubeUsingMinimalPath2US_Pointer":
    """tubeSegmentTubeUsingMinimalPath2US___New_orig__() -> tubeSegmentTubeUsingMinimalPath2US_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US___New_orig__()

def tubeSegmentTubeUsingMinimalPath2US_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath2US *":
    """tubeSegmentTubeUsingMinimalPath2US_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath2US"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_cast(obj)

class tubeSegmentTubeUsingMinimalPath3D(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath3D class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath3D_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath3D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath3D_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath3D self) -> tubeSegmentTubeUsingMinimalPath3D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath3D self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageD3_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath3D self, itkImageD3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageD3_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath3D self) -> itkImageD3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageD3_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath3D self, itkImageD3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageD3_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath3D self) -> itkImageD3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD3') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath3D self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD3') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath3D self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath3D self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath3D self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath3D self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath3D self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath3D self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath3D self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD3') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath3D self, vectoritkPointD3 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3D

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3D *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3D"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3D.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath3D.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_Clone, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetOutput, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath3D)
tubeSegmentTubeUsingMinimalPath3D_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_swigregister
tubeSegmentTubeUsingMinimalPath3D_swigregister(tubeSegmentTubeUsingMinimalPath3D)

def tubeSegmentTubeUsingMinimalPath3D___New_orig__() -> "tubeSegmentTubeUsingMinimalPath3D_Pointer":
    """tubeSegmentTubeUsingMinimalPath3D___New_orig__() -> tubeSegmentTubeUsingMinimalPath3D_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D___New_orig__()

def tubeSegmentTubeUsingMinimalPath3D_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3D *":
    """tubeSegmentTubeUsingMinimalPath3D_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3D"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_cast(obj)

class tubeSegmentTubeUsingMinimalPath3F(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath3F class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath3F_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath3F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath3F_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath3F self) -> tubeSegmentTubeUsingMinimalPath3F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath3F self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageF3_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath3F self, itkImageF3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageF3_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath3F self) -> itkImageF3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageF3_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath3F self, itkImageF3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageF3_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath3F self) -> itkImageF3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD3') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath3F self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD3') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath3F self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath3F self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath3F self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath3F self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath3F self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath3F self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath3F self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD3') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath3F self, vectoritkPointD3 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3F

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3F *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3F"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3F.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath3F.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_Clone, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetOutput, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath3F)
tubeSegmentTubeUsingMinimalPath3F_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_swigregister
tubeSegmentTubeUsingMinimalPath3F_swigregister(tubeSegmentTubeUsingMinimalPath3F)

def tubeSegmentTubeUsingMinimalPath3F___New_orig__() -> "tubeSegmentTubeUsingMinimalPath3F_Pointer":
    """tubeSegmentTubeUsingMinimalPath3F___New_orig__() -> tubeSegmentTubeUsingMinimalPath3F_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F___New_orig__()

def tubeSegmentTubeUsingMinimalPath3F_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3F *":
    """tubeSegmentTubeUsingMinimalPath3F_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3F"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_cast(obj)

class tubeSegmentTubeUsingMinimalPath3SS(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath3SS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath3SS_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath3SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath3SS_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath3SS self) -> tubeSegmentTubeUsingMinimalPath3SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath3SS self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageSS3_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath3SS self, itkImageSS3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageSS3_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath3SS self) -> itkImageSS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageSS3_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath3SS self, itkImageSS3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageSS3_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath3SS self) -> itkImageSS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD3') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath3SS self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD3') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath3SS self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath3SS self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath3SS self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath3SS self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath3SS self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath3SS self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath3SS self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD3') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath3SS self, vectoritkPointD3 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3SS

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3SS *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3SS"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3SS.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3SS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath3SS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath3SS.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_Clone, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetOutput, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath3SS)
tubeSegmentTubeUsingMinimalPath3SS_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_swigregister
tubeSegmentTubeUsingMinimalPath3SS_swigregister(tubeSegmentTubeUsingMinimalPath3SS)

def tubeSegmentTubeUsingMinimalPath3SS___New_orig__() -> "tubeSegmentTubeUsingMinimalPath3SS_Pointer":
    """tubeSegmentTubeUsingMinimalPath3SS___New_orig__() -> tubeSegmentTubeUsingMinimalPath3SS_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS___New_orig__()

def tubeSegmentTubeUsingMinimalPath3SS_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3SS *":
    """tubeSegmentTubeUsingMinimalPath3SS_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3SS"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_cast(obj)

class tubeSegmentTubeUsingMinimalPath3UC(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath3UC class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath3UC_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath3UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath3UC_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath3UC self) -> tubeSegmentTubeUsingMinimalPath3UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath3UC self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageUC3_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath3UC self, itkImageUC3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageUC3_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath3UC self) -> itkImageUC3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageUC3_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath3UC self, itkImageUC3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageUC3_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath3UC self) -> itkImageUC3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD3') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath3UC self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD3') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath3UC self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath3UC self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath3UC self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath3UC self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath3UC self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath3UC self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath3UC self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD3') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath3UC self, vectoritkPointD3 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3UC

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3UC *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3UC"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3UC.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3UC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath3UC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath3UC.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_Clone, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetOutput, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath3UC)
tubeSegmentTubeUsingMinimalPath3UC_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_swigregister
tubeSegmentTubeUsingMinimalPath3UC_swigregister(tubeSegmentTubeUsingMinimalPath3UC)

def tubeSegmentTubeUsingMinimalPath3UC___New_orig__() -> "tubeSegmentTubeUsingMinimalPath3UC_Pointer":
    """tubeSegmentTubeUsingMinimalPath3UC___New_orig__() -> tubeSegmentTubeUsingMinimalPath3UC_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC___New_orig__()

def tubeSegmentTubeUsingMinimalPath3UC_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3UC *":
    """tubeSegmentTubeUsingMinimalPath3UC_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3UC"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_cast(obj)

class tubeSegmentTubeUsingMinimalPath3US(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeSegmentTubeUsingMinimalPath3US class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeSegmentTubeUsingMinimalPath3US_Pointer":
        """__New_orig__() -> tubeSegmentTubeUsingMinimalPath3US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeSegmentTubeUsingMinimalPath3US_Pointer":
        """Clone(tubeSegmentTubeUsingMinimalPath3US self) -> tubeSegmentTubeUsingMinimalPath3US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_Clone(self)


    def SetTargetTubeGroup(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetTargetTubeGroup(tubeSegmentTubeUsingMinimalPath3US self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetTargetTubeGroup(self, value)


    def SetSpeedImage(self, value: 'itkImageUS3_Pointer') -> "void":
        """SetSpeedImage(tubeSegmentTubeUsingMinimalPath3US self, itkImageUS3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetSpeedImage(self, value)


    def GetSpeedImage(self) -> "itkImageUS3_Pointer":
        """GetSpeedImage(tubeSegmentTubeUsingMinimalPath3US self) -> itkImageUS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetSpeedImage(self)


    def SetRadiusImage(self, value: 'itkImageUS3_Pointer') -> "void":
        """SetRadiusImage(tubeSegmentTubeUsingMinimalPath3US self, itkImageUS3_Pointer value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetRadiusImage(self, value)


    def GetRadiusImage(self) -> "itkImageUS3_Pointer":
        """GetRadiusImage(tubeSegmentTubeUsingMinimalPath3US self) -> itkImageUS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetRadiusImage(self)


    def SetStartPoint(self, value: 'itkPointD3') -> "void":
        """SetStartPoint(tubeSegmentTubeUsingMinimalPath3US self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartPoint(self, value)


    def SetEndPoint(self, value: 'itkPointD3') -> "void":
        """SetEndPoint(tubeSegmentTubeUsingMinimalPath3US self, itkPointD3 value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetEndPoint(self, value)


    def SetConnectToTargetTubeSurface(self, value: 'bool') -> "void":
        """SetConnectToTargetTubeSurface(tubeSegmentTubeUsingMinimalPath3US self, bool value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetConnectToTargetTubeSurface(self, value)


    def SetOptimizationMethod(self, value: 'std::string') -> "void":
        """SetOptimizationMethod(tubeSegmentTubeUsingMinimalPath3US self, std::string value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizationMethod(self, value)


    def SetOptimizerTerminationValue(self, value: 'double') -> "void":
        """SetOptimizerTerminationValue(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerTerminationValue(self, value)


    def SetOptimizerNumberOfIterations(self, value: 'int') -> "void":
        """SetOptimizerNumberOfIterations(tubeSegmentTubeUsingMinimalPath3US self, int value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerNumberOfIterations(self, value)


    def SetOptimizerStepLengthFactor(self, value: 'double') -> "void":
        """SetOptimizerStepLengthFactor(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthFactor(self, value)


    def SetOptimizerStepLengthRelax(self, value: 'double') -> "void":
        """SetOptimizerStepLengthRelax(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthRelax(self, value)


    def SetStartRadius(self, value: 'double') -> "void":
        """SetStartRadius(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartRadius(self, value)


    def SetMaxRadius(self, value: 'double') -> "void":
        """SetMaxRadius(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetMaxRadius(self, value)


    def SetStepSizeForRadiusEstimation(self, value: 'double') -> "void":
        """SetStepSizeForRadiusEstimation(tubeSegmentTubeUsingMinimalPath3US self, double value)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStepSizeForRadiusEstimation(self, value)


    def GetCostAssociatedWithExtractedTube(self) -> "double":
        """GetCostAssociatedWithExtractedTube(tubeSegmentTubeUsingMinimalPath3US self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetCostAssociatedWithExtractedTube(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeSegmentTubeUsingMinimalPath3US self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetOutput(self)


    def SetIntermediatePoints(self, arg0: 'vectoritkPointD3') -> "void":
        """SetIntermediatePoints(tubeSegmentTubeUsingMinimalPath3US self, vectoritkPointD3 arg0)"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetIntermediatePoints(self, arg0)

    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3US

    def cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3US *":
        """cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3US"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3US.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3US.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeSegmentTubeUsingMinimalPath3US.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeSegmentTubeUsingMinimalPath3US.Clone = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_Clone, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetTargetTubeGroup = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetTargetTubeGroup, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.GetSpeedImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetSpeedImage, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.GetRadiusImage = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetRadiusImage, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetStartPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartPoint, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetEndPoint = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetEndPoint, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetConnectToTargetTubeSurface = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetConnectToTargetTubeSurface, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetOptimizationMethod = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizationMethod, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetOptimizerTerminationValue = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerTerminationValue, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetOptimizerNumberOfIterations = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerNumberOfIterations, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetOptimizerStepLengthFactor = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthFactor, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetOptimizerStepLengthRelax = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthRelax, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetStartRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartRadius, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetMaxRadius = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetMaxRadius, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetStepSizeForRadiusEstimation = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStepSizeForRadiusEstimation, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.GetCostAssociatedWithExtractedTube = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetCostAssociatedWithExtractedTube, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.GetOutput = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetOutput, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US.SetIntermediatePoints = new_instancemethod(_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetIntermediatePoints, None, tubeSegmentTubeUsingMinimalPath3US)
tubeSegmentTubeUsingMinimalPath3US_swigregister = _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_swigregister
tubeSegmentTubeUsingMinimalPath3US_swigregister(tubeSegmentTubeUsingMinimalPath3US)

def tubeSegmentTubeUsingMinimalPath3US___New_orig__() -> "tubeSegmentTubeUsingMinimalPath3US_Pointer":
    """tubeSegmentTubeUsingMinimalPath3US___New_orig__() -> tubeSegmentTubeUsingMinimalPath3US_Pointer"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US___New_orig__()

def tubeSegmentTubeUsingMinimalPath3US_cast(obj: 'itkLightObject') -> "tubeSegmentTubeUsingMinimalPath3US *":
    """tubeSegmentTubeUsingMinimalPath3US_cast(itkLightObject obj) -> tubeSegmentTubeUsingMinimalPath3US"""
    return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def segment_tube_using_minimal_path(*args, **kwargs):
    """Procedural interface for SegmentTubeUsingMinimalPath"""
    import itk
    instance = itk.SegmentTubeUsingMinimalPath.New(*args, **kwargs)
    return instance.__internal_call__()

def segment_tube_using_minimal_path_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SegmentTubeUsingMinimalPath, itkTemplate.itkTemplate):
        filter_object = itk.SegmentTubeUsingMinimalPath.values()[0]
    else:
        filter_object = itk.SegmentTubeUsingMinimalPath

    segment_tube_using_minimal_path.__doc__ = filter_object.__doc__
    segment_tube_using_minimal_path.__doc__ += "\n Args are Input(s) to the filter.\n"
    segment_tube_using_minimal_path.__doc__ += "Available Keyword Arguments:\n"
    segment_tube_using_minimal_path.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



