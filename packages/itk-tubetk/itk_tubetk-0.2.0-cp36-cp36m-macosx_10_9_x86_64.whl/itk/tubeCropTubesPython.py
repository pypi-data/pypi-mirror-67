# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _tubeCropTubesPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tubeCropTubesPython', [dirname(__file__)])
        except ImportError:
            import _tubeCropTubesPython
            return _tubeCropTubesPython
        if fp is not None:
            try:
                _mod = imp.load_module('_tubeCropTubesPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tubeCropTubesPython = swig_import_helper()
    del swig_import_helper
else:
    import _tubeCropTubesPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkGroupSpatialObjectPython
import itkSpatialObjectBasePython
import itkSpatialObjectPropertyPython
import ITKCommonBasePython
import pyBasePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkVectorPython
import itkBoundingBoxPython
import itkPointPython
import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkContinuousIndexPython
import itkIndexPython
import itkMapContainerPython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkOptimizerParametersPython
import itkArrayPython
import itkSymmetricSecondRankTensorPython
import itkArray2DPython
import itkVariableLengthVectorPython
import itkDiffusionTensor3DPython
import itkTransformBasePython
import itkImageRegionPython
import itkImagePython
import itkRGBPixelPython

def tubeCropTubes3_New():
  return tubeCropTubes3.New()


def tubeCropTubes2_New():
  return tubeCropTubes2.New()

class tubeCropTubes2(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeCropTubes2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeCropTubes2_Pointer":
        """__New_orig__() -> tubeCropTubes2_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeCropTubes2_Pointer":
        """Clone(tubeCropTubes2 self) -> tubeCropTubes2_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes2_Clone(self)


    def SetInput(self, value: 'itkGroupSpatialObject2_Pointer') -> "void":
        """SetInput(tubeCropTubes2 self, itkGroupSpatialObject2_Pointer value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetInput(self, value)


    def GetInput(self) -> "itkGroupSpatialObject2 const *":
        """GetInput(tubeCropTubes2 self) -> itkGroupSpatialObject2"""
        return _tubeCropTubesPython.tubeCropTubes2_GetInput(self)


    def SetBoxPositionInWorldSpace(self, value: 'itkPointD2') -> "void":
        """SetBoxPositionInWorldSpace(tubeCropTubes2 self, itkPointD2 value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetBoxPositionInWorldSpace(self, value)


    def GetBoxPositionInWorldSpace(self) -> "itkPointD2":
        """GetBoxPositionInWorldSpace(tubeCropTubes2 self) -> itkPointD2"""
        return _tubeCropTubesPython.tubeCropTubes2_GetBoxPositionInWorldSpace(self)


    def SetBoxSizeInWorldSpace(self, value: 'itkVectorD2') -> "void":
        """SetBoxSizeInWorldSpace(tubeCropTubes2 self, itkVectorD2 value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetBoxSizeInWorldSpace(self, value)


    def GetBoxSizeInWorldSpace(self) -> "itkVectorD2":
        """GetBoxSizeInWorldSpace(tubeCropTubes2 self) -> itkVectorD2"""
        return _tubeCropTubesPython.tubeCropTubes2_GetBoxSizeInWorldSpace(self)


    def SetMaskImage(self, value: 'itkImageD2') -> "void":
        """SetMaskImage(tubeCropTubes2 self, itkImageD2 value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetMaskImage(self, value)


    def GetMaskImage(self) -> "itkImageD2 *":
        """GetMaskImage(tubeCropTubes2 self) -> itkImageD2"""
        return _tubeCropTubesPython.tubeCropTubes2_GetMaskImage(self)


    def SetUseMaskImage(self, value: 'bool') -> "void":
        """SetUseMaskImage(tubeCropTubes2 self, bool value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetUseMaskImage(self, value)


    def GetUseMaskImage(self) -> "bool":
        """GetUseMaskImage(tubeCropTubes2 self) -> bool"""
        return _tubeCropTubesPython.tubeCropTubes2_GetUseMaskImage(self)


    def SetCropTubes(self, value: 'bool') -> "void":
        """SetCropTubes(tubeCropTubes2 self, bool value)"""
        return _tubeCropTubesPython.tubeCropTubes2_SetCropTubes(self, value)


    def GetCropTubes(self) -> "bool":
        """GetCropTubes(tubeCropTubes2 self) -> bool"""
        return _tubeCropTubesPython.tubeCropTubes2_GetCropTubes(self)


    def GetOutput(self) -> "itkGroupSpatialObject2_Pointer":
        """GetOutput(tubeCropTubes2 self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes2_GetOutput(self)

    __swig_destroy__ = _tubeCropTubesPython.delete_tubeCropTubes2

    def cast(obj: 'itkLightObject') -> "tubeCropTubes2 *":
        """cast(itkLightObject obj) -> tubeCropTubes2"""
        return _tubeCropTubesPython.tubeCropTubes2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeCropTubes2

        Create a new object of the class tubeCropTubes2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeCropTubes2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeCropTubes2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeCropTubes2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeCropTubes2.Clone = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_Clone, None, tubeCropTubes2)
tubeCropTubes2.SetInput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetInput, None, tubeCropTubes2)
tubeCropTubes2.GetInput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetInput, None, tubeCropTubes2)
tubeCropTubes2.SetBoxPositionInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetBoxPositionInWorldSpace, None, tubeCropTubes2)
tubeCropTubes2.GetBoxPositionInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetBoxPositionInWorldSpace, None, tubeCropTubes2)
tubeCropTubes2.SetBoxSizeInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetBoxSizeInWorldSpace, None, tubeCropTubes2)
tubeCropTubes2.GetBoxSizeInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetBoxSizeInWorldSpace, None, tubeCropTubes2)
tubeCropTubes2.SetMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetMaskImage, None, tubeCropTubes2)
tubeCropTubes2.GetMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetMaskImage, None, tubeCropTubes2)
tubeCropTubes2.SetUseMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetUseMaskImage, None, tubeCropTubes2)
tubeCropTubes2.GetUseMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetUseMaskImage, None, tubeCropTubes2)
tubeCropTubes2.SetCropTubes = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_SetCropTubes, None, tubeCropTubes2)
tubeCropTubes2.GetCropTubes = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetCropTubes, None, tubeCropTubes2)
tubeCropTubes2.GetOutput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes2_GetOutput, None, tubeCropTubes2)
tubeCropTubes2_swigregister = _tubeCropTubesPython.tubeCropTubes2_swigregister
tubeCropTubes2_swigregister(tubeCropTubes2)

def tubeCropTubes2___New_orig__() -> "tubeCropTubes2_Pointer":
    """tubeCropTubes2___New_orig__() -> tubeCropTubes2_Pointer"""
    return _tubeCropTubesPython.tubeCropTubes2___New_orig__()

def tubeCropTubes2_cast(obj: 'itkLightObject') -> "tubeCropTubes2 *":
    """tubeCropTubes2_cast(itkLightObject obj) -> tubeCropTubes2"""
    return _tubeCropTubesPython.tubeCropTubes2_cast(obj)

class tubeCropTubes3(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ tubeCropTubes3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "tubeCropTubes3_Pointer":
        """__New_orig__() -> tubeCropTubes3_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "tubeCropTubes3_Pointer":
        """Clone(tubeCropTubes3 self) -> tubeCropTubes3_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes3_Clone(self)


    def SetInput(self, value: 'itkGroupSpatialObject3_Pointer') -> "void":
        """SetInput(tubeCropTubes3 self, itkGroupSpatialObject3_Pointer value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetInput(self, value)


    def GetInput(self) -> "itkGroupSpatialObject3 const *":
        """GetInput(tubeCropTubes3 self) -> itkGroupSpatialObject3"""
        return _tubeCropTubesPython.tubeCropTubes3_GetInput(self)


    def SetBoxPositionInWorldSpace(self, value: 'itkPointD3') -> "void":
        """SetBoxPositionInWorldSpace(tubeCropTubes3 self, itkPointD3 value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetBoxPositionInWorldSpace(self, value)


    def GetBoxPositionInWorldSpace(self) -> "itkPointD3":
        """GetBoxPositionInWorldSpace(tubeCropTubes3 self) -> itkPointD3"""
        return _tubeCropTubesPython.tubeCropTubes3_GetBoxPositionInWorldSpace(self)


    def SetBoxSizeInWorldSpace(self, value: 'itkVectorD3') -> "void":
        """SetBoxSizeInWorldSpace(tubeCropTubes3 self, itkVectorD3 value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetBoxSizeInWorldSpace(self, value)


    def GetBoxSizeInWorldSpace(self) -> "itkVectorD3":
        """GetBoxSizeInWorldSpace(tubeCropTubes3 self) -> itkVectorD3"""
        return _tubeCropTubesPython.tubeCropTubes3_GetBoxSizeInWorldSpace(self)


    def SetMaskImage(self, value: 'itkImageD3') -> "void":
        """SetMaskImage(tubeCropTubes3 self, itkImageD3 value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetMaskImage(self, value)


    def GetMaskImage(self) -> "itkImageD3 *":
        """GetMaskImage(tubeCropTubes3 self) -> itkImageD3"""
        return _tubeCropTubesPython.tubeCropTubes3_GetMaskImage(self)


    def SetUseMaskImage(self, value: 'bool') -> "void":
        """SetUseMaskImage(tubeCropTubes3 self, bool value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetUseMaskImage(self, value)


    def GetUseMaskImage(self) -> "bool":
        """GetUseMaskImage(tubeCropTubes3 self) -> bool"""
        return _tubeCropTubesPython.tubeCropTubes3_GetUseMaskImage(self)


    def SetCropTubes(self, value: 'bool') -> "void":
        """SetCropTubes(tubeCropTubes3 self, bool value)"""
        return _tubeCropTubesPython.tubeCropTubes3_SetCropTubes(self, value)


    def GetCropTubes(self) -> "bool":
        """GetCropTubes(tubeCropTubes3 self) -> bool"""
        return _tubeCropTubesPython.tubeCropTubes3_GetCropTubes(self)


    def GetOutput(self) -> "itkGroupSpatialObject3_Pointer":
        """GetOutput(tubeCropTubes3 self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeCropTubesPython.tubeCropTubes3_GetOutput(self)

    __swig_destroy__ = _tubeCropTubesPython.delete_tubeCropTubes3

    def cast(obj: 'itkLightObject') -> "tubeCropTubes3 *":
        """cast(itkLightObject obj) -> tubeCropTubes3"""
        return _tubeCropTubesPython.tubeCropTubes3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> tubeCropTubes3

        Create a new object of the class tubeCropTubes3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeCropTubes3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = tubeCropTubes3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = tubeCropTubes3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

tubeCropTubes3.Clone = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_Clone, None, tubeCropTubes3)
tubeCropTubes3.SetInput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetInput, None, tubeCropTubes3)
tubeCropTubes3.GetInput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetInput, None, tubeCropTubes3)
tubeCropTubes3.SetBoxPositionInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetBoxPositionInWorldSpace, None, tubeCropTubes3)
tubeCropTubes3.GetBoxPositionInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetBoxPositionInWorldSpace, None, tubeCropTubes3)
tubeCropTubes3.SetBoxSizeInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetBoxSizeInWorldSpace, None, tubeCropTubes3)
tubeCropTubes3.GetBoxSizeInWorldSpace = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetBoxSizeInWorldSpace, None, tubeCropTubes3)
tubeCropTubes3.SetMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetMaskImage, None, tubeCropTubes3)
tubeCropTubes3.GetMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetMaskImage, None, tubeCropTubes3)
tubeCropTubes3.SetUseMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetUseMaskImage, None, tubeCropTubes3)
tubeCropTubes3.GetUseMaskImage = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetUseMaskImage, None, tubeCropTubes3)
tubeCropTubes3.SetCropTubes = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_SetCropTubes, None, tubeCropTubes3)
tubeCropTubes3.GetCropTubes = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetCropTubes, None, tubeCropTubes3)
tubeCropTubes3.GetOutput = new_instancemethod(_tubeCropTubesPython.tubeCropTubes3_GetOutput, None, tubeCropTubes3)
tubeCropTubes3_swigregister = _tubeCropTubesPython.tubeCropTubes3_swigregister
tubeCropTubes3_swigregister(tubeCropTubes3)

def tubeCropTubes3___New_orig__() -> "tubeCropTubes3_Pointer":
    """tubeCropTubes3___New_orig__() -> tubeCropTubes3_Pointer"""
    return _tubeCropTubesPython.tubeCropTubes3___New_orig__()

def tubeCropTubes3_cast(obj: 'itkLightObject') -> "tubeCropTubes3 *":
    """tubeCropTubes3_cast(itkLightObject obj) -> tubeCropTubes3"""
    return _tubeCropTubesPython.tubeCropTubes3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def crop_tubes(*args, **kwargs):
    """Procedural interface for CropTubes"""
    import itk
    instance = itk.CropTubes.New(*args, **kwargs)
    return instance.__internal_call__()

def crop_tubes_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CropTubes, itkTemplate.itkTemplate):
        filter_object = itk.CropTubes.values()[0]
    else:
        filter_object = itk.CropTubes

    crop_tubes.__doc__ = filter_object.__doc__
    crop_tubes.__doc__ += "\n Args are Input(s) to the filter.\n"
    crop_tubes.__doc__ += "Available Keyword Arguments:\n"
    crop_tubes.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



