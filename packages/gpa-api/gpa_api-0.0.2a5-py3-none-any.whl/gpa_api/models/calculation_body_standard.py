# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gpa_api.models.base_model_ import Model
from gpa_api import util


class CalculationBodyStandard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, combustion_temperature=None, measurement_temperature=None, ideal_gas_reference_state=None, standard_version=None):  # noqa: E501
        """CalculationBodyStandard - a model defined in OpenAPI

        :param combustion_temperature: The combustion_temperature of this CalculationBodyStandard.  # noqa: E501
        :type combustion_temperature: float
        :param measurement_temperature: The measurement_temperature of this CalculationBodyStandard.  # noqa: E501
        :type measurement_temperature: float
        :param ideal_gas_reference_state: The ideal_gas_reference_state of this CalculationBodyStandard.  # noqa: E501
        :type ideal_gas_reference_state: float
        :param standard_version: The standard_version of this CalculationBodyStandard.  # noqa: E501
        :type standard_version: str
        """
        self.openapi_types = {
            'combustion_temperature': float,
            'measurement_temperature': float,
            'ideal_gas_reference_state': float,
            'standard_version': str
        }

        self.attribute_map = {
            'combustion_temperature': 'combustionTemperature',
            'measurement_temperature': 'measurementTemperature',
            'ideal_gas_reference_state': 'idealGasReferenceState',
            'standard_version': 'standardVersion'
        }

        self._combustion_temperature = combustion_temperature
        self._measurement_temperature = measurement_temperature
        self._ideal_gas_reference_state = ideal_gas_reference_state
        self._standard_version = standard_version

    @classmethod
    def from_dict(cls, dikt) -> 'CalculationBodyStandard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculationBody_standard of this CalculationBodyStandard.  # noqa: E501
        :rtype: CalculationBodyStandard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def combustion_temperature(self):
        """Gets the combustion_temperature of this CalculationBodyStandard.


        :return: The combustion_temperature of this CalculationBodyStandard.
        :rtype: float
        """
        return self._combustion_temperature

    @combustion_temperature.setter
    def combustion_temperature(self, combustion_temperature):
        """Sets the combustion_temperature of this CalculationBodyStandard.


        :param combustion_temperature: The combustion_temperature of this CalculationBodyStandard.
        :type combustion_temperature: float
        """

        self._combustion_temperature = combustion_temperature

    @property
    def measurement_temperature(self):
        """Gets the measurement_temperature of this CalculationBodyStandard.


        :return: The measurement_temperature of this CalculationBodyStandard.
        :rtype: float
        """
        return self._measurement_temperature

    @measurement_temperature.setter
    def measurement_temperature(self, measurement_temperature):
        """Sets the measurement_temperature of this CalculationBodyStandard.


        :param measurement_temperature: The measurement_temperature of this CalculationBodyStandard.
        :type measurement_temperature: float
        """

        self._measurement_temperature = measurement_temperature

    @property
    def ideal_gas_reference_state(self):
        """Gets the ideal_gas_reference_state of this CalculationBodyStandard.


        :return: The ideal_gas_reference_state of this CalculationBodyStandard.
        :rtype: float
        """
        return self._ideal_gas_reference_state

    @ideal_gas_reference_state.setter
    def ideal_gas_reference_state(self, ideal_gas_reference_state):
        """Sets the ideal_gas_reference_state of this CalculationBodyStandard.


        :param ideal_gas_reference_state: The ideal_gas_reference_state of this CalculationBodyStandard.
        :type ideal_gas_reference_state: float
        """

        self._ideal_gas_reference_state = ideal_gas_reference_state

    @property
    def standard_version(self):
        """Gets the standard_version of this CalculationBodyStandard.


        :return: The standard_version of this CalculationBodyStandard.
        :rtype: str
        """
        return self._standard_version

    @standard_version.setter
    def standard_version(self, standard_version):
        """Sets the standard_version of this CalculationBodyStandard.


        :param standard_version: The standard_version of this CalculationBodyStandard.
        :type standard_version: str
        """

        self._standard_version = standard_version
