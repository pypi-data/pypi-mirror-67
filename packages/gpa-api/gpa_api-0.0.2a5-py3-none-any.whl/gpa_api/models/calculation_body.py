# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gpa_api.models.base_model_ import Model
from gpa_api.models.calculation_body_fluid import CalculationBodyFluid
from gpa_api.models.calculation_body_ship import CalculationBodyShip
from gpa_api.models.calculation_body_standard import CalculationBodyStandard
from gpa_api.models.calculation_body_transport import CalculationBodyTransport
from gpa_api import util

from gpa_api.models.calculation_body_fluid import CalculationBodyFluid  # noqa: E501
from gpa_api.models.calculation_body_ship import CalculationBodyShip  # noqa: E501
from gpa_api.models.calculation_body_standard import CalculationBodyStandard  # noqa: E501
from gpa_api.models.calculation_body_transport import CalculationBodyTransport  # noqa: E501

class CalculationBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ship=None, fluid=None, transport=None, standard=None):  # noqa: E501
        """CalculationBody - a model defined in OpenAPI

        :param ship: The ship of this CalculationBody.  # noqa: E501
        :type ship: CalculationBodyShip
        :param fluid: The fluid of this CalculationBody.  # noqa: E501
        :type fluid: CalculationBodyFluid
        :param transport: The transport of this CalculationBody.  # noqa: E501
        :type transport: CalculationBodyTransport
        :param standard: The standard of this CalculationBody.  # noqa: E501
        :type standard: CalculationBodyStandard
        """
        self.openapi_types = {
            'ship': CalculationBodyShip,
            'fluid': CalculationBodyFluid,
            'transport': CalculationBodyTransport,
            'standard': CalculationBodyStandard
        }

        self.attribute_map = {
            'ship': 'ship',
            'fluid': 'fluid',
            'transport': 'transport',
            'standard': 'standard'
        }

        self._ship = ship
        self._fluid = fluid
        self._transport = transport
        self._standard = standard

    @classmethod
    def from_dict(cls, dikt) -> 'CalculationBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculationBody of this CalculationBody.  # noqa: E501
        :rtype: CalculationBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ship(self):
        """Gets the ship of this CalculationBody.


        :return: The ship of this CalculationBody.
        :rtype: CalculationBodyShip
        """
        return self._ship

    @ship.setter
    def ship(self, ship):
        """Sets the ship of this CalculationBody.


        :param ship: The ship of this CalculationBody.
        :type ship: CalculationBodyShip
        """
        if ship is None:
            raise ValueError("Invalid value for `ship`, must not be `None`")  # noqa: E501

        self._ship = ship

    @property
    def fluid(self):
        """Gets the fluid of this CalculationBody.


        :return: The fluid of this CalculationBody.
        :rtype: CalculationBodyFluid
        """
        return self._fluid

    @fluid.setter
    def fluid(self, fluid):
        """Sets the fluid of this CalculationBody.


        :param fluid: The fluid of this CalculationBody.
        :type fluid: CalculationBodyFluid
        """
        if fluid is None:
            raise ValueError("Invalid value for `fluid`, must not be `None`")  # noqa: E501

        self._fluid = fluid

    @property
    def transport(self):
        """Gets the transport of this CalculationBody.


        :return: The transport of this CalculationBody.
        :rtype: CalculationBodyTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this CalculationBody.


        :param transport: The transport of this CalculationBody.
        :type transport: CalculationBodyTransport
        """
        if transport is None:
            raise ValueError("Invalid value for `transport`, must not be `None`")  # noqa: E501

        self._transport = transport

    @property
    def standard(self):
        """Gets the standard of this CalculationBody.


        :return: The standard of this CalculationBody.
        :rtype: CalculationBodyStandard
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this CalculationBody.


        :param standard: The standard of this CalculationBody.
        :type standard: CalculationBodyStandard
        """
        if standard is None:
            raise ValueError("Invalid value for `standard`, must not be `None`")  # noqa: E501

        self._standard = standard
