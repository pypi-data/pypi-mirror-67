# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from gpa_api.models.base_model_ import Model
from gpa_api.models.hg_component_type import HgComponentType
from gpa_api import util

from gpa_api.models.hg_component_type import HgComponentType  # noqa: E501

class HgComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, component_type=None):  # noqa: E501
        """HgComponent - a model defined in OpenAPI

        :param value: The value of this HgComponent.  # noqa: E501
        :type value: float
        :param component_type: The component_type of this HgComponent.  # noqa: E501
        :type component_type: HgComponentType
        """
        self.openapi_types = {
            'value': float,
            'component_type': HgComponentType
        }

        self.attribute_map = {
            'value': 'value',
            'component_type': 'component_type'
        }

        self._value = value
        self._component_type = component_type

    @classmethod
    def from_dict(cls, dikt) -> 'HgComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HgComponent of this HgComponent.  # noqa: E501
        :rtype: HgComponent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this HgComponent.


        :return: The value of this HgComponent.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this HgComponent.


        :param value: The value of this HgComponent.
        :type value: float
        """

        self._value = value

    @property
    def component_type(self):
        """Gets the component_type of this HgComponent.


        :return: The component_type of this HgComponent.
        :rtype: HgComponentType
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this HgComponent.


        :param component_type: The component_type of this HgComponent.
        :type component_type: HgComponentType
        """

        self._component_type = component_type
